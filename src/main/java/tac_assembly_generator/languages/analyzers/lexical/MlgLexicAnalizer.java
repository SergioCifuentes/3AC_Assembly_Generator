/* The following code was generated by JFlex 1.6.1 */

//jflex lexicalMlg.flex
package tac_assembly_generator.languages.analyzers.lexical;
import java_cup.runtime.Symbol;
import tac_assembly_generator.languages.analyzers.syntax.SimbolosMlg;
import tac_assembly_generator.TAC.TAC;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lexicalMlg.flex</tt>
 */
public class MlgLexicAnalizer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMON_SYMBOLS = 2;
  public static final int VBCODE = 4;
  public static final int JAVACODE = 6;
  public static final int PYCODE = 8;
  public static final int PROGRAM = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\2\63\1\7\1\75\1\75\1\6\22\0\1\20\1\70\1\52"+
    "\1\76\1\2\1\21\1\62\1\53\1\27\1\30\1\11\1\31\1\61"+
    "\1\32\1\25\1\10\1\5\11\4\1\67\1\72\1\57\1\26\1\60"+
    "\1\0\1\2\1\34\1\23\1\43\1\45\1\35\1\40\1\36\1\44"+
    "\1\13\1\33\1\66\1\41\1\46\1\14\1\42\1\15\1\1\1\37"+
    "\1\3\1\17\1\16\1\22\1\50\1\51\1\64\1\1\1\54\1\0"+
    "\1\56\1\55\1\24\1\0\1\34\1\23\1\43\1\45\1\35\1\40"+
    "\1\36\1\44\1\13\1\33\1\66\1\41\1\46\1\14\1\42\1\15"+
    "\1\1\1\37\1\3\1\17\1\16\1\22\1\50\1\51\1\64\1\1"+
    "\1\73\1\71\1\74\7\0\1\75\72\0\100\1\60\0\2\12\115\0"+
    "\1\47\u1ea8\0\1\75\1\75\u0100\0\1\65\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\3\2\2\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\2\12\1\13\2\14\1\3\1\0"+
    "\4\12\1\15\1\0\1\16\1\5\1\17\1\20\11\12"+
    "\1\0\1\12\2\0\1\21\1\22\1\23\1\24\1\25"+
    "\1\12\1\25\3\12\1\26\2\12\1\5\5\12\1\25"+
    "\1\12\1\25\1\21\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\3\36\1\12\1\25\2\12\1\26\4\12"+
    "\1\25\1\37\1\40\1\25\1\0\1\41\2\0\3\12"+
    "\2\0\1\42\1\12\1\42\4\12\1\43\1\12\1\0"+
    "\1\44\1\45\1\46\1\12\1\46\10\12\1\47\3\12"+
    "\1\0\1\12\1\50\1\12\3\0\2\12\2\0\1\51"+
    "\2\12\1\0\1\52\1\12\1\52\1\12\1\0\2\12"+
    "\1\53\10\12\1\54\2\0\1\27\1\32\1\0\1\12"+
    "\1\0\10\12\2\0\2\41\3\0\1\55\2\12\1\56"+
    "\1\0\2\12\1\57\3\12\1\0\1\60\1\61\1\12"+
    "\1\0\4\12\1\62\2\12\1\0\2\12\2\63\1\64"+
    "\1\55\3\0\1\12\1\0\1\12\1\65\2\0\2\12"+
    "\1\0\2\66\1\12\2\0\3\12\1\0\2\12\1\67"+
    "\1\12\1\0\3\12\1\0\1\12\2\66\1\0\6\12"+
    "\1\0\1\12\3\0\1\70\1\71\1\12\2\0\2\12"+
    "\1\72\1\12\1\73\1\74\1\0\2\75\1\0\3\12"+
    "\1\0\1\12\1\76\2\77\1\12\1\0\1\100\1\71"+
    "\2\0\1\12\1\0\1\12\2\0\2\12\2\0\2\12"+
    "\1\101\2\102\1\12\2\75\2\12\2\103\1\12\1\0"+
    "\1\100\1\12\1\0\1\12\1\0\4\12\1\0\1\12"+
    "\1\0\1\100\2\104\2\0\1\12\2\0\2\12\1\0"+
    "\1\12\2\0\1\12\1\0\2\12\2\105\1\106\1\12"+
    "\2\0\1\12\1\0\2\107\2\110\2\0\2\12\2\0"+
    "\1\12\1\0\1\12\2\111\1\12\1\106\2\112\1\0"+
    "\2\12\1\0\1\113\1\0\1\12\1\114\1\106\1\12"+
    "\1\0\2\115\1\113\1\0\1\116\2\0\2\12\2\117"+
    "\1\120\2\121\2\122\1\0\1\12\1\0\2\12\2\0"+
    "\1\12\1\116\1\0\1\12\1\0\2\123\1\12\2\0"+
    "\1\12\2\124\1\125\1\0\1\12\1\0\2\12\1\0"+
    "\2\126\2\127\2\0\1\130\1\12\1\130\1\0\1\12"+
    "\1\0\1\12\2\131\1\0\1\12\2\132\3\0\1\12"+
    "\1\0\1\12\1\0\1\12\1\133\2\0\2\134\2\135"+
    "\1\0\1\12\1\0\1\12\2\0\2\136\1\0\1\12"+
    "\1\0\1\12\1\0\1\137\1\0\1\12\2\140\3\0"+
    "\1\12\2\141\1\0\2\142\2\0\2\143\1\144\1\145"+
    "\5\0\1\146\1\0\1\147";

  private static int [] zzUnpackAction() {
    int [] result = new int[498];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u017a\0\u017a\0\u017a\0\u017a"+
    "\0\u017a\0\u017a\0\u017a\0\u02f4\0\u0333\0\u0372\0\u03b1\0\u017a"+
    "\0\u0276\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u017a\0\u052b"+
    "\0\u017a\0\u056a\0\u017a\0\u017a\0\u05a9\0\u05e8\0\u0627\0\u0666"+
    "\0\u06a5\0\u06e4\0\u0723\0\u0762\0\u07a1\0\u07e0\0\u081f\0\u085e"+
    "\0\u089d\0\u08dc\0\u091b\0\u017a\0\u017a\0\u017a\0\u095a\0\u0999"+
    "\0\u09d8\0\u0a17\0\u0a56\0\u0a95\0\u0ad4\0\u0b13\0\u0b52\0\u0b91"+
    "\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u085e\0\u0d4a"+
    "\0\u0d89\0\u017a\0\u017a\0\u0dc8\0\u017a\0\u017a\0\u017a\0\u017a"+
    "\0\u0276\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u017a\0\u0f42"+
    "\0\u0f81\0\u0fc0\0\u0fff\0\u103e\0\u017a\0\u017a\0\u107d\0\u10bc"+
    "\0\u10fb\0\u113a\0\u1179\0\u11b8\0\u11f7\0\u1236\0\u1275\0\u12b4"+
    "\0\u017a\0\u12f3\0\u02f4\0\u1332\0\u1371\0\u13b0\0\u13ef\0\u02f4"+
    "\0\u142e\0\u146d\0\u017a\0\u017a\0\u02f4\0\u14ac\0\u017a\0\u14eb"+
    "\0\u152a\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665\0\u16a4\0\u02f4"+
    "\0\u16e3\0\u1722\0\u1761\0\u17a0\0\u17df\0\u02f4\0\u181e\0\u185d"+
    "\0\u189c\0\u18db\0\u191a\0\u1959\0\u1998\0\u19d7\0\u017a\0\u1a16"+
    "\0\u1a55\0\u1a94\0\u017a\0\u1ad3\0\u02f4\0\u1b12\0\u1b51\0\u1b90"+
    "\0\u1bcf\0\u017a\0\u1c0e\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a\0\u1d49"+
    "\0\u1d88\0\u1dc7\0\u02f4\0\u1e06\0\u1e45\0\u017a\0\u017a\0\u1e84"+
    "\0\u1ec3\0\u1f02\0\u1f41\0\u1f80\0\u1fbf\0\u1ffe\0\u203d\0\u207c"+
    "\0\u20bb\0\u20fa\0\u2139\0\u2178\0\u21b7\0\u017a\0\u21f6\0\u2235"+
    "\0\u2274\0\u02f4\0\u22b3\0\u22f2\0\u1275\0\u2331\0\u2370\0\u23af"+
    "\0\u02f4\0\u23ee\0\u242d\0\u246c\0\u24ab\0\u02f4\0\u02f4\0\u24ea"+
    "\0\u2529\0\u2568\0\u25a7\0\u25e6\0\u2625\0\u02f4\0\u2664\0\u26a3"+
    "\0\u26e2\0\u2721\0\u2760\0\u017a\0\u02f4\0\u02f4\0\u017a\0\u279f"+
    "\0\u27de\0\u281d\0\u285c\0\u289b\0\u28da\0\u017a\0\u2919\0\u2958"+
    "\0\u2997\0\u29d6\0\u2a15\0\u2a54\0\u2a93\0\u2ad2\0\u2b11\0\u2b50"+
    "\0\u2b8f\0\u2bce\0\u2c0d\0\u2c4c\0\u2c8b\0\u2cca\0\u02f4\0\u2d09"+
    "\0\u2d48\0\u2d87\0\u2dc6\0\u2e05\0\u2e44\0\u2e83\0\u017a\0\u02f4"+
    "\0\u2ec2\0\u2f01\0\u2f40\0\u2f7f\0\u2fbe\0\u2ffd\0\u303c\0\u307b"+
    "\0\u30ba\0\u30f9\0\u3138\0\u3177\0\u017a\0\u02f4\0\u31b6\0\u31f5"+
    "\0\u3234\0\u3273\0\u32b2\0\u02f4\0\u32f1\0\u02f4\0\u02f4\0\u3330"+
    "\0\u336f\0\u33ae\0\u33ed\0\u342c\0\u346b\0\u34aa\0\u34e9\0\u3528"+
    "\0\u02f4\0\u02f4\0\u017a\0\u3567\0\u35a6\0\u35e5\0\u017a\0\u3624"+
    "\0\u3663\0\u36a2\0\u36e1\0\u3720\0\u375f\0\u379e\0\u37dd\0\u381c"+
    "\0\u385b\0\u389a\0\u38d9\0\u3918\0\u017a\0\u017a\0\u02f4\0\u3957"+
    "\0\u02f4\0\u017a\0\u3996\0\u39d5\0\u02f4\0\u017a\0\u3a14\0\u3a53"+
    "\0\u3a92\0\u3ad1\0\u3b10\0\u3b4f\0\u3b8e\0\u3bcd\0\u3c0c\0\u3c4b"+
    "\0\u3c8a\0\u3cc9\0\u3d08\0\u3d47\0\u02f4\0\u017a\0\u02f4\0\u3d86"+
    "\0\u3dc5\0\u3e04\0\u3e43\0\u3e82\0\u3ec1\0\u3f00\0\u3f3f\0\u3f7e"+
    "\0\u3fbd\0\u3ffc\0\u403b\0\u407a\0\u40b9\0\u40f8\0\u02f4\0\u017a"+
    "\0\u4137\0\u4176\0\u41b5\0\u41f4\0\u4233\0\u4272\0\u42b1\0\u42f0"+
    "\0\u017a\0\u02f4\0\u432f\0\u436e\0\u43ad\0\u43ec\0\u442b\0\u446a"+
    "\0\u44a9\0\u44e8\0\u4527\0\u017a\0\u02f4\0\u4566\0\u45a5\0\u02f4"+
    "\0\u017a\0\u45e4\0\u4623\0\u4662\0\u46a1\0\u02f4\0\u46e0\0\u471f"+
    "\0\u02f4\0\u02f4\0\u475e\0\u479d\0\u02f4\0\u017a\0\u017a\0\u47dc"+
    "\0\u02f4\0\u481b\0\u485a\0\u4899\0\u48d8\0\u017a\0\u02f4\0\u017a"+
    "\0\u017a\0\u02f4\0\u017a\0\u02f4\0\u4917\0\u4956\0\u4995\0\u49d4"+
    "\0\u4a13\0\u4a52\0\u4a91\0\u4ad0\0\u017a\0\u4b0f\0\u4b4e\0\u4b8d"+
    "\0\u017a\0\u02f4\0\u4bcc\0\u4c0b\0\u4c4a\0\u4c89\0\u017a\0\u02f4"+
    "\0\u02f4\0\u4cc8\0\u4d07\0\u4d46\0\u4d85\0\u4dc4\0\u4e03\0\u017a"+
    "\0\u02f4\0\u02f4\0\u017a\0\u4e42\0\u4e81\0\u017a\0\u4ec0\0\u02f4"+
    "\0\u4eff\0\u4f3e\0\u4f7d\0\u4fbc\0\u02f4\0\u017a\0\u4ffb\0\u503a"+
    "\0\u017a\0\u02f4\0\u5079\0\u50b8\0\u50f7\0\u5136\0\u5175\0\u51b4"+
    "\0\u51f3\0\u5232\0\u02f4\0\u5271\0\u52b0\0\u017a\0\u02f4\0\u017a"+
    "\0\u02f4\0\u52ef\0\u532e\0\u536d\0\u53ac\0\u53eb\0\u542a\0\u017a"+
    "\0\u02f4\0\u5469\0\u54a8\0\u54e7\0\u5526\0\u5565\0\u017a\0\u55a4"+
    "\0\u55e3\0\u017a\0\u02f4\0\u5622\0\u5661\0\u56a0\0\u56df\0\u017a"+
    "\0\u02f4\0\u571e\0\u017a\0\u02f4\0\u575d\0\u579c\0\u017a\0\u02f4"+
    "\0\u017a\0\u017a\0\u57db\0\u581a\0\u5859\0\u5898\0\u58d7\0\u5916"+
    "\0\u5955\0\u017a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[498];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\7\1\10\1\11\1\12\2\7\1\13"+
    "\2\7\5\10\1\7\1\14\3\10\6\7\14\10\1\7"+
    "\2\10\12\7\1\10\1\7\1\10\10\7\10\0\1\15"+
    "\1\16\14\0\1\17\1\20\1\21\1\22\1\23\45\0"+
    "\1\24\1\0\1\25\2\26\1\27\1\30\1\31\1\16"+
    "\1\32\1\33\1\34\1\35\1\24\1\36\1\37\1\40"+
    "\3\24\1\41\1\42\1\43\1\44\1\22\1\23\1\24"+
    "\1\45\1\46\1\24\1\47\1\50\1\51\1\52\1\53"+
    "\1\24\1\54\1\55\1\56\1\57\1\24\1\60\1\61"+
    "\3\0\1\62\1\63\1\64\1\65\1\37\1\24\1\0"+
    "\1\24\10\0\1\66\1\24\1\66\1\67\2\26\1\27"+
    "\1\30\1\31\1\16\1\70\1\71\1\24\1\72\1\24"+
    "\1\73\1\37\1\74\1\75\1\76\1\24\1\66\1\77"+
    "\1\43\1\44\1\22\1\23\2\24\1\100\1\24\1\101"+
    "\1\102\2\24\1\103\1\24\1\104\1\24\1\105\1\106"+
    "\1\24\1\107\4\66\1\110\1\63\1\66\1\111\1\37"+
    "\1\24\1\66\1\24\1\112\1\113\1\114\1\115\1\116"+
    "\1\117\1\0\1\66\6\120\1\27\1\30\1\121\10\120"+
    "\1\122\55\120\1\66\1\24\1\66\1\123\2\26\1\27"+
    "\1\30\1\31\1\16\1\124\1\125\1\24\1\126\1\24"+
    "\1\73\1\37\1\127\1\75\1\76\1\24\1\41\1\77"+
    "\1\43\1\44\1\22\1\23\2\24\1\100\1\130\1\24"+
    "\1\131\2\24\1\132\1\24\1\104\1\133\1\134\1\106"+
    "\1\24\1\107\1\66\1\135\1\66\1\136\1\110\1\63"+
    "\1\64\1\111\1\37\1\24\1\66\1\24\1\112\1\113"+
    "\1\114\1\115\1\116\1\117\1\0\1\137\100\0\1\10"+
    "\1\0\3\10\5\0\5\10\2\0\3\10\6\0\14\10"+
    "\1\0\2\10\12\0\1\10\1\0\1\10\14\0\2\11"+
    "\17\0\1\140\76\0\1\140\61\0\1\141\1\142\106\0"+
    "\1\143\56\0\1\24\1\0\3\24\5\0\5\24\2\0"+
    "\3\24\6\0\14\24\1\0\2\24\12\0\1\24\1\0"+
    "\1\24\11\0\1\24\1\0\3\24\5\0\3\24\1\144"+
    "\1\145\2\0\3\24\6\0\2\24\1\146\11\24\1\0"+
    "\2\24\12\0\1\24\1\0\1\24\14\0\2\26\17\0"+
    "\1\147\60\0\1\30\103\0\1\150\23\0\1\151\37\0"+
    "\1\24\1\0\3\24\5\0\1\24\1\152\3\24\2\0"+
    "\3\24\6\0\5\24\1\153\6\24\1\0\2\24\12\0"+
    "\1\24\1\0\1\24\11\0\1\24\1\0\3\24\5\0"+
    "\5\24\2\0\3\24\6\0\2\24\1\154\4\24\1\155"+
    "\4\24\1\0\2\24\12\0\1\24\1\0\1\24\11\0"+
    "\1\24\1\0\3\24\5\0\3\24\1\156\1\24\2\0"+
    "\3\24\6\0\14\24\1\0\2\24\12\0\1\24\1\0"+
    "\1\24\11\0\1\24\1\0\3\24\5\0\5\24\2\0"+
    "\3\24\6\0\4\24\1\157\2\24\1\160\1\24\1\161"+
    "\2\24\1\0\2\24\12\0\1\24\1\0\1\24\31\0"+
    "\1\162\134\0\1\163\1\164\17\0\1\24\1\0\1\165"+
    "\2\24\5\0\1\24\1\166\3\24\2\0\3\24\6\0"+
    "\14\24\1\167\2\24\12\0\1\24\1\0\1\24\11\0"+
    "\1\24\1\0\3\24\5\0\1\24\1\170\3\24\2\0"+
    "\3\24\6\0\6\24\1\171\5\24\1\0\2\24\12\0"+
    "\1\24\1\0\1\24\11\0\1\24\1\0\3\24\5\0"+
    "\5\24\2\0\3\24\6\0\2\24\1\172\11\24\1\0"+
    "\2\24\12\0\1\24\1\0\1\24\11\0\1\24\1\0"+
    "\3\24\5\0\3\24\1\173\1\24\2\0\3\24\6\0"+
    "\1\24\1\174\4\24\1\175\1\176\4\24\1\0\2\24"+
    "\12\0\1\24\1\0\1\24\11\0\1\24\1\0\3\24"+
    "\5\0\5\24\2\0\3\24\6\0\7\24\1\177\4\24"+
    "\1\0\2\24\12\0\1\24\1\0\1\24\11\0\1\24"+
    "\1\0\3\24\5\0\5\24\2\0\3\24\6\0\4\24"+
    "\1\200\7\24\1\0\2\24\12\0\1\24\1\0\1\24"+
    "\11\0\1\24\1\0\3\24\5\0\5\24\2\0\3\24"+
    "\6\0\1\24\1\201\5\24\1\202\1\24\1\203\2\24"+
    "\1\0\2\24\12\0\1\24\1\0\1\24\11\0\1\24"+
    "\1\0\3\24\4\0\1\204\1\205\4\24\2\0\3\24"+
    "\6\0\7\24\1\206\4\24\1\0\2\24\12\0\1\24"+
    "\1\0\1\24\11\0\1\24\1\0\3\24\5\0\5\24"+
    "\2\0\3\24\6\0\7\24\1\207\4\24\1\0\2\24"+
    "\12\0\1\24\1\0\1\24\26\0\1\210\1\211\15\0"+
    "\1\212\42\0\1\24\1\0\3\24\5\0\5\24\2\0"+
    "\3\24\6\0\4\24\1\213\4\24\1\214\2\24\1\0"+
    "\2\24\12\0\1\24\1\0\1\24\10\0\52\215\1\0"+
    "\24\215\53\0\1\216\51\0\1\163\31\0\1\217\44\0"+
    "\1\164\51\0\1\24\1\0\3\24\5\0\5\24\2\0"+
    "\3\24\6\0\14\24\1\0\1\220\1\24\12\0\1\221"+
    "\1\0\1\24\24\0\1\222\23\0\1\223\37\0\1\24"+
    "\1\0\3\24\5\0\1\24\1\224\3\24\2\0\3\24"+
    "\6\0\5\24\1\225\6\24\1\0\2\24\12\0\1\24"+
    "\1\0\1\24\11\0\1\24\1\0\3\24\5\0\3\24"+
    "\1\226\1\24\2\0\3\24\6\0\14\24\1\0\2\24"+
    "\12\0\1\24\1\0\1\24\11\0\1\24\1\0\3\24"+
    "\5\0\5\24\2\0\3\24\6\0\4\24\1\157\7\24"+
    "\1\0\2\24\12\0\1\24\1\0\1\24\31\0\1\227"+
    "\56\0\1\24\1\0\3\24\5\0\5\24\2\0\3\24"+
    "\6\0\7\24\1\230\4\24\1\0\2\24\12\0\1\24"+
    "\1\0\1\24\11\0\1\24\1\0\3\24\5\0\5\24"+
    "\2\0\3\24\6\0\4\24\1\231\7\24\1\0\2\24"+
    "\12\0\1\24\1\0\1\24\67\0\1\163\1\164\7\0"+
    "\1\232\7\0\1\24\1\0\3\24\5\0\5\24\2\0"+
    "\3\24\6\0\6\24\1\233\5\24\1\0\2\24\12\0"+
    "\1\24\1\0\1\24\11\0\1\24\1\0\3\24\5\0"+
    "\5\24\2\0\3\24\6\0\2\24\1\234\11\24\1\0"+
    "\2\24\12\0\1\24\1\0\1\24\11\0\1\24\1\0"+
    "\3\24\5\0\5\24\2\0\3\24\6\0\1\24\1\174"+
    "\4\24\1\235\1\236\4\24\1\0\2\24\12\0\1\24"+
    "\1\0\1\24\11\0\1\24\1\0\3\24\5\0\5\24"+
    "\2\0\3\24\6\0\1\24\1\237\4\24\1\240\2\24"+
    "\1\241\2\24\1\0\2\24\12\0\1\24\1\0\1\24"+
    "\11\0\1\24\1\0\3\24\5\0\5\24\2\0\3\24"+
    "\6\0\2\24\1\242\4\24\1\243\4\24\1\0\2\24"+
    "\12\0\1\24\1\0\1\24\60\0\1\244\13\0\1\245"+
    "\13\0\1\24\1\0\3\24\5\0\5\24\2\0\3\24"+
    "\6\0\11\24\1\214\2\24\1\0\2\24\12\0\1\24"+
    "\1\0\1\24\36\0\1\163\132\0\1\246\105\0\1\247"+
    "\26\0\1\250\56\0\1\24\1\0\3\24\5\0\5\24"+
    "\2\0\3\24\6\0\10\24\1\251\3\24\1\0\1\220"+
    "\1\24\12\0\1\24\1\0\1\24\24\0\1\252\23\0"+
    "\1\223\37\0\1\24\1\0\3\24\5\0\1\24\1\253"+
    "\3\24\2\0\3\24\6\0\5\24\1\225\6\24\1\0"+
    "\2\24\12\0\1\24\1\0\1\24\11\0\1\24\1\0"+
    "\3\24\5\0\5\24\2\0\3\24\6\0\4\24\1\254"+
    "\7\24\1\0\2\24\12\0\1\24\1\0\1\24\11\0"+
    "\1\24\1\0\3\24\5\0\5\24\2\0\3\24\6\0"+
    "\2\24\1\255\11\24\1\0\2\24\12\0\1\24\1\0"+
    "\1\24\11\0\1\24\1\0\3\24\5\0\5\24\2\0"+
    "\3\24\6\0\1\24\1\174\4\24\1\256\1\236\4\24"+
    "\1\0\2\24\12\0\1\24\1\0\1\24\11\0\1\24"+
    "\1\0\3\24\5\0\5\24\2\0\3\24\6\0\1\24"+
    "\1\237\4\24\1\257\1\260\1\24\1\261\2\24\1\0"+
    "\2\24\12\0\1\24\1\0\1\24\11\0\1\24\1\0"+
    "\3\24\5\0\5\24\2\0\3\24\6\0\1\24\1\262"+
    "\12\24\1\0\2\24\12\0\1\24\1\0\1\24\53\0"+
    "\1\263\4\0\1\244\40\0\2\264\67\0\2\12\72\0"+
    "\5\141\1\265\1\266\3\0\6\141\1\0\2\141\1\0"+
    "\1\141\4\0\15\141\1\0\2\141\12\0\1\141\1\0"+
    "\1\141\1\0\1\141\5\0\1\141\11\267\1\270\65\267"+
    "\22\0\1\271\55\0\1\24\1\0\3\24\5\0\5\24"+
    "\2\0\1\24\1\272\1\24\6\0\14\24\1\0\2\24"+
    "\12\0\1\24\1\0\1\24\11\0\1\24\1\0\3\24"+
    "\5\0\5\24\2\0\3\24\6\0\2\24\1\273\11\24"+
    "\1\0\2\24\12\0\1\24\1\0\1\24\11\0\1\24"+
    "\1\0\3\24\5\0\5\24\2\0\3\24\6\0\6\24"+
    "\1\274\5\24\1\0\2\24\12\0\1\24\1\0\1\24"+
    "\14\0\2\275\110\0\1\276\60\0\1\24\1\0\3\24"+
    "\5\0\4\24\1\277\2\0\3\24\6\0\14\24\1\0"+
    "\2\24\12\0\1\24\1\0\1\24\11\0\1\24\1\0"+
    "\3\24\5\0\5\24\2\0\3\24\6\0\14\24\1\0"+
    "\1\24\1\300\12\0\1\24\1\0\1\24\11\0\1\24"+
    "\1\0\3\24\5\0\4\24\1\301\2\0\3\24\6\0"+
    "\14\24\1\0\2\24\12\0\1\24\1\0\1\24\11\0"+
    "\1\24\1\0\3\24\5\0\5\24\2\0\1\24\1\302"+
    "\1\24\6\0\14\24\1\0\2\24\12\0\1\24\1\0"+
    "\1\24\11\0\1\24\1\0\3\24\5\0\3\24\1\303"+
    "\1\24\2\0\3\24\6\0\14\24\1\0\2\24\12\0"+
    "\1\24\1\0\1\24\11\0\1\24\1\0\3\24\5\0"+
    "\5\24\2\0\3\24\6\0\2\24\1\304\11\24\1\0"+
    "\2\24\12\0\1\24\1\0\1\24\43\0\1\305\44\0"+
    "\1\24\1\0\3\24\5\0\5\24\2\0\3\24\6\0"+
    "\12\24\1\306\1\24\1\0\2\24\12\0\1\24\1\0"+
    "\1\24\11\0\1\24\1\0\3\24\5\0\5\24\2\0"+
    "\3\24\6\0\12\24\1\307\1\24\1\0\2\24\12\0"+
    "\1\24\1\0\1\24\11\0\1\24\1\0\1\310\2\24"+
    "\5\0\5\24\2\0\3\24\6\0\14\24\1\311\2\24"+
    "\12\0\1\24\1\0\1\24\11\0\1\24\1\0\3\24"+
    "\5\0\4\24\1\312\2\0\3\24\6\0\14\24\1\0"+
    "\2\24\12\0\1\24\1\0\1\24\11\0\1\24\1\0"+
    "\3\24\5\0\1\24\1\313\3\24\2\0\3\24\6\0"+
    "\14\24\1\0\2\24\12\0\1\24\1\0\1\24\11\0"+
    "\1\24\1\0\3\24\5\0\5\24\2\0\3\24\6\0"+
    "\6\24\1\314\5\24\1\0\2\24\12\0\1\24\1\0"+
    "\1\24\11\0\1\24\1\0\3\24\5\0\5\24\2\0"+
    "\3\24\6\0\7\24\1\315\4\24\1\0\2\24\12\0"+
    "\1\24\1\0\1\24\11\0\1\24\1\0\3\24\5\0"+
    "\5\24\2\0\3\24\6\0\4\24\1\316\7\24\1\0"+
    "\2\24\12\0\1\24\1\0\1\24\11\0\1\24\1\0"+
    "\3\24\5\0\5\24\2\0\3\24\6\0\7\24\1\317"+
    "\4\24\1\0\2\24\12\0\1\24\1\0\1\24\11\0"+
    "\1\24\1\0\1\320\2\24\5\0\5\24\2\0\3\24"+
    "\6\0\14\24\1\321\2\24\12\0\1\24\1\0\1\24"+
    "\11\0\1\24\1\0\3\24\5\0\1\24\1\322\3\24"+
    "\2\0\3\24\6\0\14\24\1\0\2\24\12\0\1\24"+
    "\1\0\1\24\11\0\1\24\1\0\3\24\5\0\5\24"+
    "\2\0\3\24\6\0\1\24\1\323\12\24\1\0\2\24"+
    "\12\0\1\24\1\0\1\24\56\0\1\324\31\0\1\24"+
    "\1\0\3\24\5\0\5\24\2\0\3\24\6\0\13\24"+
    "\1\325\1\0\2\24\12\0\1\24\1\0\1\24\11\0"+
    "\1\24\1\0\3\24\5\0\5\24\2\0\3\24\6\0"+
    "\12\24\1\326\1\24\1\0\2\24\12\0\1\24\1\0"+
    "\1\24\33\0\1\327\110\0\1\330\102\0\1\331\36\0"+
    "\1\24\1\0\3\24\4\0\1\332\1\333\4\24\2\0"+
    "\3\24\6\0\14\24\1\0\2\24\12\0\1\24\1\0"+
    "\1\24\11\0\1\24\1\0\3\24\4\0\1\334\1\335"+
    "\4\24\2\0\3\24\6\0\14\24\1\0\2\24\12\0"+
    "\1\24\1\0\1\24\10\0\52\215\1\336\24\215\20\0"+
    "\1\337\57\0\1\24\1\0\3\24\4\0\1\340\1\341"+
    "\4\24\2\0\3\24\6\0\14\24\1\0\2\24\12\0"+
    "\1\24\1\0\1\24\11\0\1\24\1\0\1\342\2\24"+
    "\5\0\5\24\2\0\3\24\6\0\14\24\1\343\2\24"+
    "\12\0\1\24\1\0\1\24\27\0\1\344\60\0\1\24"+
    "\1\0\3\24\5\0\4\24\1\345\2\0\3\24\6\0"+
    "\14\24\1\0\2\24\12\0\1\24\1\0\1\24\11\0"+
    "\1\24\1\0\3\24\5\0\5\24\2\0\1\24\1\346"+
    "\1\24\6\0\14\24\1\0\2\24\12\0\1\24\1\0"+
    "\1\24\25\0\1\347\62\0\1\24\1\0\3\24\4\0"+
    "\1\350\1\351\4\24\2\0\3\24\6\0\14\24\1\0"+
    "\2\24\12\0\1\24\1\0\1\24\11\0\1\24\1\0"+
    "\3\24\5\0\5\24\2\0\3\24\6\0\2\24\1\352"+
    "\11\24\1\0\2\24\12\0\1\24\1\0\1\24\11\0"+
    "\1\24\1\0\1\353\2\24\5\0\5\24\2\0\3\24"+
    "\6\0\14\24\1\354\2\24\12\0\1\24\1\0\1\24"+
    "\11\0\1\24\1\0\3\24\5\0\4\24\1\355\2\0"+
    "\3\24\6\0\14\24\1\0\2\24\12\0\1\24\1\0"+
    "\1\24\11\0\1\24\1\0\3\24\5\0\5\24\2\0"+
    "\3\24\6\0\7\24\1\356\4\24\1\0\2\24\12\0"+
    "\1\24\1\0\1\24\11\0\1\24\1\0\3\24\5\0"+
    "\5\24\2\0\3\24\6\0\4\24\1\357\7\24\1\0"+
    "\2\24\12\0\1\24\1\0\1\24\11\0\1\24\1\0"+
    "\1\360\2\24\5\0\5\24\2\0\3\24\6\0\14\24"+
    "\1\361\2\24\12\0\1\24\1\0\1\24\11\0\1\24"+
    "\1\0\3\24\5\0\5\24\2\0\3\24\6\0\1\24"+
    "\1\362\12\24\1\0\2\24\12\0\1\24\1\0\1\24"+
    "\11\0\1\24\1\0\3\24\5\0\5\24\2\0\3\24"+
    "\6\0\1\24\1\363\12\24\1\0\2\24\12\0\1\24"+
    "\1\0\1\24\11\0\1\24\1\0\3\24\5\0\5\24"+
    "\2\0\3\24\6\0\5\24\1\364\6\24\1\0\2\24"+
    "\12\0\1\24\1\0\1\24\22\0\2\340\66\0\1\343"+
    "\43\0\1\343\44\0\1\365\62\0\1\24\1\0\3\24"+
    "\5\0\5\24\2\0\3\24\6\0\1\24\1\366\12\24"+
    "\1\0\2\24\12\0\1\24\1\0\1\24\27\0\1\367"+
    "\60\0\1\24\1\0\3\24\5\0\4\24\1\370\2\0"+
    "\3\24\6\0\14\24\1\0\2\24\12\0\1\24\1\0"+
    "\1\24\11\0\1\24\1\0\3\24\4\0\1\371\1\372"+
    "\4\24\2\0\3\24\6\0\14\24\1\0\2\24\12\0"+
    "\1\24\1\0\1\24\11\0\1\24\1\0\3\24\5\0"+
    "\4\24\1\373\2\0\3\24\6\0\14\24\1\0\2\24"+
    "\12\0\1\24\1\0\1\24\11\0\1\24\1\0\3\24"+
    "\5\0\5\24\2\0\3\24\6\0\7\24\1\374\4\24"+
    "\1\0\2\24\12\0\1\24\1\0\1\24\11\0\1\24"+
    "\1\0\3\24\5\0\5\24\2\0\3\24\6\0\4\24"+
    "\1\375\7\24\1\0\2\24\12\0\1\24\1\0\1\24"+
    "\11\0\1\24\1\0\3\24\5\0\1\24\1\376\3\24"+
    "\2\0\3\24\6\0\14\24\1\0\2\24\12\0\1\24"+
    "\1\0\1\24\11\0\1\24\1\0\3\24\5\0\5\24"+
    "\2\0\3\24\6\0\1\24\1\377\12\24\1\0\2\24"+
    "\12\0\1\24\1\0\1\24\11\0\1\24\1\0\3\24"+
    "\4\0\1\u0100\1\u0101\4\24\2\0\3\24\6\0\14\24"+
    "\1\0\2\24\12\0\1\24\1\0\1\24\44\0\1\u0102"+
    "\56\0\1\u0103\71\0\1\266\67\0\11\267\1\u0104\65\267"+
    "\10\0\1\266\1\270\110\0\1\u0105\54\0\1\24\1\0"+
    "\3\24\5\0\2\24\1\u0106\2\24\2\0\3\24\6\0"+
    "\14\24\1\0\2\24\12\0\1\24\1\0\1\24\11\0"+
    "\1\24\1\0\3\24\5\0\5\24\2\0\3\24\6\0"+
    "\2\24\1\u0107\11\24\1\0\2\24\12\0\1\24\1\0"+
    "\1\24\22\0\2\u0108\21\0\1\u0109\42\0\1\24\1\0"+
    "\3\24\4\0\1\u0108\1\u010a\4\24\2\0\3\24\6\0"+
    "\2\24\1\u010b\11\24\1\0\2\24\12\0\1\24\1\0"+
    "\1\24\11\0\1\24\1\0\3\24\5\0\4\24\1\u010c"+
    "\2\0\3\24\6\0\14\24\1\0\2\24\12\0\1\24"+
    "\1\0\1\24\11\0\1\24\1\0\3\24\5\0\5\24"+
    "\2\0\3\24\6\0\6\24\1\u010d\5\24\1\0\2\24"+
    "\12\0\1\24\1\0\1\24\11\0\1\24\1\0\3\24"+
    "\5\0\5\24\2\0\3\24\6\0\2\24\1\u010e\11\24"+
    "\1\0\2\24\12\0\1\24\1\0\1\24\11\0\1\24"+
    "\1\0\3\24\5\0\1\24\1\u010f\3\24\2\0\3\24"+
    "\6\0\14\24\1\0\2\24\12\0\1\24\1\0\1\24"+
    "\44\0\1\u0110\43\0\1\24\1\0\3\24\5\0\5\24"+
    "\2\0\3\24\6\0\2\24\1\u0111\11\24\1\0\2\24"+
    "\12\0\1\24\1\0\1\24\45\0\1\u0112\42\0\1\24"+
    "\1\0\3\24\4\0\1\u0113\1\u0114\4\24\2\0\3\24"+
    "\6\0\14\24\1\0\2\24\12\0\1\24\1\0\1\24"+
    "\11\0\1\24\1\0\3\24\5\0\5\24\2\0\3\24"+
    "\6\0\10\24\1\u0115\3\24\1\0\2\24\12\0\1\24"+
    "\1\0\1\24\11\0\1\24\1\0\1\u0116\2\24\5\0"+
    "\5\24\2\0\3\24\6\0\14\24\1\u0117\2\24\12\0"+
    "\1\24\1\0\1\24\11\0\1\24\1\0\3\24\5\0"+
    "\5\24\2\0\3\24\6\0\1\24\1\u0118\12\24\1\0"+
    "\2\24\12\0\1\24\1\0\1\24\11\0\1\24\1\0"+
    "\3\24\5\0\2\24\1\u0119\2\24\2\0\3\24\6\0"+
    "\14\24\1\0\2\24\12\0\1\24\1\0\1\24\11\0"+
    "\1\24\1\0\3\24\5\0\5\24\2\0\3\24\6\0"+
    "\2\24\1\u011a\11\24\1\0\2\24\12\0\1\24\1\0"+
    "\1\24\45\0\1\u011b\42\0\1\24\1\0\1\u011c\2\24"+
    "\5\0\5\24\2\0\3\24\6\0\14\24\1\u011d\2\24"+
    "\12\0\1\24\1\0\1\24\11\0\1\24\1\0\3\24"+
    "\5\0\5\24\2\0\3\24\6\0\4\24\1\u011e\7\24"+
    "\1\0\2\24\12\0\1\24\1\0\1\24\25\0\1\u011f"+
    "\116\0\1\u0120\60\0\1\u0121\60\0\1\24\1\0\3\24"+
    "\5\0\4\24\1\u0122\2\0\3\24\6\0\14\24\1\0"+
    "\2\24\12\0\1\24\1\0\1\24\51\0\1\u0123\36\0"+
    "\1\24\1\0\3\24\5\0\5\24\2\0\3\24\6\0"+
    "\6\24\1\u0124\5\24\1\0\2\24\12\0\1\24\1\0"+
    "\1\24\64\0\1\u0125\41\0\1\u0126\60\0\1\24\1\0"+
    "\3\24\5\0\4\24\1\u0127\2\0\3\24\6\0\14\24"+
    "\1\0\2\24\12\0\1\24\1\0\1\24\11\0\1\24"+
    "\1\0\3\24\5\0\4\24\1\u0128\2\0\3\24\6\0"+
    "\14\24\1\0\2\24\12\0\1\24\1\0\1\24\27\0"+
    "\1\u0129\71\0\2\u012a\64\0\1\24\1\0\3\24\4\0"+
    "\1\u012a\1\u012b\4\24\2\0\3\24\6\0\14\24\1\0"+
    "\2\24\12\0\1\24\1\0\1\24\11\0\1\24\1\0"+
    "\3\24\5\0\5\24\2\0\3\24\6\0\6\24\1\u012c"+
    "\5\24\1\0\2\24\12\0\1\24\1\0\1\24\74\0"+
    "\1\u012d\57\0\1\u012e\32\0\1\24\1\0\3\24\5\0"+
    "\5\24\2\0\3\24\6\0\12\24\1\u012f\1\24\1\0"+
    "\2\24\12\0\1\24\1\0\1\24\11\0\1\24\1\0"+
    "\3\24\5\0\5\24\2\0\3\24\6\0\1\24\1\u0130"+
    "\12\24\1\0\2\24\12\0\1\24\1\0\1\24\11\0"+
    "\1\24\1\0\3\24\5\0\5\24\2\0\3\24\6\0"+
    "\2\24\1\u0131\11\24\1\0\2\24\12\0\1\24\1\0"+
    "\1\24\45\0\1\u0132\42\0\1\24\1\0\3\24\5\0"+
    "\3\24\1\u0133\1\24\2\0\3\24\6\0\14\24\1\0"+
    "\2\24\12\0\1\24\1\0\1\24\11\0\1\24\1\0"+
    "\3\24\5\0\5\24\2\0\3\24\6\0\1\24\1\u0134"+
    "\12\24\1\0\2\24\12\0\1\24\1\0\1\24\11\0"+
    "\1\24\1\0\3\24\5\0\5\24\2\0\3\24\6\0"+
    "\2\24\1\u0135\11\24\1\0\2\24\12\0\1\24\1\0"+
    "\1\24\45\0\1\u0136\42\0\1\24\1\0\1\u0137\2\24"+
    "\5\0\5\24\2\0\3\24\6\0\14\24\1\u0138\2\24"+
    "\12\0\1\24\1\0\1\24\11\0\1\24\1\0\3\24"+
    "\5\0\5\24\2\0\3\24\6\0\4\24\1\u0139\7\24"+
    "\1\0\2\24\12\0\1\24\1\0\1\24\11\0\1\24"+
    "\1\0\3\24\5\0\5\24\2\0\3\24\6\0\1\24"+
    "\1\u013a\12\24\1\0\2\24\12\0\1\24\1\0\1\24"+
    "\47\0\1\u013b\40\0\1\24\1\0\3\24\5\0\1\24"+
    "\1\u013c\3\24\2\0\3\24\6\0\14\24\1\0\2\24"+
    "\12\0\1\24\1\0\1\24\24\0\1\u013d\63\0\1\24"+
    "\1\0\3\24\5\0\1\24\1\u013e\3\24\2\0\3\24"+
    "\6\0\14\24\1\0\2\24\12\0\1\24\1\0\1\24"+
    "\11\0\1\24\1\0\3\24\5\0\5\24\2\0\3\24"+
    "\6\0\10\24\1\u013f\3\24\1\0\2\24\12\0\1\24"+
    "\1\0\1\24\11\0\1\24\1\0\3\24\5\0\5\24"+
    "\2\0\3\24\6\0\1\24\1\u0140\12\24\1\0\2\24"+
    "\12\0\1\24\1\0\1\24\11\0\1\24\1\0\1\u0141"+
    "\2\24\5\0\5\24\2\0\3\24\6\0\14\24\1\u0142"+
    "\2\24\12\0\1\24\1\0\1\24\11\0\1\24\1\0"+
    "\1\u0143\2\24\5\0\5\24\2\0\3\24\6\0\14\24"+
    "\1\u0144\2\24\12\0\1\24\1\0\1\24\11\0\1\24"+
    "\1\0\3\24\5\0\5\24\2\0\3\24\6\0\4\24"+
    "\1\u0145\7\24\1\0\2\24\12\0\1\24\1\0\1\24"+
    "\24\0\1\u0146\63\0\1\24\1\0\3\24\5\0\1\24"+
    "\1\u0147\3\24\2\0\3\24\6\0\14\24\1\0\2\24"+
    "\12\0\1\24\1\0\1\24\24\0\1\u0148\125\0\1\u0149"+
    "\33\0\10\267\1\266\1\u0104\65\267\1\0\1\24\1\0"+
    "\3\24\5\0\5\24\2\0\3\24\6\0\10\24\1\u014a"+
    "\3\24\1\0\2\24\12\0\1\24\1\0\1\24\24\0"+
    "\1\u014b\120\0\1\u014c\41\0\1\24\1\0\3\24\5\0"+
    "\1\24\1\u014d\3\24\2\0\3\24\6\0\14\24\1\0"+
    "\2\24\12\0\1\24\1\0\1\24\11\0\1\24\1\0"+
    "\3\24\5\0\5\24\2\0\3\24\6\0\3\24\1\u014e"+
    "\10\24\1\0\2\24\12\0\1\24\1\0\1\24\11\0"+
    "\1\24\1\0\3\24\4\0\1\u014f\1\u0150\4\24\2\0"+
    "\3\24\6\0\14\24\1\0\2\24\12\0\1\24\1\0"+
    "\1\24\32\0\1\u0151\55\0\1\24\1\0\3\24\4\0"+
    "\1\u0152\1\u0153\4\24\2\0\3\24\6\0\14\24\1\0"+
    "\2\24\12\0\1\24\1\0\1\24\22\0\2\u0152\77\0"+
    "\1\u0154\63\0\1\24\1\0\3\24\5\0\1\24\1\u0155"+
    "\3\24\2\0\3\24\6\0\14\24\1\0\2\24\12\0"+
    "\1\24\1\0\1\24\11\0\1\24\1\0\3\24\5\0"+
    "\4\24\1\u0156\2\0\3\24\6\0\14\24\1\0\2\24"+
    "\12\0\1\24\1\0\1\24\11\0\1\24\1\0\3\24"+
    "\5\0\5\24\2\0\3\24\6\0\2\24\1\u0157\11\24"+
    "\1\0\2\24\12\0\1\24\1\0\1\24\45\0\1\u0158"+
    "\42\0\1\24\1\0\3\24\5\0\4\24\1\u0159\2\0"+
    "\3\24\6\0\14\24\1\0\2\24\12\0\1\24\1\0"+
    "\1\24\11\0\1\24\1\0\3\24\5\0\5\24\2\0"+
    "\3\24\6\0\7\24\1\u015a\4\24\1\0\2\24\12\0"+
    "\1\24\1\0\1\24\52\0\1\u015b\35\0\1\24\1\0"+
    "\3\24\4\0\1\u015c\1\u015d\4\24\2\0\3\24\6\0"+
    "\14\24\1\0\2\24\12\0\1\24\1\0\1\24\53\0"+
    "\1\u015e\70\0\1\u015f\42\0\1\24\1\0\3\24\5\0"+
    "\5\24\2\0\3\24\6\0\2\24\1\u0160\11\24\1\0"+
    "\2\24\12\0\1\24\1\0\1\24\45\0\1\u0161\42\0"+
    "\1\24\1\0\3\24\5\0\5\24\2\0\3\24\6\0"+
    "\2\24\1\u0162\11\24\1\0\2\24\12\0\1\24\1\0"+
    "\1\24\65\0\1\u0163\64\0\1\u0164\34\0\1\24\1\0"+
    "\3\24\5\0\5\24\2\0\3\24\6\0\10\24\1\u0165"+
    "\3\24\1\0\2\24\12\0\1\24\1\0\1\24\11\0"+
    "\1\24\1\0\3\24\5\0\5\24\2\0\3\24\6\0"+
    "\2\24\1\u0166\11\24\1\0\2\24\12\0\1\24\1\0"+
    "\1\24\45\0\1\u0167\55\0\1\u0168\63\0\1\24\1\0"+
    "\3\24\5\0\1\24\1\u0169\3\24\2\0\3\24\6\0"+
    "\14\24\1\0\2\24\12\0\1\24\1\0\1\24\11\0"+
    "\1\24\1\0\3\24\4\0\1\u016a\1\u016b\4\24\2\0"+
    "\3\24\6\0\14\24\1\0\2\24\12\0\1\24\1\0"+
    "\1\24\11\0\1\24\1\0\3\24\5\0\5\24\2\0"+
    "\3\24\6\0\14\24\1\0\2\24\12\0\1\24\1\u016c"+
    "\1\u016d\11\0\1\24\1\0\3\24\5\0\5\24\2\0"+
    "\3\24\6\0\4\24\1\u016e\7\24\1\0\2\24\12\0"+
    "\1\24\1\0\1\24\11\0\1\24\1\0\3\24\5\0"+
    "\4\24\1\u016f\2\0\3\24\6\0\14\24\1\0\2\24"+
    "\12\0\1\24\1\0\1\24\11\0\1\24\1\0\1\u0170"+
    "\2\24\5\0\5\24\2\0\3\24\6\0\14\24\1\u0171"+
    "\2\24\12\0\1\24\1\0\1\24\13\0\1\u0171\43\0"+
    "\1\u0171\30\0\1\24\1\0\3\24\4\0\1\u0172\1\u0173"+
    "\4\24\2\0\3\24\6\0\14\24\1\0\2\24\12\0"+
    "\1\24\1\0\1\24\11\0\1\24\1\0\3\24\5\0"+
    "\3\24\1\u0174\1\24\2\0\3\24\6\0\14\24\1\0"+
    "\2\24\12\0\1\24\1\0\1\24\52\0\1\u0175\35\0"+
    "\1\24\1\0\3\24\5\0\5\24\2\0\3\24\6\0"+
    "\5\24\1\u0176\6\24\1\0\2\24\12\0\1\24\1\0"+
    "\1\24\27\0\1\u0177\60\0\1\24\1\0\3\24\5\0"+
    "\4\24\1\u0178\2\0\3\24\6\0\14\24\1\0\2\24"+
    "\12\0\1\24\1\0\1\24\11\0\1\24\1\0\3\24"+
    "\5\0\5\24\2\0\3\24\6\0\11\24\1\u0179\2\24"+
    "\1\0\2\24\12\0\1\24\1\0\1\24\11\0\1\24"+
    "\1\0\3\24\5\0\4\24\1\u017a\2\0\3\24\6\0"+
    "\14\24\1\0\2\24\12\0\1\24\1\0\1\24\11\0"+
    "\1\24\1\0\3\24\5\0\5\24\2\0\3\24\6\0"+
    "\10\24\1\u017b\3\24\1\0\2\24\12\0\1\24\1\0"+
    "\1\24\53\0\1\u017c\34\0\1\24\1\0\3\24\5\0"+
    "\4\24\1\u017d\2\0\3\24\6\0\14\24\1\0\2\24"+
    "\12\0\1\24\1\0\1\24\27\0\1\u017e\117\0\1\u017f"+
    "\77\0\1\u0180\36\0\1\24\1\0\3\24\5\0\4\24"+
    "\1\u0181\2\0\3\24\6\0\14\24\1\0\2\24\12\0"+
    "\1\24\1\0\1\24\25\0\1\u0182\116\0\1\u0183\42\0"+
    "\1\24\1\0\3\24\5\0\2\24\1\u0184\2\24\2\0"+
    "\3\24\6\0\14\24\1\0\2\24\12\0\1\24\1\0"+
    "\1\24\11\0\1\24\1\0\3\24\5\0\5\24\2\0"+
    "\3\24\6\0\2\24\1\u0185\11\24\1\0\2\24\12\0"+
    "\1\24\1\0\1\24\53\0\1\u0186\34\0\1\24\1\0"+
    "\3\24\5\0\5\24\2\0\3\24\6\0\10\24\1\u0187"+
    "\3\24\1\0\2\24\12\0\1\24\1\0\1\24\44\0"+
    "\1\u0188\102\0\1\u0189\37\0\1\24\1\0\3\24\5\0"+
    "\5\24\2\0\3\24\6\0\5\24\1\u018a\6\24\1\0"+
    "\2\24\12\0\1\24\1\0\1\24\25\0\1\u018b\62\0"+
    "\1\24\1\0\3\24\5\0\2\24\1\u018c\2\24\2\0"+
    "\3\24\6\0\14\24\1\0\2\24\12\0\1\24\1\0"+
    "\1\24\11\0\1\24\1\0\3\24\4\0\1\u018d\1\u018e"+
    "\4\24\2\0\3\24\6\0\14\24\1\0\2\24\12\0"+
    "\1\24\1\0\1\24\11\0\1\24\1\0\3\24\4\0"+
    "\1\u018f\1\u0190\4\24\2\0\3\24\6\0\14\24\1\0"+
    "\2\24\12\0\1\24\1\0\1\24\11\0\1\24\1\0"+
    "\3\24\5\0\5\24\2\0\3\24\6\0\6\24\1\u0191"+
    "\5\24\1\0\2\24\12\0\1\24\1\0\1\24\51\0"+
    "\1\u0192\51\0\1\u0193\63\0\1\24\1\0\3\24\5\0"+
    "\1\24\1\u0194\3\24\2\0\3\24\6\0\14\24\1\0"+
    "\2\24\12\0\1\24\1\0\1\24\27\0\1\u0195\120\0"+
    "\1\u0196\36\0\1\24\1\0\3\24\5\0\5\24\2\0"+
    "\3\24\6\0\6\24\1\u0197\5\24\1\0\2\24\12\0"+
    "\1\24\1\0\1\24\63\0\1\u0198\67\0\1\u0199\33\0"+
    "\1\24\1\0\3\24\5\0\5\24\2\0\3\24\6\0"+
    "\11\24\1\u019a\2\24\1\0\2\24\12\0\1\24\1\0"+
    "\1\24\11\0\1\24\1\0\3\24\5\0\5\24\2\0"+
    "\3\24\6\0\13\24\1\u019b\1\0\2\24\12\0\1\24"+
    "\1\0\1\24\56\0\1\u019c\45\0\1\u019d\62\0\1\24"+
    "\1\0\3\24\5\0\2\24\1\u019e\2\24\2\0\3\24"+
    "\6\0\14\24\1\0\2\24\12\0\1\24\1\0\1\24"+
    "\53\0\1\u019f\34\0\1\24\1\0\3\24\5\0\5\24"+
    "\2\0\3\24\6\0\10\24\1\u01a0\3\24\1\0\2\24"+
    "\12\0\1\24\1\0\1\24\11\0\1\24\1\0\3\24"+
    "\5\0\1\24\1\u01a1\3\24\2\0\3\24\6\0\14\24"+
    "\1\0\2\24\12\0\1\24\1\0\1\24\11\0\1\24"+
    "\1\0\3\24\4\0\1\u01a2\1\u01a3\4\24\2\0\3\24"+
    "\6\0\14\24\1\0\2\24\12\0\1\24\1\0\1\24"+
    "\24\0\1\u01a4\63\0\1\24\1\0\3\24\5\0\1\24"+
    "\1\u01a5\3\24\2\0\3\24\6\0\14\24\1\0\2\24"+
    "\12\0\1\24\1\0\1\24\11\0\1\24\1\0\3\24"+
    "\5\0\5\24\2\0\3\24\6\0\6\24\1\u01a6\5\24"+
    "\1\0\2\24\12\0\1\24\1\0\1\24\46\0\1\u01a7"+
    "\100\0\1\u01a8\37\0\1\24\1\0\3\24\5\0\5\24"+
    "\2\0\3\24\6\0\5\24\1\u01a9\6\24\1\0\2\24"+
    "\12\0\1\24\1\0\1\24\11\0\1\24\1\0\3\24"+
    "\5\0\5\24\2\0\3\24\6\0\4\24\1\u01aa\7\24"+
    "\1\0\2\24\12\0\1\24\1\0\1\24\47\0\1\u01ab"+
    "\55\0\1\u01ac\76\0\1\u01ad\117\0\1\u01ae\40\0\1\24"+
    "\1\0\3\24\5\0\3\24\1\u01af\1\24\2\0\3\24"+
    "\6\0\14\24\1\0\2\24\12\0\1\24\1\0\1\24"+
    "\11\0\1\24\1\0\3\24\5\0\5\24\2\0\3\24"+
    "\6\0\4\24\1\u01b0\7\24\1\0\2\24\12\0\1\24"+
    "\1\0\1\24\52\0\1\u01b1\35\0\1\24\1\0\3\24"+
    "\5\0\5\24\2\0\3\24\6\0\7\24\1\u01b2\4\24"+
    "\1\0\2\24\12\0\1\24\1\0\1\24\24\0\1\u01b3"+
    "\63\0\1\24\1\0\3\24\5\0\1\24\1\u01b4\3\24"+
    "\2\0\3\24\6\0\14\24\1\0\2\24\12\0\1\24"+
    "\1\0\1\24\11\0\1\24\1\0\3\24\5\0\5\24"+
    "\2\0\3\24\6\0\2\24\1\u01b5\11\24\1\0\2\24"+
    "\12\0\1\24\1\0\1\24\45\0\1\u01b6\56\0\1\u01b7"+
    "\62\0\1\24\1\0\3\24\5\0\2\24\1\u01b8\2\24"+
    "\2\0\3\24\6\0\14\24\1\0\2\24\12\0\1\24"+
    "\1\0\1\24\24\0\1\u01b9\63\0\1\24\1\0\3\24"+
    "\5\0\1\24\1\u01ba\3\24\2\0\3\24\6\0\14\24"+
    "\1\0\2\24\12\0\1\24\1\0\1\24\63\0\1\u01bb"+
    "\24\0\1\24\1\0\3\24\5\0\5\24\2\0\3\24"+
    "\1\u01bc\5\0\14\24\1\0\2\24\12\0\1\24\1\0"+
    "\1\24\35\0\1\u01bc\67\0\1\u01bd\61\0\1\24\1\0"+
    "\3\24\5\0\3\24\1\u01be\1\24\2\0\3\24\6\0"+
    "\14\24\1\0\2\24\12\0\1\24\1\0\1\24\24\0"+
    "\1\u01bf\63\0\1\24\1\0\3\24\5\0\1\24\1\u01c0"+
    "\3\24\2\0\3\24\6\0\14\24\1\0\2\24\12\0"+
    "\1\24\1\0\1\24\25\0\1\u01c1\62\0\1\24\1\0"+
    "\3\24\5\0\2\24\1\u01c2\2\24\2\0\3\24\6\0"+
    "\14\24\1\0\2\24\12\0\1\24\1\0\1\24\11\0"+
    "\1\24\1\0\3\24\5\0\4\24\1\u01c3\2\0\3\24"+
    "\6\0\14\24\1\0\2\24\12\0\1\24\1\0\1\24"+
    "\47\0\1\u01c4\104\0\1\u01c5\50\0\1\u01c6\60\0\1\24"+
    "\1\0\3\24\5\0\4\24\1\u01c7\2\0\3\24\6\0"+
    "\14\24\1\0\2\24\12\0\1\24\1\0\1\24\24\0"+
    "\1\u01c8\63\0\1\24\1\0\3\24\5\0\1\24\1\u01c9"+
    "\3\24\2\0\3\24\6\0\14\24\1\0\2\24\12\0"+
    "\1\24\1\0\1\24\25\0\1\u01ca\62\0\1\24\1\0"+
    "\3\24\5\0\2\24\1\u01cb\2\24\2\0\3\24\6\0"+
    "\14\24\1\0\2\24\12\0\1\24\1\0\1\24\26\0"+
    "\1\u01cc\61\0\1\24\1\0\3\24\5\0\3\24\1\u01cd"+
    "\1\24\2\0\3\24\6\0\14\24\1\0\2\24\12\0"+
    "\1\24\1\0\1\24\66\0\1\u01ce\62\0\1\u01cf\53\0"+
    "\1\u01d0\60\0\1\24\1\0\3\24\5\0\4\24\1\u01d1"+
    "\2\0\3\24\6\0\14\24\1\0\2\24\12\0\1\24"+
    "\1\0\1\24\25\0\1\u01d2\62\0\1\24\1\0\3\24"+
    "\5\0\2\24\1\u01d3\2\24\2\0\3\24\6\0\14\24"+
    "\1\0\2\24\12\0\1\24\1\0\1\24\26\0\1\u01d4"+
    "\61\0\1\24\1\0\3\24\5\0\3\24\1\u01d5\1\24"+
    "\2\0\3\24\6\0\14\24\1\0\2\24\12\0\1\24"+
    "\1\0\1\24\44\0\1\u01d6\77\0\1\u01d7\57\0\1\u01d8"+
    "\61\0\1\24\1\0\3\24\5\0\3\24\1\u01d9\1\24"+
    "\2\0\3\24\6\0\14\24\1\0\2\24\12\0\1\24"+
    "\1\0\1\24\27\0\1\u01da\60\0\1\24\1\0\3\24"+
    "\5\0\4\24\1\u01db\2\0\3\24\6\0\14\24\1\0"+
    "\2\24\12\0\1\24\1\0\1\24\30\0\1\u01dc\74\0"+
    "\1\u01dd\76\0\1\u01de\61\0\1\24\1\0\3\24\5\0"+
    "\3\24\1\u01df\1\24\2\0\3\24\6\0\14\24\1\0"+
    "\2\24\12\0\1\24\1\0\1\24\27\0\1\u01e0\60\0"+
    "\1\24\1\0\3\24\5\0\4\24\1\u01e1\2\0\3\24"+
    "\6\0\14\24\1\0\2\24\12\0\1\24\1\0\1\24"+
    "\56\0\1\u01e2\47\0\1\u01e3\60\0\1\24\1\0\3\24"+
    "\5\0\4\24\1\u01e4\2\0\3\24\6\0\14\24\1\0"+
    "\2\24\12\0\1\24\1\0\1\24\63\0\1\u01e5\42\0"+
    "\1\u01e6\76\0\1\u01e7\60\0\1\24\1\0\3\24\5\0"+
    "\4\24\1\u01e8\2\0\3\24\6\0\14\24\1\0\2\24"+
    "\12\0\1\24\1\0\1\24\44\0\1\u01e9\115\0\1\u01ea"+
    "\50\0\1\u01eb\66\0\1\u01ec\120\0\1\u01ed\51\0\2\u01ee"+
    "\77\0\1\u01ef\101\0\1\u01f0\120\0\1\u01f1\51\0\1\u01f2"+
    "\62\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22932];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\5\1\7\11\4\1\1\11\1\1\1\0"+
    "\4\1\1\11\1\0\1\11\1\1\2\11\11\1\1\0"+
    "\1\1\2\0\2\1\3\11\23\1\2\11\1\1\4\11"+
    "\6\1\1\11\5\1\2\11\1\1\1\0\1\1\2\0"+
    "\3\1\2\0\1\11\10\1\1\0\2\11\2\1\1\11"+
    "\14\1\1\0\3\1\3\0\2\1\2\0\1\11\2\1"+
    "\1\0\1\11\3\1\1\0\2\1\1\11\11\1\2\0"+
    "\2\11\1\0\1\1\1\0\10\1\2\0\1\1\1\11"+
    "\3\0\4\1\1\0\6\1\1\0\3\1\1\0\7\1"+
    "\1\0\2\1\1\11\2\1\1\11\3\0\1\1\1\0"+
    "\1\1\1\11\2\0\2\1\1\0\3\1\2\0\3\1"+
    "\1\0\4\1\1\0\3\1\1\0\1\1\1\11\1\1"+
    "\1\0\6\1\1\0\1\1\3\0\1\11\2\1\2\0"+
    "\6\1\1\0\2\1\1\0\3\1\1\0\3\1\1\11"+
    "\1\1\1\0\1\1\1\11\2\0\1\1\1\0\1\1"+
    "\2\0\2\1\2\0\2\1\2\11\3\1\1\11\3\1"+
    "\1\11\1\1\1\0\2\1\1\0\1\1\1\0\4\1"+
    "\1\0\1\1\1\0\1\1\1\11\1\1\2\0\1\1"+
    "\2\0\2\1\1\0\1\1\2\0\1\1\1\0\3\1"+
    "\1\11\2\1\2\0\1\1\1\0\2\1\1\11\1\1"+
    "\2\0\2\1\2\0\1\1\1\0\1\1\1\11\4\1"+
    "\1\11\1\0\2\1\1\0\1\1\1\0\4\1\1\0"+
    "\1\1\2\11\1\0\1\1\2\0\2\1\1\11\1\1"+
    "\2\11\1\1\1\11\1\1\1\0\1\1\1\0\2\1"+
    "\2\0\1\1\1\11\1\0\1\1\1\0\1\11\2\1"+
    "\2\0\1\1\1\11\2\1\1\0\1\1\1\0\2\1"+
    "\1\0\1\11\2\1\1\11\2\0\1\11\2\1\1\0"+
    "\1\1\1\0\2\1\1\11\1\0\1\1\1\11\1\1"+
    "\3\0\1\1\1\0\1\1\1\0\2\1\2\0\1\11"+
    "\1\1\1\11\1\1\1\0\1\1\1\0\1\1\2\0"+
    "\1\11\1\1\1\0\1\1\1\0\1\1\1\0\1\11"+
    "\1\0\1\1\1\11\1\1\3\0\1\1\1\11\1\1"+
    "\1\0\1\11\1\1\2\0\1\11\1\1\2\11\5\0"+
    "\1\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[498];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    TAC tac;
    public void addTac(TAC tac){
        this.tac=tac;
    } 


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MlgLexicAnalizer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 246) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(SimbolosMlg.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /*errores.add(new ErrorAnalisis("Lexico",yytext(),"Caracter no aceptado",yyline+1, yycolumn+1));*/
            }
          case 104: break;
          case 2: 
            { 
            }
          case 105: break;
          case 3: 
            { return new Symbol(SimbolosMlg.DIVISION, yycolumn,yyline,yytext());
            }
          case 106: break;
          case 4: 
            { return new Symbol(SimbolosMlg.MULTIPLICATION, yycolumn,yyline,yytext());
            }
          case 107: break;
          case 5: 
            { System.out.println("EQUAL "+yytext());return new Symbol(SimbolosMlg.EQUAL, yycolumn,yyline,yytext());
            }
          case 108: break;
          case 6: 
            { return new Symbol(SimbolosMlg.PARENTHESIS_A, yycolumn,yyline,yytext());
            }
          case 109: break;
          case 7: 
            { return new Symbol(SimbolosMlg.PARENTHESIS_B, yycolumn,yyline,yytext());
            }
          case 110: break;
          case 8: 
            { return new Symbol(SimbolosMlg.PLUS, yycolumn,yyline,yytext());
            }
          case 111: break;
          case 9: 
            { return new Symbol(SimbolosMlg.MINUS, yycolumn,yyline,yytext());
            }
          case 112: break;
          case 10: 
            { System.out.println("ID "+yytext()); return new Symbol(SimbolosMlg.ID, yycolumn,yyline,yytext());
            }
          case 113: break;
          case 11: 
            { System.out.println("NUMBER "+yytext()); return new Symbol(SimbolosMlg.ID, yycolumn,yyline,yytext());
            }
          case 114: break;
          case 12: 
            { System.out.println("SALTO ");
            }
          case 115: break;
          case 13: 
            { System.out.println("ESPACIO ");
            }
          case 116: break;
          case 14: 
            { System.out.println("POINT "+yytext());return new Symbol(SimbolosMlg.POINT, yycolumn,yyline,yytext());
            }
          case 117: break;
          case 15: 
            { System.out.println("PAREBNTHESIS_A "+yytext());return new Symbol(SimbolosMlg.PARENTHESIS_A, yycolumn,yyline,yytext());
            }
          case 118: break;
          case 16: 
            { System.out.println("PAREBNTHESIS_B "+yytext());return new Symbol(SimbolosMlg.PARENTHESIS_B, yycolumn,yyline,yytext());
            }
          case 119: break;
          case 17: 
            { System.out.println("LESS_THAN "+yytext());return new Symbol(SimbolosMlg.LESS_THAN, yycolumn,yyline,yytext());
            }
          case 120: break;
          case 18: 
            { System.out.println("GREATER_THAN "+yytext());return new Symbol(SimbolosMlg.GREATER_THAN, yycolumn,yyline,yytext());
            }
          case 121: break;
          case 19: 
            { System.out.println("COMMA "+yytext());return new Symbol(SimbolosMlg.COMMA, yycolumn,yyline,yytext());
            }
          case 122: break;
          case 20: 
            { System.out.println("AMPERSON "+yytext());return new Symbol(SimbolosMlg.AMPERSON, yycolumn,yyline,yytext());
            }
          case 123: break;
          case 21: 
            { System.out.println("ERROR "+yytext()); return new Symbol(SimbolosMlg.ERROR,yycolumn,yyline,yytext());
            }
          case 124: break;
          case 22: 
            { return new Symbol(SimbolosMlg.MOD, yycolumn,yyline,yytext());
            }
          case 125: break;
          case 23: 
            { System.out.println("AND "+yytext());return new Symbol(SimbolosMlg.AND, yycolumn,yyline,yytext());
            }
          case 126: break;
          case 24: 
            { System.out.println("COLON "+yytext());return new Symbol(SimbolosMlg.COLON, yycolumn,yyline,yytext());
            }
          case 127: break;
          case 25: 
            { System.out.println("NOT_J "+yytext());return new Symbol(SimbolosMlg.NOT, yycolumn,yyline,yytext());
            }
          case 128: break;
          case 26: 
            { System.out.println("OR "+yytext());return new Symbol(SimbolosMlg.OR, yycolumn,yyline,yytext());
            }
          case 129: break;
          case 27: 
            { return new Symbol(SimbolosMlg.SEMICOLON, yycolumn,yyline,yytext());
            }
          case 130: break;
          case 28: 
            { return new Symbol(SimbolosMlg.LEFT_CB, yycolumn,yyline,yytext());
            }
          case 131: break;
          case 29: 
            { return new Symbol(SimbolosMlg.RIGHT_CB, yycolumn,yyline,yytext());
            }
          case 132: break;
          case 30: 
            { /*return symbol(yyline+1, yycolumn+1, yytext(), sym.JAVA_CODE);*/
            }
          case 133: break;
          case 31: 
            { System.out.println("LEFT_BRACKET "+yytext());return new Symbol(SimbolosMlg.LEFT_BRACKET, yycolumn,yyline,yytext());
            }
          case 134: break;
          case 32: 
            { System.out.println("RIGHT_BRACKET "+yytext());return new Symbol(SimbolosMlg.RIGHT_BRACKET, yycolumn,yyline,yytext());
            }
          case 135: break;
          case 33: 
            { tac.addComment(yytext());
            }
          case 136: break;
          case 34: 
            { System.out.println("IF_VB "+yytext()); return new Symbol(SimbolosMlg.IF, yycolumn,yyline,yytext());
            }
          case 137: break;
          case 35: 
            { System.out.println("TO_VB "+yytext()); return new Symbol(SimbolosMlg.TO_VB, yycolumn,yyline,yytext());
            }
          case 138: break;
          case 36: 
            { System.out.println("LESS_THAN_EQUAL "+yytext());return new Symbol(SimbolosMlg.LESS_THAN_EQUAL, yycolumn,yyline,yytext());
            }
          case 139: break;
          case 37: 
            { System.out.println("GREATER_THAN_EQUAL "+yytext());return new Symbol(SimbolosMlg.GREATER_THAN_EQUAL, yycolumn,yyline,yytext());
            }
          case 140: break;
          case 38: 
            { System.out.println("As "+yytext()); return new Symbol(SimbolosMlg.AS_VB, yycolumn,yyline,yytext());
            }
          case 141: break;
          case 39: 
            { System.out.println("OR "+yytext()); return new Symbol(SimbolosMlg.OR, yycolumn,yyline,yytext());
            }
          case 142: break;
          case 40: 
            { System.out.println("DO_VB "+yytext()); return new Symbol(SimbolosMlg.DO, yycolumn,yyline,yytext());
            }
          case 143: break;
          case 41: 
            { System.out.println("DIFERENT_VB "+yytext());return new Symbol(SimbolosMlg.DIFERENT_VB, yycolumn,yyline,yytext());
            }
          case 144: break;
          case 42: 
            { return new Symbol(SimbolosMlg.IF, yycolumn,yyline,yytext());
            }
          case 145: break;
          case 43: 
            { System.out.println("DIFERENT_J "+yytext());return new Symbol(SimbolosMlg.DIFERENT_VB, yycolumn,yyline,yytext());
            }
          case 146: break;
          case 44: 
            { return new Symbol(SimbolosMlg.DO, yycolumn,yyline,yytext());
            }
          case 147: break;
          case 45: 
            { System.out.println("SUB "+yytext()); return new Symbol(SimbolosMlg.SUB_VB, yycolumn,yyline,yytext());
            }
          case 148: break;
          case 46: 
            { System.out.println("DECIMAL "+yytext()); return new Symbol(SimbolosMlg.ID, yycolumn,yyline,yytext());
            }
          case 149: break;
          case 47: 
            { System.out.println("NOT_VB "+yytext()); return new Symbol(SimbolosMlg.NOT, yycolumn,yyline,yytext());
            }
          case 150: break;
          case 48: 
            { System.out.println("AND_VB "+yytext()); return new Symbol(SimbolosMlg.AND, yycolumn,yyline,yytext());
            }
          case 151: break;
          case 49: 
            { System.out.println("END "+yytext()); return new Symbol(SimbolosMlg.END_VB, yycolumn,yyline,yytext());
            }
          case 152: break;
          case 50: 
            { System.out.println("FOR_VB "+yytext()); return new Symbol(SimbolosMlg.FOR, yycolumn,yyline,yytext());
            }
          case 153: break;
          case 51: 
            { System.out.println("DIM "+yytext()); return new Symbol(SimbolosMlg.DIM_VB, yycolumn,yyline,yytext());
            }
          case 154: break;
          case 52: 
            { System.out.println("MOD "+yytext()); return new Symbol(SimbolosMlg.MOD, yycolumn,yyline,yytext());
            }
          case 155: break;
          case 53: 
            { System.out.println("STRING "+yytext()); return new Symbol(SimbolosMlg.STRING, yycolumn,yyline,yytext());
            }
          case 156: break;
          case 54: 
            { System.out.println("INTEGERJ "+yytext());return new Symbol(SimbolosMlg.INTEGER_TYPE, yycolumn,yyline,yytext());
            }
          case 157: break;
          case 55: 
            { return new Symbol(SimbolosMlg.FOR, yycolumn,yyline,yytext());
            }
          case 158: break;
          case 56: 
            { yybegin(VBCODE);System.out.println("VBCODE "+yytext()); return new Symbol(SimbolosMlg.VB_SEPERATOR, yycolumn,yyline,yytext());
            }
          case 159: break;
          case 57: 
            { return new Symbol(SimbolosMlg.STEP_VB, yycolumn,yyline,yytext());
            }
          case 160: break;
          case 58: 
            { return new Symbol(SimbolosMlg.NEXT_VB, yycolumn,yyline,yytext());
            }
          case 161: break;
          case 59: 
            { return new Symbol(SimbolosMlg.TRUE, yycolumn,yyline,yytext());
            }
          case 162: break;
          case 60: 
            { return new Symbol(SimbolosMlg.THEN_VB, yycolumn,yyline,yytext());
            }
          case 163: break;
          case 61: 
            { return new Symbol(SimbolosMlg.ELSE, yycolumn,yyline,yytext());
            }
          case 164: break;
          case 62: 
            { return new Symbol(SimbolosMlg.LOOP_VB, yycolumn,yyline,yytext());
            }
          case 165: break;
          case 63: 
            { return new Symbol(SimbolosMlg.CASE_VB, yycolumn,yyline,yytext());
            }
          case 166: break;
          case 64: 
            { return new Symbol(SimbolosMlg.CHAR_TYPE, yycolumn,yyline,yytext());
            }
          case 167: break;
          case 65: 
            { yybegin(PYCODE); return new Symbol(SimbolosMlg.PYTHON_SEPERATOR, yycolumn,yyline,yytext());
            }
          case 168: break;
          case 66: 
            { return new Symbol(SimbolosMlg.VOID_J, yycolumn,yyline,yytext());
            }
          case 169: break;
          case 67: 
            { return new Symbol(SimbolosMlg.CASE_J, yycolumn,yyline,yytext());
            }
          case 170: break;
          case 68: 
            { return new Symbol(SimbolosMlg.MAIN, yycolumn,yyline,yytext());
            }
          case 171: break;
          case 69: 
            { return new Symbol(SimbolosMlg.FALSE, yycolumn,yyline,yytext());
            }
          case 172: break;
          case 70: 
            { return new Symbol(SimbolosMlg.FLOAT_TYPE, yycolumn,yyline,yytext());
            }
          case 173: break;
          case 71: 
            { System.out.println("WRITE_VB "+yytext()); return new Symbol(SimbolosMlg.WRITE_VB, yycolumn,yyline,yytext());
            }
          case 174: break;
          case 72: 
            { return new Symbol(SimbolosMlg.WHILE, yycolumn,yyline,yytext());
            }
          case 175: break;
          case 73: 
            { return new Symbol(SimbolosMlg.BREAK, yycolumn,yyline,yytext());
            }
          case 176: break;
          case 74: 
            { return new Symbol(SimbolosMlg.CLASS_J, yycolumn,yyline,yytext());
            }
          case 177: break;
          case 75: 
            { return new Symbol(SimbolosMlg.SCAN_F, yycolumn,yyline,yytext());
            }
          case 178: break;
          case 76: 
            { return new Symbol(SimbolosMlg.GETCH, yycolumn,yyline,yytext());
            }
          case 179: break;
          case 77: 
            { return new Symbol(SimbolosMlg.CONST, yycolumn,yyline,yytext());
            }
          case 180: break;
          case 78: 
            { return new Symbol(SimbolosMlg.SELECT_VB, yycolumn,yyline,yytext());
            }
          case 181: break;
          case 79: 
            { System.out.println("PUBLIC "+yytext()); return new Symbol(SimbolosMlg.PUBLIC, yycolumn,yyline,yytext());
            }
          case 182: break;
          case 80: 
            { System.out.println("JAVA "+yytext());  yybegin(JAVACODE); return new Symbol(SimbolosMlg.JAVA_SEPERATOR, yycolumn,yyline,yytext());
            }
          case 183: break;
          case 81: 
            { return new Symbol(SimbolosMlg.ELSE_IF_VB, yycolumn,yyline,yytext());
            }
          case 184: break;
          case 82: 
            { return new Symbol(SimbolosMlg.RETURN_VB, yycolumn,yyline,yytext());
            }
          case 185: break;
          case 83: 
            { return new Symbol(SimbolosMlg.SWITCH_J, yycolumn,yyline,yytext());
            }
          case 186: break;
          case 84: 
            { return new Symbol(SimbolosMlg.PUBLIC, yycolumn,yyline,yytext());
            }
          case 187: break;
          case 85: 
            { return new Symbol(SimbolosMlg.RETURN_J, yycolumn,yyline,yytext());
            }
          case 188: break;
          case 86: 
            { return new Symbol(SimbolosMlg.PRINTF, yycolumn,yyline,yytext());
            }
          case 189: break;
          case 87: 
            { return new Symbol(SimbolosMlg.CLRSCR, yycolumn,yyline,yytext());
            }
          case 190: break;
          case 88: 
            { System.out.println("INTEGER "+yytext()); return new Symbol(SimbolosMlg.INTEGER_TYPE, yycolumn,yyline,yytext());
            }
          case 191: break;
          case 89: 
            { System.out.println("CONSOLE_VB "+yytext()); return new Symbol(SimbolosMlg.CONSOLE_VB, yycolumn,yyline,yytext());
            }
          case 192: break;
          case 90: 
            { return new Symbol(SimbolosMlg.WRITELN_VB, yycolumn,yyline,yytext());
            }
          case 193: break;
          case 91: 
            { return new Symbol(SimbolosMlg.DEFAULT_J, yycolumn,yyline,yytext());
            }
          case 194: break;
          case 92: 
            { System.out.println("INTINPUT "+yytext()); return new Symbol(SimbolosMlg.INTINPUT, yycolumn,yyline,yytext());
            }
          case 195: break;
          case 93: 
            { System.out.println("FUNCTION_VB "+yytext()); return new Symbol(SimbolosMlg.FUNCTION_VB, yycolumn,yyline,yytext());
            }
          case 196: break;
          case 94: 
            { return new Symbol(SimbolosMlg.INTINPUT, yycolumn,yyline,yytext());
            }
          case 197: break;
          case 95: 
            { System.out.println("INCLUDE "+yytext()); return new Symbol(SimbolosMlg.INCLUDE, yycolumn,yyline,yytext());
            }
          case 198: break;
          case 96: 
            { System.out.println("FLOATINPUT_VB "+yytext()); return new Symbol(SimbolosMlg.FLOATINPUT, yycolumn,yyline,yytext());
            }
          case 199: break;
          case 97: 
            { return new Symbol(SimbolosMlg.CHARINPUT, yycolumn,yyline,yytext());
            }
          case 200: break;
          case 98: 
            { System.out.println("CHARINPUT_VB "+yytext()); return new Symbol(SimbolosMlg.CHARINPUT, yycolumn,yyline,yytext());
            }
          case 201: break;
          case 99: 
            { return new Symbol(SimbolosMlg.FLOATINPUT, yycolumn,yyline,yytext());
            }
          case 202: break;
          case 100: 
            { System.out.println("PR "+yytext()); yybegin(PROGRAM); return new Symbol(SimbolosMlg.PROGRAM_SEPERATOR, yycolumn,yyline,yytext());
            }
          case 203: break;
          case 101: 
            { System.out.println("CHAR "+yytext()); return new Symbol(SimbolosMlg.CHAR, yycolumn,yyline,yytext());
            }
          case 204: break;
          case 102: 
            { return new Symbol(SimbolosMlg.SYSTEM_OUT_PRINT, yycolumn,yyline,yytext());
            }
          case 205: break;
          case 103: 
            { return new Symbol(SimbolosMlg.SYSTEM_OUT_PRINTLN, yycolumn,yyline,yytext());
            }
          case 206: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface SimbolosMlg
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = SimbolosMlg.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java MlgLexicAnalizer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        MlgLexicAnalizer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new MlgLexicAnalizer(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
