/* The following code was generated by JFlex 1.6.1 */

//jflex lexicalMlg.flex
package tac_assembly_generator.languages.analyzers.lexical;
import java_cup.runtime.Symbol;
import tac_assembly_generator.languages.analyzers.syntax.SimbolosMlg;
import tac_assembly_generator.TAC.TranslateControlerTAC;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lexicalMlg.flex</tt>
 */
public class MlgLexicAnalizer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMON_SYMBOLS = 2;
  public static final int VBCODE = 4;
  public static final int JAVACODE = 6;
  public static final int PYCODE = 8;
  public static final int PROGRAM = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\1\61\1\61\1\6\1\73\1\73\1\5\22\0\1\51\1\66"+
    "\1\47\1\74\1\0\1\17\1\60\1\50\1\24\1\25\1\10\1\26"+
    "\1\57\1\27\1\22\1\7\1\4\11\3\1\65\1\70\1\55\1\23"+
    "\1\56\1\0\1\0\1\31\1\21\1\40\1\42\1\32\1\35\1\33"+
    "\1\41\1\12\1\30\1\64\1\36\1\43\1\13\1\37\1\14\1\1"+
    "\1\34\1\2\1\16\1\15\1\20\1\45\1\46\1\62\1\1\1\52"+
    "\1\0\1\54\1\53\1\1\1\0\1\31\1\21\1\40\1\42\1\32"+
    "\1\35\1\33\1\41\1\12\1\30\1\64\1\36\1\43\1\13\1\37"+
    "\1\14\1\1\1\34\1\2\1\16\1\15\1\20\1\45\1\46\1\62"+
    "\1\1\1\71\1\67\1\72\7\0\1\73\72\0\100\1\60\0\2\11"+
    "\115\0\1\44\u1ea8\0\1\73\1\73\u0100\0\1\63\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\3\2\2\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\2\12\1\13\2\14\1\3\1\0"+
    "\4\12\1\0\1\15\1\5\1\16\1\17\11\12\1\0"+
    "\1\12\2\0\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\12\1\25\3\12\1\26\2\12\1\5\5\12\1\25"+
    "\1\12\1\25\1\21\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\36\2\12\1\26\1\5"+
    "\4\12\2\36\1\40\1\12\1\25\2\12\1\26\1\5"+
    "\4\12\1\25\1\41\1\42\1\25\4\0\3\12\2\0"+
    "\1\43\1\12\1\43\4\12\1\44\1\12\1\0\1\45"+
    "\1\46\1\47\1\12\1\47\10\12\1\50\3\12\1\0"+
    "\1\12\1\51\1\12\3\0\2\12\2\0\1\52\2\12"+
    "\1\0\1\53\1\12\1\53\1\12\1\0\2\12\1\54"+
    "\1\55\10\12\1\56\2\0\1\27\1\32\1\54\1\0"+
    "\1\54\2\12\1\0\2\12\1\27\2\12\1\0\10\12"+
    "\6\0\1\57\2\12\1\60\1\0\2\12\1\61\3\12"+
    "\1\0\1\62\1\63\1\12\1\0\4\12\1\64\2\12"+
    "\1\0\2\12\2\65\1\66\1\57\3\0\1\12\1\0"+
    "\1\12\1\67\2\0\2\12\1\0\2\70\1\12\2\0"+
    "\3\12\1\0\2\12\1\71\1\12\1\0\3\12\2\0"+
    "\1\12\1\31\1\0\1\32\3\12\2\70\1\0\6\12"+
    "\1\0\1\12\3\0\1\72\1\73\1\74\1\12\2\0"+
    "\2\12\1\75\1\12\1\76\1\77\1\0\2\100\1\0"+
    "\3\12\1\0\1\12\1\101\2\102\1\12\1\0\1\103"+
    "\1\74\2\0\1\12\1\0\1\12\2\0\2\12\2\0"+
    "\2\12\1\104\2\105\1\12\2\100\2\12\2\106\1\12"+
    "\1\0\1\103\1\12\2\0\3\12\1\0\4\12\1\0"+
    "\1\12\1\0\1\103\2\107\2\0\1\12\2\0\2\12"+
    "\1\0\1\12\2\0\1\12\1\0\2\12\2\110\1\111"+
    "\1\12\2\0\1\12\1\0\2\112\2\113\2\0\2\12"+
    "\2\0\1\12\1\0\1\12\2\114\1\12\1\111\2\115"+
    "\1\0\2\12\2\0\1\12\1\116\1\0\1\12\1\117"+
    "\1\111\1\12\1\0\2\120\1\116\1\0\1\121\2\0"+
    "\2\12\2\122\1\123\2\124\2\125\1\0\1\12\1\0"+
    "\2\12\2\0\1\12\1\121\1\0\1\12\1\0\2\126"+
    "\1\12\2\0\1\12\2\127\1\130\1\0\1\12\1\0"+
    "\2\12\1\0\2\131\2\132\2\0\1\133\1\12\1\133"+
    "\1\0\1\12\1\0\1\12\2\134\1\0\1\12\2\135"+
    "\3\0\1\12\1\0\1\12\1\0\1\12\1\136\2\0"+
    "\2\137\2\140\1\0\1\12\1\0\1\12\2\0\2\141"+
    "\1\0\1\12\1\0\1\12\1\0\1\142\1\0\1\12"+
    "\2\143\3\0\1\12\2\144\1\0\2\145\2\0\2\146"+
    "\1\147\1\150\5\0\1\151\1\0\1\152";

  private static int [] zzUnpackAction() {
    int [] result = new int[532];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\u0225\0\u0262\0\u029f\0\u016e\0\u016e\0\u016e\0\u016e"+
    "\0\u016e\0\u016e\0\u016e\0\u02dc\0\u0319\0\u0356\0\u0393\0\u016e"+
    "\0\u0262\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501\0\u016e"+
    "\0\u053e\0\u016e\0\u016e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f"+
    "\0\u06ac\0\u06e9\0\u0726\0\u0763\0\u07a0\0\u07dd\0\u081a\0\u0857"+
    "\0\u016e\0\u0894\0\u08d1\0\u016e\0\u016e\0\u016e\0\u090e\0\u094b"+
    "\0\u0988\0\u09c5\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6\0\u0b33"+
    "\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1\0\u081a\0\u0cde"+
    "\0\u0d1b\0\u016e\0\u016e\0\u0d58\0\u016e\0\u016e\0\u016e\0\u016e"+
    "\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03\0\u0f40"+
    "\0\u0f7d\0\u0fba\0\u081a\0\u0857\0\u0ff7\0\u1034\0\u1071\0\u10ae"+
    "\0\u10eb\0\u016e\0\u1128\0\u1165\0\u11a2\0\u11df\0\u121c\0\u1259"+
    "\0\u016e\0\u016e\0\u1296\0\u12d3\0\u1310\0\u134d\0\u138a\0\u13c7"+
    "\0\u1404\0\u1441\0\u147e\0\u14bb\0\u016e\0\u14f8\0\u02dc\0\u1535"+
    "\0\u1572\0\u15af\0\u15ec\0\u02dc\0\u1629\0\u1666\0\u016e\0\u016e"+
    "\0\u02dc\0\u16a3\0\u016e\0\u16e0\0\u171d\0\u175a\0\u1797\0\u17d4"+
    "\0\u1811\0\u184e\0\u188b\0\u02dc\0\u18c8\0\u1905\0\u1942\0\u197f"+
    "\0\u19bc\0\u02dc\0\u19f9\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a"+
    "\0\u1b67\0\u1ba4\0\u016e\0\u1be1\0\u1c1e\0\u1c5b\0\u016e\0\u1c98"+
    "\0\u02dc\0\u1cd5\0\u1d12\0\u1d4f\0\u1d8c\0\u016e\0\u016e\0\u1dc9"+
    "\0\u1e06\0\u1e43\0\u1e80\0\u1ebd\0\u1efa\0\u1f37\0\u1f74\0\u02dc"+
    "\0\u1fb1\0\u1fee\0\u016e\0\u016e\0\u202b\0\u2068\0\u20a5\0\u20e2"+
    "\0\u211f\0\u215c\0\u2199\0\u21d6\0\u02dc\0\u2213\0\u2250\0\u228d"+
    "\0\u22ca\0\u2307\0\u2344\0\u2381\0\u23be\0\u23fb\0\u2438\0\u2475"+
    "\0\u24b2\0\u24ef\0\u016e\0\u252c\0\u2569\0\u25a6\0\u02dc\0\u25e3"+
    "\0\u2620\0\u147e\0\u265d\0\u269a\0\u26d7\0\u02dc\0\u2714\0\u2751"+
    "\0\u278e\0\u27cb\0\u02dc\0\u02dc\0\u2808\0\u2845\0\u2882\0\u28bf"+
    "\0\u28fc\0\u2939\0\u02dc\0\u2976\0\u29b3\0\u29f0\0\u2a2d\0\u2a6a"+
    "\0\u016e\0\u02dc\0\u02dc\0\u016e\0\u2aa7\0\u2ae4\0\u2b21\0\u2b5e"+
    "\0\u2b9b\0\u2bd8\0\u016e\0\u2c15\0\u2c52\0\u2c8f\0\u2ccc\0\u2d09"+
    "\0\u2d46\0\u2d83\0\u2dc0\0\u2dfd\0\u2e3a\0\u2e77\0\u2eb4\0\u2ef1"+
    "\0\u2f2e\0\u2f6b\0\u2fa8\0\u02dc\0\u2fe5\0\u3022\0\u305f\0\u309c"+
    "\0\u30d9\0\u3116\0\u2d46\0\u2d83\0\u02dc\0\u3153\0\u02dc\0\u3190"+
    "\0\u31cd\0\u320a\0\u016e\0\u02dc\0\u3247\0\u3284\0\u32c1\0\u32fe"+
    "\0\u333b\0\u3378\0\u33b5\0\u33f2\0\u342f\0\u346c\0\u34a9\0\u34e6"+
    "\0\u016e\0\u016e\0\u02dc\0\u3523\0\u3560\0\u359d\0\u35da\0\u3617"+
    "\0\u02dc\0\u3654\0\u02dc\0\u02dc\0\u3691\0\u36ce\0\u370b\0\u3748"+
    "\0\u3785\0\u37c2\0\u37ff\0\u383c\0\u3879\0\u02dc\0\u02dc\0\u016e"+
    "\0\u38b6\0\u38f3\0\u3930\0\u016e\0\u396d\0\u39aa\0\u39e7\0\u3a24"+
    "\0\u3a61\0\u3a9e\0\u3adb\0\u3b18\0\u3b55\0\u3b92\0\u3bcf\0\u3c0c"+
    "\0\u3c49\0\u016e\0\u016e\0\u02dc\0\u3c86\0\u02dc\0\u016e\0\u3cc3"+
    "\0\u3d00\0\u02dc\0\u016e\0\u3d3d\0\u3d7a\0\u3db7\0\u3df4\0\u3e31"+
    "\0\u3e6e\0\u3eab\0\u3db7\0\u3ee8\0\u3f25\0\u3f62\0\u3f9f\0\u3fdc"+
    "\0\u4019\0\u4056\0\u4093\0\u40d0\0\u02dc\0\u016e\0\u02dc\0\u410d"+
    "\0\u414a\0\u4187\0\u41c4\0\u4201\0\u423e\0\u427b\0\u42b8\0\u42f5"+
    "\0\u4332\0\u436f\0\u43ac\0\u43e9\0\u4426\0\u4463\0\u02dc\0\u016e"+
    "\0\u44a0\0\u44dd\0\u451a\0\u4557\0\u4594\0\u45d1\0\u460e\0\u464b"+
    "\0\u016e\0\u02dc\0\u4688\0\u46c5\0\u4702\0\u473f\0\u477c\0\u47b9"+
    "\0\u47f6\0\u4833\0\u4870\0\u016e\0\u02dc\0\u48ad\0\u48ea\0\u02dc"+
    "\0\u016e\0\u4927\0\u4964\0\u49a1\0\u49de\0\u4a1b\0\u48ea\0\u02dc"+
    "\0\u4a58\0\u4a95\0\u02dc\0\u02dc\0\u4ad2\0\u4b0f\0\u02dc\0\u016e"+
    "\0\u016e\0\u4b4c\0\u02dc\0\u4b89\0\u4bc6\0\u4c03\0\u4c40\0\u016e"+
    "\0\u02dc\0\u016e\0\u016e\0\u02dc\0\u016e\0\u02dc\0\u4c7d\0\u4cba"+
    "\0\u4cf7\0\u4d34\0\u4d71\0\u4dae\0\u4deb\0\u4e28\0\u016e\0\u4e65"+
    "\0\u4ea2\0\u4edf\0\u016e\0\u02dc\0\u4f1c\0\u4f59\0\u4f96\0\u4fd3"+
    "\0\u016e\0\u02dc\0\u02dc\0\u5010\0\u504d\0\u508a\0\u50c7\0\u5104"+
    "\0\u5141\0\u016e\0\u02dc\0\u02dc\0\u016e\0\u517e\0\u51bb\0\u016e"+
    "\0\u51f8\0\u02dc\0\u5235\0\u5272\0\u52af\0\u52ec\0\u02dc\0\u016e"+
    "\0\u5329\0\u5366\0\u016e\0\u02dc\0\u53a3\0\u53e0\0\u541d\0\u545a"+
    "\0\u5497\0\u54d4\0\u5511\0\u554e\0\u02dc\0\u558b\0\u55c8\0\u016e"+
    "\0\u02dc\0\u016e\0\u02dc\0\u5605\0\u5642\0\u567f\0\u56bc\0\u56f9"+
    "\0\u5736\0\u016e\0\u02dc\0\u5773\0\u57b0\0\u57ed\0\u582a\0\u5867"+
    "\0\u016e\0\u58a4\0\u58e1\0\u016e\0\u02dc\0\u591e\0\u595b\0\u5998"+
    "\0\u59d5\0\u016e\0\u02dc\0\u5a12\0\u016e\0\u02dc\0\u5a4f\0\u5a8c"+
    "\0\u016e\0\u02dc\0\u016e\0\u016e\0\u5ac9\0\u5b06\0\u5b43\0\u5b80"+
    "\0\u5bbd\0\u5bfa\0\u5c37\0\u016e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[532];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\2\10\1\11\1\12\2\7\1\13\2\7\5\10"+
    "\1\14\2\10\6\7\14\10\1\7\2\10\13\7\1\10"+
    "\1\7\1\10\10\7\7\0\1\15\1\16\12\0\1\17"+
    "\1\20\1\21\1\22\1\23\46\0\1\24\1\25\2\26"+
    "\1\27\1\30\1\31\1\16\1\32\1\33\1\34\1\35"+
    "\1\24\1\36\1\37\2\24\1\40\1\41\1\42\1\43"+
    "\1\22\1\23\1\24\1\44\1\45\1\24\1\46\1\47"+
    "\1\50\1\51\1\52\1\24\1\53\1\54\1\55\1\56"+
    "\1\24\1\57\1\60\1\61\3\0\1\62\1\63\1\64"+
    "\1\65\1\61\1\24\1\0\1\24\10\0\1\66\1\24"+
    "\1\67\2\26\1\27\1\30\1\31\1\16\1\70\1\71"+
    "\1\24\1\72\1\24\1\73\1\74\1\75\1\76\1\66"+
    "\1\77\1\42\1\43\1\22\1\23\2\24\1\100\1\24"+
    "\1\101\1\102\2\24\1\103\1\24\1\104\1\24\1\105"+
    "\1\106\1\24\1\107\1\66\1\61\3\66\1\110\1\63"+
    "\1\66\1\111\1\61\1\24\1\66\1\24\1\112\1\113"+
    "\1\114\1\115\1\116\1\117\1\0\1\66\1\120\2\24"+
    "\2\26\2\121\1\31\1\16\1\122\1\123\1\124\3\24"+
    "\1\125\2\24\1\120\1\126\1\42\1\43\1\22\1\23"+
    "\1\24\1\127\3\24\1\130\1\24\1\131\1\132\3\24"+
    "\1\120\2\24\1\133\1\134\4\120\1\110\1\63\2\120"+
    "\1\135\1\24\1\120\1\24\10\120\1\66\1\24\1\136"+
    "\2\26\1\27\1\30\1\31\1\16\1\137\1\140\1\24"+
    "\1\141\1\24\1\73\1\142\1\75\1\76\1\40\1\143"+
    "\1\42\1\43\1\22\1\23\2\24\1\100\1\144\1\24"+
    "\1\145\2\24\1\146\1\24\1\104\1\147\1\150\1\106"+
    "\1\24\1\107\1\66\1\61\1\151\1\66\1\152\1\110"+
    "\1\63\1\64\1\111\1\61\1\24\1\66\1\24\1\112"+
    "\1\113\1\114\1\115\1\116\1\117\1\0\1\153\76\0"+
    "\4\10\5\0\5\10\1\0\2\10\6\0\14\10\1\0"+
    "\2\10\13\0\1\10\1\0\1\10\13\0\2\11\15\0"+
    "\1\154\74\0\1\154\61\0\1\155\1\156\103\0\1\157"+
    "\56\0\4\24\5\0\5\24\1\0\2\24\6\0\14\24"+
    "\1\0\2\24\13\0\1\24\1\0\1\24\11\0\4\24"+
    "\5\0\3\24\1\160\1\161\1\0\2\24\6\0\2\24"+
    "\1\162\11\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\13\0\2\26\15\0\1\163\60\0\1\30\101\0\1\164"+
    "\21\0\1\165\40\0\4\24\5\0\1\24\1\166\3\24"+
    "\1\0\2\24\6\0\5\24\1\167\6\24\1\0\2\24"+
    "\13\0\1\24\1\0\1\24\11\0\4\24\5\0\5\24"+
    "\1\0\2\24\6\0\2\24\1\170\4\24\1\171\4\24"+
    "\1\0\2\24\13\0\1\24\1\0\1\24\11\0\4\24"+
    "\5\0\3\24\1\172\1\24\1\0\2\24\6\0\14\24"+
    "\1\0\2\24\13\0\1\24\1\0\1\24\11\0\4\24"+
    "\5\0\5\24\1\0\2\24\6\0\4\24\1\173\2\24"+
    "\1\174\1\24\1\175\2\24\1\0\2\24\13\0\1\24"+
    "\1\0\1\24\27\0\1\176\132\0\1\177\1\200\17\0"+
    "\1\24\1\201\2\24\5\0\1\24\1\202\3\24\1\0"+
    "\2\24\6\0\14\24\1\203\2\24\13\0\1\24\1\0"+
    "\1\24\11\0\4\24\5\0\1\24\1\204\3\24\1\0"+
    "\2\24\6\0\6\24\1\205\5\24\1\0\2\24\13\0"+
    "\1\24\1\0\1\24\11\0\4\24\5\0\5\24\1\0"+
    "\2\24\6\0\2\24\1\206\11\24\1\0\2\24\13\0"+
    "\1\24\1\0\1\24\11\0\4\24\5\0\3\24\1\207"+
    "\1\24\1\0\2\24\6\0\1\24\1\210\4\24\1\211"+
    "\1\212\4\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\11\0\4\24\5\0\5\24\1\0\2\24\6\0\7\24"+
    "\1\213\4\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\11\0\4\24\5\0\5\24\1\0\2\24\6\0\4\24"+
    "\1\214\7\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\11\0\4\24\5\0\5\24\1\0\2\24\6\0\1\24"+
    "\1\215\5\24\1\216\1\24\1\217\2\24\1\0\2\24"+
    "\13\0\1\24\1\0\1\24\11\0\4\24\4\0\1\220"+
    "\1\221\4\24\1\0\2\24\6\0\7\24\1\222\4\24"+
    "\1\0\2\24\13\0\1\24\1\0\1\24\11\0\4\24"+
    "\5\0\5\24\1\0\2\24\6\0\7\24\1\223\4\24"+
    "\1\0\2\24\13\0\1\24\1\0\1\24\25\0\1\224"+
    "\1\225\13\0\1\226\43\0\4\24\5\0\5\24\1\0"+
    "\2\24\6\0\4\24\1\227\4\24\1\230\2\24\1\0"+
    "\2\24\13\0\1\24\1\0\1\24\10\0\47\231\1\0"+
    "\25\231\50\0\1\232\47\0\1\177\32\0\1\233\41\0"+
    "\1\200\52\0\4\24\5\0\5\24\1\0\2\24\6\0"+
    "\14\24\1\0\1\234\1\24\13\0\1\235\1\0\1\24"+
    "\23\0\1\236\21\0\1\237\40\0\4\24\5\0\1\24"+
    "\1\240\3\24\1\0\2\24\6\0\5\24\1\241\6\24"+
    "\1\0\2\24\13\0\1\24\1\0\1\24\11\0\4\24"+
    "\5\0\3\24\1\242\1\24\1\0\2\24\6\0\14\24"+
    "\1\0\2\24\13\0\1\24\1\0\1\24\11\0\4\24"+
    "\5\0\5\24\1\0\2\24\6\0\4\24\1\173\7\24"+
    "\1\0\2\24\13\0\1\24\1\0\1\24\27\0\1\243"+
    "\56\0\4\24\5\0\5\24\1\0\2\24\6\0\7\24"+
    "\1\244\4\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\11\0\4\24\5\0\5\24\1\0\2\24\6\0\4\24"+
    "\1\245\7\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\33\0\1\246\31\0\1\177\1\200\7\0\1\247\7\0"+
    "\4\24\5\0\5\24\1\0\2\24\6\0\6\24\1\250"+
    "\5\24\1\0\2\24\13\0\1\24\1\0\1\24\11\0"+
    "\4\24\5\0\5\24\1\0\2\24\6\0\2\24\1\251"+
    "\11\24\1\0\2\24\13\0\1\24\1\0\1\24\11\0"+
    "\4\24\5\0\5\24\1\0\2\24\6\0\1\24\1\210"+
    "\4\24\1\252\1\253\4\24\1\0\2\24\13\0\1\24"+
    "\1\0\1\24\11\0\4\24\5\0\5\24\1\0\2\24"+
    "\6\0\1\24\1\254\4\24\1\255\2\24\1\256\2\24"+
    "\1\0\2\24\13\0\1\24\1\0\1\24\11\0\4\24"+
    "\5\0\5\24\1\0\2\24\6\0\2\24\1\257\4\24"+
    "\1\260\4\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\55\0\1\261\14\0\1\262\13\0\4\24\5\0\5\24"+
    "\1\0\2\24\6\0\11\24\1\230\2\24\1\0\2\24"+
    "\13\0\1\24\1\0\1\24\33\0\1\177\131\0\1\263"+
    "\103\0\1\264\12\0\2\121\70\0\1\265\10\0\1\266"+
    "\30\0\1\265\31\0\1\24\1\267\2\24\5\0\1\24"+
    "\1\270\3\24\1\0\2\24\6\0\14\24\1\265\2\24"+
    "\13\0\1\24\1\0\1\24\11\0\4\24\5\0\5\24"+
    "\1\0\2\24\6\0\7\24\1\271\4\24\1\0\2\24"+
    "\13\0\1\24\1\0\1\24\27\0\1\272\100\0\1\246"+
    "\42\0\1\247\7\0\4\24\5\0\1\24\1\273\3\24"+
    "\1\0\2\24\6\0\14\24\1\0\2\24\13\0\1\24"+
    "\1\0\1\24\11\0\4\24\5\0\5\24\1\0\2\24"+
    "\6\0\6\24\1\274\5\24\1\0\2\24\13\0\1\24"+
    "\1\0\1\24\11\0\4\24\5\0\5\24\1\0\2\24"+
    "\6\0\4\24\1\275\7\24\1\0\2\24\13\0\1\24"+
    "\1\0\1\24\11\0\4\24\5\0\5\24\1\0\2\24"+
    "\6\0\11\24\1\276\2\24\1\0\2\24\13\0\1\24"+
    "\1\0\1\24\71\0\1\135\14\0\4\24\5\0\5\24"+
    "\1\0\2\24\6\0\10\24\1\277\3\24\1\0\1\234"+
    "\1\24\13\0\1\24\1\0\1\24\23\0\1\300\21\0"+
    "\1\237\40\0\4\24\5\0\1\24\1\301\3\24\1\0"+
    "\2\24\6\0\5\24\1\241\6\24\1\0\2\24\13\0"+
    "\1\24\1\0\1\24\11\0\4\24\5\0\5\24\1\0"+
    "\2\24\6\0\4\24\1\302\7\24\1\0\2\24\13\0"+
    "\1\24\1\0\1\24\65\0\1\177\1\200\7\0\1\247"+
    "\7\0\4\24\5\0\5\24\1\0\2\24\6\0\2\24"+
    "\1\303\11\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\11\0\4\24\5\0\5\24\1\0\2\24\6\0\1\24"+
    "\1\210\4\24\1\304\1\253\4\24\1\0\2\24\13\0"+
    "\1\24\1\0\1\24\11\0\4\24\5\0\5\24\1\0"+
    "\2\24\6\0\1\24\1\254\4\24\1\305\1\306\1\24"+
    "\1\307\2\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\11\0\4\24\5\0\5\24\1\0\2\24\6\0\1\24"+
    "\1\310\12\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\50\0\1\311\4\0\1\261\40\0\2\312\65\0\2\12"+
    "\70\0\10\313\1\0\64\313\10\314\1\315\64\314\20\0"+
    "\1\316\55\0\4\24\5\0\5\24\1\0\1\24\1\317"+
    "\6\0\14\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\11\0\4\24\5\0\5\24\1\0\2\24\6\0\2\24"+
    "\1\320\11\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\11\0\4\24\5\0\5\24\1\0\2\24\6\0\6\24"+
    "\1\321\5\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\13\0\2\322\106\0\1\323\57\0\4\24\5\0\4\24"+
    "\1\324\1\0\2\24\6\0\14\24\1\0\2\24\13\0"+
    "\1\24\1\0\1\24\11\0\4\24\5\0\5\24\1\0"+
    "\2\24\6\0\14\24\1\0\1\24\1\325\13\0\1\24"+
    "\1\0\1\24\11\0\4\24\5\0\4\24\1\326\1\0"+
    "\2\24\6\0\14\24\1\0\2\24\13\0\1\24\1\0"+
    "\1\24\11\0\4\24\5\0\5\24\1\0\1\24\1\327"+
    "\6\0\14\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\11\0\4\24\5\0\3\24\1\330\1\24\1\0\2\24"+
    "\6\0\14\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\11\0\4\24\5\0\5\24\1\0\2\24\6\0\2\24"+
    "\1\331\11\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\40\0\1\332\45\0\4\24\5\0\5\24\1\0\2\24"+
    "\6\0\12\24\1\333\1\24\1\0\2\24\13\0\1\24"+
    "\1\0\1\24\11\0\4\24\5\0\5\24\1\0\2\24"+
    "\6\0\12\24\1\334\1\24\1\0\2\24\13\0\1\24"+
    "\1\0\1\24\11\0\1\24\1\335\2\24\5\0\5\24"+
    "\1\0\2\24\6\0\14\24\1\336\2\24\13\0\1\24"+
    "\1\0\1\24\11\0\4\24\5\0\4\24\1\337\1\0"+
    "\2\24\6\0\14\24\1\0\2\24\13\0\1\24\1\0"+
    "\1\24\11\0\4\24\5\0\1\24\1\340\3\24\1\0"+
    "\2\24\6\0\14\24\1\0\2\24\13\0\1\24\1\0"+
    "\1\24\11\0\4\24\5\0\5\24\1\0\2\24\6\0"+
    "\6\24\1\341\5\24\1\0\2\24\13\0\1\24\1\0"+
    "\1\24\11\0\4\24\5\0\5\24\1\0\2\24\6\0"+
    "\7\24\1\342\4\24\1\0\2\24\13\0\1\24\1\0"+
    "\1\24\11\0\4\24\5\0\5\24\1\0\2\24\6\0"+
    "\4\24\1\343\7\24\1\0\2\24\13\0\1\24\1\0"+
    "\1\24\11\0\4\24\5\0\5\24\1\0\2\24\6\0"+
    "\7\24\1\344\4\24\1\0\2\24\13\0\1\24\1\0"+
    "\1\24\11\0\1\24\1\345\2\24\5\0\5\24\1\0"+
    "\2\24\6\0\14\24\1\346\2\24\13\0\1\24\1\0"+
    "\1\24\11\0\4\24\5\0\1\24\1\347\3\24\1\0"+
    "\2\24\6\0\14\24\1\0\2\24\13\0\1\24\1\0"+
    "\1\24\11\0\4\24\5\0\5\24\1\0\2\24\6\0"+
    "\1\24\1\350\12\24\1\0\2\24\13\0\1\24\1\0"+
    "\1\24\53\0\1\351\32\0\4\24\5\0\5\24\1\0"+
    "\2\24\6\0\13\24\1\352\1\0\2\24\13\0\1\24"+
    "\1\0\1\24\11\0\4\24\5\0\5\24\1\0\2\24"+
    "\6\0\12\24\1\353\1\24\1\0\2\24\13\0\1\24"+
    "\1\0\1\24\31\0\1\354\105\0\1\355\100\0\1\356"+
    "\37\0\4\24\4\0\1\357\1\360\4\24\1\0\2\24"+
    "\6\0\14\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\11\0\4\24\4\0\1\361\1\362\4\24\1\0\2\24"+
    "\6\0\14\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\10\0\47\231\1\363\25\231\51\0\1\364\24\0\4\24"+
    "\4\0\1\365\1\366\4\24\1\0\2\24\6\0\14\24"+
    "\1\0\2\24\13\0\1\24\1\0\1\24\11\0\1\24"+
    "\1\367\2\24\5\0\5\24\1\0\2\24\6\0\14\24"+
    "\1\370\2\24\13\0\1\24\1\0\1\24\26\0\1\371"+
    "\57\0\4\24\5\0\4\24\1\372\1\0\2\24\6\0"+
    "\14\24\1\0\2\24\13\0\1\24\1\0\1\24\11\0"+
    "\4\24\5\0\5\24\1\0\1\24\1\373\6\0\14\24"+
    "\1\0\2\24\13\0\1\24\1\0\1\24\24\0\1\374"+
    "\61\0\4\24\4\0\1\375\1\376\4\24\1\0\2\24"+
    "\6\0\14\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\11\0\4\24\5\0\5\24\1\0\2\24\6\0\2\24"+
    "\1\377\11\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\11\0\1\24\1\u0100\2\24\5\0\5\24\1\0\2\24"+
    "\6\0\14\24\1\u0101\2\24\13\0\1\24\1\0\1\24"+
    "\11\0\4\24\5\0\4\24\1\u0102\1\0\2\24\6\0"+
    "\14\24\1\0\2\24\13\0\1\24\1\0\1\24\11\0"+
    "\4\24\5\0\5\24\1\0\2\24\6\0\7\24\1\u0103"+
    "\4\24\1\0\2\24\13\0\1\24\1\0\1\24\11\0"+
    "\4\24\5\0\5\24\1\0\2\24\6\0\4\24\1\u0104"+
    "\7\24\1\0\2\24\13\0\1\24\1\0\1\24\11\0"+
    "\1\24\1\u0105\2\24\5\0\5\24\1\0\2\24\6\0"+
    "\14\24\1\u0106\2\24\13\0\1\24\1\0\1\24\11\0"+
    "\4\24\5\0\5\24\1\0\2\24\6\0\1\24\1\u0107"+
    "\12\24\1\0\2\24\13\0\1\24\1\0\1\24\11\0"+
    "\4\24\5\0\5\24\1\0\2\24\6\0\1\24\1\u0108"+
    "\12\24\1\0\2\24\13\0\1\24\1\0\1\24\11\0"+
    "\4\24\5\0\5\24\1\0\2\24\6\0\5\24\1\u0109"+
    "\6\24\1\0\2\24\13\0\1\24\1\0\1\24\21\0"+
    "\2\365\64\0\1\370\41\0\1\370\101\0\1\u010a\41\0"+
    "\1\u010b\57\0\4\24\5\0\5\24\1\0\2\24\6\0"+
    "\14\24\1\0\2\24\2\0\1\u010a\10\0\1\24\1\0"+
    "\1\24\11\0\4\24\5\0\4\24\1\u010c\1\0\2\24"+
    "\6\0\14\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\11\0\4\24\5\0\4\24\1\u010d\1\0\2\24\6\0"+
    "\14\24\1\0\2\24\13\0\1\24\1\0\1\24\24\0"+
    "\1\u010e\61\0\4\24\5\0\5\24\1\0\2\24\6\0"+
    "\12\24\1\u010f\1\24\1\0\2\24\13\0\1\24\1\0"+
    "\1\24\11\0\4\24\5\0\5\24\1\0\2\24\6\0"+
    "\7\24\1\u0110\4\24\1\0\2\24\13\0\1\24\1\0"+
    "\1\24\11\0\4\24\5\0\5\24\1\0\2\24\6\0"+
    "\1\24\1\u0111\12\24\1\0\2\24\13\0\1\24\1\0"+
    "\1\24\11\0\4\24\5\0\5\24\1\0\2\24\6\0"+
    "\1\24\1\u0112\12\24\1\0\2\24\13\0\1\24\1\0"+
    "\1\24\26\0\1\u0113\57\0\4\24\5\0\4\24\1\u0114"+
    "\1\0\2\24\6\0\14\24\1\0\2\24\13\0\1\24"+
    "\1\0\1\24\11\0\4\24\4\0\1\u0115\1\u0116\4\24"+
    "\1\0\2\24\6\0\14\24\1\0\2\24\13\0\1\24"+
    "\1\0\1\24\11\0\4\24\5\0\4\24\1\u0117\1\0"+
    "\2\24\6\0\14\24\1\0\2\24\13\0\1\24\1\0"+
    "\1\24\11\0\4\24\5\0\5\24\1\0\2\24\6\0"+
    "\7\24\1\u0118\4\24\1\0\2\24\13\0\1\24\1\0"+
    "\1\24\11\0\4\24\5\0\5\24\1\0\2\24\6\0"+
    "\4\24\1\u0119\7\24\1\0\2\24\13\0\1\24\1\0"+
    "\1\24\11\0\4\24\5\0\1\24\1\u011a\3\24\1\0"+
    "\2\24\6\0\14\24\1\0\2\24\13\0\1\24\1\0"+
    "\1\24\11\0\4\24\5\0\5\24\1\0\2\24\6\0"+
    "\1\24\1\u011b\12\24\1\0\2\24\13\0\1\24\1\0"+
    "\1\24\11\0\4\24\4\0\1\u011c\1\u011d\4\24\1\0"+
    "\2\24\6\0\14\24\1\0\2\24\13\0\1\24\1\0"+
    "\1\24\41\0\1\u011e\56\0\1\u011f\61\0\10\314\1\u0120"+
    "\64\314\7\0\1\u0121\1\315\105\0\1\u0122\54\0\4\24"+
    "\5\0\2\24\1\u0123\2\24\1\0\2\24\6\0\14\24"+
    "\1\0\2\24\13\0\1\24\1\0\1\24\11\0\4\24"+
    "\5\0\5\24\1\0\2\24\6\0\2\24\1\u0124\11\24"+
    "\1\0\2\24\13\0\1\24\1\0\1\24\21\0\2\u0125"+
    "\17\0\1\u0126\43\0\4\24\4\0\1\u0125\1\u0127\4\24"+
    "\1\0\2\24\6\0\2\24\1\u0128\11\24\1\0\2\24"+
    "\13\0\1\24\1\0\1\24\11\0\4\24\5\0\4\24"+
    "\1\u0129\1\0\2\24\6\0\14\24\1\0\2\24\13\0"+
    "\1\24\1\0\1\24\11\0\4\24\5\0\5\24\1\0"+
    "\2\24\6\0\6\24\1\u012a\5\24\1\0\2\24\13\0"+
    "\1\24\1\0\1\24\11\0\4\24\5\0\5\24\1\0"+
    "\2\24\6\0\2\24\1\u012b\11\24\1\0\2\24\13\0"+
    "\1\24\1\0\1\24\11\0\4\24\5\0\1\24\1\u012c"+
    "\3\24\1\0\2\24\6\0\14\24\1\0\2\24\13\0"+
    "\1\24\1\0\1\24\41\0\1\u012d\44\0\4\24\5\0"+
    "\5\24\1\0\2\24\6\0\2\24\1\u012e\11\24\1\0"+
    "\2\24\13\0\1\24\1\0\1\24\42\0\1\u012f\43\0"+
    "\4\24\4\0\1\u0130\1\u0131\4\24\1\0\2\24\6\0"+
    "\14\24\1\0\2\24\13\0\1\24\1\0\1\24\11\0"+
    "\4\24\5\0\5\24\1\0\2\24\6\0\10\24\1\u0132"+
    "\3\24\1\0\2\24\13\0\1\24\1\0\1\24\11\0"+
    "\1\24\1\u0133\2\24\5\0\5\24\1\0\2\24\6\0"+
    "\14\24\1\u0134\2\24\13\0\1\24\1\0\1\24\11\0"+
    "\4\24\5\0\5\24\1\0\2\24\6\0\1\24\1\u0135"+
    "\12\24\1\0\2\24\13\0\1\24\1\0\1\24\11\0"+
    "\4\24\5\0\2\24\1\u0136\2\24\1\0\2\24\6\0"+
    "\14\24\1\0\2\24\13\0\1\24\1\0\1\24\11\0"+
    "\4\24\5\0\5\24\1\0\2\24\6\0\2\24\1\u0137"+
    "\11\24\1\0\2\24\13\0\1\24\1\0\1\24\42\0"+
    "\1\u0138\43\0\1\24\1\u0139\2\24\5\0\5\24\1\0"+
    "\2\24\6\0\14\24\1\u013a\2\24\13\0\1\24\1\0"+
    "\1\24\11\0\4\24\5\0\5\24\1\0\2\24\6\0"+
    "\4\24\1\u013b\7\24\1\0\2\24\13\0\1\24\1\0"+
    "\1\24\24\0\1\u013c\112\0\1\u013d\60\0\1\u013e\57\0"+
    "\4\24\5\0\4\24\1\u013f\1\0\2\24\6\0\14\24"+
    "\1\0\2\24\13\0\1\24\1\0\1\24\46\0\1\u0140"+
    "\37\0\4\24\5\0\5\24\1\0\2\24\6\0\6\24"+
    "\1\u0141\5\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\62\0\1\u0142\40\0\1\u0143\57\0\4\24\5\0\4\24"+
    "\1\u0144\1\0\2\24\6\0\14\24\1\0\2\24\13\0"+
    "\1\24\1\0\1\24\11\0\4\24\5\0\4\24\1\u0145"+
    "\1\0\2\24\6\0\14\24\1\0\2\24\13\0\1\24"+
    "\1\0\1\24\26\0\1\u0146\67\0\2\u0147\63\0\4\24"+
    "\4\0\1\u0147\1\u0148\4\24\1\0\2\24\6\0\14\24"+
    "\1\0\2\24\13\0\1\24\1\0\1\24\11\0\4\24"+
    "\5\0\5\24\1\0\2\24\6\0\6\24\1\u0149\5\24"+
    "\1\0\2\24\13\0\1\24\1\0\1\24\72\0\1\u014a"+
    "\54\0\1\u014b\33\0\4\24\5\0\5\24\1\0\2\24"+
    "\6\0\12\24\1\u014c\1\24\1\0\2\24\13\0\1\24"+
    "\1\0\1\24\11\0\4\24\5\0\5\24\1\0\2\24"+
    "\6\0\1\24\1\u014d\12\24\1\0\2\24\13\0\1\24"+
    "\1\0\1\24\11\0\4\24\5\0\5\24\1\0\2\24"+
    "\6\0\2\24\1\u014e\11\24\1\0\2\24\13\0\1\24"+
    "\1\0\1\24\42\0\1\u014f\43\0\4\24\5\0\3\24"+
    "\1\u0150\1\24\1\0\2\24\6\0\14\24\1\0\2\24"+
    "\13\0\1\24\1\0\1\24\11\0\4\24\5\0\5\24"+
    "\1\0\2\24\6\0\1\24\1\u0151\12\24\1\0\2\24"+
    "\13\0\1\24\1\0\1\24\11\0\4\24\5\0\5\24"+
    "\1\0\2\24\6\0\2\24\1\u0152\11\24\1\0\2\24"+
    "\13\0\1\24\1\0\1\24\42\0\1\u0153\43\0\1\24"+
    "\1\u0154\2\24\5\0\5\24\1\0\2\24\6\0\14\24"+
    "\1\u0155\2\24\13\0\1\24\1\0\1\24\11\0\4\24"+
    "\5\0\5\24\1\0\2\24\6\0\4\24\1\u0156\7\24"+
    "\1\0\2\24\13\0\1\24\1\0\1\24\11\0\4\24"+
    "\5\0\5\24\1\0\2\24\6\0\1\24\1\u0157\12\24"+
    "\1\0\2\24\13\0\1\24\1\0\1\24\23\0\1\u0158"+
    "\115\0\1\u0159\41\0\4\24\5\0\5\24\1\0\2\24"+
    "\6\0\1\24\1\u015a\12\24\1\0\2\24\13\0\1\24"+
    "\1\0\1\24\11\0\4\24\5\0\5\24\1\0\2\24"+
    "\6\0\4\24\1\u015b\7\24\1\0\2\24\13\0\1\24"+
    "\1\0\1\24\11\0\4\24\5\0\1\24\1\u015c\3\24"+
    "\1\0\2\24\6\0\14\24\1\0\2\24\13\0\1\24"+
    "\1\0\1\24\23\0\1\u015d\62\0\4\24\5\0\1\24"+
    "\1\u015e\3\24\1\0\2\24\6\0\14\24\1\0\2\24"+
    "\13\0\1\24\1\0\1\24\11\0\4\24\5\0\5\24"+
    "\1\0\2\24\6\0\10\24\1\u015f\3\24\1\0\2\24"+
    "\13\0\1\24\1\0\1\24\11\0\4\24\5\0\5\24"+
    "\1\0\2\24\6\0\1\24\1\u0160\12\24\1\0\2\24"+
    "\13\0\1\24\1\0\1\24\11\0\1\24\1\u0161\2\24"+
    "\5\0\5\24\1\0\2\24\6\0\14\24\1\u0162\2\24"+
    "\13\0\1\24\1\0\1\24\11\0\1\24\1\u0163\2\24"+
    "\5\0\5\24\1\0\2\24\6\0\14\24\1\u0164\2\24"+
    "\13\0\1\24\1\0\1\24\11\0\4\24\5\0\5\24"+
    "\1\0\2\24\6\0\4\24\1\u0165\7\24\1\0\2\24"+
    "\13\0\1\24\1\0\1\24\23\0\1\u0166\62\0\4\24"+
    "\5\0\1\24\1\u0167\3\24\1\0\2\24\6\0\14\24"+
    "\1\0\2\24\13\0\1\24\1\0\1\24\23\0\1\u0168"+
    "\121\0\1\u0169\34\0\7\314\1\u0121\1\u0120\64\314\1\0"+
    "\4\24\5\0\5\24\1\0\2\24\6\0\10\24\1\u016a"+
    "\3\24\1\0\2\24\13\0\1\24\1\0\1\24\23\0"+
    "\1\u016b\114\0\1\u016c\42\0\4\24\5\0\1\24\1\u016d"+
    "\3\24\1\0\2\24\6\0\14\24\1\0\2\24\13\0"+
    "\1\24\1\0\1\24\11\0\4\24\5\0\5\24\1\0"+
    "\2\24\6\0\3\24\1\u016e\10\24\1\0\2\24\13\0"+
    "\1\24\1\0\1\24\11\0\4\24\4\0\1\u016f\1\u0170"+
    "\4\24\1\0\2\24\6\0\14\24\1\0\2\24\13\0"+
    "\1\24\1\0\1\24\30\0\1\u0171\55\0\4\24\4\0"+
    "\1\u0172\1\u0173\4\24\1\0\2\24\6\0\14\24\1\0"+
    "\2\24\13\0\1\24\1\0\1\24\21\0\2\u0172\75\0"+
    "\1\u0174\62\0\4\24\5\0\1\24\1\u0175\3\24\1\0"+
    "\2\24\6\0\14\24\1\0\2\24\13\0\1\24\1\0"+
    "\1\24\11\0\4\24\5\0\4\24\1\u0176\1\0\2\24"+
    "\6\0\14\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\11\0\4\24\5\0\5\24\1\0\2\24\6\0\2\24"+
    "\1\u0177\11\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\42\0\1\u0178\43\0\4\24\5\0\4\24\1\u0179\1\0"+
    "\2\24\6\0\14\24\1\0\2\24\13\0\1\24\1\0"+
    "\1\24\11\0\4\24\5\0\5\24\1\0\2\24\6\0"+
    "\7\24\1\u017a\4\24\1\0\2\24\13\0\1\24\1\0"+
    "\1\24\47\0\1\u017b\36\0\4\24\4\0\1\u017c\1\u017d"+
    "\4\24\1\0\2\24\6\0\14\24\1\0\2\24\13\0"+
    "\1\24\1\0\1\24\50\0\1\u017e\66\0\1\u017f\43\0"+
    "\4\24\5\0\5\24\1\0\2\24\6\0\2\24\1\u0180"+
    "\11\24\1\0\2\24\13\0\1\24\1\0\1\24\42\0"+
    "\1\u0181\43\0\4\24\5\0\5\24\1\0\2\24\6\0"+
    "\2\24\1\u0182\11\24\1\0\2\24\13\0\1\24\1\0"+
    "\1\24\63\0\1\u0183\61\0\1\u0184\35\0\4\24\5\0"+
    "\5\24\1\0\2\24\6\0\10\24\1\u0185\3\24\1\0"+
    "\2\24\13\0\1\24\1\0\1\24\11\0\4\24\5\0"+
    "\5\24\1\0\2\24\6\0\2\24\1\u0186\11\24\1\0"+
    "\2\24\13\0\1\24\1\0\1\24\42\0\1\u0187\55\0"+
    "\1\u0188\62\0\4\24\5\0\1\24\1\u0189\3\24\1\0"+
    "\2\24\6\0\14\24\1\0\2\24\13\0\1\24\1\0"+
    "\1\24\11\0\4\24\4\0\1\u018a\1\u018b\4\24\1\0"+
    "\2\24\6\0\14\24\1\0\2\24\13\0\1\24\1\0"+
    "\1\24\11\0\4\24\5\0\5\24\1\0\2\24\6\0"+
    "\14\24\1\0\2\24\13\0\1\24\1\u018c\1\u018d\11\0"+
    "\4\24\5\0\5\24\1\0\2\24\6\0\4\24\1\u018e"+
    "\7\24\1\0\2\24\13\0\1\24\1\0\1\24\11\0"+
    "\4\24\5\0\4\24\1\u018f\1\0\2\24\6\0\14\24"+
    "\1\0\2\24\13\0\1\24\1\0\1\24\11\0\1\24"+
    "\1\u0190\2\24\5\0\5\24\1\0\2\24\6\0\14\24"+
    "\1\u0191\2\24\13\0\1\24\1\0\1\24\12\0\1\u0191"+
    "\41\0\1\u0191\31\0\4\24\4\0\1\u0192\1\u0193\4\24"+
    "\1\0\2\24\6\0\14\24\1\0\2\24\13\0\1\24"+
    "\1\0\1\24\11\0\4\24\5\0\3\24\1\u0194\1\24"+
    "\1\0\2\24\6\0\14\24\1\0\2\24\13\0\1\24"+
    "\1\0\1\24\47\0\1\u0195\74\0\1\u0196\36\0\4\24"+
    "\5\0\4\24\1\u0197\1\0\2\24\6\0\14\24\1\0"+
    "\2\24\13\0\1\24\1\0\1\24\11\0\4\24\5\0"+
    "\5\24\1\0\2\24\6\0\5\24\1\u0198\6\24\1\0"+
    "\2\24\13\0\1\24\1\0\1\24\26\0\1\u0199\57\0"+
    "\4\24\5\0\4\24\1\u019a\1\0\2\24\6\0\14\24"+
    "\1\0\2\24\13\0\1\24\1\0\1\24\11\0\4\24"+
    "\5\0\5\24\1\0\2\24\6\0\11\24\1\u019b\2\24"+
    "\1\0\2\24\13\0\1\24\1\0\1\24\11\0\4\24"+
    "\5\0\4\24\1\u019c\1\0\2\24\6\0\14\24\1\0"+
    "\2\24\13\0\1\24\1\0\1\24\11\0\4\24\5\0"+
    "\5\24\1\0\2\24\6\0\10\24\1\u019d\3\24\1\0"+
    "\2\24\13\0\1\24\1\0\1\24\50\0\1\u019e\35\0"+
    "\4\24\5\0\4\24\1\u019f\1\0\2\24\6\0\14\24"+
    "\1\0\2\24\13\0\1\24\1\0\1\24\26\0\1\u01a0"+
    "\113\0\1\u01a1\75\0\1\u01a2\37\0\4\24\5\0\4\24"+
    "\1\u01a3\1\0\2\24\6\0\14\24\1\0\2\24\13\0"+
    "\1\24\1\0\1\24\24\0\1\u01a4\112\0\1\u01a5\43\0"+
    "\4\24\5\0\2\24\1\u01a6\2\24\1\0\2\24\6\0"+
    "\14\24\1\0\2\24\13\0\1\24\1\0\1\24\11\0"+
    "\4\24\5\0\5\24\1\0\2\24\6\0\2\24\1\u01a7"+
    "\11\24\1\0\2\24\13\0\1\24\1\0\1\24\50\0"+
    "\1\u01a8\35\0\4\24\5\0\5\24\1\0\2\24\6\0"+
    "\10\24\1\u01a9\3\24\1\0\2\24\13\0\1\24\1\0"+
    "\1\24\41\0\1\u01aa\100\0\1\u01ab\40\0\4\24\5\0"+
    "\5\24\1\0\2\24\6\0\5\24\1\u01ac\6\24\1\0"+
    "\2\24\13\0\1\24\1\0\1\24\24\0\1\u01ad\61\0"+
    "\4\24\5\0\2\24\1\u01ae\2\24\1\0\2\24\6\0"+
    "\14\24\1\0\2\24\13\0\1\24\1\0\1\24\11\0"+
    "\4\24\4\0\1\u01af\1\u01b0\4\24\1\0\2\24\6\0"+
    "\14\24\1\0\2\24\13\0\1\24\1\0\1\24\11\0"+
    "\4\24\4\0\1\u01b1\1\u01b2\4\24\1\0\2\24\6\0"+
    "\14\24\1\0\2\24\13\0\1\24\1\0\1\24\11\0"+
    "\4\24\5\0\5\24\1\0\2\24\6\0\6\24\1\u01b3"+
    "\5\24\1\0\2\24\13\0\1\24\1\0\1\24\46\0"+
    "\1\u01b4\51\0\1\u01b5\62\0\4\24\5\0\1\24\1\u01b6"+
    "\3\24\1\0\2\24\6\0\14\24\1\0\2\24\13\0"+
    "\1\24\1\0\1\24\26\0\1\u01b7\114\0\1\u01b8\37\0"+
    "\4\24\5\0\5\24\1\0\2\24\6\0\6\24\1\u01b9"+
    "\5\24\1\0\2\24\13\0\1\24\1\0\1\24\60\0"+
    "\1\u01ba\65\0\1\u01bb\34\0\4\24\5\0\5\24\1\0"+
    "\2\24\6\0\11\24\1\u01bc\2\24\1\0\2\24\13\0"+
    "\1\24\1\0\1\24\11\0\4\24\5\0\5\24\1\0"+
    "\2\24\6\0\13\24\1\u01bd\1\0\2\24\13\0\1\24"+
    "\1\0\1\24\53\0\1\u01be\45\0\1\u01bf\61\0\4\24"+
    "\5\0\2\24\1\u01c0\2\24\1\0\2\24\6\0\14\24"+
    "\1\0\2\24\13\0\1\24\1\0\1\24\50\0\1\u01c1"+
    "\35\0\4\24\5\0\5\24\1\0\2\24\6\0\10\24"+
    "\1\u01c2\3\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\11\0\4\24\5\0\1\24\1\u01c3\3\24\1\0\2\24"+
    "\6\0\14\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\11\0\4\24\4\0\1\u01c4\1\u01c5\4\24\1\0\2\24"+
    "\6\0\14\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\23\0\1\u01c6\62\0\4\24\5\0\1\24\1\u01c7\3\24"+
    "\1\0\2\24\6\0\14\24\1\0\2\24\13\0\1\24"+
    "\1\0\1\24\11\0\4\24\5\0\5\24\1\0\2\24"+
    "\6\0\6\24\1\u01c8\5\24\1\0\2\24\13\0\1\24"+
    "\1\0\1\24\26\0\1\247\111\0\1\u01c9\76\0\1\u01ca"+
    "\40\0\4\24\5\0\5\24\1\0\2\24\6\0\5\24"+
    "\1\u01cb\6\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\11\0\4\24\5\0\5\24\1\0\2\24\6\0\4\24"+
    "\1\u01cc\7\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\44\0\1\u01cd\55\0\1\u01ce\74\0\1\u01cf\113\0\1\u01d0"+
    "\41\0\4\24\5\0\3\24\1\u01d1\1\24\1\0\2\24"+
    "\6\0\14\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\11\0\4\24\5\0\5\24\1\0\2\24\6\0\4\24"+
    "\1\u01d2\7\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\47\0\1\u01d3\36\0\4\24\5\0\5\24\1\0\2\24"+
    "\6\0\7\24\1\u01d4\4\24\1\0\2\24\13\0\1\24"+
    "\1\0\1\24\23\0\1\u01d5\62\0\4\24\5\0\1\24"+
    "\1\u01d6\3\24\1\0\2\24\6\0\14\24\1\0\2\24"+
    "\13\0\1\24\1\0\1\24\11\0\4\24\5\0\5\24"+
    "\1\0\2\24\6\0\2\24\1\u01d7\11\24\1\0\2\24"+
    "\13\0\1\24\1\0\1\24\42\0\1\u01d8\56\0\1\u01d9"+
    "\61\0\4\24\5\0\2\24\1\u01da\2\24\1\0\2\24"+
    "\6\0\14\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\23\0\1\u01db\62\0\4\24\5\0\1\24\1\u01dc\3\24"+
    "\1\0\2\24\6\0\14\24\1\0\2\24\13\0\1\24"+
    "\1\0\1\24\60\0\1\u01dd\25\0\4\24\5\0\5\24"+
    "\1\0\2\24\1\u01de\5\0\14\24\1\0\2\24\13\0"+
    "\1\24\1\0\1\24\32\0\1\u01de\67\0\1\u01df\60\0"+
    "\4\24\5\0\3\24\1\u01e0\1\24\1\0\2\24\6\0"+
    "\14\24\1\0\2\24\13\0\1\24\1\0\1\24\23\0"+
    "\1\u01e1\62\0\4\24\5\0\1\24\1\u01e2\3\24\1\0"+
    "\2\24\6\0\14\24\1\0\2\24\13\0\1\24\1\0"+
    "\1\24\24\0\1\u01e3\61\0\4\24\5\0\2\24\1\u01e4"+
    "\2\24\1\0\2\24\6\0\14\24\1\0\2\24\13\0"+
    "\1\24\1\0\1\24\11\0\4\24\5\0\4\24\1\u01e5"+
    "\1\0\2\24\6\0\14\24\1\0\2\24\13\0\1\24"+
    "\1\0\1\24\44\0\1\u01e6\102\0\1\u01e7\50\0\1\u01e8"+
    "\57\0\4\24\5\0\4\24\1\u01e9\1\0\2\24\6\0"+
    "\14\24\1\0\2\24\13\0\1\24\1\0\1\24\23\0"+
    "\1\u01ea\62\0\4\24\5\0\1\24\1\u01eb\3\24\1\0"+
    "\2\24\6\0\14\24\1\0\2\24\13\0\1\24\1\0"+
    "\1\24\24\0\1\u01ec\61\0\4\24\5\0\2\24\1\u01ed"+
    "\2\24\1\0\2\24\6\0\14\24\1\0\2\24\13\0"+
    "\1\24\1\0\1\24\25\0\1\u01ee\60\0\4\24\5\0"+
    "\3\24\1\u01ef\1\24\1\0\2\24\6\0\14\24\1\0"+
    "\2\24\13\0\1\24\1\0\1\24\64\0\1\u01f0\57\0"+
    "\1\u01f1\53\0\1\u01f2\57\0\4\24\5\0\4\24\1\u01f3"+
    "\1\0\2\24\6\0\14\24\1\0\2\24\13\0\1\24"+
    "\1\0\1\24\24\0\1\u01f4\61\0\4\24\5\0\2\24"+
    "\1\u01f5\2\24\1\0\2\24\6\0\14\24\1\0\2\24"+
    "\13\0\1\24\1\0\1\24\25\0\1\u01f6\60\0\4\24"+
    "\5\0\3\24\1\u01f7\1\24\1\0\2\24\6\0\14\24"+
    "\1\0\2\24\13\0\1\24\1\0\1\24\41\0\1\u01f8"+
    "\75\0\1\u01f9\57\0\1\u01fa\60\0\4\24\5\0\3\24"+
    "\1\u01fb\1\24\1\0\2\24\6\0\14\24\1\0\2\24"+
    "\13\0\1\24\1\0\1\24\26\0\1\u01fc\57\0\4\24"+
    "\5\0\4\24\1\u01fd\1\0\2\24\6\0\14\24\1\0"+
    "\2\24\13\0\1\24\1\0\1\24\61\0\1\u01fe\40\0"+
    "\1\u01ff\74\0\1\u0200\60\0\4\24\5\0\3\24\1\u0201"+
    "\1\24\1\0\2\24\6\0\14\24\1\0\2\24\13\0"+
    "\1\24\1\0\1\24\26\0\1\u0202\57\0\4\24\5\0"+
    "\4\24\1\u0203\1\0\2\24\6\0\14\24\1\0\2\24"+
    "\13\0\1\24\1\0\1\24\53\0\1\u0204\47\0\1\u0205"+
    "\57\0\4\24\5\0\4\24\1\u0206\1\0\2\24\6\0"+
    "\14\24\1\0\2\24\13\0\1\24\1\0\1\24\60\0"+
    "\1\u0207\42\0\1\u0208\74\0\1\u0209\57\0\4\24\5\0"+
    "\4\24\1\u020a\1\0\2\24\6\0\14\24\1\0\2\24"+
    "\13\0\1\24\1\0\1\24\41\0\1\u020b\113\0\1\u020c"+
    "\46\0\1\u020d\66\0\1\u020e\114\0\1\u020f\51\0\2\u0210"+
    "\75\0\1\u0211\77\0\1\u0212\114\0\1\u0213\51\0\1\u0214"+
    "\61\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[23668];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\5\1\7\11\4\1\1\11\1\1\1\0"+
    "\4\1\1\0\1\11\1\1\2\11\11\1\1\0\1\1"+
    "\2\0\1\11\2\1\3\11\23\1\2\11\1\1\4\11"+
    "\21\1\1\11\6\1\2\11\1\1\4\0\3\1\2\0"+
    "\1\11\10\1\1\0\2\11\2\1\1\11\14\1\1\0"+
    "\3\1\3\0\2\1\2\0\1\11\2\1\1\0\1\11"+
    "\3\1\1\0\2\1\2\11\11\1\2\0\2\11\1\1"+
    "\1\0\3\1\1\0\5\1\1\0\10\1\2\0\1\10"+
    "\3\0\4\1\1\0\6\1\1\0\3\1\1\0\7\1"+
    "\1\0\2\1\1\11\2\1\1\11\3\0\1\1\1\0"+
    "\1\1\1\11\2\0\2\1\1\0\3\1\2\0\3\1"+
    "\1\0\4\1\1\0\3\1\2\0\2\1\1\0\4\1"+
    "\1\11\1\1\1\0\6\1\1\0\1\1\3\0\2\11"+
    "\2\1\2\0\6\1\1\0\2\1\1\0\3\1\1\0"+
    "\3\1\1\11\1\1\1\0\1\1\1\11\2\0\1\1"+
    "\1\0\1\1\2\0\2\1\2\0\2\1\2\11\3\1"+
    "\1\11\3\1\1\11\1\1\1\0\2\1\2\0\3\1"+
    "\1\0\4\1\1\0\1\1\1\0\1\1\1\11\1\1"+
    "\2\0\1\1\2\0\2\1\1\0\1\1\2\0\1\1"+
    "\1\0\3\1\1\11\2\1\2\0\1\1\1\0\2\1"+
    "\1\11\1\1\2\0\2\1\2\0\1\1\1\0\1\1"+
    "\1\11\4\1\1\11\1\0\2\1\2\0\2\1\1\0"+
    "\4\1\1\0\1\1\2\11\1\0\1\1\2\0\2\1"+
    "\1\11\1\1\2\11\1\1\1\11\1\1\1\0\1\1"+
    "\1\0\2\1\2\0\1\1\1\11\1\0\1\1\1\0"+
    "\1\11\2\1\2\0\1\1\1\11\2\1\1\0\1\1"+
    "\1\0\2\1\1\0\1\11\2\1\1\11\2\0\1\11"+
    "\2\1\1\0\1\1\1\0\2\1\1\11\1\0\1\1"+
    "\1\11\1\1\3\0\1\1\1\0\1\1\1\0\2\1"+
    "\2\0\1\11\1\1\1\11\1\1\1\0\1\1\1\0"+
    "\1\1\2\0\1\11\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\11\1\0\1\1\1\11\1\1\3\0\1\1"+
    "\1\11\1\1\1\0\1\11\1\1\2\0\1\11\1\1"+
    "\2\11\5\0\1\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[532];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    TranslateControlerTAC tac;
    Integer blockIndentation=0;
    public void addTac(TranslateControlerTAC tac){
        this.tac=tac;
    } 


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MlgLexicAnalizer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 248) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(SimbolosMlg.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /*errores.add(new ErrorAnalisis("Lexico",yytext(),"Caracter no aceptado",yyline+1, yycolumn+1));*/
            }
          case 107: break;
          case 2: 
            { 
            }
          case 108: break;
          case 3: 
            { return new Symbol(SimbolosMlg.DIVISION, yycolumn,yyline,yytext());
            }
          case 109: break;
          case 4: 
            { return new Symbol(SimbolosMlg.MULTIPLICATION, yycolumn,yyline,yytext());
            }
          case 110: break;
          case 5: 
            { System.out.println("EQUAL "+yytext());return new Symbol(SimbolosMlg.EQUAL, yycolumn,yyline,yytext());
            }
          case 111: break;
          case 6: 
            { return new Symbol(SimbolosMlg.PARENTHESIS_A, yycolumn,yyline,yytext());
            }
          case 112: break;
          case 7: 
            { return new Symbol(SimbolosMlg.PARENTHESIS_B, yycolumn,yyline,yytext());
            }
          case 113: break;
          case 8: 
            { return new Symbol(SimbolosMlg.PLUS, yycolumn,yyline,yytext());
            }
          case 114: break;
          case 9: 
            { return new Symbol(SimbolosMlg.MINUS, yycolumn,yyline,yytext());
            }
          case 115: break;
          case 10: 
            { System.out.println("ID "+yytext()); return new Symbol(SimbolosMlg.ID, yycolumn,yyline,yytext());
            }
          case 116: break;
          case 11: 
            { System.out.println("NUMBER "+yytext()); return new Symbol(SimbolosMlg.NUMBER, yycolumn,yyline,yytext());
            }
          case 117: break;
          case 12: 
            { System.out.println("SALTO ");
            }
          case 118: break;
          case 13: 
            { System.out.println("POINT "+yytext());return new Symbol(SimbolosMlg.POINT, yycolumn,yyline,yytext());
            }
          case 119: break;
          case 14: 
            { System.out.println("PAREBNTHESIS_A "+yytext());return new Symbol(SimbolosMlg.PARENTHESIS_A, yycolumn,yyline,yytext());
            }
          case 120: break;
          case 15: 
            { System.out.println("PAREBNTHESIS_B "+yytext());return new Symbol(SimbolosMlg.PARENTHESIS_B, yycolumn,yyline,yytext());
            }
          case 121: break;
          case 16: 
            { System.out.println("ESPACIO ");
            }
          case 122: break;
          case 17: 
            { System.out.println("LESS_THAN "+yytext());return new Symbol(SimbolosMlg.LESS_THAN, yycolumn,yyline,yytext());
            }
          case 123: break;
          case 18: 
            { System.out.println("GREATER_THAN "+yytext());return new Symbol(SimbolosMlg.GREATER_THAN, yycolumn,yyline,yytext());
            }
          case 124: break;
          case 19: 
            { System.out.println("COMMA "+yytext());return new Symbol(SimbolosMlg.COMMA, yycolumn,yyline,yytext());
            }
          case 125: break;
          case 20: 
            { System.out.println("AMPERSON "+yytext());return new Symbol(SimbolosMlg.AMPERSON, yycolumn,yyline,yytext());
            }
          case 126: break;
          case 21: 
            { System.out.println("ERROR "+yytext()); return new Symbol(SimbolosMlg.ERROR,yycolumn,yyline,yytext());
            }
          case 127: break;
          case 22: 
            { return new Symbol(SimbolosMlg.MOD, yycolumn,yyline,yytext());
            }
          case 128: break;
          case 23: 
            { System.out.println("AND "+yytext());return new Symbol(SimbolosMlg.AND, yycolumn,yyline,yytext());
            }
          case 129: break;
          case 24: 
            { System.out.println("COLON "+yytext());return new Symbol(SimbolosMlg.COLON, yycolumn,yyline,yytext());
            }
          case 130: break;
          case 25: 
            { System.out.println("NOT_J "+yytext());return new Symbol(SimbolosMlg.NOT, yycolumn,yyline,yytext());
            }
          case 131: break;
          case 26: 
            { System.out.println("OR "+yytext());return new Symbol(SimbolosMlg.OR, yycolumn,yyline,yytext());
            }
          case 132: break;
          case 27: 
            { return new Symbol(SimbolosMlg.SEMICOLON, yycolumn,yyline,yytext());
            }
          case 133: break;
          case 28: 
            { return new Symbol(SimbolosMlg.LEFT_CB, yycolumn,yyline,yytext());
            }
          case 134: break;
          case 29: 
            { return new Symbol(SimbolosMlg.RIGHT_CB, yycolumn,yyline,yytext());
            }
          case 135: break;
          case 30: 
            { System.out.println("ERROR");
            }
          case 136: break;
          case 31: 
            { System.out.println("SALTO ");return new Symbol(SimbolosMlg.LINE_BREAK, yycolumn,yyline,yytext());
            }
          case 137: break;
          case 32: 
            { int in=0;
                                                    for (int i = 0; i < yytext().length(); i++) {
                                                    if (yytext().charAt(i)=='\t') {
                                                            in++;
                                                            
                                                    }
                                                    }if(blockIndentation==in){
                                                        return new Symbol(SimbolosMlg.NODENT, yycolumn,yyline,yytext());
                                                    }else if(blockIndentation>in){
                                                        blockIndentation--;
                                                        return new Symbol(SimbolosMlg.DEDENT, yycolumn,yyline,yytext());
                                                    }else{
                                                        blockIndentation++;
                                                        return new Symbol(SimbolosMlg.INDENT, yycolumn,yyline,yytext());
                                                    }
            }
          case 138: break;
          case 33: 
            { System.out.println("LEFT_BRACKET "+yytext());return new Symbol(SimbolosMlg.LEFT_BRACKET, yycolumn,yyline,yytext());
            }
          case 139: break;
          case 34: 
            { System.out.println("RIGHT_BRACKET "+yytext());return new Symbol(SimbolosMlg.RIGHT_BRACKET, yycolumn,yyline,yytext());
            }
          case 140: break;
          case 35: 
            { System.out.println("IF_VB "+yytext()); return new Symbol(SimbolosMlg.IF, yycolumn,yyline,yytext());
            }
          case 141: break;
          case 36: 
            { System.out.println("TO_VB "+yytext()); return new Symbol(SimbolosMlg.TO_VB, yycolumn,yyline,yytext());
            }
          case 142: break;
          case 37: 
            { System.out.println("LESS_THAN_EQUAL "+yytext());return new Symbol(SimbolosMlg.LESS_THAN_EQUAL, yycolumn,yyline,yytext());
            }
          case 143: break;
          case 38: 
            { System.out.println("GREATER_THAN_EQUAL "+yytext());return new Symbol(SimbolosMlg.GREATER_THAN_EQUAL, yycolumn,yyline,yytext());
            }
          case 144: break;
          case 39: 
            { System.out.println("As "+yytext()); return new Symbol(SimbolosMlg.AS_VB, yycolumn,yyline,yytext());
            }
          case 145: break;
          case 40: 
            { System.out.println("OR "+yytext()); return new Symbol(SimbolosMlg.OR, yycolumn,yyline,yytext());
            }
          case 146: break;
          case 41: 
            { System.out.println("DO_VB "+yytext()); return new Symbol(SimbolosMlg.DO, yycolumn,yyline,yytext());
            }
          case 147: break;
          case 42: 
            { System.out.println("DIFERENT_VB "+yytext());return new Symbol(SimbolosMlg.DIFERENT_VB, yycolumn,yyline,yytext());
            }
          case 148: break;
          case 43: 
            { return new Symbol(SimbolosMlg.IF, yycolumn,yyline,yytext());
            }
          case 149: break;
          case 44: 
            { System.out.println("EQUAL "+yytext());return new Symbol(SimbolosMlg.EQUAL_BOOL, yycolumn,yyline,yytext());
            }
          case 150: break;
          case 45: 
            { System.out.println("DIFERENT_J "+yytext());return new Symbol(SimbolosMlg.DIFERENT_VB, yycolumn,yyline,yytext());
            }
          case 151: break;
          case 46: 
            { return new Symbol(SimbolosMlg.DO, yycolumn,yyline,yytext());
            }
          case 152: break;
          case 47: 
            { System.out.println("SUB "+yytext()); return new Symbol(SimbolosMlg.SUB_VB, yycolumn,yyline,yytext());
            }
          case 153: break;
          case 48: 
            { System.out.println("DECIMAL "+yytext()); return new Symbol(SimbolosMlg.DECIMAL, yycolumn,yyline,yytext());
            }
          case 154: break;
          case 49: 
            { System.out.println("NOT_VB "+yytext()); return new Symbol(SimbolosMlg.NOT, yycolumn,yyline,yytext());
            }
          case 155: break;
          case 50: 
            { System.out.println("AND_VB "+yytext()); return new Symbol(SimbolosMlg.AND, yycolumn,yyline,yytext());
            }
          case 156: break;
          case 51: 
            { System.out.println("END "+yytext()); return new Symbol(SimbolosMlg.END_VB, yycolumn,yyline,yytext());
            }
          case 157: break;
          case 52: 
            { System.out.println("FOR_VB "+yytext()); return new Symbol(SimbolosMlg.FOR, yycolumn,yyline,yytext());
            }
          case 158: break;
          case 53: 
            { System.out.println("DIM "+yytext()); return new Symbol(SimbolosMlg.DIM_VB, yycolumn,yyline,yytext());
            }
          case 159: break;
          case 54: 
            { System.out.println("MOD "+yytext()); return new Symbol(SimbolosMlg.MOD, yycolumn,yyline,yytext());
            }
          case 160: break;
          case 55: 
            { System.out.println("STRING "+yytext()); return new Symbol(SimbolosMlg.STRING, yycolumn,yyline,yytext());
            }
          case 161: break;
          case 56: 
            { System.out.println("INTEGERJ "+yytext());return new Symbol(SimbolosMlg.INTEGER_TYPE, yycolumn,yyline,yytext());
            }
          case 162: break;
          case 57: 
            { return new Symbol(SimbolosMlg.FOR, yycolumn,yyline,yytext());
            }
          case 163: break;
          case 58: 
            { tac.addComment(yytext());
            }
          case 164: break;
          case 59: 
            { yybegin(VBCODE);System.out.println("VBCODE "+yytext()); return new Symbol(SimbolosMlg.VB_SEPERATOR, yycolumn,yyline,yytext());
            }
          case 165: break;
          case 60: 
            { return new Symbol(SimbolosMlg.STEP_VB, yycolumn,yyline,yytext());
            }
          case 166: break;
          case 61: 
            { return new Symbol(SimbolosMlg.NEXT_VB, yycolumn,yyline,yytext());
            }
          case 167: break;
          case 62: 
            { return new Symbol(SimbolosMlg.TRUE, yycolumn,yyline,yytext());
            }
          case 168: break;
          case 63: 
            { return new Symbol(SimbolosMlg.THEN_VB, yycolumn,yyline,yytext());
            }
          case 169: break;
          case 64: 
            { return new Symbol(SimbolosMlg.ELSE, yycolumn,yyline,yytext());
            }
          case 170: break;
          case 65: 
            { return new Symbol(SimbolosMlg.LOOP_VB, yycolumn,yyline,yytext());
            }
          case 171: break;
          case 66: 
            { return new Symbol(SimbolosMlg.CASE_VB, yycolumn,yyline,yytext());
            }
          case 172: break;
          case 67: 
            { return new Symbol(SimbolosMlg.CHAR_TYPE, yycolumn,yyline,yytext());
            }
          case 173: break;
          case 68: 
            { yybegin(PYCODE); return new Symbol(SimbolosMlg.PYTHON_SEPERATOR, yycolumn,yyline,yytext());
            }
          case 174: break;
          case 69: 
            { return new Symbol(SimbolosMlg.VOID_J, yycolumn,yyline,yytext());
            }
          case 175: break;
          case 70: 
            { return new Symbol(SimbolosMlg.CASE_J, yycolumn,yyline,yytext());
            }
          case 176: break;
          case 71: 
            { return new Symbol(SimbolosMlg.MAIN, yycolumn,yyline,yytext());
            }
          case 177: break;
          case 72: 
            { return new Symbol(SimbolosMlg.FALSE, yycolumn,yyline,yytext());
            }
          case 178: break;
          case 73: 
            { return new Symbol(SimbolosMlg.FLOAT_TYPE, yycolumn,yyline,yytext());
            }
          case 179: break;
          case 74: 
            { System.out.println("WRITE_VB "+yytext()); return new Symbol(SimbolosMlg.WRITE_VB, yycolumn,yyline,yytext());
            }
          case 180: break;
          case 75: 
            { return new Symbol(SimbolosMlg.WHILE, yycolumn,yyline,yytext());
            }
          case 181: break;
          case 76: 
            { return new Symbol(SimbolosMlg.BREAK, yycolumn,yyline,yytext());
            }
          case 182: break;
          case 77: 
            { return new Symbol(SimbolosMlg.CLASS_J, yycolumn,yyline,yytext());
            }
          case 183: break;
          case 78: 
            { return new Symbol(SimbolosMlg.SCAN_F, yycolumn,yyline,yytext());
            }
          case 184: break;
          case 79: 
            { return new Symbol(SimbolosMlg.GETCH, yycolumn,yyline,yytext());
            }
          case 185: break;
          case 80: 
            { return new Symbol(SimbolosMlg.CONST, yycolumn,yyline,yytext());
            }
          case 186: break;
          case 81: 
            { return new Symbol(SimbolosMlg.SELECT_VB, yycolumn,yyline,yytext());
            }
          case 187: break;
          case 82: 
            { System.out.println("PUBLIC "+yytext()); return new Symbol(SimbolosMlg.PUBLIC, yycolumn,yyline,yytext());
            }
          case 188: break;
          case 83: 
            { System.out.println("JAVA "+yytext());  yybegin(JAVACODE); return new Symbol(SimbolosMlg.JAVA_SEPERATOR, yycolumn,yyline,yytext());
            }
          case 189: break;
          case 84: 
            { return new Symbol(SimbolosMlg.ELSE_IF_VB, yycolumn,yyline,yytext());
            }
          case 190: break;
          case 85: 
            { return new Symbol(SimbolosMlg.RETURN_VB, yycolumn,yyline,yytext());
            }
          case 191: break;
          case 86: 
            { return new Symbol(SimbolosMlg.SWITCH_J, yycolumn,yyline,yytext());
            }
          case 192: break;
          case 87: 
            { return new Symbol(SimbolosMlg.PUBLIC, yycolumn,yyline,yytext());
            }
          case 193: break;
          case 88: 
            { return new Symbol(SimbolosMlg.RETURN_J, yycolumn,yyline,yytext());
            }
          case 194: break;
          case 89: 
            { return new Symbol(SimbolosMlg.PRINTF, yycolumn,yyline,yytext());
            }
          case 195: break;
          case 90: 
            { return new Symbol(SimbolosMlg.CLRSCR, yycolumn,yyline,yytext());
            }
          case 196: break;
          case 91: 
            { System.out.println("INTEGER "+yytext()); return new Symbol(SimbolosMlg.INTEGER_TYPE, yycolumn,yyline,yytext());
            }
          case 197: break;
          case 92: 
            { System.out.println("CONSOLE_VB "+yytext()); return new Symbol(SimbolosMlg.CONSOLE_VB, yycolumn,yyline,yytext());
            }
          case 198: break;
          case 93: 
            { return new Symbol(SimbolosMlg.WRITELN_VB, yycolumn,yyline,yytext());
            }
          case 199: break;
          case 94: 
            { return new Symbol(SimbolosMlg.DEFAULT_J, yycolumn,yyline,yytext());
            }
          case 200: break;
          case 95: 
            { System.out.println("INTINPUT "+yytext()); return new Symbol(SimbolosMlg.INTINPUT, yycolumn,yyline,yytext());
            }
          case 201: break;
          case 96: 
            { System.out.println("FUNCTION_VB "+yytext()); return new Symbol(SimbolosMlg.FUNCTION_VB, yycolumn,yyline,yytext());
            }
          case 202: break;
          case 97: 
            { return new Symbol(SimbolosMlg.INTINPUT, yycolumn,yyline,yytext());
            }
          case 203: break;
          case 98: 
            { System.out.println("INCLUDE "+yytext()); return new Symbol(SimbolosMlg.INCLUDE, yycolumn,yyline,yytext());
            }
          case 204: break;
          case 99: 
            { System.out.println("FLOATINPUT_VB "+yytext()); return new Symbol(SimbolosMlg.FLOATINPUT, yycolumn,yyline,yytext());
            }
          case 205: break;
          case 100: 
            { return new Symbol(SimbolosMlg.CHARINPUT, yycolumn,yyline,yytext());
            }
          case 206: break;
          case 101: 
            { System.out.println("CHARINPUT_VB "+yytext()); return new Symbol(SimbolosMlg.CHARINPUT, yycolumn,yyline,yytext());
            }
          case 207: break;
          case 102: 
            { return new Symbol(SimbolosMlg.FLOATINPUT, yycolumn,yyline,yytext());
            }
          case 208: break;
          case 103: 
            { System.out.println("PR "+yytext()); yybegin(PROGRAM); return new Symbol(SimbolosMlg.PROGRAM_SEPERATOR, yycolumn,yyline,yytext());
            }
          case 209: break;
          case 104: 
            { System.out.println("CHAR "+yytext()); return new Symbol(SimbolosMlg.CHAR, yycolumn,yyline,yytext());
            }
          case 210: break;
          case 105: 
            { return new Symbol(SimbolosMlg.SYSTEM_OUT_PRINT, yycolumn,yyline,yytext());
            }
          case 211: break;
          case 106: 
            { return new Symbol(SimbolosMlg.SYSTEM_OUT_PRINTLN, yycolumn,yyline,yytext());
            }
          case 212: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface SimbolosMlg
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = SimbolosMlg.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java MlgLexicAnalizer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        MlgLexicAnalizer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new MlgLexicAnalizer(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
