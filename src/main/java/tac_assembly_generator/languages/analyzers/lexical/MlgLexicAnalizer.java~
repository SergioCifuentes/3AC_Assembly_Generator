/* The following code was generated by JFlex 1.6.1 */

//jflex lexicalMlg.flex
package tac_assembly_generator.languages.analyzers.lexical;
import java_cup.runtime.Symbol;
import tac_assembly_generator.languages.analyzers.syntax.SimbolosMlg;
import tac_assembly_generator.TAC.TranslateControlerTAC;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lexicalMlg.flex</tt>
 */
public class MlgLexicAnalizer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMON_SYMBOLS = 2;
  public static final int VBCODE = 4;
  public static final int JAVACODE = 6;
  public static final int PYCODE = 8;
  public static final int PROGRAM = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\1\74\1\61\1\6\1\73\1\73\1\5\22\0\1\51\1\66"+
    "\1\47\1\75\1\0\1\17\1\60\1\50\1\24\1\25\1\10\1\26"+
    "\1\57\1\27\1\22\1\7\1\4\11\3\1\65\1\70\1\55\1\23"+
    "\1\56\1\0\1\0\1\31\1\21\1\40\1\42\1\32\1\35\1\33"+
    "\1\41\1\12\1\30\1\64\1\36\1\43\1\13\1\37\1\14\1\1"+
    "\1\34\1\2\1\16\1\15\1\20\1\45\1\46\1\62\1\1\1\52"+
    "\1\0\1\54\1\53\1\1\1\0\1\31\1\21\1\40\1\42\1\32"+
    "\1\35\1\33\1\41\1\12\1\30\1\64\1\36\1\43\1\13\1\37"+
    "\1\14\1\1\1\34\1\2\1\16\1\15\1\20\1\45\1\46\1\62"+
    "\1\1\1\71\1\67\1\72\7\0\1\73\72\0\100\1\60\0\2\11"+
    "\115\0\1\44\u1ea8\0\1\73\1\73\u0100\0\1\63\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\3\2\2\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\2\12\1\13\2\14\1\3\1\0"+
    "\4\12\1\0\1\15\1\5\11\12\1\0\1\12\2\0"+
    "\1\2\1\16\1\17\1\20\1\21\1\22\2\23\1\24"+
    "\1\22\3\23\1\25\2\23\1\26\1\27\1\30\1\31"+
    "\5\23\1\22\1\23\1\22\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\45\3\23\1\25\1\27\7\23\2\45\1\46"+
    "\1\23\1\22\2\23\1\25\1\27\5\23\2\22\1\47"+
    "\1\50\1\22\1\0\1\51\2\0\3\12\2\0\1\52"+
    "\1\12\1\52\4\12\1\53\1\12\1\0\1\54\1\55"+
    "\1\56\1\12\1\56\10\12\1\57\3\12\1\0\1\12"+
    "\1\60\1\12\3\0\2\12\2\0\1\61\2\23\2\0"+
    "\1\23\1\52\2\23\1\0\2\23\1\27\1\62\1\63"+
    "\1\64\11\23\1\60\2\0\1\23\1\0\1\36\1\41"+
    "\1\27\1\65\1\27\1\65\2\23\1\0\5\23\1\36"+
    "\2\23\1\66\1\0\2\23\1\0\12\23\4\0\2\51"+
    "\3\0\1\67\2\12\1\70\1\0\2\12\1\71\3\12"+
    "\1\0\1\72\1\73\1\12\1\0\4\12\1\74\2\12"+
    "\1\0\2\12\2\75\1\25\1\67\3\0\1\12\1\0"+
    "\1\12\1\76\2\0\2\23\1\0\1\77\2\100\2\23"+
    "\2\0\3\23\1\0\3\23\1\74\1\23\1\0\4\23"+
    "\2\0\1\23\1\40\1\0\1\23\1\0\1\41\1\0"+
    "\5\23\1\101\1\0\1\23\1\0\1\23\2\100\1\0"+
    "\4\23\1\0\4\23\1\0\1\23\1\0\1\102\2\0"+
    "\1\103\1\104\1\12\2\0\2\12\1\105\1\12\1\106"+
    "\1\107\1\0\2\110\1\0\3\12\1\0\1\12\1\111"+
    "\2\112\1\12\1\0\1\113\1\104\2\0\1\12\1\0"+
    "\1\12\2\0\2\23\1\0\2\23\1\106\1\114\2\115"+
    "\1\23\2\110\3\23\2\116\1\23\1\0\1\113\2\23"+
    "\2\0\1\23\1\0\2\117\4\23\1\0\1\23\1\0"+
    "\1\23\1\0\3\23\2\120\1\23\1\0\1\23\1\0"+
    "\1\113\1\23\2\121\2\0\1\12\2\0\2\12\1\0"+
    "\1\12\2\0\1\12\1\0\2\12\2\122\1\123\1\12"+
    "\2\0\1\12\1\0\2\124\2\125\2\0\2\23\1\0"+
    "\2\23\2\126\1\23\1\122\1\123\2\127\1\0\2\23"+
    "\1\125\1\0\2\130\1\0\1\131\2\23\1\0\1\132"+
    "\1\0\1\23\1\0\1\23\1\133\1\123\1\23\1\0"+
    "\2\134\1\23\1\132\1\0\1\135\2\0\2\12\2\136"+
    "\1\137\2\140\2\141\1\0\3\12\2\0\1\12\1\135"+
    "\1\0\1\12\1\0\2\142\1\23\1\0\1\23\1\136"+
    "\1\143\1\0\1\23\1\0\2\23\1\0\1\144\1\0"+
    "\2\145\2\146\2\147\1\23\2\0\1\150\1\12\1\150"+
    "\1\0\2\12\2\151\1\0\1\12\2\152\2\0\1\23"+
    "\1\0\1\23\1\0\1\23\1\153\2\0\1\154\1\0"+
    "\2\155\2\156\1\12\1\0\1\12\2\0\1\155\1\0"+
    "\1\23\1\0\1\23\2\0\1\157\1\12\2\160\3\0"+
    "\1\23\2\161\2\0\1\161\2\0\2\162\1\163\1\164"+
    "\5\0\1\165\1\0\1\166";

  private static int [] zzUnpackAction() {
    int [] result = new int[602];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u0174\0\u0174\0\u0174\0\u0174"+
    "\0\u0174\0\u0174\0\u0174\0\u02e8\0\u0326\0\u0364\0\u03a2\0\u0174"+
    "\0\u026c\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8\0\u0516\0\u0174"+
    "\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8\0\u0706"+
    "\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c\0\u087a\0\u0174\0\u08b8"+
    "\0\u08f6\0\u0174\0\u0174\0\u0174\0\u0934\0\u0972\0\u09b0\0\u09ee"+
    "\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62\0\u0174\0\u0ba0"+
    "\0\u0174\0\u0174\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14"+
    "\0\u0d52\0\u0d90\0\u0174\0\u0dce\0\u0e0c\0\u0174\0\u0e4a\0\u0174"+
    "\0\u0174\0\u0e88\0\u0174\0\u0174\0\u0174\0\u0174\0\u0ec6\0\u0f04"+
    "\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4"+
    "\0\u1132\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u12a6\0\u12e4"+
    "\0\u1322\0\u1360\0\u139e\0\u0174\0\u13dc\0\u141a\0\u1458\0\u1496"+
    "\0\u14d4\0\u1512\0\u1550\0\u158e\0\u0174\0\u0174\0\u15cc\0\u160a"+
    "\0\u1648\0\u1686\0\u16c4\0\u1702\0\u1740\0\u177e\0\u17bc\0\u17fa"+
    "\0\u0174\0\u1838\0\u02e8\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u02e8"+
    "\0\u196e\0\u19ac\0\u0174\0\u0174\0\u02e8\0\u19ea\0\u0174\0\u1a28"+
    "\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda\0\u02e8"+
    "\0\u1c18\0\u1c56\0\u1c94\0\u1cd2\0\u1d10\0\u02e8\0\u1d4e\0\u1d8c"+
    "\0\u1dca\0\u1e08\0\u1e46\0\u1e84\0\u1ec2\0\u1f00\0\u0174\0\u1f3e"+
    "\0\u1f7c\0\u1fba\0\u1ff8\0\u2036\0\u0934\0\u2074\0\u20b2\0\u20f0"+
    "\0\u212e\0\u216c\0\u0174\0\u0174\0\u0174\0\u0174\0\u21aa\0\u21e8"+
    "\0\u2226\0\u2264\0\u22a2\0\u22e0\0\u231e\0\u235c\0\u239a\0\u0934"+
    "\0\u23d8\0\u2416\0\u2454\0\u122a\0\u0174\0\u0174\0\u2492\0\u24d0"+
    "\0\u250e\0\u254c\0\u258a\0\u25c8\0\u2606\0\u2644\0\u2682\0\u26c0"+
    "\0\u26fe\0\u273c\0\u0934\0\u277a\0\u27b8\0\u0174\0\u27f6\0\u2834"+
    "\0\u2872\0\u28b0\0\u28ee\0\u292c\0\u296a\0\u29a8\0\u29e6\0\u2a24"+
    "\0\u2a62\0\u2aa0\0\u2ade\0\u2b1c\0\u2b5a\0\u2b98\0\u2bd6\0\u2c14"+
    "\0\u2c52\0\u0174\0\u2c90\0\u2cce\0\u2d0c\0\u02e8\0\u2d4a\0\u2d88"+
    "\0\u17bc\0\u2dc6\0\u2e04\0\u2e42\0\u02e8\0\u2e80\0\u2ebe\0\u2efc"+
    "\0\u2f3a\0\u02e8\0\u02e8\0\u2f78\0\u2fb6\0\u2ff4\0\u3032\0\u3070"+
    "\0\u30ae\0\u02e8\0\u30ec\0\u312a\0\u3168\0\u31a6\0\u31e4\0\u0174"+
    "\0\u02e8\0\u02e8\0\u0174\0\u3222\0\u3260\0\u329e\0\u32dc\0\u331a"+
    "\0\u3358\0\u0174\0\u3396\0\u33d4\0\u3412\0\u3450\0\u348e\0\u1fba"+
    "\0\u34cc\0\u350a\0\u3548\0\u3586\0\u35c4\0\u3602\0\u3640\0\u367e"+
    "\0\u36bc\0\u36fa\0\u3738\0\u3776\0\u37b4\0\u0934\0\u37f2\0\u3830"+
    "\0\u386e\0\u38ac\0\u38ea\0\u3928\0\u3966\0\u34cc\0\u350a\0\u0934"+
    "\0\u39a4\0\u39e2\0\u3a20\0\u0934\0\u3a5e\0\u3a9c\0\u3ada\0\u3b18"+
    "\0\u3b56\0\u3b94\0\u0934\0\u3bd2\0\u3c10\0\u3c4e\0\u3c8c\0\u0174"+
    "\0\u0934\0\u3cca\0\u3d08\0\u3d46\0\u3d84\0\u3dc2\0\u3e00\0\u3e3e"+
    "\0\u3e7c\0\u3eba\0\u3ef8\0\u3f36\0\u3f74\0\u3fb2\0\u0174\0\u3ff0"+
    "\0\u402e\0\u0174\0\u02e8\0\u406c\0\u40aa\0\u40e8\0\u4126\0\u4164"+
    "\0\u02e8\0\u41a2\0\u02e8\0\u02e8\0\u41e0\0\u421e\0\u425c\0\u429a"+
    "\0\u42d8\0\u4316\0\u4354\0\u4392\0\u43d0\0\u02e8\0\u02e8\0\u0174"+
    "\0\u440e\0\u444c\0\u448a\0\u0174\0\u44c8\0\u4506\0\u4544\0\u4582"+
    "\0\u45c0\0\u45fe\0\u463c\0\u467a\0\u46b8\0\u46f6\0\u4734\0\u4772"+
    "\0\u0934\0\u0174\0\u0174\0\u0934\0\u47b0\0\u0934\0\u0174\0\u47ee"+
    "\0\u482c\0\u486a\0\u0934\0\u0174\0\u48a8\0\u48e6\0\u4924\0\u4962"+
    "\0\u49a0\0\u49de\0\u4a1c\0\u4a5a\0\u4a98\0\u0174\0\u0934\0\u4ad6"+
    "\0\u4b14\0\u4b52\0\u4924\0\u4b90\0\u4bce\0\u4c0c\0\u4c4a\0\u4c88"+
    "\0\u4cc6\0\u4d04\0\u4d42\0\u0934\0\u0174\0\u4d80\0\u4dbe\0\u4dfc"+
    "\0\u4e3a\0\u0934\0\u4e78\0\u0174\0\u0934\0\u4eb6\0\u4ef4\0\u4f32"+
    "\0\u4f70\0\u4fae\0\u4fec\0\u502a\0\u5068\0\u50a6\0\u50e4\0\u5122"+
    "\0\u5160\0\u519e\0\u51dc\0\u521a\0\u02e8\0\u0174\0\u5258\0\u5296"+
    "\0\u52d4\0\u5312\0\u5350\0\u538e\0\u53cc\0\u540a\0\u0174\0\u02e8"+
    "\0\u5448\0\u5486\0\u54c4\0\u5502\0\u5540\0\u557e\0\u55bc\0\u0174"+
    "\0\u0934\0\u55fa\0\u0934\0\u5638\0\u0934\0\u0174\0\u5676\0\u56b4"+
    "\0\u56f2\0\u0934\0\u5730\0\u0174\0\u0934\0\u576e\0\u0934\0\u57ac"+
    "\0\u5638\0\u57ea\0\u0934\0\u5828\0\u5866\0\u58a4\0\u58e2\0\u0934"+
    "\0\u0934\0\u5920\0\u595e\0\u0934\0\u0174\0\u599c\0\u0174\0\u59da"+
    "\0\u02e8\0\u5a18\0\u5a56\0\u5a94\0\u5ad2\0\u0174\0\u02e8\0\u0174"+
    "\0\u0174\0\u02e8\0\u0174\0\u02e8\0\u5b10\0\u5b4e\0\u5b8c\0\u5bca"+
    "\0\u5c08\0\u5c46\0\u5c84\0\u0174\0\u5cc2\0\u5d00\0\u5d3e\0\u0174"+
    "\0\u0934\0\u5d7c\0\u5dba\0\u5df8\0\u0934\0\u0934\0\u5e36\0\u5e74"+
    "\0\u5eb2\0\u5ef0\0\u5f2e\0\u5f6c\0\u0934\0\u5faa\0\u0174\0\u0934"+
    "\0\u0174\0\u0934\0\u0934\0\u0174\0\u5fe8\0\u6026\0\u6064\0\u0174"+
    "\0\u60a2\0\u02e8\0\u60e0\0\u611e\0\u615c\0\u02e8\0\u0174\0\u619a"+
    "\0\u61d8\0\u0174\0\u02e8\0\u6216\0\u6254\0\u6292\0\u62d0\0\u630e"+
    "\0\u634c\0\u638a\0\u0934\0\u63c8\0\u6406\0\u0934\0\u6444\0\u0174"+
    "\0\u02e8\0\u0174\0\u02e8\0\u6482\0\u64c0\0\u64fe\0\u653c\0\u657a"+
    "\0\u0934\0\u65b8\0\u65f6\0\u6634\0\u6672\0\u66b0\0\u66ee\0\u0174"+
    "\0\u672c\0\u0174\0\u02e8\0\u676a\0\u67a8\0\u67e6\0\u6824\0\u0174"+
    "\0\u0934\0\u6862\0\u68a0\0\u02e8\0\u68de\0\u691c\0\u0174\0\u0934"+
    "\0\u0174\0\u0174\0\u695a\0\u6998\0\u69d6\0\u6a14\0\u6a52\0\u6a90"+
    "\0\u6ace\0\u0174";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[602];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\2\10\1\11\1\12\2\7\1\13\2\7\5\10"+
    "\1\14\2\10\6\7\14\10\1\7\2\10\13\7\1\10"+
    "\1\7\1\10\11\7\7\0\1\15\1\16\12\0\1\17"+
    "\1\20\1\21\1\22\1\23\47\0\1\24\1\25\2\26"+
    "\1\27\1\30\1\31\1\16\1\32\1\33\1\34\1\35"+
    "\1\24\1\36\1\37\2\24\1\40\1\41\1\20\1\21"+
    "\1\22\1\23\1\24\1\42\1\43\1\24\1\44\1\45"+
    "\1\46\1\47\1\50\1\24\1\51\1\52\1\53\1\54"+
    "\1\24\1\55\1\56\1\57\3\0\1\60\1\61\1\62"+
    "\1\63\1\57\1\24\1\0\1\24\7\0\1\57\1\0"+
    "\1\64\1\65\1\66\2\67\1\27\1\30\1\31\1\16"+
    "\1\70\1\71\1\65\1\72\1\65\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\22\1\23\2\65"+
    "\1\103\1\65\1\104\1\105\2\65\1\106\1\65\1\107"+
    "\1\65\1\110\1\111\1\65\1\112\1\64\1\113\3\64"+
    "\1\114\1\115\1\116\1\117\1\113\1\65\1\64\1\65"+
    "\1\120\1\121\1\122\1\123\1\124\1\125\1\0\1\113"+
    "\1\64\1\126\2\65\2\67\2\127\1\31\1\16\1\130"+
    "\1\131\1\132\1\133\1\65\1\73\1\134\2\65\1\126"+
    "\1\135\1\101\1\102\1\22\1\23\1\65\1\136\1\137"+
    "\1\65\1\140\1\141\1\65\1\142\1\143\1\65\1\144"+
    "\1\65\1\126\1\111\1\65\1\145\1\146\1\113\3\126"+
    "\1\114\1\115\1\116\1\126\1\147\1\65\1\126\1\65"+
    "\1\120\6\126\1\113\1\126\1\64\1\65\1\150\2\67"+
    "\1\27\1\30\1\31\1\16\1\151\1\152\1\65\1\153"+
    "\1\65\1\73\1\154\1\75\1\76\1\77\1\155\1\101"+
    "\1\102\1\22\1\23\2\65\1\103\1\156\1\65\1\157"+
    "\2\65\1\160\1\65\1\161\1\162\1\163\1\111\1\65"+
    "\1\112\1\164\1\113\1\165\1\64\1\166\1\114\1\115"+
    "\1\116\1\117\1\113\1\65\1\64\1\65\1\120\1\121"+
    "\1\122\1\123\1\124\1\125\1\0\1\113\1\167\77\0"+
    "\4\10\5\0\5\10\1\0\2\10\6\0\14\10\1\0"+
    "\2\10\13\0\1\10\1\0\1\10\14\0\2\11\15\0"+
    "\1\170\75\0\1\170\62\0\1\171\1\172\104\0\1\173"+
    "\57\0\4\24\5\0\5\24\1\0\2\24\6\0\14\24"+
    "\1\0\2\24\13\0\1\24\1\0\1\24\12\0\4\24"+
    "\5\0\3\24\1\174\1\175\1\0\2\24\6\0\2\24"+
    "\1\176\11\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\14\0\2\26\15\0\1\177\61\0\1\30\102\0\1\200"+
    "\21\0\1\201\41\0\4\24\5\0\1\24\1\202\3\24"+
    "\1\0\2\24\6\0\5\24\1\203\6\24\1\0\2\24"+
    "\13\0\1\24\1\0\1\24\12\0\4\24\5\0\5\24"+
    "\1\0\2\24\6\0\2\24\1\204\4\24\1\205\4\24"+
    "\1\0\2\24\13\0\1\24\1\0\1\24\12\0\4\24"+
    "\5\0\3\24\1\206\1\24\1\0\2\24\6\0\14\24"+
    "\1\0\2\24\13\0\1\24\1\0\1\24\12\0\4\24"+
    "\5\0\5\24\1\0\2\24\6\0\4\24\1\207\2\24"+
    "\1\210\1\24\1\211\2\24\1\0\2\24\13\0\1\24"+
    "\1\0\1\24\30\0\1\212\133\0\1\213\1\214\20\0"+
    "\1\24\1\215\2\24\5\0\1\24\1\216\3\24\1\0"+
    "\2\24\6\0\14\24\1\217\2\24\13\0\1\24\1\0"+
    "\1\24\12\0\4\24\5\0\1\24\1\220\3\24\1\0"+
    "\2\24\6\0\6\24\1\221\5\24\1\0\2\24\13\0"+
    "\1\24\1\0\1\24\12\0\4\24\5\0\5\24\1\0"+
    "\2\24\6\0\2\24\1\222\11\24\1\0\2\24\13\0"+
    "\1\24\1\0\1\24\12\0\4\24\5\0\3\24\1\223"+
    "\1\24\1\0\2\24\6\0\1\24\1\224\4\24\1\225"+
    "\1\226\4\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\12\0\4\24\5\0\5\24\1\0\2\24\6\0\7\24"+
    "\1\227\4\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\12\0\4\24\5\0\5\24\1\0\2\24\6\0\4\24"+
    "\1\230\7\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\12\0\4\24\5\0\5\24\1\0\2\24\6\0\1\24"+
    "\1\231\5\24\1\232\1\24\1\233\2\24\1\0\2\24"+
    "\13\0\1\24\1\0\1\24\12\0\4\24\4\0\1\234"+
    "\1\235\4\24\1\0\2\24\6\0\7\24\1\236\4\24"+
    "\1\0\2\24\13\0\1\24\1\0\1\24\12\0\4\24"+
    "\5\0\5\24\1\0\2\24\6\0\7\24\1\237\4\24"+
    "\1\0\2\24\13\0\1\24\1\0\1\24\26\0\1\240"+
    "\1\241\13\0\1\242\44\0\4\24\5\0\5\24\1\0"+
    "\2\24\6\0\4\24\1\243\4\24\1\244\2\24\1\0"+
    "\2\24\13\0\1\24\1\0\1\24\11\0\47\245\1\0"+
    "\26\245\50\0\1\246\50\0\1\213\32\0\1\247\42\0"+
    "\1\214\53\0\4\65\5\0\5\65\1\0\2\65\6\0"+
    "\14\65\1\0\2\65\13\0\1\65\1\0\1\65\12\0"+
    "\4\65\5\0\5\65\1\0\2\65\6\0\14\65\1\0"+
    "\1\250\1\65\13\0\1\251\1\0\1\65\14\0\2\67"+
    "\15\0\1\252\66\0\1\253\21\0\1\201\41\0\4\65"+
    "\5\0\1\65\1\254\3\65\1\0\2\65\6\0\5\65"+
    "\1\255\6\65\1\0\2\65\13\0\1\65\1\0\1\65"+
    "\12\0\4\65\5\0\3\65\1\256\1\65\1\0\2\65"+
    "\6\0\14\65\1\0\2\65\13\0\1\65\1\0\1\65"+
    "\12\0\4\65\5\0\5\65\1\0\2\65\6\0\4\65"+
    "\1\257\7\65\1\0\2\65\13\0\1\65\1\0\1\65"+
    "\30\0\1\260\57\0\4\65\5\0\5\65\1\0\2\65"+
    "\6\0\7\65\1\261\4\65\1\0\2\65\13\0\1\65"+
    "\1\0\1\65\12\0\4\65\5\0\5\65\1\0\2\65"+
    "\6\0\4\65\1\262\7\65\1\0\2\65\13\0\1\65"+
    "\1\0\1\65\34\0\1\263\31\0\1\264\1\265\7\0"+
    "\1\266\10\0\4\65\5\0\5\65\1\0\2\65\6\0"+
    "\6\65\1\267\5\65\1\0\2\65\13\0\1\65\1\0"+
    "\1\65\12\0\4\65\5\0\5\65\1\0\2\65\6\0"+
    "\2\65\1\270\11\65\1\0\2\65\13\0\1\65\1\0"+
    "\1\65\12\0\4\65\5\0\5\65\1\0\2\65\6\0"+
    "\1\65\1\271\4\65\1\272\1\273\4\65\1\0\2\65"+
    "\13\0\1\65\1\0\1\65\12\0\4\65\5\0\5\65"+
    "\1\0\2\65\6\0\1\65\1\274\4\65\1\275\2\65"+
    "\1\276\2\65\1\0\2\65\13\0\1\65\1\0\1\65"+
    "\12\0\4\65\5\0\5\65\1\0\2\65\6\0\2\65"+
    "\1\277\4\65\1\300\4\65\1\0\2\65\13\0\1\65"+
    "\1\0\1\65\56\0\1\301\14\0\1\302\14\0\4\65"+
    "\5\0\5\65\1\0\2\65\6\0\11\65\1\303\2\65"+
    "\1\0\2\65\13\0\1\65\1\0\1\65\11\0\47\304"+
    "\1\0\26\304\23\0\1\264\75\0\1\265\132\0\1\305"+
    "\104\0\1\306\13\0\2\127\52\0\1\147\16\0\1\307"+
    "\10\0\1\310\21\0\1\201\6\0\1\307\32\0\1\65"+
    "\1\311\2\65\5\0\1\65\1\312\3\65\1\0\2\65"+
    "\6\0\5\65\1\255\6\65\1\307\2\65\13\0\1\65"+
    "\1\0\1\65\12\0\4\65\5\0\5\65\1\0\2\65"+
    "\6\0\7\65\1\313\4\65\1\0\2\65\13\0\1\65"+
    "\1\0\1\65\12\0\4\65\5\0\5\65\1\0\2\65"+
    "\6\0\4\65\1\314\7\65\1\0\2\65\13\0\1\65"+
    "\1\0\1\65\30\0\1\315\101\0\1\263\42\0\1\266"+
    "\10\0\4\65\5\0\1\65\1\316\3\65\1\0\2\65"+
    "\6\0\14\65\1\0\2\65\13\0\1\65\1\0\1\65"+
    "\12\0\4\65\5\0\5\65\1\0\2\65\6\0\6\65"+
    "\1\317\5\65\1\0\2\65\13\0\1\65\1\0\1\65"+
    "\12\0\4\65\5\0\5\65\1\0\2\65\6\0\1\65"+
    "\1\320\1\321\11\65\1\0\2\65\13\0\1\65\1\0"+
    "\1\65\12\0\4\65\5\0\5\65\1\0\2\65\6\0"+
    "\1\65\1\271\4\65\1\322\1\273\4\65\1\0\2\65"+
    "\13\0\1\65\1\0\1\65\12\0\4\65\5\0\5\65"+
    "\1\0\2\65\6\0\4\65\1\323\7\65\1\0\2\65"+
    "\13\0\1\65\1\0\1\65\12\0\4\65\5\0\5\65"+
    "\1\0\2\65\6\0\11\65\1\324\2\65\1\0\2\65"+
    "\13\0\1\65\1\0\1\65\12\0\4\65\5\0\5\65"+
    "\1\0\2\65\6\0\2\65\1\325\11\65\1\0\2\65"+
    "\13\0\1\65\1\0\1\65\11\0\47\304\1\326\26\304"+
    "\50\0\1\327\106\0\1\147\15\0\4\65\5\0\5\65"+
    "\1\0\2\65\6\0\10\65\1\330\3\65\1\0\1\331"+
    "\1\65\13\0\1\65\1\0\1\65\24\0\1\332\21\0"+
    "\1\201\41\0\4\65\5\0\1\65\1\333\3\65\1\0"+
    "\2\65\6\0\5\65\1\255\6\65\1\0\2\65\13\0"+
    "\1\65\1\0\1\65\12\0\4\65\5\0\5\65\1\0"+
    "\2\65\6\0\4\65\1\334\7\65\1\0\2\65\13\0"+
    "\1\65\1\0\1\65\66\0\1\264\1\265\7\0\1\266"+
    "\10\0\4\65\5\0\5\65\1\0\2\65\6\0\2\65"+
    "\1\335\11\65\1\0\2\65\13\0\1\65\1\0\1\65"+
    "\12\0\4\65\5\0\5\65\1\0\2\65\6\0\1\65"+
    "\1\271\4\65\1\336\1\273\4\65\1\0\2\65\13\0"+
    "\1\65\1\0\1\65\12\0\4\65\5\0\5\65\1\0"+
    "\2\65\6\0\1\65\1\337\4\65\1\340\1\341\1\65"+
    "\1\342\2\65\1\0\2\65\13\0\1\65\1\0\1\65"+
    "\12\0\4\65\5\0\5\65\1\0\2\65\6\0\2\65"+
    "\1\343\4\65\1\300\4\65\1\0\2\65\13\0\1\65"+
    "\1\0\1\65\12\0\4\65\5\0\5\65\1\0\2\65"+
    "\6\0\1\65\1\344\12\65\1\0\2\65\13\0\1\65"+
    "\1\0\1\65\51\0\1\345\4\0\1\346\30\0\50\347"+
    "\1\0\25\347\11\0\2\350\66\0\2\12\71\0\5\171"+
    "\1\351\1\352\67\171\10\353\1\354\65\353\20\0\1\355"+
    "\56\0\4\24\5\0\5\24\1\0\1\24\1\356\6\0"+
    "\14\24\1\0\2\24\13\0\1\24\1\0\1\24\12\0"+
    "\4\24\5\0\5\24\1\0\2\24\6\0\2\24\1\357"+
    "\11\24\1\0\2\24\13\0\1\24\1\0\1\24\12\0"+
    "\4\24\5\0\5\24\1\0\2\24\6\0\6\24\1\360"+
    "\5\24\1\0\2\24\13\0\1\24\1\0\1\24\14\0"+
    "\2\361\107\0\1\362\60\0\4\24\5\0\4\24\1\363"+
    "\1\0\2\24\6\0\14\24\1\0\2\24\13\0\1\24"+
    "\1\0\1\24\12\0\4\24\5\0\5\24\1\0\2\24"+
    "\6\0\14\24\1\0\1\24\1\364\13\0\1\24\1\0"+
    "\1\24\12\0\4\24\5\0\4\24\1\365\1\0\2\24"+
    "\6\0\14\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\12\0\4\24\5\0\5\24\1\0\1\24\1\366\6\0"+
    "\14\24\1\0\2\24\13\0\1\24\1\0\1\24\12\0"+
    "\4\24\5\0\3\24\1\367\1\24\1\0\2\24\6\0"+
    "\14\24\1\0\2\24\13\0\1\24\1\0\1\24\12\0"+
    "\4\24\5\0\5\24\1\0\2\24\6\0\2\24\1\370"+
    "\11\24\1\0\2\24\13\0\1\24\1\0\1\24\41\0"+
    "\1\371\46\0\4\24\5\0\5\24\1\0\2\24\6\0"+
    "\12\24\1\372\1\24\1\0\2\24\13\0\1\24\1\0"+
    "\1\24\12\0\4\24\5\0\5\24\1\0\2\24\6\0"+
    "\12\24\1\373\1\24\1\0\2\24\13\0\1\24\1\0"+
    "\1\24\12\0\1\24\1\374\2\24\5\0\5\24\1\0"+
    "\2\24\6\0\14\24\1\375\2\24\13\0\1\24\1\0"+
    "\1\24\12\0\4\24\5\0\4\24\1\376\1\0\2\24"+
    "\6\0\14\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\12\0\4\24\5\0\1\24\1\377\3\24\1\0\2\24"+
    "\6\0\14\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\12\0\4\24\5\0\5\24\1\0\2\24\6\0\6\24"+
    "\1\u0100\5\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\12\0\4\24\5\0\5\24\1\0\2\24\6\0\7\24"+
    "\1\u0101\4\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\12\0\4\24\5\0\5\24\1\0\2\24\6\0\4\24"+
    "\1\u0102\7\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\12\0\4\24\5\0\5\24\1\0\2\24\6\0\7\24"+
    "\1\u0103\4\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\12\0\1\24\1\u0104\2\24\5\0\5\24\1\0\2\24"+
    "\6\0\14\24\1\u0105\2\24\13\0\1\24\1\0\1\24"+
    "\12\0\4\24\5\0\1\24\1\u0106\3\24\1\0\2\24"+
    "\6\0\14\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\12\0\4\24\5\0\5\24\1\0\2\24\6\0\1\24"+
    "\1\u0107\12\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\54\0\1\u0108\33\0\4\24\5\0\5\24\1\0\2\24"+
    "\6\0\13\24\1\u0109\1\0\2\24\13\0\1\24\1\0"+
    "\1\24\12\0\4\24\5\0\5\24\1\0\2\24\6\0"+
    "\12\24\1\u010a\1\24\1\0\2\24\13\0\1\24\1\0"+
    "\1\24\32\0\1\u010b\106\0\1\u010c\101\0\1\u010d\40\0"+
    "\4\24\4\0\1\u010e\1\u010f\4\24\1\0\2\24\6\0"+
    "\14\24\1\0\2\24\13\0\1\24\1\0\1\24\12\0"+
    "\4\24\4\0\1\u0110\1\u0111\4\24\1\0\2\24\6\0"+
    "\14\24\1\0\2\24\13\0\1\24\1\0\1\24\11\0"+
    "\47\245\1\u0112\26\245\51\0\1\u0113\25\0\4\65\4\0"+
    "\1\u0114\1\u0115\4\65\1\0\2\65\6\0\14\65\1\0"+
    "\2\65\13\0\1\65\1\0\1\65\12\0\1\65\1\u0116"+
    "\2\65\5\0\5\65\1\0\2\65\6\0\14\65\1\u0117"+
    "\2\65\13\0\1\65\1\0\1\65\14\0\2\u0118\107\0"+
    "\1\u0119\60\0\4\65\5\0\4\65\1\u011a\1\0\2\65"+
    "\6\0\14\65\1\0\2\65\13\0\1\65\1\0\1\65"+
    "\12\0\4\65\5\0\5\65\1\0\1\65\1\u011b\6\0"+
    "\14\65\1\0\2\65\13\0\1\65\1\0\1\65\12\0"+
    "\4\65\5\0\3\65\1\u011c\1\65\1\0\2\65\6\0"+
    "\14\65\1\0\2\65\13\0\1\65\1\0\1\65\25\0"+
    "\1\u011d\62\0\4\65\4\0\1\u011e\1\u011f\4\65\1\0"+
    "\2\65\6\0\14\65\1\0\2\65\13\0\1\65\1\0"+
    "\1\65\12\0\4\65\5\0\5\65\1\0\2\65\6\0"+
    "\2\65\1\u0120\11\65\1\0\2\65\13\0\1\65\1\0"+
    "\1\65\12\0\1\65\1\u0121\2\65\5\0\5\65\1\0"+
    "\2\65\6\0\14\65\1\u0122\2\65\13\0\1\65\1\0"+
    "\1\65\12\0\4\65\5\0\4\65\1\u0123\1\0\2\65"+
    "\6\0\14\65\1\0\2\65\13\0\1\65\1\0\1\65"+
    "\12\0\4\65\5\0\5\65\1\0\2\65\6\0\6\65"+
    "\1\u0124\5\65\1\0\2\65\13\0\1\65\1\0\1\65"+
    "\12\0\4\65\5\0\5\65\1\0\2\65\6\0\7\65"+
    "\1\u0125\4\65\1\0\2\65\13\0\1\65\1\0\1\65"+
    "\12\0\4\65\5\0\5\65\1\0\2\65\6\0\4\65"+
    "\1\u0126\7\65\1\0\2\65\13\0\1\65\1\0\1\65"+
    "\12\0\1\65\1\u0127\2\65\5\0\5\65\1\0\2\65"+
    "\6\0\14\65\1\u0128\2\65\13\0\1\65\1\0\1\65"+
    "\12\0\4\65\5\0\5\65\1\0\2\65\6\0\1\65"+
    "\1\u0129\12\65\1\0\2\65\13\0\1\65\1\0\1\65"+
    "\12\0\4\65\5\0\5\65\1\0\2\65\6\0\1\65"+
    "\1\u012a\12\65\1\0\2\65\13\0\1\65\1\0\1\65"+
    "\12\0\4\65\5\0\5\65\1\0\2\65\6\0\5\65"+
    "\1\u012b\6\65\1\0\2\65\13\0\1\65\1\0\1\65"+
    "\22\0\2\u0114\65\0\1\u0117\41\0\1\u0117\32\0\4\65"+
    "\4\0\1\u0110\1\u012c\4\65\1\0\2\65\6\0\14\65"+
    "\1\0\2\65\13\0\1\65\1\0\1\65\62\0\1\u012d"+
    "\42\0\1\u012e\60\0\4\65\5\0\5\65\1\0\2\65"+
    "\6\0\14\65\1\0\2\65\2\0\1\u012d\10\0\1\65"+
    "\1\0\1\65\12\0\4\65\5\0\4\65\1\u012f\1\0"+
    "\2\65\6\0\14\65\1\0\2\65\13\0\1\65\1\0"+
    "\1\65\12\0\4\65\5\0\4\65\1\u0130\1\0\2\65"+
    "\6\0\14\65\1\0\2\65\13\0\1\65\1\0\1\65"+
    "\12\0\4\65\4\0\1\u0131\1\u0132\4\65\1\0\2\65"+
    "\6\0\14\65\1\0\2\65\13\0\1\65\1\0\1\65"+
    "\25\0\1\u0133\62\0\4\65\5\0\5\65\1\0\2\65"+
    "\6\0\12\65\1\u0134\1\65\1\0\2\65\13\0\1\65"+
    "\1\0\1\65\12\0\1\65\1\u0121\2\65\4\0\1\u0135"+
    "\1\u0136\4\65\1\0\2\65\6\0\14\65\1\u0122\2\65"+
    "\13\0\1\65\1\0\1\65\12\0\4\65\5\0\1\65"+
    "\1\u0137\3\65\1\0\2\65\6\0\14\65\1\0\2\65"+
    "\13\0\1\65\1\0\1\65\12\0\4\65\5\0\4\65"+
    "\1\u0138\1\0\2\65\6\0\14\65\1\0\2\65\13\0"+
    "\1\65\1\0\1\65\12\0\4\65\5\0\5\65\1\0"+
    "\2\65\6\0\7\65\1\u0139\4\65\1\0\2\65\13\0"+
    "\1\65\1\0\1\65\12\0\4\65\5\0\5\65\1\0"+
    "\2\65\6\0\1\65\1\u013a\12\65\1\0\2\65\13\0"+
    "\1\65\1\0\1\65\12\0\4\65\5\0\5\65\1\0"+
    "\2\65\6\0\5\65\1\u013b\6\65\1\0\2\65\13\0"+
    "\1\65\1\0\1\65\62\0\1\u013c\25\0\4\65\5\0"+
    "\5\65\1\0\2\65\6\0\1\65\1\u013d\12\65\1\0"+
    "\2\65\13\0\1\65\1\0\1\65\12\0\4\65\4\0"+
    "\1\u013e\1\u013f\4\65\1\0\2\65\6\0\14\65\1\0"+
    "\2\65\13\0\1\65\1\0\1\65\27\0\1\u0140\60\0"+
    "\4\65\5\0\4\65\1\u0141\1\0\2\65\6\0\14\65"+
    "\1\0\2\65\13\0\1\65\1\0\1\65\12\0\4\65"+
    "\4\0\1\u0142\1\u0143\4\65\1\0\2\65\6\0\14\65"+
    "\1\0\2\65\13\0\1\65\1\0\1\65\12\0\4\65"+
    "\5\0\4\65\1\u0144\1\0\2\65\6\0\14\65\1\0"+
    "\2\65\13\0\1\65\1\0\1\65\12\0\4\65\5\0"+
    "\5\65\1\0\2\65\6\0\7\65\1\u0145\4\65\1\0"+
    "\2\65\13\0\1\65\1\0\1\65\12\0\1\65\1\u0146"+
    "\2\65\5\0\5\65\1\0\2\65\6\0\14\65\1\u0147"+
    "\2\65\13\0\1\65\1\0\1\65\12\0\4\65\5\0"+
    "\5\65\1\0\2\65\6\0\4\65\1\u0148\7\65\1\0"+
    "\2\65\13\0\1\65\1\0\1\65\12\0\4\65\5\0"+
    "\1\65\1\u0149\3\65\1\0\2\65\6\0\14\65\1\0"+
    "\2\65\13\0\1\65\1\0\1\65\12\0\4\65\5\0"+
    "\5\65\1\0\2\65\6\0\1\65\1\u014a\12\65\1\0"+
    "\2\65\13\0\1\65\1\0\1\65\12\0\4\65\5\0"+
    "\5\65\1\0\2\65\6\0\5\65\1\u014b\6\65\1\0"+
    "\2\65\13\0\1\65\1\0\1\65\12\0\4\65\4\0"+
    "\1\u014c\1\u014d\4\65\1\0\2\65\6\0\14\65\1\0"+
    "\2\65\13\0\1\65\1\0\1\65\42\0\1\u014e\55\0"+
    "\2\u013e\133\0\1\u014f\40\0\1\u0150\70\0\1\352\67\0"+
    "\10\353\1\u0151\65\353\7\0\1\352\1\354\106\0\1\u0152"+
    "\55\0\4\24\5\0\2\24\1\u0153\2\24\1\0\2\24"+
    "\6\0\14\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\12\0\4\24\5\0\5\24\1\0\2\24\6\0\2\24"+
    "\1\u0154\11\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\22\0\2\u0155\17\0\1\u0156\44\0\4\24\4\0\1\u0155"+
    "\1\u0157\4\24\1\0\2\24\6\0\2\24\1\u0158\11\24"+
    "\1\0\2\24\13\0\1\24\1\0\1\24\12\0\4\24"+
    "\5\0\4\24\1\u0159\1\0\2\24\6\0\14\24\1\0"+
    "\2\24\13\0\1\24\1\0\1\24\12\0\4\24\5\0"+
    "\5\24\1\0\2\24\6\0\6\24\1\u015a\5\24\1\0"+
    "\2\24\13\0\1\24\1\0\1\24\12\0\4\24\5\0"+
    "\5\24\1\0\2\24\6\0\2\24\1\u015b\11\24\1\0"+
    "\2\24\13\0\1\24\1\0\1\24\12\0\4\24\5\0"+
    "\1\24\1\u015c\3\24\1\0\2\24\6\0\14\24\1\0"+
    "\2\24\13\0\1\24\1\0\1\24\42\0\1\u015d\45\0"+
    "\4\24\5\0\5\24\1\0\2\24\6\0\2\24\1\u015e"+
    "\11\24\1\0\2\24\13\0\1\24\1\0\1\24\43\0"+
    "\1\u015f\44\0\4\24\4\0\1\u0160\1\u0161\4\24\1\0"+
    "\2\24\6\0\14\24\1\0\2\24\13\0\1\24\1\0"+
    "\1\24\12\0\4\24\5\0\5\24\1\0\2\24\6\0"+
    "\10\24\1\u0162\3\24\1\0\2\24\13\0\1\24\1\0"+
    "\1\24\12\0\1\24\1\u0163\2\24\5\0\5\24\1\0"+
    "\2\24\6\0\14\24\1\u0164\2\24\13\0\1\24\1\0"+
    "\1\24\12\0\4\24\5\0\5\24\1\0\2\24\6\0"+
    "\1\24\1\u0165\12\24\1\0\2\24\13\0\1\24\1\0"+
    "\1\24\12\0\4\24\5\0\2\24\1\u0166\2\24\1\0"+
    "\2\24\6\0\14\24\1\0\2\24\13\0\1\24\1\0"+
    "\1\24\12\0\4\24\5\0\5\24\1\0\2\24\6\0"+
    "\2\24\1\u0167\11\24\1\0\2\24\13\0\1\24\1\0"+
    "\1\24\43\0\1\u0168\44\0\1\24\1\u0169\2\24\5\0"+
    "\5\24\1\0\2\24\6\0\14\24\1\u016a\2\24\13\0"+
    "\1\24\1\0\1\24\12\0\4\24\5\0\5\24\1\0"+
    "\2\24\6\0\4\24\1\u016b\7\24\1\0\2\24\13\0"+
    "\1\24\1\0\1\24\25\0\1\u016c\113\0\1\u016d\61\0"+
    "\1\u016e\60\0\4\24\5\0\4\24\1\u016f\1\0\2\24"+
    "\6\0\14\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\47\0\1\u0170\40\0\4\24\5\0\5\24\1\0\2\24"+
    "\6\0\6\24\1\u0171\5\24\1\0\2\24\13\0\1\24"+
    "\1\0\1\24\63\0\1\u0172\41\0\1\u0173\60\0\4\65"+
    "\5\0\4\65\1\u0174\1\0\2\65\6\0\14\65\1\0"+
    "\2\65\13\0\1\65\1\0\1\65\12\0\4\65\5\0"+
    "\4\65\1\u0175\1\0\2\65\6\0\14\65\1\0\2\65"+
    "\13\0\1\65\1\0\1\65\27\0\1\u0176\70\0\2\u0155"+
    "\64\0\4\65\4\0\1\u0155\1\u0177\4\65\1\0\2\65"+
    "\6\0\14\65\1\0\2\65\13\0\1\65\1\0\1\65"+
    "\12\0\4\65\5\0\5\65\1\0\2\65\6\0\6\65"+
    "\1\u0178\5\65\1\0\2\65\13\0\1\65\1\0\1\65"+
    "\12\0\4\65\5\0\5\65\1\0\2\65\6\0\2\65"+
    "\1\u0179\11\65\1\0\2\65\13\0\1\65\1\0\1\65"+
    "\73\0\1\u017a\55\0\1\u017b\34\0\4\65\5\0\5\65"+
    "\1\0\2\65\6\0\12\65\1\u017c\1\65\1\0\2\65"+
    "\13\0\1\65\1\0\1\65\12\0\4\65\5\0\5\65"+
    "\1\0\2\65\6\0\1\65\1\u017d\12\65\1\0\2\65"+
    "\13\0\1\65\1\0\1\65\12\0\4\65\5\0\5\65"+
    "\1\0\2\65\6\0\2\65\1\u017e\11\65\1\0\2\65"+
    "\13\0\1\65\1\0\1\65\43\0\1\u017f\44\0\4\65"+
    "\5\0\3\65\1\u0180\1\65\1\0\2\65\6\0\14\65"+
    "\1\0\2\65\13\0\1\65\1\0\1\65\12\0\1\65"+
    "\1\u0181\2\65\5\0\5\65\1\0\2\65\6\0\14\65"+
    "\1\u0164\2\65\13\0\1\65\1\0\1\65\12\0\4\65"+
    "\5\0\5\65\1\0\2\65\6\0\1\65\1\u0182\12\65"+
    "\1\0\2\65\13\0\1\65\1\0\1\65\12\0\4\65"+
    "\5\0\5\65\1\0\2\65\6\0\2\65\1\u0183\11\65"+
    "\1\0\2\65\13\0\1\65\1\0\1\65\43\0\1\u0184"+
    "\44\0\1\65\1\u0185\2\65\5\0\5\65\1\0\2\65"+
    "\6\0\14\65\1\u0186\2\65\13\0\1\65\1\0\1\65"+
    "\12\0\4\65\5\0\5\65\1\0\2\65\6\0\4\65"+
    "\1\u0187\7\65\1\0\2\65\13\0\1\65\1\0\1\65"+
    "\12\0\4\65\5\0\5\65\1\0\2\65\6\0\1\65"+
    "\1\u0188\12\65\1\0\2\65\13\0\1\65\1\0\1\65"+
    "\12\0\4\65\5\0\5\65\1\0\2\65\6\0\6\65"+
    "\1\u0189\5\65\1\0\2\65\13\0\1\65\1\0\1\65"+
    "\24\0\1\u018a\75\0\1\u018b\63\0\4\65\5\0\1\65"+
    "\1\u018c\3\65\1\0\2\65\6\0\14\65\1\0\2\65"+
    "\13\0\1\65\1\0\1\65\45\0\1\u018d\76\0\1\u018e"+
    "\41\0\4\65\5\0\5\65\1\0\2\65\6\0\5\65"+
    "\1\u018f\6\65\1\0\2\65\13\0\1\65\1\0\1\65"+
    "\12\0\4\65\5\0\5\65\1\0\2\65\6\0\3\65"+
    "\1\u0190\10\65\1\0\2\65\13\0\1\65\1\0\1\65"+
    "\12\0\4\65\5\0\3\65\1\u0191\1\65\1\0\2\65"+
    "\6\0\14\65\1\0\2\65\13\0\1\65\1\0\1\65"+
    "\12\0\4\65\5\0\5\65\1\0\2\65\6\0\1\65"+
    "\1\u0192\12\65\1\0\2\65\13\0\1\65\1\0\1\65"+
    "\12\0\4\65\5\0\5\65\1\0\2\65\6\0\4\65"+
    "\1\u0193\7\65\1\0\2\65\13\0\1\65\1\0\1\65"+
    "\63\0\1\u0194\24\0\4\65\5\0\1\65\1\u0195\3\65"+
    "\1\0\2\65\6\0\14\65\1\0\2\65\13\0\1\65"+
    "\1\0\1\65\27\0\1\u0196\60\0\4\65\5\0\4\65"+
    "\1\u0197\1\0\2\65\6\0\14\65\1\0\2\65\13\0"+
    "\1\65\1\0\1\65\24\0\1\u0198\63\0\4\65\5\0"+
    "\1\65\1\u0199\3\65\1\0\2\65\6\0\14\65\1\0"+
    "\2\65\13\0\1\65\1\0\1\65\12\0\4\65\5\0"+
    "\5\65\1\0\2\65\6\0\10\65\1\u019a\3\65\1\0"+
    "\2\65\13\0\1\65\1\0\1\65\12\0\4\65\5\0"+
    "\5\65\1\0\2\65\6\0\1\65\1\u019b\12\65\1\0"+
    "\2\65\13\0\1\65\1\0\1\65\12\0\4\65\5\0"+
    "\5\65\1\0\2\65\6\0\2\65\1\u019c\11\65\1\0"+
    "\2\65\13\0\1\65\1\0\1\65\43\0\1\u019d\44\0"+
    "\1\65\1\u019e\2\65\5\0\5\65\1\0\2\65\6\0"+
    "\14\65\1\u019f\2\65\13\0\1\65\1\0\1\65\12\0"+
    "\1\65\1\u01a0\2\65\5\0\5\65\1\0\2\65\6\0"+
    "\14\65\1\u01a1\2\65\13\0\1\65\1\0\1\65\12\0"+
    "\4\65\5\0\5\65\1\0\2\65\6\0\4\65\1\u01a2"+
    "\7\65\1\0\2\65\13\0\1\65\1\0\1\65\12\0"+
    "\4\65\5\0\5\65\1\0\2\65\6\0\1\65\1\u01a3"+
    "\12\65\1\0\2\65\13\0\1\65\1\0\1\65\24\0"+
    "\1\u01a4\63\0\4\65\5\0\1\65\1\u01a5\3\65\1\0"+
    "\2\65\6\0\14\65\1\0\2\65\13\0\1\65\1\0"+
    "\1\65\24\0\1\u01a6\122\0\1\u01a7\35\0\7\353\1\352"+
    "\1\u0151\65\353\1\0\4\24\5\0\5\24\1\0\2\24"+
    "\6\0\10\24\1\u01a8\3\24\1\0\2\24\13\0\1\24"+
    "\1\0\1\24\24\0\1\u01a9\115\0\1\u01aa\43\0\4\24"+
    "\5\0\1\24\1\u01ab\3\24\1\0\2\24\6\0\14\24"+
    "\1\0\2\24\13\0\1\24\1\0\1\24\12\0\4\24"+
    "\5\0\5\24\1\0\2\24\6\0\3\24\1\u01ac\10\24"+
    "\1\0\2\24\13\0\1\24\1\0\1\24\12\0\4\24"+
    "\4\0\1\u01ad\1\u01ae\4\24\1\0\2\24\6\0\14\24"+
    "\1\0\2\24\13\0\1\24\1\0\1\24\31\0\1\u01af"+
    "\56\0\4\24\4\0\1\u01b0\1\u01b1\4\24\1\0\2\24"+
    "\6\0\14\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\22\0\2\u01b0\76\0\1\u01b2\63\0\4\24\5\0\1\24"+
    "\1\u01b3\3\24\1\0\2\24\6\0\14\24\1\0\2\24"+
    "\13\0\1\24\1\0\1\24\12\0\4\24\5\0\4\24"+
    "\1\u01b4\1\0\2\24\6\0\14\24\1\0\2\24\13\0"+
    "\1\24\1\0\1\24\12\0\4\24\5\0\5\24\1\0"+
    "\2\24\6\0\2\24\1\u01b5\11\24\1\0\2\24\13\0"+
    "\1\24\1\0\1\24\43\0\1\u01b6\44\0\4\24\5\0"+
    "\4\24\1\u01b7\1\0\2\24\6\0\14\24\1\0\2\24"+
    "\13\0\1\24\1\0\1\24\12\0\4\24\5\0\5\24"+
    "\1\0\2\24\6\0\7\24\1\u01b8\4\24\1\0\2\24"+
    "\13\0\1\24\1\0\1\24\50\0\1\u01b9\37\0\4\24"+
    "\4\0\1\u01ba\1\u01bb\4\24\1\0\2\24\6\0\14\24"+
    "\1\0\2\24\13\0\1\24\1\0\1\24\51\0\1\u01bc"+
    "\67\0\1\u01bd\44\0\4\24\5\0\5\24\1\0\2\24"+
    "\6\0\2\24\1\u01be\11\24\1\0\2\24\13\0\1\24"+
    "\1\0\1\24\43\0\1\u01bf\44\0\4\24\5\0\5\24"+
    "\1\0\2\24\6\0\2\24\1\u01c0\11\24\1\0\2\24"+
    "\13\0\1\24\1\0\1\24\64\0\1\u01c1\62\0\1\u01c2"+
    "\36\0\4\65\5\0\5\65\1\0\2\65\6\0\10\65"+
    "\1\u01c3\3\65\1\0\2\65\13\0\1\65\1\0\1\65"+
    "\12\0\4\65\5\0\5\65\1\0\2\65\6\0\2\65"+
    "\1\u01c4\11\65\1\0\2\65\13\0\1\65\1\0\1\65"+
    "\43\0\1\u01c5\44\0\4\65\5\0\1\65\1\u01c6\3\65"+
    "\1\0\2\65\6\0\14\65\1\0\2\65\13\0\1\65"+
    "\1\0\1\65\12\0\4\65\4\0\1\u01ad\1\u01c7\4\65"+
    "\1\0\2\65\6\0\14\65\1\0\2\65\13\0\1\65"+
    "\1\0\1\65\12\0\4\65\5\0\5\65\1\0\2\65"+
    "\6\0\14\65\1\0\2\65\13\0\1\65\1\u01c8\1\u01c9"+
    "\12\0\4\65\5\0\5\65\1\0\2\65\6\0\4\65"+
    "\1\u01ca\7\65\1\0\2\65\13\0\1\65\1\0\1\65"+
    "\12\0\4\65\5\0\5\65\1\0\2\65\6\0\2\65"+
    "\1\u01cb\11\65\1\0\2\65\13\0\1\65\1\0\1\65"+
    "\12\0\4\65\5\0\4\65\1\u01cc\1\0\2\65\6\0"+
    "\14\65\1\0\2\65\13\0\1\65\1\0\1\65\12\0"+
    "\1\65\1\u01cd\2\65\5\0\5\65\1\0\2\65\6\0"+
    "\14\65\1\u01ce\2\65\13\0\1\65\1\0\1\65\13\0"+
    "\1\u01ce\41\0\1\u01ce\32\0\4\65\4\0\1\u01cf\1\u01d0"+
    "\4\65\1\0\2\65\6\0\14\65\1\0\2\65\13\0"+
    "\1\65\1\0\1\65\12\0\4\65\5\0\3\65\1\u01d1"+
    "\1\65\1\0\2\65\6\0\14\65\1\0\2\65\13\0"+
    "\1\65\1\0\1\65\12\0\4\65\5\0\5\65\1\0"+
    "\2\65\6\0\2\65\1\u01d2\11\65\1\0\2\65\13\0"+
    "\1\65\1\0\1\65\50\0\1\u01d3\54\0\1\u01d4\60\0"+
    "\4\65\5\0\4\65\1\u01d5\1\0\2\65\6\0\14\65"+
    "\1\0\2\65\13\0\1\65\1\0\1\65\50\0\1\u01d6"+
    "\37\0\4\65\5\0\5\65\1\0\2\65\6\0\2\65"+
    "\1\u01d7\11\65\1\0\2\65\13\0\1\65\1\0\1\65"+
    "\12\0\4\65\5\0\5\65\1\0\2\65\6\0\4\65"+
    "\1\u01d8\7\65\1\0\2\65\13\0\1\65\1\0\1\65"+
    "\12\0\4\65\5\0\4\65\1\u01d9\1\0\2\65\6\0"+
    "\14\65\1\0\2\65\13\0\1\65\1\0\1\65\64\0"+
    "\1\u01da\23\0\4\65\5\0\5\65\1\0\2\65\6\0"+
    "\5\65\1\u01db\6\65\1\0\2\65\13\0\1\65\1\0"+
    "\1\65\51\0\1\u01dc\36\0\4\65\5\0\5\65\1\0"+
    "\2\65\6\0\10\65\1\u01dd\3\65\1\0\2\65\13\0"+
    "\1\65\1\0\1\65\27\0\1\u01de\60\0\4\65\5\0"+
    "\4\65\1\u01df\1\0\2\65\6\0\14\65\1\0\2\65"+
    "\13\0\1\65\1\0\1\65\12\0\4\65\5\0\5\65"+
    "\1\0\2\65\6\0\11\65\1\u01e0\2\65\1\0\2\65"+
    "\13\0\1\65\1\0\1\65\12\0\4\65\5\0\4\65"+
    "\1\u01e1\1\0\2\65\6\0\14\65\1\0\2\65\13\0"+
    "\1\65\1\0\1\65\12\0\4\65\5\0\5\65\1\0"+
    "\2\65\6\0\10\65\1\u01e2\3\65\1\0\2\65\13\0"+
    "\1\65\1\0\1\65\51\0\1\u01e3\36\0\4\65\5\0"+
    "\4\65\1\u01e4\1\0\2\65\6\0\14\65\1\0\2\65"+
    "\13\0\1\65\1\0\1\65\27\0\1\u01e5\60\0\4\65"+
    "\5\0\3\65\1\u01e6\1\65\1\0\2\65\6\0\14\65"+
    "\1\0\2\65\13\0\1\65\1\0\1\65\46\0\1\u01e7"+
    "\76\0\1\u01e8\40\0\4\24\5\0\4\24\1\u01e9\1\0"+
    "\2\24\6\0\14\24\1\0\2\24\13\0\1\24\1\0"+
    "\1\24\25\0\1\u01ea\113\0\1\u01eb\44\0\4\24\5\0"+
    "\2\24\1\u01ec\2\24\1\0\2\24\6\0\14\24\1\0"+
    "\2\24\13\0\1\24\1\0\1\24\12\0\4\24\5\0"+
    "\5\24\1\0\2\24\6\0\2\24\1\u01ed\11\24\1\0"+
    "\2\24\13\0\1\24\1\0\1\24\51\0\1\u01ee\36\0"+
    "\4\24\5\0\5\24\1\0\2\24\6\0\10\24\1\u01ef"+
    "\3\24\1\0\2\24\13\0\1\24\1\0\1\24\42\0"+
    "\1\u01f0\101\0\1\u01f1\41\0\4\24\5\0\5\24\1\0"+
    "\2\24\6\0\5\24\1\u01f2\6\24\1\0\2\24\13\0"+
    "\1\24\1\0\1\24\25\0\1\u01f3\62\0\4\24\5\0"+
    "\2\24\1\u01f4\2\24\1\0\2\24\6\0\14\24\1\0"+
    "\2\24\13\0\1\24\1\0\1\24\12\0\4\24\4\0"+
    "\1\u01f5\1\u01f6\4\24\1\0\2\24\6\0\14\24\1\0"+
    "\2\24\13\0\1\24\1\0\1\24\12\0\4\24\4\0"+
    "\1\u01cf\1\u01f7\4\24\1\0\2\24\6\0\14\24\1\0"+
    "\2\24\13\0\1\24\1\0\1\24\12\0\4\24\5\0"+
    "\5\24\1\0\2\24\6\0\6\24\1\u01f8\5\24\1\0"+
    "\2\24\13\0\1\24\1\0\1\24\47\0\1\u01f9\52\0"+
    "\1\u01fa\63\0\4\24\5\0\1\24\1\u01fb\3\24\1\0"+
    "\2\24\6\0\14\24\1\0\2\24\13\0\1\24\1\0"+
    "\1\24\27\0\1\u01fc\115\0\1\u01fd\40\0\4\24\5\0"+
    "\5\24\1\0\2\24\6\0\6\24\1\u01fe\5\24\1\0"+
    "\2\24\13\0\1\24\1\0\1\24\61\0\1\u01ff\66\0"+
    "\1\u0200\35\0\4\65\5\0\5\65\1\0\2\65\6\0"+
    "\11\65\1\u0201\2\65\1\0\2\65\13\0\1\65\1\0"+
    "\1\65\12\0\4\65\5\0\5\65\1\0\2\65\6\0"+
    "\13\65\1\u0202\1\0\2\65\13\0\1\65\1\0\1\65"+
    "\54\0\1\u0203\33\0\4\65\5\0\2\65\1\u0204\2\65"+
    "\1\0\2\65\6\0\14\65\1\0\2\65\13\0\1\65"+
    "\1\0\1\65\12\0\4\65\5\0\5\65\1\0\2\65"+
    "\6\0\10\65\1\u0205\3\65\1\0\2\65\13\0\1\65"+
    "\1\0\1\65\12\0\4\65\5\0\1\65\1\u0206\3\65"+
    "\1\0\2\65\6\0\14\65\1\0\2\65\13\0\1\65"+
    "\1\0\1\65\12\0\4\65\4\0\1\u0207\1\u0208\4\65"+
    "\1\0\2\65\6\0\14\65\1\0\2\65\13\0\1\65"+
    "\1\0\1\65\24\0\1\u0209\63\0\4\65\5\0\1\65"+
    "\1\u020a\3\65\1\0\2\65\6\0\14\65\1\0\2\65"+
    "\13\0\1\65\1\0\1\65\12\0\4\65\5\0\5\65"+
    "\1\0\2\65\6\0\6\65\1\u020b\5\65\1\0\2\65"+
    "\13\0\1\65\1\0\1\65\27\0\1\266\112\0\1\u020c"+
    "\43\0\4\65\5\0\1\65\1\u020d\3\65\1\0\2\65"+
    "\6\0\14\65\1\0\2\65\13\0\1\65\1\0\1\65"+
    "\61\0\1\u020e\66\0\1\u020f\35\0\4\65\5\0\5\65"+
    "\1\0\2\65\6\0\11\65\1\u0210\2\65\1\0\2\65"+
    "\13\0\1\65\1\0\1\65\46\0\1\u0211\41\0\4\65"+
    "\5\0\5\65\1\0\2\65\6\0\5\65\1\u0212\6\65"+
    "\1\0\2\65\13\0\1\65\1\0\1\65\12\0\4\65"+
    "\5\0\5\65\1\0\2\65\6\0\4\65\1\u0213\7\65"+
    "\1\0\2\65\13\0\1\65\1\0\1\65\45\0\1\u0214"+
    "\42\0\4\65\5\0\5\65\1\0\2\65\6\0\6\65"+
    "\1\u0215\5\65\1\0\2\65\13\0\1\65\1\0\1\65"+
    "\26\0\1\u0216\75\0\1\u0217\114\0\1\u0218\42\0\4\24"+
    "\5\0\3\24\1\u0219\1\24\1\0\2\24\6\0\14\24"+
    "\1\0\2\24\13\0\1\24\1\0\1\24\12\0\4\24"+
    "\5\0\5\24\1\0\2\24\6\0\4\24\1\u021a\7\24"+
    "\1\0\2\24\13\0\1\24\1\0\1\24\50\0\1\u021b"+
    "\37\0\4\24\5\0\5\24\1\0\2\24\6\0\7\24"+
    "\1\u021c\4\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\12\0\4\24\5\0\1\24\1\u021d\3\24\1\0\2\24"+
    "\6\0\14\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\12\0\4\24\5\0\5\24\1\0\2\24\6\0\2\24"+
    "\1\u021e\11\24\1\0\2\24\13\0\1\24\1\0\1\24"+
    "\43\0\1\u021f\57\0\1\u0220\62\0\4\24\5\0\2\24"+
    "\1\u0221\2\24\1\0\2\24\6\0\14\24\1\0\2\24"+
    "\13\0\1\24\1\0\1\24\24\0\1\u0222\63\0\4\24"+
    "\5\0\1\24\1\u0223\3\24\1\0\2\24\6\0\14\24"+
    "\1\0\2\24\13\0\1\24\1\0\1\24\61\0\1\u0224"+
    "\26\0\4\65\5\0\5\65\1\0\2\65\1\u0225\5\0"+
    "\14\65\1\0\2\65\13\0\1\65\1\0\1\65\33\0"+
    "\1\u0225\54\0\4\65\5\0\3\65\1\u0226\1\65\1\0"+
    "\2\65\6\0\14\65\1\0\2\65\13\0\1\65\1\0"+
    "\1\65\24\0\1\u0227\63\0\4\65\5\0\1\65\1\u0228"+
    "\3\65\1\0\2\65\6\0\14\65\1\0\2\65\13\0"+
    "\1\65\1\0\1\65\25\0\1\u0229\62\0\4\65\5\0"+
    "\2\65\1\u022a\2\65\1\0\2\65\6\0\14\65\1\0"+
    "\2\65\13\0\1\65\1\0\1\65\12\0\4\65\5\0"+
    "\4\65\1\u022b\1\0\2\65\6\0\14\65\1\0\2\65"+
    "\13\0\1\65\1\0\1\65\45\0\1\u022c\111\0\1\u022d"+
    "\26\0\4\65\5\0\4\65\1\u022e\1\0\2\65\6\0"+
    "\14\65\1\0\2\65\13\0\1\65\1\0\1\65\53\0"+
    "\1\u022f\51\0\1\u0230\60\0\4\24\5\0\4\24\1\u0231"+
    "\1\0\2\24\6\0\14\24\1\0\2\24\13\0\1\24"+
    "\1\0\1\24\24\0\1\u0232\63\0\4\24\5\0\1\24"+
    "\1\u0233\3\24\1\0\2\24\6\0\14\24\1\0\2\24"+
    "\13\0\1\24\1\0\1\24\12\0\4\24\5\0\2\24"+
    "\1\u0234\2\24\1\0\2\24\6\0\14\24\1\0\2\24"+
    "\13\0\1\24\1\0\1\24\26\0\1\u0235\61\0\4\24"+
    "\5\0\3\24\1\u0236\1\24\1\0\2\24\6\0\14\24"+
    "\1\0\2\24\13\0\1\24\1\0\1\24\65\0\1\u0237"+
    "\60\0\1\u0238\37\0\4\65\5\0\4\65\1\u0239\1\0"+
    "\2\65\6\0\14\65\1\0\2\65\13\0\1\65\1\0"+
    "\1\65\25\0\1\u023a\62\0\4\65\5\0\2\65\1\u023b"+
    "\2\65\1\0\2\65\6\0\14\65\1\0\2\65\13\0"+
    "\1\65\1\0\1\65\26\0\1\u023c\61\0\4\65\5\0"+
    "\3\65\1\u023d\1\65\1\0\2\65\6\0\14\65\1\0"+
    "\2\65\13\0\1\65\1\0\1\65\42\0\1\u023e\120\0"+
    "\1\u023f\53\0\1\u0240\44\0\4\24\5\0\3\24\1\u0241"+
    "\1\24\1\0\2\24\6\0\14\24\1\0\2\24\13\0"+
    "\1\24\1\0\1\24\27\0\1\u0242\60\0\4\24\5\0"+
    "\4\24\1\u0243\1\0\2\24\6\0\14\24\1\0\2\24"+
    "\13\0\1\24\1\0\1\24\62\0\1\u0244\41\0\1\u0245"+
    "\75\0\1\u0246\61\0\4\65\5\0\3\65\1\u0247\1\65"+
    "\1\0\2\65\6\0\14\65\1\0\2\65\13\0\1\65"+
    "\1\0\1\65\27\0\1\u0248\60\0\4\65\5\0\4\65"+
    "\1\u0249\1\0\2\65\6\0\14\65\1\0\2\65\13\0"+
    "\1\65\1\0\1\65\54\0\1\u024a\103\0\1\u024b\25\0"+
    "\4\24\5\0\4\24\1\u024c\1\0\2\24\6\0\14\24"+
    "\1\0\2\24\13\0\1\24\1\0\1\24\61\0\1\u024d"+
    "\43\0\1\u024e\75\0\1\u024f\60\0\4\65\5\0\4\65"+
    "\1\u0250\1\0\2\65\6\0\14\65\1\0\2\65\13\0"+
    "\1\65\1\0\1\65\42\0\1\u0251\114\0\1\347\75\0"+
    "\1\u0252\47\0\1\u0253\67\0\1\u0254\115\0\1\u0255\52\0"+
    "\2\u0256\76\0\1\u0257\100\0\1\u0258\115\0\1\u0259\52\0"+
    "\1\u025a\62\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[27404];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\5\1\7\11\4\1\1\11\1\1\1\0"+
    "\4\1\1\0\1\11\12\1\1\0\1\1\2\0\1\11"+
    "\2\1\3\11\12\1\1\11\1\1\2\11\10\1\1\11"+
    "\2\1\1\11\1\1\2\11\1\1\4\11\25\1\1\11"+
    "\10\1\2\11\1\1\1\0\1\1\2\0\3\1\2\0"+
    "\1\11\10\1\1\0\2\11\2\1\1\11\14\1\1\0"+
    "\3\1\3\0\2\1\2\0\1\11\2\1\2\0\4\1"+
    "\1\0\2\1\4\11\12\1\2\0\1\1\1\0\2\11"+
    "\6\1\1\0\10\1\1\11\1\0\2\1\1\0\12\1"+
    "\4\0\1\1\1\11\3\0\4\1\1\0\6\1\1\0"+
    "\3\1\1\0\7\1\1\0\2\1\1\11\2\1\1\11"+
    "\3\0\1\1\1\0\1\1\1\11\2\0\2\1\1\0"+
    "\5\1\2\0\3\1\1\0\5\1\1\0\4\1\2\0"+
    "\2\1\1\0\1\1\1\0\1\1\1\0\6\1\1\0"+
    "\1\1\1\0\1\1\1\11\1\1\1\0\4\1\1\0"+
    "\4\1\1\0\1\1\1\0\1\11\2\0\1\11\2\1"+
    "\2\0\6\1\1\0\2\1\1\0\3\1\1\0\3\1"+
    "\1\11\1\1\1\0\1\1\1\11\2\0\1\1\1\0"+
    "\1\1\2\0\2\1\1\0\3\1\2\11\3\1\1\11"+
    "\4\1\1\11\1\1\1\0\3\1\2\0\1\1\1\0"+
    "\1\11\5\1\1\0\1\1\1\0\1\1\1\0\4\1"+
    "\1\11\1\1\1\0\1\1\1\0\2\1\1\11\1\1"+
    "\2\0\1\1\2\0\2\1\1\0\1\1\2\0\1\1"+
    "\1\0\3\1\1\11\2\1\2\0\1\1\1\0\2\1"+
    "\1\11\1\1\2\0\2\1\1\0\2\1\1\11\5\1"+
    "\1\11\1\0\3\1\1\0\1\11\1\1\1\0\3\1"+
    "\1\0\1\1\1\0\1\1\1\0\4\1\1\0\1\1"+
    "\1\11\1\1\1\11\1\0\1\1\2\0\2\1\1\11"+
    "\1\1\2\11\1\1\1\11\1\1\1\0\3\1\2\0"+
    "\1\1\1\11\1\0\1\1\1\0\1\11\2\1\1\0"+
    "\3\1\1\0\1\1\1\0\2\1\1\0\1\1\1\0"+
    "\1\11\1\1\1\11\2\1\1\11\1\1\2\0\1\11"+
    "\2\1\1\0\3\1\1\11\1\0\1\1\1\11\1\1"+
    "\2\0\1\1\1\0\1\1\1\0\2\1\2\0\1\1"+
    "\1\0\1\11\1\1\1\11\2\1\1\0\1\1\2\0"+
    "\1\1\1\0\1\1\1\0\1\1\2\0\1\11\1\1"+
    "\1\11\1\1\3\0\1\1\1\11\1\1\2\0\1\1"+
    "\2\0\1\11\1\1\2\11\5\0\1\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[602];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    TranslateControlerTAC tac;
    Integer blockIndentation=0;
    public void addTac(TranslateControlerTAC tac){
        this.tac=tac;
    } 


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MlgLexicAnalizer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 248) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(SimbolosMlg.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /*errores.add(new ErrorAnalisis("Lexico",yytext(),"Caracter no aceptado",yyline+1, yycolumn+1));*/
            }
          case 119: break;
          case 2: 
            { 
            }
          case 120: break;
          case 3: 
            { return new Symbol(SimbolosMlg.DIVISION, yycolumn,yyline,yytext());
            }
          case 121: break;
          case 4: 
            { return new Symbol(SimbolosMlg.MULTIPLICATION, yycolumn,yyline,yytext());
            }
          case 122: break;
          case 5: 
            { return new Symbol(SimbolosMlg.EQUAL, yycolumn,yyline,yytext());
            }
          case 123: break;
          case 6: 
            { return new Symbol(SimbolosMlg.PARENTHESIS_A, yycolumn,yyline,yytext());
            }
          case 124: break;
          case 7: 
            { return new Symbol(SimbolosMlg.PARENTHESIS_B, yycolumn,yyline,yytext());
            }
          case 125: break;
          case 8: 
            { return new Symbol(SimbolosMlg.PLUS, yycolumn,yyline,yytext());
            }
          case 126: break;
          case 9: 
            { return new Symbol(SimbolosMlg.MINUS, yycolumn,yyline,yytext());
            }
          case 127: break;
          case 10: 
            { return new Symbol(SimbolosMlg.ID, yycolumn,yyline,yytext());
            }
          case 128: break;
          case 11: 
            { return new Symbol(SimbolosMlg.NUMBER, yycolumn,yyline,yytext());
            }
          case 129: break;
          case 12: 
            { System.out.println("SALTO ");
            }
          case 130: break;
          case 13: 
            { return new Symbol(SimbolosMlg.POINT, yycolumn,yyline,yytext());
            }
          case 131: break;
          case 14: 
            { return new Symbol(SimbolosMlg.LESS_THAN, yycolumn,yyline,yytext());
            }
          case 132: break;
          case 15: 
            { return new Symbol(SimbolosMlg.GREATER_THAN, yycolumn,yyline,yytext());
            }
          case 133: break;
          case 16: 
            { return new Symbol(SimbolosMlg.COMMA, yycolumn,yyline,yytext());
            }
          case 134: break;
          case 17: 
            { return new Symbol(SimbolosMlg.AMPERSON, yycolumn,yyline,yytext());
            }
          case 135: break;
          case 18: 
            { System.out.println("ERROR "+yytext()); return new Symbol(SimbolosMlg.ERROR,yycolumn,yyline,yytext());
            }
          case 136: break;
          case 19: 
            { System.out.println("ID "+yytext()); return new Symbol(SimbolosMlg.ID, yycolumn,yyline,yytext());
            }
          case 137: break;
          case 20: 
            { System.out.println("NUMBER "+yytext()); return new Symbol(SimbolosMlg.NUMBER, yycolumn,yyline,yytext());
            }
          case 138: break;
          case 21: 
            { return new Symbol(SimbolosMlg.MOD, yycolumn,yyline,yytext());
            }
          case 139: break;
          case 22: 
            { System.out.println("POINT "+yytext());return new Symbol(SimbolosMlg.POINT, yycolumn,yyline,yytext());
            }
          case 140: break;
          case 23: 
            { System.out.println("EQUAL "+yytext());return new Symbol(SimbolosMlg.EQUAL, yycolumn,yyline,yytext());
            }
          case 141: break;
          case 24: 
            { System.out.println("PAREBNTHESIS_A "+yytext());return new Symbol(SimbolosMlg.PARENTHESIS_A, yycolumn,yyline,yytext());
            }
          case 142: break;
          case 25: 
            { System.out.println("PAREBNTHESIS_B "+yytext());return new Symbol(SimbolosMlg.PARENTHESIS_B, yycolumn,yyline,yytext());
            }
          case 143: break;
          case 26: 
            { System.out.println("ESPACIO ");
            }
          case 144: break;
          case 27: 
            { System.out.println("LESS_THAN "+yytext());return new Symbol(SimbolosMlg.LESS_THAN, yycolumn,yyline,yytext());
            }
          case 145: break;
          case 28: 
            { System.out.println("GREATER_THAN "+yytext());return new Symbol(SimbolosMlg.GREATER_THAN, yycolumn,yyline,yytext());
            }
          case 146: break;
          case 29: 
            { System.out.println("COMMA "+yytext());return new Symbol(SimbolosMlg.COMMA, yycolumn,yyline,yytext());
            }
          case 147: break;
          case 30: 
            { System.out.println("AND "+yytext());return new Symbol(SimbolosMlg.AND, yycolumn,yyline,yytext());
            }
          case 148: break;
          case 31: 
            { System.out.println("COLON "+yytext());return new Symbol(SimbolosMlg.COLON, yycolumn,yyline,yytext());
            }
          case 149: break;
          case 32: 
            { System.out.println("NOT_J "+yytext());return new Symbol(SimbolosMlg.NOT, yycolumn,yyline,yytext());
            }
          case 150: break;
          case 33: 
            { System.out.println("OR "+yytext());return new Symbol(SimbolosMlg.OR, yycolumn,yyline,yytext());
            }
          case 151: break;
          case 34: 
            { return new Symbol(SimbolosMlg.SEMICOLON, yycolumn,yyline,yytext());
            }
          case 152: break;
          case 35: 
            { return new Symbol(SimbolosMlg.LEFT_CB, yycolumn,yyline,yytext());
            }
          case 153: break;
          case 36: 
            { return new Symbol(SimbolosMlg.RIGHT_CB, yycolumn,yyline,yytext());
            }
          case 154: break;
          case 37: 
            { System.out.println("ERROR");
            }
          case 155: break;
          case 38: 
            { int in=0;
                                                    for (int i = 0; i < yytext().length(); i++) {
                                                    if (yytext().charAt(i)=='\t') {
                                                            in++; 
                                                    }
                                                    System.out.println(blockIndentation+"         "+in);
                                                    }if(blockIndentation==in){
                                                        System.out.println("NON <<<<<<<<<<");
                                                    }else if(blockIndentation>in){
                                                        Symbol sim=new Symbol(SimbolosMlg.DEDENT, yycolumn,yyline,yytext());
                                                        blockIndentation--;
                                                        yypushback(in);
                                                        System.out.println("DEDENT <<<<<<<<<<");
                                                        return sim;
                                                    }else{
                                                        Symbol sim=new Symbol(SimbolosMlg.INDENT, yycolumn,yyline,yytext());
                                                        blockIndentation++;
                                                        yypushback(in);
                                                        System.out.println("INDENT <<<<<");
                                                        return sim;
                                                    }
            }
          case 156: break;
          case 39: 
            { System.out.println("LEFT_BRACKET "+yytext());return new Symbol(SimbolosMlg.LEFT_BRACKET, yycolumn,yyline,yytext());
            }
          case 157: break;
          case 40: 
            { System.out.println("RIGHT_BRACKET "+yytext());return new Symbol(SimbolosMlg.RIGHT_BRACKET, yycolumn,yyline,yytext());
            }
          case 158: break;
          case 41: 
            { tac.addComment(yytext());
            }
          case 159: break;
          case 42: 
            { return new Symbol(SimbolosMlg.IF, yycolumn,yyline,yytext());
            }
          case 160: break;
          case 43: 
            { return new Symbol(SimbolosMlg.TO_VB, yycolumn,yyline,yytext());
            }
          case 161: break;
          case 44: 
            { return new Symbol(SimbolosMlg.LESS_THAN_EQUAL, yycolumn,yyline,yytext());
            }
          case 162: break;
          case 45: 
            { return new Symbol(SimbolosMlg.GREATER_THAN_EQUAL, yycolumn,yyline,yytext());
            }
          case 163: break;
          case 46: 
            { return new Symbol(SimbolosMlg.AS_VB, yycolumn,yyline,yytext());
            }
          case 164: break;
          case 47: 
            { return new Symbol(SimbolosMlg.OR, yycolumn,yyline,yytext());
            }
          case 165: break;
          case 48: 
            { return new Symbol(SimbolosMlg.DO, yycolumn,yyline,yytext());
            }
          case 166: break;
          case 49: 
            { return new Symbol(SimbolosMlg.DIFERENT_VB, yycolumn,yyline,yytext());
            }
          case 167: break;
          case 50: 
            { System.out.println("LESS_THAN_EQUAL "+yytext());return new Symbol(SimbolosMlg.LESS_THAN_EQUAL, yycolumn,yyline,yytext());
            }
          case 168: break;
          case 51: 
            { System.out.println("GREATER_THAN_EQUAL "+yytext());return new Symbol(SimbolosMlg.GREATER_THAN_EQUAL, yycolumn,yyline,yytext());
            }
          case 169: break;
          case 52: 
            { System.out.println("DIFERENT_J "+yytext());return new Symbol(SimbolosMlg.DIFERENT_VB, yycolumn,yyline,yytext());
            }
          case 170: break;
          case 53: 
            { return new Symbol(SimbolosMlg.IN, yycolumn,yyline,yytext());
            }
          case 171: break;
          case 54: 
            { System.out.println("STRING "+yytext()); return new Symbol(SimbolosMlg.STRING, yycolumn,yyline,yytext());
            }
          case 172: break;
          case 55: 
            { return new Symbol(SimbolosMlg.SUB_VB, yycolumn,yyline,yytext());
            }
          case 173: break;
          case 56: 
            { return new Symbol(SimbolosMlg.DECIMAL, yycolumn,yyline,yytext());
            }
          case 174: break;
          case 57: 
            { return new Symbol(SimbolosMlg.NOT, yycolumn,yyline,yytext());
            }
          case 175: break;
          case 58: 
            { return new Symbol(SimbolosMlg.AND, yycolumn,yyline,yytext());
            }
          case 176: break;
          case 59: 
            { return new Symbol(SimbolosMlg.END_VB, yycolumn,yyline,yytext());
            }
          case 177: break;
          case 60: 
            { return new Symbol(SimbolosMlg.FOR, yycolumn,yyline,yytext());
            }
          case 178: break;
          case 61: 
            { return new Symbol(SimbolosMlg.DIM_VB, yycolumn,yyline,yytext());
            }
          case 179: break;
          case 62: 
            { return new Symbol(SimbolosMlg.STRING, yycolumn,yyline,yytext());
            }
          case 180: break;
          case 63: 
            { System.out.println("DECIMAL "+yytext()); return new Symbol(SimbolosMlg.DECIMAL, yycolumn,yyline,yytext());
            }
          case 181: break;
          case 64: 
            { System.out.println("INTEGERJ "+yytext());return new Symbol(SimbolosMlg.INTEGER_TYPE, yycolumn,yyline,yytext());
            }
          case 182: break;
          case 65: 
            { return new Symbol(SimbolosMlg.DEF, yycolumn,yyline,yytext());
            }
          case 183: break;
          case 66: 
            { System.out.println("CHAR "+yytext()); return new Symbol(SimbolosMlg.CHAR, yycolumn,yyline,yytext());
            }
          case 184: break;
          case 67: 
            { yybegin(VBCODE);System.out.println("VBCODE "+yytext()); return new Symbol(SimbolosMlg.VB_SEPERATOR, yycolumn,yyline,yytext());
            }
          case 185: break;
          case 68: 
            { return new Symbol(SimbolosMlg.STEP_VB, yycolumn,yyline,yytext());
            }
          case 186: break;
          case 69: 
            { return new Symbol(SimbolosMlg.NEXT_VB, yycolumn,yyline,yytext());
            }
          case 187: break;
          case 70: 
            { return new Symbol(SimbolosMlg.TRUE, yycolumn,yyline,yytext());
            }
          case 188: break;
          case 71: 
            { return new Symbol(SimbolosMlg.THEN_VB, yycolumn,yyline,yytext());
            }
          case 189: break;
          case 72: 
            { return new Symbol(SimbolosMlg.ELSE, yycolumn,yyline,yytext());
            }
          case 190: break;
          case 73: 
            { return new Symbol(SimbolosMlg.LOOP_VB, yycolumn,yyline,yytext());
            }
          case 191: break;
          case 74: 
            { return new Symbol(SimbolosMlg.CASE_VB, yycolumn,yyline,yytext());
            }
          case 192: break;
          case 75: 
            { return new Symbol(SimbolosMlg.CHAR_TYPE, yycolumn,yyline,yytext());
            }
          case 193: break;
          case 76: 
            { yybegin(PYCODE); return new Symbol(SimbolosMlg.PYTHON_SEPERATOR, yycolumn,yyline,yytext());
            }
          case 194: break;
          case 77: 
            { return new Symbol(SimbolosMlg.VOID_J, yycolumn,yyline,yytext());
            }
          case 195: break;
          case 78: 
            { return new Symbol(SimbolosMlg.CASE_J, yycolumn,yyline,yytext());
            }
          case 196: break;
          case 79: 
            { return new Symbol(SimbolosMlg.ELIF, yycolumn,yyline,yytext());
            }
          case 197: break;
          case 80: 
            { return new Symbol(SimbolosMlg.CASE, yycolumn,yyline,yytext());
            }
          case 198: break;
          case 81: 
            { return new Symbol(SimbolosMlg.MAIN, yycolumn,yyline,yytext());
            }
          case 199: break;
          case 82: 
            { return new Symbol(SimbolosMlg.FALSE, yycolumn,yyline,yytext());
            }
          case 200: break;
          case 83: 
            { return new Symbol(SimbolosMlg.FLOAT_TYPE, yycolumn,yyline,yytext());
            }
          case 201: break;
          case 84: 
            { return new Symbol(SimbolosMlg.WRITE_VB, yycolumn,yyline,yytext());
            }
          case 202: break;
          case 85: 
            { return new Symbol(SimbolosMlg.WHILE, yycolumn,yyline,yytext());
            }
          case 203: break;
          case 86: 
            { return new Symbol(SimbolosMlg.BREAK, yycolumn,yyline,yytext());
            }
          case 204: break;
          case 87: 
            { return new Symbol(SimbolosMlg.CLASS_J, yycolumn,yyline,yytext());
            }
          case 205: break;
          case 88: 
            { return new Symbol(SimbolosMlg.PRINT, yycolumn,yyline,yytext());
            }
          case 206: break;
          case 89: 
            { return new Symbol(SimbolosMlg.RANGE, yycolumn,yyline,yytext());
            }
          case 207: break;
          case 90: 
            { return new Symbol(SimbolosMlg.SCAN_F, yycolumn,yyline,yytext());
            }
          case 208: break;
          case 91: 
            { return new Symbol(SimbolosMlg.GETCH, yycolumn,yyline,yytext());
            }
          case 209: break;
          case 92: 
            { return new Symbol(SimbolosMlg.CONST, yycolumn,yyline,yytext());
            }
          case 210: break;
          case 93: 
            { return new Symbol(SimbolosMlg.SELECT_VB, yycolumn,yyline,yytext());
            }
          case 211: break;
          case 94: 
            { return new Symbol(SimbolosMlg.PUBLIC, yycolumn,yyline,yytext());
            }
          case 212: break;
          case 95: 
            { yybegin(JAVACODE); return new Symbol(SimbolosMlg.JAVA_SEPERATOR, yycolumn,yyline,yytext());
            }
          case 213: break;
          case 96: 
            { return new Symbol(SimbolosMlg.ELSE_IF_VB, yycolumn,yyline,yytext());
            }
          case 214: break;
          case 97: 
            { return new Symbol(SimbolosMlg.RETURN_VB, yycolumn,yyline,yytext());
            }
          case 215: break;
          case 98: 
            { return new Symbol(SimbolosMlg.SWITCH_J, yycolumn,yyline,yytext());
            }
          case 216: break;
          case 99: 
            { return new Symbol(SimbolosMlg.RETURN_J, yycolumn,yyline,yytext());
            }
          case 217: break;
          case 100: 
            { return new Symbol(SimbolosMlg.RETURN, yycolumn,yyline,yytext());
            }
          case 218: break;
          case 101: 
            { return new Symbol(SimbolosMlg.SWITCH, yycolumn,yyline,yytext());
            }
          case 219: break;
          case 102: 
            { return new Symbol(SimbolosMlg.PRINTF, yycolumn,yyline,yytext());
            }
          case 220: break;
          case 103: 
            { return new Symbol(SimbolosMlg.CLRSCR, yycolumn,yyline,yytext());
            }
          case 221: break;
          case 104: 
            { return new Symbol(SimbolosMlg.INTEGER_TYPE, yycolumn,yyline,yytext());
            }
          case 222: break;
          case 105: 
            { return new Symbol(SimbolosMlg.CONSOLE_VB, yycolumn,yyline,yytext());
            }
          case 223: break;
          case 106: 
            { return new Symbol(SimbolosMlg.WRITELN_VB, yycolumn,yyline,yytext());
            }
          case 224: break;
          case 107: 
            { return new Symbol(SimbolosMlg.DEFAULT_J, yycolumn,yyline,yytext());
            }
          case 225: break;
          case 108: 
            { return new Symbol(SimbolosMlg.DEFAULT, yycolumn,yyline,yytext());
            }
          case 226: break;
          case 109: 
            { return new Symbol(SimbolosMlg.INTINPUT, yycolumn,yyline,yytext());
            }
          case 227: break;
          case 110: 
            { return new Symbol(SimbolosMlg.FUNCTION_VB, yycolumn,yyline,yytext());
            }
          case 228: break;
          case 111: 
            { System.out.println("INCLUDE "+yytext()); return new Symbol(SimbolosMlg.INCLUDE, yycolumn,yyline,yytext());
            }
          case 229: break;
          case 112: 
            { System.out.println("CHHHEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAR"); return new Symbol(SimbolosMlg.FLOATINPUT, yycolumn,yyline,yytext());
            }
          case 230: break;
          case 113: 
            { return new Symbol(SimbolosMlg.CHARINPUT, yycolumn,yyline,yytext());
            }
          case 231: break;
          case 114: 
            { return new Symbol(SimbolosMlg.FLOATINPUT, yycolumn,yyline,yytext());
            }
          case 232: break;
          case 115: 
            { System.out.println("PR "+yytext()); yybegin(PROGRAM); return new Symbol(SimbolosMlg.PROGRAM_SEPERATOR, yycolumn,yyline,yytext());
            }
          case 233: break;
          case 116: 
            { return new Symbol(SimbolosMlg.CHAR, yycolumn,yyline,yytext());
            }
          case 234: break;
          case 117: 
            { return new Symbol(SimbolosMlg.SYSTEM_OUT_PRINT, yycolumn,yyline,yytext());
            }
          case 235: break;
          case 118: 
            { return new Symbol(SimbolosMlg.SYSTEM_OUT_PRINTLN, yycolumn,yyline,yytext());
            }
          case 236: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface SimbolosMlg
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = SimbolosMlg.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java MlgLexicAnalizer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        MlgLexicAnalizer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new MlgLexicAnalizer(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
