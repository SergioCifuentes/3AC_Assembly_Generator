//cup -parser "SyntaxMlgAnalyzer" -symbols "SimbolosMlg" "SyntaxMlg.cup"
package tac_assembly_generator.languages.analyzers.syntax;

import java_cup.runtime.Symbol;

import java.util.ArrayList;
import javax.swing.JTextPane;
import tac_assembly_generator.languages.semantic.verification.TestManager;
import tac_assembly_generator.TAC.TranslateControlerTAC;
import tac_assembly_generator.TAC.quadruple.Operation;
import tac_assembly_generator.TAC.quadruple.Quadruple;
import tac_assembly_generator.TAC.quadruple.BoolQuad;
import tac_assembly_generator.languages.semantic.type.*;
import tac_assembly_generator.TAC.asst.Switch;
import tac_assembly_generator.languages.semantic.UniquenessTable;
import tac_assembly_generator.TAC.asst.For;
import tac_assembly_generator.languages.ResultQuads;
import tac_assembly_generator.languages.semantic.SemanticAsstIdQuad;
import tac_assembly_generator.ui.backend.OutputErrors;

 parser code {:
    

public boolean SyntaxError;
    public boolean SyntaxRecoverableError;
    public TestManager testManager;
    public TranslateControlerTAC translateControlerTAC;
    public boolean error=false;
    public ResultQuads resultQuads;

    public boolean getError(){
        return error;
    }
    public ResultQuads getResultQuad(){
        return resultQuads;
    }
    public void setTestManager(TestManager testManager) {
        this.testManager = testManager;
        testManager.creatFatherAmbit();
    }

public void setTranslateControlerTAC(TranslateControlerTAC translateControlerTAC) {
        this.translateControlerTAC = translateControlerTAC;
                            
    }

     public void syntax_error(Symbol s){
        try {
            String lexema = s.value.toString();
            int fila = s.right;
            int columna = s.left;
            OutputErrors.syntacticRecovered(testManager.getMainFrame().getOutputPannel(), lexema, columna, fila, s);
        } catch (Exception e) {
            System.out.println("error");
            int fila = s.right;
            int columna = s.left;
            System.out.println("\t \tFila: " + fila + "\n");
            System.out.println("\t \tColumna: " + columna + "\n");
        }

    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        try{
            String lexema = s.value.toString();
            int fila = s.right;
            int columna = s.left;
        OutputErrors.syntacticNotRecovered(testManager.getMainFrame().getOutputPannel(), lexema, columna, fila, s);

        } catch (Exception ex) {
            
         }
    }

    public void syntaxerrorhelp(){


    }
:}

action code{:
public boolean error=false;
     protected void mostrarErrores(int numero, Symbol s,SyntaxMlgAnalyzer sma) {
         JTextPane text= sma.testManager.getMainFrame().getOutputPannel();
    switch (numero) {
                case 1:
                    OutputErrors.syntaxFunctionVB(text,s);
                    break;
                case 2:
                    
                    break;
                 case 3:
                    
                    break;
                case 4:
                    break;
                default:
                    throw new AssertionError();
            }
        

    }
:}


terminal VB_SEPERATOR, ERROR;

// Terminals Common Symbols & Keywords*/
terminal EQUAL, PARENTHESIS_A, PARENTHESIS_B, PLUS, MINUS, MULTIPLICATION, DIVISION, MOD,
POINT, AMPERSON, COMMA, INTEGER_TYPE, FLOAT_TYPE, CHAR_TYPE, OR, AND, NOT,
INTINPUT, CHARINPUT, FLOATINPUT, PUBLIC, FOR, WHILE, DO,
TRUE, FALSE, IF, ELSE, GREATER_THAN, RETURN, PRINT,SWITCH, DEFAULT, CASE,
LESS_THAN, GREATER_THAN_EQUAL, LESS_THAN_EQUAL;

terminal String STRING, ID, CHAR;

terminal String NUMBER;
terminal String DECIMAL;

// Terminals Visual Basic */
terminal JAVA_SEPERATOR, DIM_VB, AS_VB,
FUNCTION_VB, END_VB, SUB_VB, CONSOLE_VB, WRITE_VB,
WRITELN_VB, TO_VB, STEP_VB, NEXT_VB, BY_VAL,
DIFERENT_VB, LOOP_VB, NEW,
ELSE_IF_VB, THEN_VB, SELECT_VB, CASE_VB ;


// Terminals Java */
terminal PYTHON_SEPERATOR, CLASS_J, VOID_J, SYSTEM_OUT_PRINTLN,
SYSTEM_OUT_PRINT, SWITCH_J, BREAK, SEMICOLON, THIS,
LEFT_CB, RIGHT_CB, COLON;

// Terminals Python*/
terminal PROGRAM_SEPERATOR, DEDENT, INDENT, DEF, IN, RANGE, ELIF;

// Terminals C*/
terminal CONST, LEFT_BRACKET, RIGHT_BRACKET, INCLUDE,
PRINTF, CLRSCR, GETCH, SCAN_F, MAIN ;

    
//Non-terminals Common or StartUp*/
non terminal Inicio, VB, Java, Python,
VbCode, JavaCode, PythonCode, Program,VbSeperator, PythonSeperator,
OpLogic, Type, Public, JavaSeperator, ProgramSeperator;

//Non-terminals VB*/
non terminal FunctionVB, FunctionVbHeader, ByVal, Funct, SubVb, SubVbHeader, Parameters, Parameter, InstructionsFunctionVb, InstructionsFunctionVb2, LnInstructionsVb, Lines,
OutputVb, ValuesVb, ValueVb, AsType, CycleVb, ForVb, ForVbHeader, ForVbHeaderStart, For, Step, NumberValue,
Number2, Number3, WhileVb, WhileVbHeader, OpBool, OpBool2, OpBool3, BoolValueVb, ExBoolVb, DoWhileVb, DoHeader, DeclarationVb,
DeTypeVb, IdsVb, AssiVb, AssignmentVb, ConditionVb, IfVb, IfVbHeader, ElseVb, ElseHeader, ElseIfHeader,  ThenVb, SwitchVb, SwitchVbHeader,
CasesVb, CasesVbHeader, CaseValue;

//Non-terminals JAVA*/
non terminal ClaseJ, ClaseJHeader,ConstructorJHeader, ParametersJ, ParameterJ, JavaClassCode, ClassCodeJ,
FunctionJ, FunctionJHeader, ProcessJ, ProcessJHeader, LineCodesJ, LineCodeJ3, LineCodesJ2, StringValue,
ValuesOutputJ, ValJ, LineCodeJ, OutputJ, InputJ, JavaClassCode1,
CycleJ, ForJHeader, ForJHeaderStarter, AssignmentStepJ, WhileJHeader , DeclarationJ, AssignmentJ, ConditionJ,
IfJHeader, ElseJ, ElseIfJHeader, ElseJHeader, SwitchJHeader, CasesJ1, CaseJHeader, CasesJ2, CaseJ, BreakJ,
ExBoolJ, BoolValueJ, ConstructorJ; 

//Non-terminals PY*/
non terminal FunctionPY, FunctionLinesPY1, FunctionPYHeader, ParametersPY, IdsPY, FunctionLinesPY, LinesPY,
LineCodePY, OutputPY, OutputValuesPY, CyclePY, ForPY, ForStartPy, ForPYHeader, ForPYHeader2,  
WhilePY, WhilePYHeader, AssignmentPY, ConditionPY, IfPY, IfPYHeader, Elif, ElifHeader, ElseHeaderPY ;


// non Terminals MAIN
non terminal Library, Main, MainHeader, MainCode1, ClaseInstance, InputC, Constantes, Constante, Dimensions, ArrayValues,
Nums, Rows, Globals, Include, MainCode, MainLineCode, DeclarationC, DeclarationGlobalC,IdsC,
AssiC, AssignmentC, ConditionC, IfCHeader, ElseC, ElseCHeader, ElseIfCHeader, SwitchCHeader, CaseElseCHeader, CaseCHeader,
 CasesC, CasesC2, CaseValueC, AssignmentStepC, ForCHeaderStart,NumberValueC,
Number2C, Number3C,CaseC, CycleC, ForCHeader, WhileCHeader, StepC, OutputC, OutputValuesC, OutputValueC,
Getch, Input, FuntionCall, FuntionIDs, ParametersC, ValueC, BoolValueC,FuntionIDsCall,
OpBoolC, OpBoolC2, OpBoolC3, ArrayVal,NumConstC,NumConst2,NumConst3,DimensionsDec, NumDecC, NumDecC2, NumDecC3;

start with Inicio;
Inicio 		::= VB Java Python  Program {:
                                        
                                        sma.testManager.finishAmbit();
                                    sma.translateControlerTAC.acceptCurrentBlock();
                                           sma.testManager.finishAmbit();
                                    sma.translateControlerTAC.acceptCurrentBlock();
                                    sma.resultQuads=new ResultQuads(sma.translateControlerTAC.getcurrentQuads(), sma.testManager.getStack()
                                            , sma.translateControlerTAC.getTempGenerator(), sma.translateControlerTAC.getIncludeLibraries());
                                    sma.error=error; :};
                
/*
    VB
*/
VB 			::= VbSeperator  VbCode {:sma.testManager.switchNextTypes();
                                    sma.testManager.finishAmbit();
                                    sma.translateControlerTAC.acceptCurrentBlock();
                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getcurrentQuads());
                                    :};
                
VbSeperator::= VB_SEPERATOR{:sma.testManager.creatSonAmbit();
                            sma.translateControlerTAC.createNewQuadrupleBlock();
                             :};

VbCode     ::= VbCode Funct   
		        |; 
Funct       ::=FunctionVB
                |SubVb
                |error; //{:mostrarErrores(1,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma);:};
FunctionVB	::= FunctionVbHeader:fun InstructionsFunctionVb:ins END_VB FUNCTION_VB {:ArrayList<Object>quad=new ArrayList<>();
                                                                        if(fun!=null){
                                                                            if(ins==null){
                                                                                quad=sma.translateControlerTAC.tagFunction((String)fun,null);
                                                                            }else{
                                                                                quad=sma.translateControlerTAC.tagFunction((String)fun,(ArrayList<Object>) ins);
                                                                            }
                                                                        
                                                                         
                                                                          }
                                                                         sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    sma.translateControlerTAC.addQuadsToCurrent(quad);:};
FunctionVbHeader::= Public FUNCTION_VB ID:id PARENTHESIS_A Parameters PARENTHESIS_B AS_VB Type:type {:sma.testManager.creatSonAmbit();
                                                                                            sma.translateControlerTAC.createNewQuadrupleBlock();
                                                                                            String name =sma.testManager.insertFunction(id, (Integer) type, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                                            sma.testManager.setAmbitFuction();
                RESULT= name;:};                
SubVb      ::=  SubVbHeader:sub InstructionsFunctionVb:lines END_VB SUB_VB {:ArrayList<Object>quad=new ArrayList<>();
                                                                        if(sub!=null){
                                                                        quad=sma.translateControlerTAC.tagFunction((String)sub,(ArrayList<Object>) lines);
                                                                         
                                                                          }
                                                                         sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    sma.translateControlerTAC.addQuadsToCurrent(quad);:}; 
SubVbHeader::= Public SUB_VB ID:id PARENTHESIS_A Parameters PARENTHESIS_B{:sma.testManager.creatSonAmbit();
                                                                                            sma.translateControlerTAC.createNewQuadrupleBlock();
                                                                                            String name =sma.testManager.insertFunction(id, null, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                RESULT= name;:};
Public::= PUBLIC
            |;
Parameters::= Parameter 
            |;
Parameter   ::= Parameter COMMA ByVal ID:id AS_VB Type:type {:sma.testManager.getParameterControl().insertParameter((Integer)type,id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));:}
                |ByVal ID:id AS_VB Type:type {:sma.testManager.getParameterControl().insertParameter((Integer)type,id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));:} ;
InstructionsFunctionVb  ::=InstructionsFunctionVb2{: RESULT=sma.translateControlerTAC.getcurrentQuads();
                                                    sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    :};
ByVal      ::=BY_VAL
                |;
InstructionsFunctionVb2::= Lines LnInstructionsVb  
                            |Lines RETURN NumberValue:val{:if(val!=null&&sma.testManager.verifyFuctionForReturn(((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()))){
                                                            sma.testManager.insertReturnValue(val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
                                                        }:}
                            |Lines RETURN
                            |LnInstructionsVb 
                            |RETURN NumberValue:val{:if(val!=null&&sma.testManager.verifyFuctionForReturn(((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()))){
                                                            sma.testManager.insertReturnValue(val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
                                                        }:}
                            |RETURN;
Lines               ::=Lines LnInstructionsVb
                        |LnInstructionsVb;
LnInstructionsVb::= Input:in   {:if(in!=null){
                                    SyntaxInputAsst sia= (SyntaxInputAsst)in;
                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.createInputQuads(null,sia.getString()));
                                }
                                :}  
				|OutputVb 
				|CycleVb 
				|DeclarationVb  {:System.out.println("DECLARACION");:}
				|AssignmentVb   {:System.out.println("ASIGNACION");:}
                |ConditionVb  
				|error;
Input			::= INTINPUT PARENTHESIS_A STRING:string PARENTHESIS_B {:RESULT= new SyntaxInputAsst(TypeManager.INTEGER_TYPE,string);:}
					|FLOATINPUT PARENTHESIS_A STRING:string PARENTHESIS_B {:RESULT= new SyntaxInputAsst(TypeManager.FLOAT_TYPE,string);:}
					| CHARINPUT PARENTHESIS_A STRING:string PARENTHESIS_B {:RESULT= new SyntaxInputAsst(TypeManager.CHAR_TYPE,string);:} ;
	
OutputVb		::=CONSOLE_VB POINT WRITE_VB PARENTHESIS_A ValuesVb:vals PARENTHESIS_B{: if(vals!=null){
                                                                                                sma.translateControlerTAC.addQuadsToCurrent((ArrayList<Object>)vals);
                                                                                                
                                                                                            }:}
					|CONSOLE_VB POINT WRITELN_VB PARENTHESIS_A ValuesVb:vals PARENTHESIS_B{:Quadruple lineBreak = sma.translateControlerTAC.createPrintQuad("\"\\n\"");
                                                                                            if(vals!=null){
                                                                                                ArrayList asst=(ArrayList<Object>)vals;
                                                                                                asst.add(lineBreak);
                                                                                                sma.translateControlerTAC.addQuadsToCurrent(asst);
                                                                                                
                                                                                                
                                                                                            }:};
ValuesVb			::= ValuesVb:vals AMPERSON ValueVb:val{:ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll((ArrayList<Object>)vals);
                                    printQuad.addAll((ArrayList<Object>)val);
                                    RESULT=printQuad;:}
				|ValueVb:val {:ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll((ArrayList<Object>)val);
                                    RESULT=printQuad;:};
ValueVb			::=STRING:string {:ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.add(sma.translateControlerTAC.createPrintQuad(string));
                                    RESULT=printQuad;:}
				|NumberValue:val{:ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll(sma.translateControlerTAC.getcurrentTempQuads());
                                    printQuad.add(sma.translateControlerTAC.createPrintQuad(val));
                                    RESULT=printQuad;:};

CycleVb         ::= ForVb
                    |WhileVb
                    |DoWhileVb;

ForVb           ::=  ForVbHeader:f InstructionsFunctionVb:lines NEXT_VB {:if(f!=null){
                                                                For fo=(For)f;
                                                                fo.addCode((ArrayList<Object>)lines);
                                                                sma.translateControlerTAC.addQuadsToCurrent(fo.convertToQuad());
                                                                }:};
                
ForVbHeader           ::= ForVbHeaderStart:id TO_VB NumberValue:num Step:step {:if (id!=null) {
                    SemanticAsstIdQuad saiq= (SemanticAsstIdQuad)id;
                    SynthesizedOpAsst s1= (SynthesizedOpAsst)num;
                    Quadruple quad=sma.translateControlerTAC.getIdForStack((String)saiq.getId());
                    Quadruple quadruple=sma.translateControlerTAC.operateIdBoolQuadruple(quad.getResult(),s1.getQuadruple(),Operation.EQUAL_BOOL);
                    BoolQuad bool =sma.translateControlerTAC.getBoolQuadControl().convertQuadToBool(sma.translateControlerTAC.getcurrentTempQuads());
                     For f=sma.translateControlerTAC.createForAsst(saiq.getQuads(), (String) step, bool, saiq.getId());
                     
                    RESULT=f;}:};
ForVbHeaderStart        ::=For ID:id AS_VB Type:type1 EQUAL NumberValue:val {: boolean boolExistence= sma.testManager.checkExistence(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                if(!boolExistence){

                                                    if(sma.testManager.getTypeManager().isNumerico((Integer)type1)){
                                                        sma.testManager.insertTuple(id,(Integer)type1,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        if(bool){
                                                            sma.translateControlerTAC.createTempIdQuadAssign(val,sma.translateControlerTAC.getStackValue(id));
                                                            RESULT=new SemanticAsstIdQuad(id, sma.translateControlerTAC.getcurrentTempQuads());}
                                                    }else{
                                                        sma.testManager.callNumericError(id,sma.testManager.getTypeManager().getType((Integer)type1),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    }
                                                }
                                                :}
                    |For ID:id EQUAL NumberValue:val{:Type type=sma.testManager.getTypeFromST(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    if(type!=null){
                                                    if(sma.testManager.getTypeManager().isNumerico(type.getNumber())){
                                                        
                                                        boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                             RESULT=new SemanticAsstIdQuad(id, sma.translateControlerTAC.getcurrentTempQuads());
                                                        }
                                                    }else{
                                                        sma.testManager.callNumericError(id,type,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    }}:};
For::= FOR{:sma.testManager.creatSonAmbit();
                                                        sma.translateControlerTAC.createNewQuadrupleBlock();:};
Step            ::= STEP_VB CaseValue:value {:RESULT=value;:}
                    | STEP_VB MINUS CaseValue:value{:RESULT="-"+(String)value;:}
                    | STEP_VB PLUS CaseValue:value{:RESULT=value;:}
                    |{:RESULT="1";:};
//NextVb          ::= NEXT_VB ID
  //                  | NEXT_VB;
                    
NumberValue::= NumberValue:num1 PLUS  Number2:num2 {:if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.PLUS);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }:}
                |NumberValue:num1 MINUS  Number2:num2 {:if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.MINUS);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }:}
                |Number2:asst {:RESULT=asst;:};  
Number2     ::=Number2:num1 MULTIPLICATION  Number3:num2 {:if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.MULTIPLICATION);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }:}
                | Number2:num1 DIVISION  Number3:num2 {:if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.DIVISION);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }:}
                | Number2:num1 MOD  Number3:num2 {:if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.MOD);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }:}
                | Number3:asst {:RESULT=asst;:};
Number3     ::=NUMBER:val{: Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.INTEGER_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL,val,null,null);
		                    RESULT=new SynthesizedOpAsst(quadruple,type);:}

                |DECIMAL:val{:Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.FLOAT_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL,val,null,null);
		                    RESULT=new SynthesizedOpAsst(quadruple,type);:}
                |CHAR :val{:Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.CHAR_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL,val,null,null);
		                    RESULT=new SynthesizedOpAsst(quadruple,type);:}
                |ID:val {:Type type=sma.testManager.getTypeFromST(val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                            if(type!=null){
                                Quadruple quadruple=sma.translateControlerTAC.getIdForStack(val);
                                RESULT=new SynthesizedOpAsst(quadruple,type);
                            }else{
                                RESULT=null;
                            }:}
                |PARENTHESIS_A NumberValue:asst PARENTHESIS_B {:RESULT=asst;:}
                |THIS POINT ID:id{:if(sma.testManager.testIfInClass()){
                    Type type = sma.testManager.verifyClassId(id, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                    Quadruple quad =sma.translateControlerTAC.getThisIdForStack(id);
                    SynthesizedOpAsst saOpAsst= new SynthesizedOpAsst(quad, type);
                    RESULT=saOpAsst;
                }:};
        
         

WhileVb         ::= WhileVbHeader:whileBool InstructionsFunctionVb:lines END_VB WHILE{:BoolQuad bool=(BoolQuad)whileBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.addGotoWhileTags(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool)));
                                                                                    :};
WhileVbHeader   ::= WHILE  OpBool:op{:sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT=op;:};

OpBool::= OpBool:val1 OR OpBool2:val2 {:if(val1!=null &&val2!=null){
                                            RESULT= sma.translateControlerTAC.getBoolQuadControl().operateBoolQuad(val1,val2,Operation.OP_OR);}
                                            :}

       |OpBool2 :val{:RESULT=val;:};
OpBool2::= OpBool2:val1 AND OpBool3:val2 {:if(val1!=null &&val2!=null){
                                            RESULT= sma.translateControlerTAC.getBoolQuadControl().operateBoolQuad(val1,val2,Operation.OP_AND);}
                                            :}
        |OpBool3:val{:RESULT=val;:};
OpBool3::=NOT  BoolValueVb
        |BoolValueVb:val {:if(val!=null){
                   RESULT = sma.translateControlerTAC.getBoolQuadControl().convertQuadToBool(((ArrayList<Object>)val)); 
        }:};
BoolValueVb       ::=TRUE {: Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.BOOL_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL_BOOL,1,1,null);
		                    RESULT=sma.translateControlerTAC.getcurrentTempQuads();:}
                    |FALSE {: Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.BOOL_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL_BOOL,0,1,null);
		                    RESULT=sma.translateControlerTAC.getcurrentTempQuads();:}
                    |NumberValue:num1 ExBoolVb:exVal Number3:num2 {:if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateBoolType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdBoolQuadruple(s1.getQuadruple(),s2.getQuadruple(),(Integer)exVal);
                                                                    RESULT=sma.translateControlerTAC.getcurrentTempQuads();
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }:}
                    | PARENTHESIS_A OpBool:val PARENTHESIS_B {:RESULT=val;:};

ExBoolVb          ::=EQUAL{:RESULT=Operation.EQUAL_BOOL;:}
                    |DIFERENT_VB {:RESULT=Operation.DIFERENT;:}
                    |GREATER_THAN {:RESULT=Operation.GREATER_THAN;:}
                    |LESS_THAN {:RESULT=Operation.LESS_THAN;:}
                    |GREATER_THAN_EQUAL {:RESULT=Operation.GREATER_THAN_EQUAL;:}
                    |LESS_THAN_EQUAL {:RESULT=Operation.LESS_THAN_EQUAL;:};

DoWhileVb       ::= DoHeader  InstructionsFunctionVb:lines LOOP_VB WHILE OpBool:op {:if(op!=null){
                                                                                sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.creatDoWhile((ArrayList<Object>)lines,(BoolQuad)op));
                                                                                }:};

DoHeader        ::= DO{:sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();:};

DeclarationVb     ::= DIM_VB DeTypeVb ID:id AS_VB Type:type AssiVb:val  {:sma.testManager.insertPreTuple(id,null,val, 0,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                    sma.testManager.insertPreTuplesToSymbolTable((Integer)type,0,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
                                                            //         if(val!=null){ 
                                                                        
                                                            // sma.translateControlerTAC.createTempIdQuadAssign(val,id);}
                                                       
                                                        sma.translateControlerTAC.nextIdQuad();
                                                                    :}
                        |DIM_VB  ID:id AS_VB Type:type AssiVb:val  {:sma.testManager.insertPreTuple(id,null,val, 0,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                             sma.testManager.insertPreTuplesToSymbolTable((Integer)type,0,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
                                                            //     if(val!=null){ 
                                                                   
                                                            // sma.translateControlerTAC.createTempIdQuadAssign(val,id);}
                                                       sma.translateControlerTAC.nextIdQuad();
                                                        
                                                                    :}
                        
                        |DIM_VB ID:id AS_VB Type:type EQUAL Input:in {:if(in!=null&&!sma.testManager.checkExistence(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()))){
                                                        SyntaxInputAsst sia = (SyntaxInputAsst)in;

                                                      if(sma.testManager.verifyType((Integer)type,sia.getType(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),id)){
                                                          sma.testManager.insertTuple(id,(Integer)type,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.createInputQuads(id,sia.getString()));
                                                }       
                        }:} ;
DeTypeVb        ::=  DeTypeVb  ID:id  AssiVb:val COMMA {:
                                                        sma.testManager.insertPreTuple(id,null,val,0,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        // if(val!=null){ 
                                                        //     sma.translateControlerTAC.createTempIdQuadAssign(val,id);}
                                                       
                                                        sma.translateControlerTAC.nextIdQuad();
                                                        
:}
                        |ID:id  AssiVb:val COMMA {:
                                                        sma.testManager.insertPreTuple(id,null,val,0,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        // if(val!=null){ 
                                                        //     sma.translateControlerTAC.createTempIdQuadAssign(val,id);}
                                                       
                                                        sma.translateControlerTAC.nextIdQuad();
                                                        
:};
Type          ::=INTEGER_TYPE{:RESULT=TypeManager.INTEGER_TYPE;:}
                    |FLOAT_TYPE {:RESULT=TypeManager.FLOAT_TYPE;:}
                    |CHAR_TYPE{:RESULT=TypeManager.CHAR_TYPE;:};                   

IdsVb           ::= IdsVb COMMA  ID:id AssiVb:val{:sma.testManager.insertPreTuple(id,null,val,0,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        
                                                       
                                                        sma.translateControlerTAC.nextIdQuad();:}  
                    |ID:id AssiVb:val{:sma.testManager.insertPreTuple(id,null,val,0,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                        
                                        sma.translateControlerTAC.nextIdQuad();:}; 

AssiVb            ::= EQUAL NumberValue:val {:RESULT = val;:}
                    |{:System.out.println("ASSI VACIO");:};

AssignmentVb      ::=ID:id EQUAL NumberValue:val {:boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                        sma.translateControlerTAC.acceptAllIdQuas();}:}
                    |ID:id EQUAL Input:in{:Type type = sma.testManager.getTypeFromST(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                            if(type!=null&&in!=null){
                                                SyntaxInputAsst sia= (SyntaxInputAsst) in;
                                                if(sma.testManager.verifyType(type.getNumber(),sia.getType(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),id)){
                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.createInputQuads(id,sia.getString()));
                                                }
                                            }:};

ConditionVb        ::= IfVb
                    |SwitchVb;

IfVb            ::= IfVbHeader:ifBool InstructionsFunctionVb:lines ElseVb:elseBool END_VB IF {:BoolQuad bool=(BoolQuad)ifBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    if(elseBool!=null){bool.changeFatherNoBool((ArrayList<Object>)elseBool);}
                                                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool));
                                                                                    :};
IfVbHeader      ::=IF OpBool:op ThenVb {:sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT=op;:};
ElseVb          ::= ElseHeader  InstructionsFunctionVb:lines{:RESULT=lines;:}


                    |ElseIfHeader:ifBool InstructionsFunctionVb:lines ElseVb:elseBool{:if(ifBool!=null){
                                                                    BoolQuad bool=(BoolQuad)ifBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    if(elseBool!=null){bool.changeFatherNoBool((ArrayList<Object>)elseBool);}
                                                                                    RESULT =sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool);
                                                                                    
                                                                }:}
                    |; 
ElseHeader      ::= ELSE{:sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();:};
ElseIfHeader    ::= ELSE_IF_VB OpBool:op ThenVb{:sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT =op;:};

ThenVb          ::= THEN_VB
                    |;
SwitchVb        ::= SwitchVbHeader CasesVb END_VB SELECT_VB{:sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(sma.translateControlerTAC.getSwitchAsst().getFatherCases()));:};
SwitchVbHeader  ::= SELECT_VB CASE_VB ID:id {:sma.translateControlerTAC.createSwitchAsst(id);:};
CasesVb         ::= CasesVb:caseVb CasesVbHeader:caseH InstructionsFunctionVb:lines{:UniquenessTable ut=(UniquenessTable)caseVb;
                                                                        if(caseH!=null){
                                                                            
                                                                            boolean verified =ut.add(caseH,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                            if(verified){
                                                                            
                                                                            sma.translateControlerTAC.getSwitchAsst().addCases((String)caseH,(ArrayList<Object>)lines);}
                                                                            }
                                                                        RESULT=ut;:} 
                    |CasesVbHeader:caseH InstructionsFunctionVb:lines{:UniquenessTable ut=sma.testManager.createNewUniquenessTable();
                                                                        if(caseH!=null){
                                                                            
                                                                            boolean verified =ut.add(caseH,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                            if(verified){
                                                                            
                                                                            sma.translateControlerTAC.getSwitchAsst().addCases((String)caseH,(ArrayList<Object>)lines);}
                                                                            }
                                                                        RESULT=ut;:};
                                                                            
CasesVbHeader   ::= CASE_VB CaseValue:val{:RESULT=val;
                                            sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();:}

                    |CASE_VB ELSE{:RESULT=Switch.ELSE;
                    sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();:};
CaseValue       ::=NUMBER:num {:RESULT=num;:}
                    |DECIMAL:dec {:RESULT=dec;:}
                    |CHAR:ch  {:RESULT=ch;:}
                    |ID:id {:Type type=sma.testManager.getTypeFromST(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                            if(type!=null){
                                RESULT=id;
                            }:};

/*
    JAVA
*/
Java 			::= JavaSeperator JavaCode {:sma.testManager.switchNextTypes();
                                    sma.testManager.finishAmbit();
                                    sma.translateControlerTAC.acceptCurrentBlock();
                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getcurrentQuads());
                                    :};
JavaSeperator   ::=JAVA_SEPERATOR{:sma.testManager.creatSonAmbit();
                            sma.translateControlerTAC.createNewQuadrupleBlock();
                             :};
JavaCode::=JavaCode ClaseJ
            |;
ClaseJ  ::= ClaseJHeader LEFT_CB JavaClassCode:lines RIGHT_CB {:ArrayList<Object>quad=new ArrayList<>();
                                                                        
                                                                            if(lines!=null){
                                                                                quad=(ArrayList<Object>) lines;
                                                                            }
                                                                        
                                                                         
                                                                        sma.testManager.setCurrentClass(null);
                                                                         sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    sma.translateControlerTAC.addQuadsToCurrent(quad);:};
ClaseJHeader::= Public CLASS_J ID:id {:sma.testManager.creatSonAmbit();
                                    sma.translateControlerTAC.createNewQuadrupleBlock();
                                    sma.testManager.setCurrentClass(sma.testManager.insertClass(id, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek())));:};

JavaClassCode   ::=JavaClassCode1{:RESULT=sma.translateControlerTAC.getcurrentQuads();
                                                    sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    :};
JavaClassCode1::=JavaClassCode1 ClassCodeJ
                |;
ClassCodeJ  ::=FunctionJ
                |ProcessJ
                |DeclarationJ SEMICOLON
                |ConstructorJ
                |error;
ConstructorJ ::=ConstructorJHeader:fun LEFT_CB LineCodesJ:ins RIGHT_CB{:ArrayList<Object>quad=new ArrayList<>();
                                                                        if(fun!=null){
                                                                            if(ins==null){
                                                                                quad=sma.translateControlerTAC.tagFunction((String)fun,null);
                                                                            }else{
                                                                                quad=sma.translateControlerTAC.tagFunction((String)fun,(ArrayList<Object>) ins);
                                                                            }
                                                                        
                                                                         
                                                                          }
                                                                         sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    sma.translateControlerTAC.addQuadsToCurrent(quad);
                                                    sma.testManager.getStack().endClassFunction();:};
ConstructorJHeader::=Public ID:id PARENTHESIS_A ParametersJ PARENTHESIS_B{:sma.testManager.creatSonAmbit();
                                                                                            sma.translateControlerTAC.createNewQuadrupleBlock();
                                                                                            
                                                                                            String name =sma.testManager.insertFunction(id, null, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.testManager.getCurrentClass());
                                                                                            sma.testManager.getStack().addThis();
                                                                                            sma.translateControlerTAC.addHeapManagement(name);
                                                                                             
                RESULT= name;:};
FunctionJ       ::= FunctionJHeader:fun  LEFT_CB LineCodesJ:ins RIGHT_CB{:ArrayList<Object>quad=new ArrayList<>();
                                                                        if(fun!=null){
                                                                            if(ins==null){
                                                                                quad=sma.translateControlerTAC.tagFunction((String)fun,null);
                                                                            }else{
                                                                                quad=sma.translateControlerTAC.tagFunction((String)fun,(ArrayList<Object>) ins);
                                                                            }
                                                                        
                                                                         
                                                                          }
                                                                         sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    sma.translateControlerTAC.addQuadsToCurrent(quad);:};
FunctionJHeader ::= Public Type:type ID:id PARENTHESIS_A ParametersJ PARENTHESIS_B{:sma.testManager.creatSonAmbit();
                                                                                            sma.translateControlerTAC.createNewQuadrupleBlock();
                                                                                            String name =sma.testManager.insertFunction(id, (Integer) type, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.testManager.getCurrentClass());
                                                                                            sma.testManager.setAmbitFuction();
                RESULT= name;:};
ProcessJ        ::= ProcessJHeader:sub LEFT_CB LineCodesJ:lines RIGHT_CB{:ArrayList<Object>quad=new ArrayList<>();
                                                                        if(sub!=null){
                                                                        if(lines==null){
                                                                                quad=sma.translateControlerTAC.tagFunction((String)sub,null);
                                                                            }else{
                                                                                quad=sma.translateControlerTAC.tagFunction((String)sub,(ArrayList<Object>) lines);
                                                                            }
                                                                          }
                                                                         sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    sma.translateControlerTAC.addQuadsToCurrent(quad);:};                 
ProcessJHeader  ::= Public VOID_J ID:id PARENTHESIS_A ParametersJ PARENTHESIS_B{:sma.testManager.creatSonAmbit();
                                                                                            sma.translateControlerTAC.createNewQuadrupleBlock();
                                                                                            String name =sma.testManager.insertFunction(id, null, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.testManager.getCurrentClass());
                RESULT= name;:};
ParametersJ::=ParameterJ
                |;
ParameterJ ::= ParametersJ COMMA Type:type ID:id {:sma.testManager.getParameterControl().insertParameter((Integer)type,id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));:}
                | Type:type ID:id{:sma.testManager.getParameterControl().insertParameter((Integer)type,id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));:} ;

LineCodesJ      ::=LineCodesJ2 {: RESULT=sma.translateControlerTAC.getcurrentQuads();
                                                    sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    :};
LineCodesJ2      ::=LineCodeJ3 RETURN NumberValue:val SEMICOLON{:if(val!=null&&sma.testManager.verifyFuctionForReturn(((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()))){
                                                            sma.testManager.insertReturnValue(val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
                                                        }:}
                    | LineCodeJ3
                    ;
LineCodeJ3      ::= LineCodeJ3 LineCodeJ
                    |;

ValuesOutputJ   ::=ValuesOutputJ:vals PLUS ValJ:val {:ArrayList<Object> printQuad= new ArrayList<Object>();
                                    if (val!=null) {
                           printQuad.addAll((ArrayList<Object>)val);
                }
                if (vals!=null) {
                           printQuad.addAll((ArrayList<Object>)vals);
                }
                                    
                                    RESULT=printQuad;:}
                    |ValJ:val{:ArrayList<Object> printQuad= new ArrayList<Object>();
                                    if (val!=null) {
                           printQuad.addAll((ArrayList<Object>)val);
                }
                                    RESULT=printQuad;:};
                    
ValJ::=ID:id {:Type type = sma.testManager.getTypeFromST(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                            if(type!=null){
                                    ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll(sma.translateControlerTAC.createIdPrintQuad(id));
                                    RESULT=printQuad;}:}
                    |NUMBER:num {:ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.add(sma.translateControlerTAC.createPrintQuad(num));
                                    RESULT=printQuad;:}
                    |DECIMAL:dec {:ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.add(sma.translateControlerTAC.createPrintQuad(dec));
                                    RESULT=printQuad;:}
                    |CHAR:ch {:ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.add(sma.translateControlerTAC.createPrintQuad(ch));
                                    RESULT=printQuad;:}
                    |STRING:string {:ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.add(sma.translateControlerTAC.createPrintQuad(string));
                                    RESULT=printQuad;:}
        |THIS POINT ID:id{::};

LineCodeJ   ::=OutputJ SEMICOLON
                |Input:in SEMICOLON {:if(in!=null){
                                    SyntaxInputAsst sia= (SyntaxInputAsst)in;
                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.createInputQuads(null,sia.getString()));
                                }
                                :} 
                |CycleJ
                |DeclarationJ SEMICOLON  {::}
				|AssignmentJ SEMICOLON  {::}
                |ConditionJ 
                
                |error;
OutputJ     ::=SYSTEM_OUT_PRINT PARENTHESIS_A ValuesOutputJ:vals PARENTHESIS_B {: if(vals!=null){
                                                                                                sma.translateControlerTAC.addQuadsToCurrent((ArrayList<Object>)vals);
                                                                                                
                                                                                            }:}
                |SYSTEM_OUT_PRINTLN PARENTHESIS_A ValuesOutputJ:vals PARENTHESIS_B {:Quadruple lineBreak = sma.translateControlerTAC.createPrintQuad("\"\\n\"");
                                                                                            if(vals!=null){
                                                                                                ArrayList asst=(ArrayList<Object>)vals;
                                                                                                asst.add(lineBreak);
                                                                                                sma.translateControlerTAC.addQuadsToCurrent(asst);
                                                                                                
                                                                                                
                                                                                            }:};

CycleJ      ::=ForJHeader:f LEFT_CB LineCodesJ:lines RIGHT_CB {:if(f!=null){
                                                                For fo=(For)f;
                                                                if(lines!=null){
                                                                    fo.addCode((ArrayList<Object>)lines);
                                                                }else{
                                                                    fo.addCode(new ArrayList<Object>());
                                                                }
                                                                
                                                                sma.translateControlerTAC.addQuadsToCurrent(fo.convertToQuad());
                                                                }:}
                |WhileJHeader:whileBool LEFT_CB LineCodesJ:lines RIGHT_CB {:BoolQuad bool=(BoolQuad)whileBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.addGotoWhileTags(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool)));
                                                                                    :}


                |DO LEFT_CB LineCodesJ:lines RIGHT_CB OpBool:op SEMICOLON{:if(op!=null){
                                                                                sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.creatDoWhile((ArrayList<Object>)lines,(BoolQuad)op));
                                                                                }:};

ForJHeader        ::= ForJHeaderStarter:id OpBool:op SEMICOLON AssignmentStepJ:step PARENTHESIS_B {:if (id!=null) {
                    BoolQuad boolQuad=(BoolQuad)op;
                    SemanticAsstIdQuad saiq= (SemanticAsstIdQuad)id;
                    
                    
                     For f=sma.translateControlerTAC.createForAsst(saiq.getQuads(),step,boolQuad );
                    RESULT=f;}:};
AssignmentStepJ::= ID:id EQUAL NumberValue:val {:boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                        RESULT=sma.translateControlerTAC.getcurrentTempQuads();}:} ;

ForJHeaderStarter ::= For PARENTHESIS_A Type:type1 ID:id EQUAL NumberValue:val SEMICOLON {: boolean boolExistence= sma.testManager.checkExistence(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                if(boolExistence){

                                                    if(sma.testManager.getTypeManager().isNumerico((Integer)type1)){
                                                        sma.testManager.insertTuple(id,(Integer)type1,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                            RESULT=new SemanticAsstIdQuad(id, sma.translateControlerTAC.getcurrentTempQuads());
                                                        }
                                                    }else{
                                                        sma.testManager.callNumericError(id,sma.testManager.getTypeManager().getType((Integer)type1),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    }
                                                }
                                                :}
                        |For PARENTHESIS_A ID:id EQUAL NumberValue:val SEMICOLON {:Type type=sma.testManager.getTypeFromST(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    if(type!=null){
                                                    if(sma.testManager.getTypeManager().isNumerico(type.getNumber())){
                                                        
                                                        boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                            RESULT=new SemanticAsstIdQuad(id, sma.translateControlerTAC.getcurrentTempQuads());
                                                        }
                                                    }else{
                                                        sma.testManager.callNumericError(id,type,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    }}:};

WhileJHeader        ::= WHILE PARENTHESIS_A OpBool:op PARENTHESIS_B  {:sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT=op;:}; 
  
DeclarationJ    ::=Public Type:type IdsVb{:sma.translateControlerTAC.removeIdQuad();
                                        sma.testManager.insertPreTuplesToSymbolTable((Integer)type,0,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
                                            :}
                    
                    |Public Type:type ID:id EQUAL Input:in {:if(in!=null&&!sma.testManager.checkExistence(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()))){
                                                        SyntaxInputAsst sia = (SyntaxInputAsst)in;

                                                      if(sma.testManager.verifyType((Integer)type,sia.getType(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),id)){
                                                          sma.testManager.insertTuple(id,(Integer)type,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.createInputQuads(id,sia.getString()));
                                                }       
                        }:}; 
                    
AssignmentJ     ::= ID:id EQUAL NumberValue:val{:boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                        sma.translateControlerTAC.acceptAllIdQuas();}:}
                    |ID:id EQUAL Input:in{:Type type = sma.testManager.getTypeFromST(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                            if(type!=null&&in!=null){
                                                SyntaxInputAsst sia= (SyntaxInputAsst) in;
                                                if(sma.testManager.verifyType(type.getNumber(),sia.getType(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),id)){
                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.createInputQuads(id,sia.getString()));
                                                }
                                            }:}
                    |THIS POINT ID:id EQUAL NumberValue:val{: if (val != null) {
                    SynthesizedOpAsst soa = (SynthesizedOpAsst) val;
                    Type type = sma.testManager.verifyClassId(id, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                    if (type != null) {
                        if (sma.testManager.operateType(type.getNumber(), soa.getType().getNumber(), ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek())) != null) {
                            sma.translateControlerTAC.createTempThisIdQuad(val, id);
                            sma.translateControlerTAC.acceptAllIdQuas();
                        }
                    }
                }:} 
                    |THIS POINT ID:id EQUAL Input:in;


ConditionJ      ::= IfJHeader:ifBool LEFT_CB LineCodesJ:lines RIGHT_CB ElseJ:elseBool {:BoolQuad bool=(BoolQuad)ifBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    if(elseBool!=null){bool.changeFatherNoBool((ArrayList<Object>)elseBool);}
                                                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool));
                                                                                    :}
                    |SwitchJHeader LEFT_CB CasesJ1 RIGHT_CB{:sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(sma.translateControlerTAC.getSwitchAsst().getFatherCases()));:};
IfJHeader       ::= IF PARENTHESIS_A OpBool:op PARENTHESIS_B{:sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT=op;:};
ElseJ           ::= ElseJHeader LEFT_CB LineCodesJ:lines RIGHT_CB  {:RESULT=lines;:}
                    | ElseIfJHeader:ifBool LEFT_CB LineCodeJ:lines RIGHT_CB ElseJ:elseBool {:if(ifBool!=null){
                                                                    BoolQuad bool=(BoolQuad)ifBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    if(elseBool!=null){bool.changeFatherNoBool((ArrayList<Object>)elseBool);}
                                                                                    RESULT =sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool);
                                                                                    
                                                                }:}
                    |;
 ElseJHeader      ::= ELSE{:sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();:};
ElseIfJHeader    ::= ELSE IF PARENTHESIS_A OpBool:op PARENTHESIS_B {:sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT =op;:};

SwitchJHeader   ::= SWITCH_J PARENTHESIS_A ID:id PARENTHESIS_B {:sma.translateControlerTAC.createSwitchAsst(id);:};
CasesJ1          ::=CasesJ2 CaseJ
                |CasesJ2 CaseElseCHeader:caseJ COLON LineCodesJ:lines BreakJ {:UniquenessTable ut=sma.testManager.createNewUniquenessTable();
                                                                        if(caseJ!=null){
                                                                            
                                                                            boolean verified =ut.add(caseJ,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                            if(verified){
                                                                            
                                                                            sma.translateControlerTAC.getSwitchAsst().addCases((String)caseJ,(ArrayList<Object>)lines);}
                                                                            }
                                                                        RESULT=ut;:}
                |CaseJ;

CasesJ2         ::= CasesJ2 CaseJ
                    | CaseJ;
CaseJ           ::= CaseJHeader:caseJ COLON LineCodesJ:lines BreakJ {:UniquenessTable ut=sma.testManager.createNewUniquenessTable();
                                                                        if(caseJ!=null){
                                                                            
                                                                            boolean verified =ut.add(caseJ,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                            if(verified){
                                                                            
                                                                            sma.translateControlerTAC.getSwitchAsst().addCases((String)caseJ,(ArrayList<Object>)lines);}
                                                                            }
                                                                        RESULT=ut;:};
CaseJHeader ::=CASE ValJ:val{:RESULT=val;
                                            sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();:};
BreakJ         ::= BREAK SEMICOLON;
/*
    Python
*/
Python 	    ::= PythonSeperator PythonCode {:sma.testManager.switchNextTypes();
                                            sma.testManager.finishAmbit();
                                    sma.translateControlerTAC.acceptCurrentBlock();
                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getcurrentQuads());
                                    :};
PythonSeperator::=PYTHON_SEPERATOR{:sma.testManager.creatSonAmbit();
                            sma.translateControlerTAC.createNewQuadrupleBlock();
                             :};
PythonCode  ::=  PythonCode  FunctionPY
                |;
FunctionPY  ::= FunctionPYHeader:fun INDENT FunctionLinesPY:ins DEDENT {:ArrayList<Object>quad=new ArrayList<>();
                                                                        if(fun!=null){
                                                                        quad=sma.translateControlerTAC.tagFunction((String)fun,(ArrayList<Object>) ins);
                                                                         
                                                                          }
                                                                         sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    sma.translateControlerTAC.addQuadsToCurrent(quad);:}
            |error;
FunctionPYHeader::= DEF ID:id PARENTHESIS_A ParametersPY PARENTHESIS_B COLON{:sma.testManager.creatSonAmbit();
                                                                                            sma.translateControlerTAC.createNewQuadrupleBlock();
                                                                                            String name =sma.testManager.insertFunction(id,TypeManager.VAR_TYPE, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                RESULT= name;:};
ParametersPY    ::=IdsPY
                    |;
IdsPY       ::= IdsPY COMMA  ID:id {:sma.testManager.getParameterControl().insertParameter(TypeManager.VAR_TYPE,id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));:}
                |ID:id{:sma.testManager.getParameterControl().insertParameter(TypeManager.VAR_TYPE,id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));:};
FunctionLinesPY::=FunctionLinesPY1{:RESULT=sma.translateControlerTAC.getcurrentQuads();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    :};
FunctionLinesPY1::=LinesPY  
                            |LinesPY RETURN NumberValue;
LinesPY               ::=LinesPY LineCodePY
                        |;
LineCodePY  ::= Input:in {:if(in!=null){
                                    SyntaxInputAsst sia= (SyntaxInputAsst)in;
                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.createInputQuads(null,sia.getString()));
                                }:}     
				|OutputPY 
				|CyclePY  
				|AssignmentPY  
                |ConditionPY  
				|error;
OutputPY        ::=PRINT PARENTHESIS_A OutputValuesPY:vals PARENTHESIS_B{: if(vals!=null){
                                                                                                sma.translateControlerTAC.addQuadsToCurrent((ArrayList<Object>)vals);
                                                                                                
                                                                                            }:};
OutputValuesPY  ::=OutputValuesPY:vals COMMA ValueVb:val{:ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll((ArrayList<Object>)vals);
                                    printQuad.addAll((ArrayList<Object>)val);
                                    RESULT=printQuad;:}
                    
                    |ValueVb:val {:ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll((ArrayList<Object>)val);
                                    RESULT=printQuad;:};

CyclePY         ::=ForPY
                    |WhilePY;
ForPY           ::=ForPYHeader:f COLON INDENT FunctionLinesPY:lines DEDENT{:if(f!=null){
                                                                For fo=(For)f;
                                                                fo.addCode((ArrayList<Object>)lines);
                                                                sma.translateControlerTAC.addQuadsToCurrent(fo.convertToQuad());
                                                                }:};
                    
ForPYHeader     ::=ForPYHeader2:id COMMA NumberValue:num COMMA CaseValue:step PARENTHESIS_B{:if (id!=null) {
                    SemanticAsstIdQuad saiq= (SemanticAsstIdQuad)id;
                    SynthesizedOpAsst s1= (SynthesizedOpAsst)num;
                    Quadruple quad=sma.translateControlerTAC.getIdForStack((String)saiq.getId());
                    
                    Quadruple quadruple=sma.translateControlerTAC.operateIdBoolQuadruple(quad.getResult(),s1.getQuadruple(),Operation.EQUAL_BOOL);
                    BoolQuad bool =sma.translateControlerTAC.getBoolQuadControl().convertQuadToBool(sma.translateControlerTAC.getcurrentTempQuads());
                     For f=sma.translateControlerTAC.createForAsst(saiq.getQuads(), (String) step, bool, saiq.getId());
                    RESULT=f;}:}
                    |ForPYHeader2:id COMMA NumberValue:num PARENTHESIS_B{:if (id!=null) {
                    SemanticAsstIdQuad saiq= (SemanticAsstIdQuad)id;
                    SynthesizedOpAsst s1= (SynthesizedOpAsst)num;
                    Quadruple quad=sma.translateControlerTAC.getIdForStack((String)saiq.getId());
                    Quadruple quadruple=sma.translateControlerTAC.operateIdBoolQuadruple(quad.getResult(),s1.getQuadruple(),Operation.EQUAL_BOOL);
                    BoolQuad bool =sma.translateControlerTAC.getBoolQuadControl().convertQuadToBool(sma.translateControlerTAC.getcurrentTempQuads());
                     For f=sma.translateControlerTAC.createForAsst(saiq.getQuads(), "1", bool, saiq.getId());
                    RESULT=f;}:};
ForPYHeader2    ::=ForStartPy ID:id IN RANGE PARENTHESIS_A NumberValue:val{:if (id!=null) {
                    if(!sma.testManager.checkExistence(id)){
                        sma.testManager.insertTuple(id,TypeManager.VAR_TYPE,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                       }
                       sma.translateControlerTAC.createTempIdQuadAssign(val,sma.translateControlerTAC.getStackValue(id));
                       RESULT=new SemanticAsstIdQuad(id, sma.translateControlerTAC.getcurrentTempQuads());
                                                        
                    
                    }:};
ForStartPy::= FOR{:sma.translateControlerTAC.createNewQuadrupleBlock();:};


WhilePY         ::=WhilePYHeader:whileBool INDENT FunctionLinesPY:lines DEDENT {:BoolQuad bool=(BoolQuad)whileBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.addGotoWhileTags(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool)));
                                                                                    :};
WhilePYHeader   ::=WHILE OpBool:op COLON {:
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT=op;:};
AssignmentPY    ::=ID:id EQUAL NumberValue:num{:if(num!=null){
                                                                    if(!sma.testManager.checkExistence(id)){
                                                                    sma.testManager.insertTuple(id,TypeManager.VAR_TYPE,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                            }
                                                           sma.translateControlerTAC.createTempIdQuadAssign(num,id);
                                                        sma.translateControlerTAC.acceptAllIdQuas();}
                                                    
:}
                    |ID:id EQUAL Input:in {:Type type = sma.testManager.getTypeFromST(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                            if(type!=null&&in!=null){
                                                SyntaxInputAsst sia= (SyntaxInputAsst) in;
                                                
                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.createInputQuads(id,sia.getString()));
                                                
                                            }:};  
ConditionPY     ::=IfPY;
IfPY            ::=IfPYHeader:ifBool INDENT FunctionLinesPY:lines DEDENT Elif:elseBool{:BoolQuad bool=(BoolQuad)ifBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    if(elseBool!=null){bool.changeFatherNoBool((ArrayList<Object>)elseBool);}
                                                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool));
                                                                                    :};
IfPYHeader      ::=      IF OpBool:op COLON {:sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT=op;:};
Elif            ::= ElifHeader:ifBool INDENT FunctionLinesPY:lines DEDENT Elif:elseBool {:if(ifBool!=null){
                                                                    BoolQuad bool=(BoolQuad)ifBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    if(elseBool!=null){bool.changeFatherNoBool((ArrayList<Object>)elseBool);}
                                                                                    RESULT =sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool);
                                                                                    
                                                                }:}
                    |ElseHeaderPY INDENT FunctionLinesPY:lines DEDENT {:RESULT=lines;:}
                    |;
ElseHeaderPY    ::=ELSE COLON{:sma.translateControlerTAC.createNewQuadrupleBlock();:};
ElifHeader      ::=ELIF OpBool:op COLON {:sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT =op;:};
/*
    C
*/

Program ::=ProgramSeperator Library Constantes Globals Main {:
                                    sma.testManager.finishAmbit();
                                    sma.translateControlerTAC.acceptCurrentBlock();
                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getcurrentQuads());
                                    :} ;
ProgramSeperator  ::=PROGRAM_SEPERATOR{:sma.testManager.creatSonAmbit();
                            sma.translateControlerTAC.createNewQuadrupleBlock();
                            sma.testManager.enterMain();
                              String name =sma.testManager.insertFunction("main", null, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                             :};
Library::= Library Include 
            | ;
Constantes ::= Constantes  Constante SEMICOLON{:sma.translateControlerTAC.acceptAllIdQuas();:}
                |Constante SEMICOLON {:sma.translateControlerTAC.acceptAllIdQuas();:};
Constante::=CONST Type:type ID:id EQUAL NumConstC:val{:
                                        if(val!=null){ 
                                            boolean bool=sma.testManager.insertConst(id,(Integer)type,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        if(bool){
                                                            Quadruple quad= sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                        quad.setConstante(true);
                                                        
                                                        }
                                                       
                                                       }
                                        
                                        :};
            //|CONST Type ID Dimensions EQUAL ArrayValues;
NumConstC ::=  NumConstC:num1 PLUS  NumConst2: num2 {:if(num1!=null &&num2!=null){ 
                                                               RESULT=sma.testManager.operateConstAsst(num1,num2,Operation.PLUS,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                            }:}
                |NumConstC:num1 MINUS  NumConst2:num2 {:if(num1!=null &&num2!=null){
                                                                RESULT=sma.testManager.operateConstAsst(num1,num2,Operation.MINUS,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                            }:}
                |NumConst2:asst {:RESULT=asst;:};  
NumConst2     ::=NumConst2:num1 MULTIPLICATION  NumConst3:num2 {:if(num1!=null &&num2!=null){
                                                                RESULT=sma.testManager.operateConstAsst(num1,num2,Operation.MULTIPLICATION,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                            }:}
                | NumConst2:num1 DIVISION  NumConst3:num2 {:if(num1!=null &&num2!=null){
                                                            RESULT=sma.testManager.operateConstAsst(num1,num2,Operation.DIVISION,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                            }:}
                | NumConst2:num1 MOD  NumConst3:num2 {:if(num1!=null &&num2!=null){ 
                                                                    RESULT=sma.testManager.operateConstAsst(num1,num2,Operation.MOD,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                            }:}
                | NumConst3:asst {:RESULT=asst;:};
NumConst3     ::=NUMBER:val{: RESULT=new SyntaxConstAsst(Integer.valueOf(val),TypeManager.INTEGER_TYPE);:}         
                |CHAR :val{:RESULT=new SyntaxConstAsst(val,TypeManager.CHAR_TYPE);:}
                |DECIMAL:val{:RESULT=new SyntaxConstAsst(Float.valueOf(val),TypeManager.FLOAT_TYPE);:}
                |PARENTHESIS_A NumberValue:asst PARENTHESIS_B {:RESULT=asst;:};




NumberValueC::= NumberValueC:num1 PLUS  Number2C:num2 {:if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.PLUS);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }:}
                |NumberValueC:num1 MINUS  Number2C:num2 {:if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.MINUS);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }:}
                |Number2C:asst {:RESULT=asst;:};  
Number2C     ::=Number2C:num1 MULTIPLICATION  Number3C:num2 {:if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.MULTIPLICATION);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }:}
                | Number2C:num1 DIVISION  Number3C:num2 {:if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.DIVISION);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }:}
                | Number2C:num1 MOD  Number3C:num2 {:if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.MOD);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }:}
                | Number3C:asst {:RESULT=asst;:};
Number3C     ::=NUMBER:val{: Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.INTEGER_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL,val,null,null);
		                    RESULT=new SynthesizedOpAsst(quadruple,type);:}

                |DECIMAL:val{:Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.FLOAT_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL,val,null,null);
		                    RESULT=new SynthesizedOpAsst(quadruple,type);:}
                |CHAR :val{:Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.CHAR_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL,val,null,null);
		                    RESULT=new SynthesizedOpAsst(quadruple,type);:}
                |ID:val {:Type type=sma.testManager.getTypeFromST(val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                            if(type!=null){
                                Quadruple quadruple=sma.translateControlerTAC.getIdForStack(val);
                                RESULT=new SynthesizedOpAsst(quadruple,type);
                            }else{
                                RESULT=null;
                            }:}
                |PARENTHESIS_A NumberValueC:asst PARENTHESIS_B {:RESULT=asst;:}
                |ID:id Dimensions:dimensions{:if(dimensions!=null){
                                            RESULT =sma.testManager.getArrayType(id,dimensions,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);

                }:}
                |FuntionCall:fun {:RESULT= fun;:};
                //|ObjectFuntionCall;



Dimensions ::= Dimensions:dims LEFT_BRACKET NumberValueC:val RIGHT_BRACKET{:if(dims!=null){
                                                                            ArrayList<Object> dim=new ArrayList<>();
                                                                            ArrayList<Object> asst=(ArrayList<Object>) dims;
                                                                            dim.addAll(asst);
                                                                            if(val!=null){
                                                                        SynthesizedOpAsst soa= (SynthesizedOpAsst)val;
                                                                        if(sma.testManager.verifyIntegerValue(val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()))){
                                                                                dim.add(soa.getQuadruple().getResult());
                                                                            RESULT =dim;}
}}:}
                |LEFT_BRACKET NumberValueC:val RIGHT_BRACKET{:ArrayList<Object> dim=new ArrayList<>();
                                                            if(val!=null){
                                                                SynthesizedOpAsst soa= (SynthesizedOpAsst)val;
                                                                if(sma.testManager.verifyIntegerValue(val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()))){
                                                                    dim.add(soa.getQuadruple().getResult());
                                                                RESULT =dim;}
                                                                }:};
/*ArrayValues ::= LEFT_CB Nums RIGHT_CB
                | LEFT_CB Rows RIGHT_CB;
Nums        ::= Nums COMMA NumberValueC
                |NumberValueC;
Rows        ::= Rows COMMA LEFT_CB Nums RIGHT_BRACKET
                |LEFT_CB Nums RIGHT_BRACKET;*/

Globals     ::=Globals  DeclarationC SEMICOLON {::}
                |DeclarationC SEMICOLON {::};

DimensionsDec ::= DimensionsDec:dims LEFT_BRACKET NumDecC:val RIGHT_BRACKET{:if(dims!=null){
                                                                            ArrayList<Object> dim=new ArrayList<>();
                                                                            ArrayList<Object> asst=(ArrayList<Object>) dims;
                                                                            dim.addAll(asst);
                                                                            if(val!=null){
                                                                                dim.add(val);
                                                                            }RESULT=dim;
                                                                            }:}
                |LEFT_BRACKET NumDecC:val RIGHT_BRACKET{:ArrayList<Object> dim=new ArrayList<>();
                                                            if(val!=null){
                                                                    dim.add(val);
                                                                RESULT =dim;}
                                                                :};
NumDecC ::=  NumDecC:num1 PLUS  NumDecC2: num2 {:if(num1!=null &&num2!=null){ 
                                                               RESULT=(Integer)num1+(Integer)num2;
                                                            }:}
                |NumDecC:num1 MINUS  NumDecC2:num2 {:if(num1!=null &&num2!=null){
                                                                RESULT=(Integer)num1-(Integer)num2;
                                                            }:}
                |NumDecC2:asst {:RESULT=asst;:};  
NumDecC2     ::=NumDecC2:num1 MULTIPLICATION  NumDecC3:num2 {:if(num1!=null &&num2!=null){
                                                                RESULT=(Integer)num1*(Integer)num2;
                                                            }:}
                | NumDecC2:num1 DIVISION  NumDecC3:num2 {:if(num1!=null &&num2!=null){
                                                            RESULT=(Integer)num1/(Integer)num2;
                                                            }:}
                | NumDecC2:num1 MOD  NumDecC3:num2 {:if(num1!=null &&num2!=null){ 
                                                                    RESULT=(Integer)num1%(Integer)num2;
                                                            }:}
                | NumDecC3:asst {:RESULT=asst;:};
NumDecC3     ::=NUMBER:val{: RESULT=Integer.valueOf(val);:}         
                |CHAR :val{:char charVal=val.charAt(1);
                 RESULT=(int)charVal;:}
                |ID:val {:RESULT=sma.testManager.getConstValue(val, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));:}
                |PARENTHESIS_A NumberValue:asst PARENTHESIS_B {:RESULT=asst;:};
Include ::= INCLUDE STRING:id {:sma.testManager.include(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);:}
            |INCLUDE LESS_THAN FuntionIDs GREATER_THAN;
FuntionIDs::= ID:id1 POINT ID:id2{:sma.testManager.include(id1,id2,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);:}
            |ID:id{:sma.testManager.include(id,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);:}
            |ID:id1 POINT MULTIPLICATION{:sma.testManager.include(id1,"*",((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);:};
Main::= MainHeader:name LEFT_CB MainCode:lines RIGHT_CB {:ArrayList<Object>quad=new ArrayList<>();
                                                                        if(name!=null){
                                                                        quad=sma.translateControlerTAC.tagFunction((String)name,(ArrayList<Object>) lines);
                                                                         
                                                                          }
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    sma.translateControlerTAC.addQuadsToCurrent(quad);:}
        |error;

MainHeader::= VOID_J MAIN PARENTHESIS_A  PARENTHESIS_B{:
                RESULT= "void main";:};
MainCode   ::= MainCode1 {:RESULT=sma.translateControlerTAC.getcurrentQuads();
                                                    sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    :};
MainCode1 ::= MainCode1 MainLineCode
            |MainLineCode;
MainLineCode ::= DeclarationC SEMICOLON
                |AssignmentC SEMICOLON
                |ConditionC
                |CycleC
                |OutputC SEMICOLON
                |Getch SEMICOLON {:sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getch(null));:}
                |InputJ SEMICOLON
                |FuntionCall SEMICOLON{:sma.translateControlerTAC.acceptAllIdQuas();:}
                |ClaseInstance SEMICOLON
                |error;
ClaseInstance   ::= ID:idClass ID:id EQUAL NEW ID:idClass2 PARENTHESIS_A ParametersC:para PARENTHESIS_B{:SynthesizedOpAsst sao=sma.testManager.verifyClass(idClass, idClass2,id, (ArrayList<SynthesizedOpAsst>)para, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), sma.translateControlerTAC);
                if(sao!=null){sma.translateControlerTAC.createTempIdQuadAssign(sao,id);
                                                        sma.translateControlerTAC.acceptAllIdQuas();}:}
                    | ID:idClass ID:id EQUAL NEW ID:idClass2 PARENTHESIS_A  PARENTHESIS_B{:sma.testManager.verifyClass(idClass, idClass2, id,null, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), sma.translateControlerTAC);:};
InputJ  ::= SCAN_F PARENTHESIS_A STRING:string COMMA AMPERSON ID:id PARENTHESIS_B{: String split= sma.testManager.testInput(id, string, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                        if(split!=null){
                                                                                sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.createInputQuads(string,id,split));
                                                                            }:};
DeclarationC  ::= Type:type IdsC ID:id AssiC:val {: sma.testManager.insertPreTuple(id,null,val, 0,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                    sma.testManager.insertPreTuplesToSymbolTable((Integer)type,0,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
                                   sma.translateControlerTAC.nextIdQuad(); :}
                |Type:type ID:id AssiC:val {: sma.testManager.insertPreTuple(id,null,val, 0,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                    sma.testManager.insertPreTuplesToSymbolTable((Integer)type,0,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
                                   sma.translateControlerTAC.nextIdQuad(); :}
                |Type:type ID:id EQUAL Getch{:if(!sma.testManager.checkExistence(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()))){
                                                      
                                                      sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getch(id));     
                        }:} 
                |Type:type ID:id DimensionsDec:dims {:if(dims!=null&&!sma.testManager.checkExistence(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()))){

                        ArrayList<Object> dimensions=(ArrayList<Object>)dims;
                        sma.testManager.insertArray(id, (Integer) type, dimensions, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                        sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.createArrayQuads(id,dimensions));
                    }:};
IdsC           ::=IdsC   ID:id AssiC:val COMMA {:sma.testManager.insertPreTuple(id,null,val,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        //if(val!=null){ 
                                                          //  sma.translateControlerTAC.createTempIdQuadAssign(val,id);}
                                                       
                                                        sma.translateControlerTAC.nextIdQuad();:}  
                    |ID:id AssiC:val COMMA {:sma.testManager.insertPreTuple(id,null,val,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        //if(val!=null){ 
                                                          //  sma.translateControlerTAC.createTempIdQuadAssign(val,id);}
                                                       
                                                        sma.translateControlerTAC.nextIdQuad();:} ; 
AssiC            ::= EQUAL NumberValueC:val{:RESULT =val;:}
                   // |Dimensions EQUAL ArrayValues
                    |{:System.out.println("ASSI VACIO");:};

AssignmentC::= ID:id EQUAL NumberValueC:val {:boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                        sma.translateControlerTAC.acceptAllIdQuas();}:}  
                |ID:id Dimensions:dim EQUAL NumberValueC:val{:if(dim !=null&& val!=null){
                            SynthesizedOpAsst soa=sma.testManager.getArrayType(id,dim,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
                            boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,soa.getQuadruple().getResult());
                                                        sma.translateControlerTAC.acceptAllIdQuas();}}:}  
             
                |ID:id EQUAL Getch{:Type type = sma.testManager.getTypeFromST(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                    if(type!=null){
                                        sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getch(id));}:};
                
ConditionC  ::= IfCHeader:ifBool LEFT_CB MainCode:lines RIGHT_CB ElseC:elseBool {:BoolQuad bool=(BoolQuad)ifBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    if(elseBool!=null){bool.changeFatherNoBool((ArrayList<Object>)elseBool);}
                                                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool));
                                                                                    :}
                |SwitchCHeader  LEFT_CB CasesC RIGHT_CB {:sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(sma.translateControlerTAC.getSwitchAsst().getFatherCases()));:};
IfCHeader::= IF PARENTHESIS_A OpBoolC:op PARENTHESIS_B{:sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT=op;:};
ElseC          ::= ElseCHeader LEFT_CB MainCode:lines RIGHT_CB{:RESULT=lines;:}
                    |ElseIfCHeader:ifBool LEFT_CB MainCode:lines RIGHT_CB ElseC:elseBool{:if(ifBool!=null){
                                                                    BoolQuad bool=(BoolQuad)ifBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    if(elseBool!=null){bool.changeFatherNoBool((ArrayList<Object>)elseBool);}
                                                                                    RESULT =sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool);
                                                                                    
                                                                }:}
                    |; 
ElseCHeader      ::= ELSE{:sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();:};
ElseIfCHeader    ::= ELSE IF PARENTHESIS_A OpBoolC:op PARENTHESIS_B {:sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT =op;:};
SwitchCHeader::=SWITCH PARENTHESIS_A ID:id PARENTHESIS_B {:sma.translateControlerTAC.createSwitchAsst(id);:};
CasesC       ::=CasesC2 CaseC
                |CasesC2 CaseElseCHeader:caseH COLON MainCode:lines BREAK SEMICOLON{:UniquenessTable ut=sma.testManager.createNewUniquenessTable();
                                                                        if(caseH!=null){
                                                                            
                                                                            boolean verified =ut.add(caseH,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                            if(verified){
                                                                            
                                                                            sma.translateControlerTAC.getSwitchAsst().addCases((String)caseH,(ArrayList<Object>)lines);}
                                                                            }
                                                                        RESULT=ut;:}
                |CaseC;
CasesC2     ::= CasesC2 CaseC
                |CaseC;
CaseC       ::= CaseCHeader:caseH COLON MainCode:lines BREAK SEMICOLON{:UniquenessTable ut=sma.testManager.createNewUniquenessTable();
                                                                        if(caseH!=null){
                                                                            
                                                                            boolean verified =ut.add(caseH,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                            if(verified){
                                                                            
                                                                            sma.translateControlerTAC.getSwitchAsst().addCases((String)caseH,(ArrayList<Object>)lines);}
                                                                            }
                                                                        RESULT=ut;:};
CaseCHeader ::=  CASE CaseValueC:val{:RESULT=val;
                                            sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();:};
CaseElseCHeader ::=  DEFAULT{:RESULT=Switch.ELSE;
                    sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();:};

CaseValueC  ::=NUMBER:num {:RESULT=num;:}
                    |DECIMAL:dec {:RESULT=dec;:}
                    |CHAR:ch  {:RESULT=ch;:}
                    |ID:id {:Type type=sma.testManager.getTypeFromST(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                            if(type!=null){
                                RESULT=id;
                            }:}
                    |ArrayVal;

CycleC      ::=ForCHeader:f LEFT_CB MainCode:lines RIGHT_CB {:if(f!=null){
                                                                For fo=(For)f;
                                                                fo.addCode((ArrayList<Object>)lines);
                                                                sma.translateControlerTAC.addQuadsToCurrent(fo.convertToQuad());
                                                                }:}
                |WhileCHeader:whileBool LEFT_CB MainCode:lines RIGHT_CB{:BoolQuad bool=(BoolQuad)whileBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.addGotoWhileTags(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool)));
                                                                                    :}
                |DoHeader LEFT_CB MainCode:lines RIGHT_CB WHILE PARENTHESIS_A OpBoolC:op PARENTHESIS_B SEMICOLON{:if(op!=null){
                                                                                sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.creatDoWhile((ArrayList<Object>)lines,(BoolQuad)op));
                                                                                }:};
           
ForCHeader        ::= ForCHeaderStart:id  OpBoolC:op SEMICOLON AssignmentStepC:step PARENTHESIS_B {:if (id!=null) {
                    BoolQuad boolQuad=(BoolQuad)op;
                    SemanticAsstIdQuad saiq= (SemanticAsstIdQuad)id;
                    
                    
                     For f=sma.translateControlerTAC.createForAsst(saiq.getQuads(),step,boolQuad );
                    RESULT=f;}:};


ForCHeaderStart     ::=For PARENTHESIS_A Type:type1 ID:id EQUAL NumberValueC:val SEMICOLON {: boolean boolExistence= sma.testManager.checkExistence(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                if(boolExistence){

                                                    if(sma.testManager.getTypeManager().isNumerico((Integer)type1)){
                                                        sma.testManager.insertTuple(id,(Integer)type1,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                            RESULT=new SemanticAsstIdQuad(id, sma.translateControlerTAC.getcurrentTempQuads());
                                                        }
                                                    }else{
                                                        sma.testManager.callNumericError(id,sma.testManager.getTypeManager().getType((Integer)type1),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    }
                                                }
                                                :}
                        |For PARENTHESIS_A ID:id EQUAL NumberValueC:val SEMICOLON {:Type type=sma.testManager.getTypeFromST(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    if(type!=null){
                                                    if(sma.testManager.getTypeManager().isNumerico(type.getNumber())){
                                                        
                                                        boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                            RESULT=new SemanticAsstIdQuad(id, sma.translateControlerTAC.getcurrentTempQuads());
                                                        }
                                                    }else{
                                                        sma.testManager.callNumericError(id,type,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    }}:};

WhileCHeader        ::= WHILE PARENTHESIS_A OpBoolC:op PARENTHESIS_B{:sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT=op;:}; 
AssignmentStepC::= ID:id EQUAL NumberValueC:val {:boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                        RESULT=sma.translateControlerTAC.getcurrentTempQuads();}:} ;


OutputC         ::= PRINTF PARENTHESIS_A  OutputValuesC:vals PARENTHESIS_B {: if(vals!=null){
                                                                                            ArrayList<Object> prints=sma.testManager.verifyPrints((ArrayList<Object>)vals,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
                                                                                                if(prints!=null){

                                                                                                }
                                                                                                
                                                                                            }:}
                    |CLRSCR PARENTHESIS_A PARENTHESIS_B {:sma.translateControlerTAC.addClrScrToCurrent();:};
OutputValuesC   ::= OutputValuesC:vals COMMA OutputValueC:val {:ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll((ArrayList<Object>)vals);
                                    printQuad.addAll((ArrayList<Object>)val);
                                    RESULT=printQuad;:}
                    |OutputValueC:val {:ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll((ArrayList<Object>)val);
                                    RESULT=printQuad;:};
OutputValueC    ::= NumberValueC:val {:ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll(sma.translateControlerTAC.getcurrentTempQuads());
                                    printQuad.add(val);
                                    RESULT=printQuad;:}
                    |STRING:string {:ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.add(string);
                                    RESULT=printQuad;:};

Getch ::=GETCH PARENTHESIS_A PARENTHESIS_B;
Input   ::= SCAN_F PARENTHESIS_A STRING COMMA AMPERSON ID PARENTHESIS_B ;

FuntionCall::=FuntionIDsCall:ids PARENTHESIS_A ParametersC:para PARENTHESIS_B{:if(para!=null){
                                                                            SynthesizedOpAsst sao=sma.testManager.verifyFunction((String)ids,(ArrayList<SynthesizedOpAsst>)para,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
                                                                            if(sao!=null){
                                                                                RESULT= sao;
                                                                            }else{
                                                                                sma.translateControlerTAC.removeIdQuads();
                                                                            }
                                                                        }:}
                |FuntionIDsCall:ids PARENTHESIS_A PARENTHESIS_B{:
                                                                            SynthesizedOpAsst sao=sma.testManager.verifyFunction((String)ids,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
                                                                            if(sao!=null){
                                                                                RESULT =sao;
                                                                            }else{
                                                                                sma.translateControlerTAC.removeIdQuads();
                                                                            }
                                                                        :};
FuntionIDsCall::= ID:id1 POINT ID:id2{:RESULT=id1+"."+id2;:}
            |ID:id{:RESULT = id;:};
ParametersC::=ParametersC:paramsC COMMA NumberValueC:val {:ArrayList<SynthesizedOpAsst> params=new ArrayList<SynthesizedOpAsst>();
                            if(paramsC!=null){params.addAll((ArrayList<SynthesizedOpAsst>)paramsC);}
                                                        if(val!=null){
                                SynthesizedOpAsst soa=(SynthesizedOpAsst)val;
                                //sma.translateControlerTAC.creatTempIdQuad(Operation.PARAMS,null,null,soa.getQuadruple().getResult());
                                params.add(soa);
                            }
                            RESULT=params;:} 
            |NumberValueC:val{:ArrayList<SynthesizedOpAsst> params=new ArrayList<SynthesizedOpAsst>();
                            if(val!=null){
                                SynthesizedOpAsst soa=(SynthesizedOpAsst)val;
                                //sma.translateControlerTAC.creatTempIdQuad(Operation.PARAMS,null,null,soa.getQuadruple().getResult());
                                params.add(soa);
                            }
                            RESULT=params;:};
ArrayVal::= ID Dimensions;

OpBoolC::=  OpBoolC:val1 OR OpBoolC2:val2 {:if(val1!=null &&val2!=null){
                                            RESULT= sma.translateControlerTAC.getBoolQuadControl().operateBoolQuad(val1,val2,Operation.OP_OR);}
                                            :}

       |OpBoolC2 :val{:RESULT=val;:};
OpBoolC2::= OpBoolC2:val1 AND OpBoolC3:val2 {:if(val1!=null &&val2!=null){
                                            RESULT= sma.translateControlerTAC.getBoolQuadControl().operateBoolQuad(val1,val2,Operation.OP_AND);}
                                            :}
        |OpBoolC3:val{:RESULT=val;:};
OpBoolC3::=NOT  BoolValueC
        |BoolValueC:val {:if(val!=null){
                   RESULT = sma.translateControlerTAC.getBoolQuadControl().convertQuadToBool(((ArrayList<Object>)val)); 
        }:};
BoolValueC       ::=TRUE {: Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.BOOL_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL_BOOL,1,1,null);
		                    RESULT=sma.translateControlerTAC.getcurrentTempQuads();:}
                    |FALSE {: Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.BOOL_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL_BOOL,0,1,null);
		                    RESULT=sma.translateControlerTAC.getcurrentTempQuads();:}
                    |NumberValueC:num1 ExBoolVb:exVal NumberValueC:num2 {:if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateBoolType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdBoolQuadruple(s1.getQuadruple(),s2.getQuadruple(),(Integer)exVal);
                                                                    RESULT=sma.translateControlerTAC.getcurrentTempQuads();
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }:}
                    | PARENTHESIS_A OpBoolC:val PARENTHESIS_B {:RESULT=val;:};



