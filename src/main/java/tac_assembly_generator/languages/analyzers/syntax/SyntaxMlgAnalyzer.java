
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Oct 10 18:39:53 CST 2020
//----------------------------------------------------

package tac_assembly_generator.languages.analyzers.syntax;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import tac_assembly_generator.languages.semantic.verification.TestManager;
import tac_assembly_generator.TAC.TranslateControlerTAC;
import tac_assembly_generator.TAC.quadruple.Operation;
import tac_assembly_generator.TAC.quadruple.Quadruple;
import tac_assembly_generator.TAC.quadruple.BoolQuad;
import tac_assembly_generator.languages.semantic.type.Type;
import tac_assembly_generator.languages.semantic.type.TypeManager;
import tac_assembly_generator.TAC.asst.Switch;
import tac_assembly_generator.languages.semantic.UniquenessTable;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Oct 10 18:39:53 CST 2020
  */
public class SyntaxMlgAnalyzer extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SyntaxMlgAnalyzer() {super();}

  /** Constructor which sets the default scanner. */
  public SyntaxMlgAnalyzer(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SyntaxMlgAnalyzer(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u012b\000\002\002\004\000\002\002\006\000\002\003" +
    "\004\000\002\012\003\000\002\006\004\000\002\006\004" +
    "\000\002\006\002\000\002\006\004\000\002\016\006\000" +
    "\002\017\012\000\002\020\006\000\002\021\010\000\002" +
    "\015\003\000\002\015\002\000\002\022\003\000\002\022" +
    "\002\000\002\023\007\000\002\023\005\000\002\024\003" +
    "\000\002\025\004\000\002\025\005\000\002\025\004\000" +
    "\002\025\003\000\002\025\004\000\002\025\003\000\002" +
    "\027\004\000\002\027\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\030\006\000" +
    "\002\030\006\000\002\030\006\000\002\031\010\000\002" +
    "\031\010\000\002\032\005\000\002\032\003\000\002\033" +
    "\003\000\002\033\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\035\005\000\002\036\006\000" +
    "\002\037\010\000\002\037\006\000\002\040\004\000\002" +
    "\040\005\000\002\040\005\000\002\040\002\000\002\041" +
    "\005\000\002\041\005\000\002\041\003\000\002\042\005" +
    "\000\002\042\005\000\002\042\005\000\002\042\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\043\003\000\002\043\005\000\002\044\006\000\002\045" +
    "\004\000\002\046\005\000\002\046\003\000\002\047\005" +
    "\000\002\047\003\000\002\050\004\000\002\050\003\000" +
    "\002\051\003\000\002\051\003\000\002\051\005\000\002" +
    "\051\005\000\002\052\003\000\002\052\003\000\002\052" +
    "\003\000\002\052\003\000\002\052\003\000\002\052\003" +
    "\000\002\053\007\000\002\054\004\000\002\055\010\000" +
    "\002\055\006\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\056\006\000\002\056\004\000\002\057" +
    "\004\000\002\057\002\000\002\060\005\000\002\061\003" +
    "\000\002\061\003\000\002\062\007\000\002\063\005\000" +
    "\002\064\004\000\002\064\007\000\002\064\002\000\002" +
    "\065\003\000\002\065\002\000\002\066\006\000\002\067" +
    "\005\000\002\070\005\000\002\070\004\000\002\071\004" +
    "\000\002\071\004\000\002\072\003\000\002\072\003\000" +
    "\002\072\003\000\002\072\003\000\002\004\004\000\002" +
    "\007\004\000\002\007\002\000\002\073\006\000\002\074" +
    "\005\000\002\076\006\000\002\076\004\000\002\077\004" +
    "\000\002\077\003\000\002\100\003\000\002\100\003\000" +
    "\002\100\003\000\002\100\003\000\002\140\006\000\002" +
    "\075\007\000\002\101\006\000\002\101\005\000\002\102" +
    "\010\000\002\102\007\000\002\103\006\000\002\103\005" +
    "\000\002\104\010\000\002\104\007\000\002\105\005\000" +
    "\002\105\003\000\002\106\004\000\002\106\003\000\002" +
    "\107\003\000\002\107\003\000\002\110\005\000\002\110" +
    "\003\000\002\111\005\000\002\111\003\000\002\112\003" +
    "\000\002\112\003\000\002\112\003\000\002\112\003\000" +
    "\002\113\004\000\002\113\004\000\002\113\003\000\002" +
    "\113\004\000\002\113\004\000\002\113\003\000\002\113" +
    "\003\000\002\114\006\000\002\114\006\000\002\115\006" +
    "\000\002\115\006\000\002\115\006\000\002\116\006\000" +
    "\002\116\006\000\002\116\010\000\002\117\017\000\002" +
    "\117\016\000\002\120\006\000\002\121\005\000\002\121" +
    "\006\000\002\121\006\000\002\121\006\000\002\121\006" +
    "\000\002\122\005\000\002\122\004\000\002\123\005\000" +
    "\002\124\003\000\002\124\006\000\002\125\007\000\002" +
    "\126\006\000\002\127\006\000\002\127\004\000\002\127" +
    "\002\000\002\130\006\000\002\131\004\000\002\131\007" +
    "\000\002\131\003\000\002\132\004\000\002\132\003\000" +
    "\002\133\007\000\002\134\004\000\002\134\002\000\002" +
    "\135\003\000\002\135\003\000\002\135\003\000\002\135" +
    "\003\000\002\135\003\000\002\135\003\000\002\136\004" +
    "\000\002\136\005\000\002\136\003\000\002\136\003\000" +
    "\002\136\005\000\002\137\005\000\002\137\003\000\002" +
    "\005\004\000\002\010\002\000\002\011\007\000\002\141" +
    "\004\000\002\141\002\000\002\143\005\000\002\143\004" +
    "\000\002\144\007\000\002\144\010\000\002\145\006\000" +
    "\002\145\005\000\002\146\005\000\002\146\005\000\002" +
    "\147\005\000\002\147\003\000\002\150\007\000\002\150" +
    "\005\000\002\151\005\000\002\151\004\000\002\152\004" +
    "\000\002\152\006\000\002\142\011\000\002\153\004\000" +
    "\002\153\003\000\002\154\004\000\002\154\004\000\002" +
    "\154\003\000\002\154\003\000\002\154\004\000\002\154" +
    "\004\000\002\154\004\000\002\154\004\000\002\155\004" +
    "\000\002\156\006\000\002\156\004\000\002\157\004\000" +
    "\002\157\003\000\002\157\005\000\002\157\002\000\002" +
    "\160\005\000\002\160\006\000\002\161\006\000\002\161" +
    "\006\000\002\162\006\000\002\163\006\000\002\164\004" +
    "\000\002\164\007\000\002\164\003\000\002\165\004\000" +
    "\002\165\003\000\002\166\006\000\002\167\006\000\002" +
    "\167\006\000\002\167\010\000\002\170\015\000\002\170" +
    "\014\000\002\171\006\000\002\172\005\000\002\172\006" +
    "\000\002\172\006\000\002\172\006\000\002\172\006\000" +
    "\002\173\006\000\002\173\005\000\002\174\005\000\002" +
    "\174\003\000\002\175\003\000\002\175\003\000\002\175" +
    "\003\000\002\175\003\000\002\176\005\000\002\177\011" +
    "\000\002\200\006\000\002\200\005\000\002\201\005\000" +
    "\002\201\003\000\002\202\005\000\002\202\003\000\002" +
    "\203\003\000\002\203\003\000\002\203\003\000\002\203" +
    "\003\000\002\203\003\000\002\206\004\000\002\204\004" +
    "\000\002\204\005\000\002\204\003\000\002\204\003\000" +
    "\002\204\003\000\002\204\005\000\002\205\005\000\002" +
    "\205\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02a1\000\004\004\004\001\002\000\014\003\ufffe\033" +
    "\ufffe\055\ufffe\060\ufffe\062\ufffe\001\002\000\004\055\343" +
    "\001\002\000\014\003\012\033\015\055\ufffb\060\ufff4\062" +
    "\ufff4\001\002\000\004\002\010\001\002\000\004\002\001" +
    "\001\002\000\004\055\uffff\001\002\000\014\003\012\033" +
    "\015\055\ufffb\060\ufff4\062\ufff4\001\002\000\014\003\012" +
    "\033\015\055\ufffb\060\ufff4\062\ufff4\001\002\000\034\003" +
    "\075\030\074\031\106\032\057\034\104\035\055\036\064" +
    "\041\061\051\062\056\067\063\063\064\053\076\066\001" +
    "\002\000\006\060\ufff5\062\ufff5\001\002\000\014\003\012" +
    "\033\015\055\ufffb\060\ufff4\062\ufff4\001\002\000\034\003" +
    "\075\030\074\031\106\032\057\034\104\035\055\036\064" +
    "\041\061\051\062\056\067\063\063\064\053\076\066\001" +
    "\002\000\006\060\022\062\021\001\002\000\004\051\044" +
    "\001\002\000\004\051\023\001\002\000\004\007\024\001" +
    "\002\000\006\010\ufff2\051\025\001\002\000\004\057\042" +
    "\001\002\000\004\010\037\001\002\000\006\010\ufff3\021" +
    "\030\001\002\000\004\051\031\001\002\000\004\057\032" +
    "\001\002\000\010\022\034\023\036\024\035\001\002\000" +
    "\006\010\ufff1\021\ufff1\001\002\000\056\003\uffa9\006\uffa9" +
    "\010\uffa9\021\uffa9\030\uffa9\031\uffa9\032\uffa9\034\uffa9\035" +
    "\uffa9\036\uffa9\041\uffa9\042\uffa9\051\uffa9\056\uffa9\061\uffa9" +
    "\063\uffa9\064\uffa9\071\uffa9\073\uffa9\074\uffa9\076\uffa9\077" +
    "\uffa9\001\002\000\056\003\uffa7\006\uffa7\010\uffa7\021\uffa7" +
    "\030\uffa7\031\uffa7\032\uffa7\034\uffa7\035\uffa7\036\uffa7\041" +
    "\uffa7\042\uffa7\051\uffa7\056\uffa7\061\uffa7\063\uffa7\064\uffa7" +
    "\071\uffa7\073\uffa7\074\uffa7\076\uffa7\077\uffa7\001\002\000" +
    "\056\003\uffa8\006\uffa8\010\uffa8\021\uffa8\030\uffa8\031\uffa8" +
    "\032\uffa8\034\uffa8\035\uffa8\036\uffa8\041\uffa8\042\uffa8\051" +
    "\uffa8\056\uffa8\061\uffa8\063\uffa8\064\uffa8\071\uffa8\073\uffa8" +
    "\074\uffa8\076\uffa8\077\uffa8\001\002\000\004\057\040\001" +
    "\002\000\010\022\034\023\036\024\035\001\002\000\034" +
    "\003\ufff8\030\ufff8\031\ufff8\032\ufff8\034\ufff8\035\ufff8\036" +
    "\ufff8\041\ufff8\051\ufff8\056\ufff8\063\ufff8\064\ufff8\076\ufff8" +
    "\001\002\000\010\022\034\023\036\024\035\001\002\000" +
    "\006\010\ufff0\021\ufff0\001\002\000\004\007\045\001\002" +
    "\000\006\010\ufff2\051\025\001\002\000\004\010\047\001" +
    "\002\000\034\003\ufff6\030\ufff6\031\ufff6\032\ufff6\034\ufff6" +
    "\035\ufff6\036\ufff6\041\ufff6\051\ufff6\056\ufff6\063\ufff6\064" +
    "\ufff6\076\ufff6\001\002\000\050\003\uffe5\030\uffe5\031\uffe5" +
    "\032\uffe5\034\uffe5\035\uffe5\036\uffe5\041\uffe5\042\uffe5\051" +
    "\uffe5\056\uffe5\061\uffe5\063\uffe5\064\uffe5\071\uffe5\073\uffe5" +
    "\074\uffe5\076\uffe5\077\uffe5\001\002\000\050\003\uffd5\030" +
    "\uffd5\031\uffd5\032\uffd5\034\uffd5\035\uffd5\036\uffd5\041\uffd5" +
    "\042\uffd5\051\uffd5\056\uffd5\061\uffd5\063\uffd5\064\uffd5\071" +
    "\uffd5\073\uffd5\074\uffd5\076\uffd5\077\uffd5\001\002\000\004" +
    "\067\323\001\002\000\004\017\312\001\002\000\050\003" +
    "\uffd4\030\uffd4\031\uffd4\032\uffd4\034\uffd4\035\uffd4\036\uffd4" +
    "\041\uffd4\042\uffd4\051\uffd4\056\uffd4\061\uffd4\063\uffd4\064" +
    "\uffd4\071\uffd4\073\uffd4\074\uffd4\076\uffd4\077\uffd4\001\002" +
    "\000\022\007\200\027\202\037\176\040\177\051\123\052" +
    "\132\053\126\054\131\001\002\000\050\003\uffa0\030\uffa0" +
    "\031\uffa0\032\uffa0\034\uffa0\035\uffa0\036\uffa0\041\uffa0\042" +
    "\uffa0\051\uffa0\056\uffa0\061\uffa0\063\uffa0\064\uffa0\071\uffa0" +
    "\073\uffa0\074\uffa0\076\uffa0\077\uffa0\001\002\000\004\007" +
    "\306\001\002\000\034\003\075\030\074\031\106\032\057" +
    "\034\104\035\055\036\064\041\061\051\062\056\067\063" +
    "\303\064\053\076\066\001\002\000\022\007\200\027\202" +
    "\037\176\040\177\051\123\052\132\053\126\054\131\001" +
    "\002\000\004\006\277\001\002\000\032\007\125\042\uffe9" +
    "\050\255\051\123\052\132\053\126\054\131\061\uffe9\071" +
    "\uffe9\073\uffe9\074\uffe9\077\uffe9\001\002\000\034\003\075" +
    "\030\074\031\106\032\057\034\104\035\055\036\064\041" +
    "\061\051\062\056\067\063\063\064\053\076\066\001\002" +
    "\000\050\003\uffa1\030\uffa1\031\uffa1\032\uffa1\034\uffa1\035" +
    "\uffa1\036\uffa1\041\uffa1\042\uffa1\051\uffa1\056\uffa1\061\uffa1" +
    "\063\uffa1\064\uffa1\071\uffa1\073\uffa1\074\uffa1\076\uffa1\077" +
    "\uffa1\001\002\000\004\077\265\001\002\000\004\051\242" +
    "\001\002\000\034\003\075\030\074\031\106\032\057\034" +
    "\104\035\055\036\064\041\061\051\062\056\067\063\063" +
    "\064\053\076\066\001\002\000\050\003\uffe3\030\uffe3\031" +
    "\uffe3\032\uffe3\034\uffe3\035\uffe3\036\uffe3\041\uffe3\042\uffe3" +
    "\051\uffe3\056\uffe3\061\uffe3\063\uffe3\064\uffe3\071\uffe3\073" +
    "\uffe3\074\uffe3\076\uffe3\077\uffe3\001\002\000\050\003\uffe6" +
    "\030\uffe6\031\uffe6\032\uffe6\034\uffe6\035\uffe6\036\uffe6\041" +
    "\uffe6\042\uffe6\051\uffe6\056\uffe6\061\uffe6\063\uffe6\064\uffe6" +
    "\071\uffe6\073\uffe6\074\uffe6\076\uffe6\077\uffe6\001\002\000" +
    "\050\003\uffe2\030\uffe2\031\uffe2\032\uffe2\034\uffe2\035\uffe2" +
    "\036\uffe2\041\uffe2\042\uffe2\051\uffe2\056\uffe2\061\uffe2\063" +
    "\uffe2\064\uffe2\071\uffe2\073\uffe2\074\uffe2\076\uffe2\077\uffe2" +
    "\001\002\000\004\007\234\001\002\000\050\003\uffe0\030" +
    "\uffe0\031\uffe0\032\uffe0\034\uffe0\035\uffe0\036\uffe0\041\uffe0" +
    "\042\uffe0\051\uffe0\056\uffe0\061\uffe0\063\uffe0\064\uffe0\071" +
    "\uffe0\073\uffe0\074\uffe0\076\uffe0\077\uffe0\001\002\000\016" +
    "\042\uffef\061\uffef\071\uffef\073\uffef\074\uffef\077\uffef\001" +
    "\002\000\034\003\075\030\074\031\106\032\057\034\104" +
    "\035\055\036\064\041\061\051\062\056\067\063\063\064" +
    "\053\076\066\001\002\000\050\003\uffe4\030\uffe4\031\uffe4" +
    "\032\uffe4\034\uffe4\035\uffe4\036\uffe4\041\uffe4\042\uffe4\051" +
    "\uffe4\056\uffe4\061\uffe4\063\uffe4\064\uffe4\071\uffe4\073\uffe4" +
    "\074\uffe4\076\uffe4\077\uffe4\001\002\000\050\003\uffe1\030" +
    "\uffe1\031\uffe1\032\uffe1\034\uffe1\035\uffe1\036\uffe1\041\uffe1" +
    "\042\uffe1\051\uffe1\056\uffe1\061\uffe1\063\uffe1\064\uffe1\071" +
    "\uffe1\073\uffe1\074\uffe1\076\uffe1\077\uffe1\001\002\000\004" +
    "\077\154\001\002\000\004\061\150\001\002\000\004\051" +
    "\116\001\002\000\034\003\075\030\074\031\106\032\057" +
    "\034\104\035\055\036\064\041\061\051\062\056\067\063" +
    "\063\064\053\076\066\001\002\000\004\007\111\001\002" +
    "\000\050\003\uffd6\030\uffd6\031\uffd6\032\uffd6\034\uffd6\035" +
    "\uffd6\036\uffd6\041\uffd6\042\uffd6\051\uffd6\056\uffd6\061\uffd6" +
    "\063\uffd6\064\uffd6\071\uffd6\073\uffd6\074\uffd6\076\uffd6\077" +
    "\uffd6\001\002\000\050\003\uffe7\030\uffe7\031\uffe7\032\uffe7" +
    "\034\uffe7\035\uffe7\036\uffe7\041\uffe7\042\uffeb\051\uffe7\056" +
    "\uffe7\061\uffeb\063\uffe7\064\uffe7\071\uffeb\073\uffeb\074\uffeb" +
    "\076\uffe7\077\uffeb\001\002\000\004\050\112\001\002\000" +
    "\004\010\113\001\002\000\050\003\uffdd\030\uffdd\031\uffdd" +
    "\032\uffdd\034\uffdd\035\uffdd\036\uffdd\041\uffdd\042\uffdd\051" +
    "\uffdd\056\uffdd\061\uffdd\063\uffdd\064\uffdd\071\uffdd\073\uffdd" +
    "\074\uffdd\076\uffdd\077\uffdd\001\002\000\004\071\115\001" +
    "\002\000\050\003\uffd3\030\uffd3\031\uffd3\032\uffd3\034\uffd3" +
    "\035\uffd3\036\uffd3\041\uffd3\042\uffd3\051\uffd3\056\uffd3\061" +
    "\uffd3\063\uffd3\064\uffd3\071\uffd3\073\uffd3\074\uffd3\076\uffd3" +
    "\077\uffd3\001\002\000\006\006\117\057\120\001\002\000" +
    "\014\007\125\051\123\052\132\053\126\054\131\001\002" +
    "\000\010\022\034\023\036\024\035\001\002\000\004\006" +
    "\122\001\002\000\014\007\125\051\123\052\132\053\126" +
    "\054\131\001\002\000\142\003\uffc1\006\uffc1\010\uffc1\011" +
    "\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\020\uffc1\021\uffc1" +
    "\025\uffc1\026\uffc1\030\uffc1\031\uffc1\032\uffc1\034\uffc1\035" +
    "\uffc1\036\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1" +
    "\046\uffc1\047\uffc1\051\uffc1\056\uffc1\057\uffc1\061\uffc1\063" +
    "\uffc1\064\uffc1\067\uffc1\070\uffc1\071\uffc1\072\uffc1\073\uffc1" +
    "\074\uffc1\075\uffc1\076\uffc1\077\uffc1\107\uffc1\110\uffc1\111" +
    "\uffc1\112\uffc1\114\uffc1\115\uffc1\116\uffc1\125\uffc1\001\002" +
    "\000\010\011\143\012\144\067\uffd1\001\002\000\014\007" +
    "\125\051\123\052\132\053\126\054\131\001\002\000\142" +
    "\003\uffc4\006\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014" +
    "\uffc4\015\uffc4\020\uffc4\021\uffc4\025\uffc4\026\uffc4\030\uffc4" +
    "\031\uffc4\032\uffc4\034\uffc4\035\uffc4\036\uffc4\041\uffc4\042" +
    "\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\051\uffc4" +
    "\056\uffc4\057\uffc4\061\uffc4\063\uffc4\064\uffc4\067\uffc4\070" +
    "\uffc4\071\uffc4\072\uffc4\073\uffc4\074\uffc4\075\uffc4\076\uffc4" +
    "\077\uffc4\107\uffc4\110\uffc4\111\uffc4\112\uffc4\114\uffc4\115" +
    "\uffc4\116\uffc4\125\uffc4\001\002\000\134\003\uffc5\006\uffc5" +
    "\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\020" +
    "\uffc5\021\uffc5\030\uffc5\031\uffc5\032\uffc5\034\uffc5\035\uffc5" +
    "\036\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046" +
    "\uffc5\047\uffc5\051\uffc5\056\uffc5\057\uffc5\061\uffc5\063\uffc5" +
    "\064\uffc5\067\uffc5\070\uffc5\071\uffc5\072\uffc5\073\uffc5\074" +
    "\uffc5\076\uffc5\077\uffc5\107\uffc5\110\uffc5\111\uffc5\112\uffc5" +
    "\114\uffc5\115\uffc5\116\uffc5\125\uffc5\001\002\000\134\003" +
    "\uffc9\006\uffc9\010\uffc9\011\uffc9\012\uffc9\013\134\014\135" +
    "\015\133\020\uffc9\021\uffc9\030\uffc9\031\uffc9\032\uffc9\034" +
    "\uffc9\035\uffc9\036\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9" +
    "\045\uffc9\046\uffc9\047\uffc9\051\uffc9\056\uffc9\057\uffc9\061" +
    "\uffc9\063\uffc9\064\uffc9\067\uffc9\070\uffc9\071\uffc9\072\uffc9" +
    "\073\uffc9\074\uffc9\076\uffc9\077\uffc9\107\uffc9\110\uffc9\111" +
    "\uffc9\112\uffc9\114\uffc9\115\uffc9\116\uffc9\125\uffc9\001\002" +
    "\000\142\003\uffc3\006\uffc3\010\uffc3\011\uffc3\012\uffc3\013" +
    "\uffc3\014\uffc3\015\uffc3\020\uffc3\021\uffc3\025\uffc3\026\uffc3" +
    "\030\uffc3\031\uffc3\032\uffc3\034\uffc3\035\uffc3\036\uffc3\041" +
    "\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3" +
    "\051\uffc3\056\uffc3\057\uffc3\061\uffc3\063\uffc3\064\uffc3\067" +
    "\uffc3\070\uffc3\071\uffc3\072\uffc3\073\uffc3\074\uffc3\075\uffc3" +
    "\076\uffc3\077\uffc3\107\uffc3\110\uffc3\111\uffc3\112\uffc3\114" +
    "\uffc3\115\uffc3\116\uffc3\125\uffc3\001\002\000\142\003\uffc2" +
    "\006\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015" +
    "\uffc2\020\uffc2\021\uffc2\025\uffc2\026\uffc2\030\uffc2\031\uffc2" +
    "\032\uffc2\034\uffc2\035\uffc2\036\uffc2\041\uffc2\042\uffc2\043" +
    "\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\051\uffc2\056\uffc2" +
    "\057\uffc2\061\uffc2\063\uffc2\064\uffc2\067\uffc2\070\uffc2\071" +
    "\uffc2\072\uffc2\073\uffc2\074\uffc2\075\uffc2\076\uffc2\077\uffc2" +
    "\107\uffc2\110\uffc2\111\uffc2\112\uffc2\114\uffc2\115\uffc2\116" +
    "\uffc2\125\uffc2\001\002\000\014\007\125\051\123\052\132" +
    "\053\126\054\131\001\002\000\014\007\125\051\123\052" +
    "\132\053\126\054\131\001\002\000\014\007\125\051\123" +
    "\052\132\053\126\054\131\001\002\000\134\003\uffc7\006" +
    "\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7" +
    "\020\uffc7\021\uffc7\030\uffc7\031\uffc7\032\uffc7\034\uffc7\035" +
    "\uffc7\036\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7" +
    "\046\uffc7\047\uffc7\051\uffc7\056\uffc7\057\uffc7\061\uffc7\063" +
    "\uffc7\064\uffc7\067\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7" +
    "\074\uffc7\076\uffc7\077\uffc7\107\uffc7\110\uffc7\111\uffc7\112" +
    "\uffc7\114\uffc7\115\uffc7\116\uffc7\125\uffc7\001\002\000\134" +
    "\003\uffc8\006\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014" +
    "\uffc8\015\uffc8\020\uffc8\021\uffc8\030\uffc8\031\uffc8\032\uffc8" +
    "\034\uffc8\035\uffc8\036\uffc8\041\uffc8\042\uffc8\043\uffc8\044" +
    "\uffc8\045\uffc8\046\uffc8\047\uffc8\051\uffc8\056\uffc8\057\uffc8" +
    "\061\uffc8\063\uffc8\064\uffc8\067\uffc8\070\uffc8\071\uffc8\072" +
    "\uffc8\073\uffc8\074\uffc8\076\uffc8\077\uffc8\107\uffc8\110\uffc8" +
    "\111\uffc8\112\uffc8\114\uffc8\115\uffc8\116\uffc8\125\uffc8\001" +
    "\002\000\134\003\uffc6\006\uffc6\010\uffc6\011\uffc6\012\uffc6" +
    "\013\uffc6\014\uffc6\015\uffc6\020\uffc6\021\uffc6\030\uffc6\031" +
    "\uffc6\032\uffc6\034\uffc6\035\uffc6\036\uffc6\041\uffc6\042\uffc6" +
    "\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\051\uffc6\056" +
    "\uffc6\057\uffc6\061\uffc6\063\uffc6\064\uffc6\067\uffc6\070\uffc6" +
    "\071\uffc6\072\uffc6\073\uffc6\074\uffc6\076\uffc6\077\uffc6\107" +
    "\uffc6\110\uffc6\111\uffc6\112\uffc6\114\uffc6\115\uffc6\116\uffc6" +
    "\125\uffc6\001\002\000\010\010\142\011\143\012\144\001" +
    "\002\000\142\003\uffc0\006\uffc0\010\uffc0\011\uffc0\012\uffc0" +
    "\013\uffc0\014\uffc0\015\uffc0\020\uffc0\021\uffc0\025\uffc0\026" +
    "\uffc0\030\uffc0\031\uffc0\032\uffc0\034\uffc0\035\uffc0\036\uffc0" +
    "\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047" +
    "\uffc0\051\uffc0\056\uffc0\057\uffc0\061\uffc0\063\uffc0\064\uffc0" +
    "\067\uffc0\070\uffc0\071\uffc0\072\uffc0\073\uffc0\074\uffc0\075" +
    "\uffc0\076\uffc0\077\uffc0\107\uffc0\110\uffc0\111\uffc0\112\uffc0" +
    "\114\uffc0\115\uffc0\116\uffc0\125\uffc0\001\002\000\014\007" +
    "\125\051\123\052\132\053\126\054\131\001\002\000\014" +
    "\007\125\051\123\052\132\053\126\054\131\001\002\000" +
    "\134\003\uffca\006\uffca\010\uffca\011\uffca\012\uffca\013\134" +
    "\014\135\015\133\020\uffca\021\uffca\030\uffca\031\uffca\032" +
    "\uffca\034\uffca\035\uffca\036\uffca\041\uffca\042\uffca\043\uffca" +
    "\044\uffca\045\uffca\046\uffca\047\uffca\051\uffca\056\uffca\057" +
    "\uffca\061\uffca\063\uffca\064\uffca\067\uffca\070\uffca\071\uffca" +
    "\072\uffca\073\uffca\074\uffca\076\uffca\077\uffca\107\uffca\110" +
    "\uffca\111\uffca\112\uffca\114\uffca\115\uffca\116\uffca\125\uffca" +
    "\001\002\000\134\003\uffcb\006\uffcb\010\uffcb\011\uffcb\012" +
    "\uffcb\013\134\014\135\015\133\020\uffcb\021\uffcb\030\uffcb" +
    "\031\uffcb\032\uffcb\034\uffcb\035\uffcb\036\uffcb\041\uffcb\042" +
    "\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\051\uffcb" +
    "\056\uffcb\057\uffcb\061\uffcb\063\uffcb\064\uffcb\067\uffcb\070" +
    "\uffcb\071\uffcb\072\uffcb\073\uffcb\074\uffcb\076\uffcb\077\uffcb" +
    "\107\uffcb\110\uffcb\111\uffcb\112\uffcb\114\uffcb\115\uffcb\116" +
    "\uffcb\125\uffcb\001\002\000\010\011\143\012\144\067\uffd0" +
    "\001\002\000\004\060\151\001\002\000\014\003\ufff9\033" +
    "\ufff9\055\ufff9\060\ufff9\062\ufff9\001\002\000\034\003\075" +
    "\030\074\031\106\032\057\034\104\035\055\036\064\041" +
    "\061\051\062\056\067\063\063\064\053\076\066\001\002" +
    "\000\006\061\164\077\154\001\002\000\014\042\156\051" +
    "\155\052\161\053\160\054\162\001\002\000\034\003\uff8f" +
    "\030\uff8f\031\uff8f\032\uff8f\034\uff8f\035\uff8f\036\uff8f\041" +
    "\uff8f\051\uff8f\056\uff8f\063\uff8f\064\uff8f\076\uff8f\001\002" +
    "\000\034\003\uff93\030\uff93\031\uff93\032\uff93\034\uff93\035" +
    "\uff93\036\uff93\041\uff93\051\uff93\056\uff93\063\uff93\064\uff93" +
    "\076\uff93\001\002\000\034\003\uff94\030\uff94\031\uff94\032" +
    "\uff94\034\uff94\035\uff94\036\uff94\041\uff94\051\uff94\056\uff94" +
    "\063\uff94\064\uff94\076\uff94\001\002\000\034\003\uff92\030" +
    "\uff92\031\uff92\032\uff92\034\uff92\035\uff92\036\uff92\041\uff92" +
    "\051\uff92\056\uff92\063\uff92\064\uff92\076\uff92\001\002\000" +
    "\034\003\uff90\030\uff90\031\uff90\032\uff90\034\uff90\035\uff90" +
    "\036\uff90\041\uff90\051\uff90\056\uff90\063\uff90\064\uff90\076" +
    "\uff90\001\002\000\034\003\uff91\030\uff91\031\uff91\032\uff91" +
    "\034\uff91\035\uff91\036\uff91\041\uff91\051\uff91\056\uff91\063" +
    "\uff91\064\uff91\076\uff91\001\002\000\034\003\075\030\074" +
    "\031\106\032\057\034\104\035\055\036\064\041\061\051" +
    "\062\056\067\063\063\064\053\076\066\001\002\000\004" +
    "\076\165\001\002\000\050\003\uff98\030\uff98\031\uff98\032" +
    "\uff98\034\uff98\035\uff98\036\uff98\041\uff98\042\uff98\051\uff98" +
    "\056\uff98\061\uff98\063\uff98\064\uff98\071\uff98\073\uff98\074" +
    "\uff98\076\uff98\077\uff98\001\002\000\006\061\uff96\077\uff96" +
    "\001\002\000\006\061\uff95\077\uff95\001\002\000\010\042" +
    "\172\061\uff9b\074\173\001\002\000\004\061\232\001\002" +
    "\000\034\003\075\030\074\031\106\032\057\034\104\035" +
    "\055\036\064\041\061\051\062\056\067\063\063\064\053" +
    "\076\066\001\002\000\022\007\200\027\202\037\176\040" +
    "\177\051\123\052\132\053\126\054\131\001\002\000\060" +
    "\003\uffb8\010\uffb8\025\uffb8\026\uffb8\030\uffb8\031\uffb8\032" +
    "\uffb8\034\uffb8\035\uffb8\036\uffb8\041\uffb8\042\uffb8\051\uffb8" +
    "\056\uffb8\061\uffb8\063\uffb8\064\uffb8\071\uffb8\073\uffb8\074" +
    "\uffb8\075\uffb8\076\uffb8\077\uffb8\001\002\000\040\003\uff99" +
    "\025\223\030\uff99\031\uff99\032\uff99\034\uff99\035\uff99\036" +
    "\uff99\041\uff99\051\uff99\056\uff99\063\uff99\064\uff99\075\226" +
    "\076\uff99\001\002\000\060\003\uffb7\010\uffb7\025\uffb7\026" +
    "\uffb7\030\uffb7\031\uffb7\032\uffb7\034\uffb7\035\uffb7\036\uffb7" +
    "\041\uffb7\042\uffb7\051\uffb7\056\uffb7\061\uffb7\063\uffb7\064" +
    "\uffb7\071\uffb7\073\uffb7\074\uffb7\075\uffb7\076\uffb7\077\uffb7" +
    "\001\002\000\060\003\uffb6\010\uffb6\025\uffb6\026\uffb6\030" +
    "\uffb6\031\uffb6\032\uffb6\034\uffb6\035\uffb6\036\uffb6\041\uffb6" +
    "\042\uffb6\051\uffb6\056\uffb6\061\uffb6\063\uffb6\064\uffb6\071" +
    "\uffb6\073\uffb6\074\uffb6\075\uffb6\076\uffb6\077\uffb6\001\002" +
    "\000\022\007\200\027\202\037\176\040\177\051\123\052" +
    "\132\053\126\054\131\001\002\000\022\006\211\011\143" +
    "\012\144\043\215\044\212\045\214\046\210\072\216\001" +
    "\002\000\020\007\200\037\176\040\177\051\123\052\132" +
    "\053\126\054\131\001\002\000\060\003\uffba\010\uffba\025" +
    "\uffba\026\uffba\030\uffba\031\uffba\032\uffba\034\uffba\035\uffba" +
    "\036\uffba\041\uffba\042\uffba\051\uffba\056\uffba\061\uffba\063" +
    "\uffba\064\uffba\071\uffba\073\uffba\074\uffba\075\uffba\076\uffba" +
    "\077\uffba\001\002\000\060\003\uffbc\010\uffbc\025\uffbc\026" +
    "\205\030\uffbc\031\uffbc\032\uffbc\034\uffbc\035\uffbc\036\uffbc" +
    "\041\uffbc\042\uffbc\051\uffbc\056\uffbc\061\uffbc\063\uffbc\064" +
    "\uffbc\071\uffbc\073\uffbc\074\uffbc\075\uffbc\076\uffbc\077\uffbc" +
    "\001\002\000\022\007\200\027\202\037\176\040\177\051" +
    "\123\052\132\053\126\054\131\001\002\000\060\003\uffbb" +
    "\010\uffbb\025\uffbb\026\uffbb\030\uffbb\031\uffbb\032\uffbb\034" +
    "\uffbb\035\uffbb\036\uffbb\041\uffbb\042\uffbb\051\uffbb\056\uffbb" +
    "\061\uffbb\063\uffbb\064\uffbb\071\uffbb\073\uffbb\074\uffbb\075" +
    "\uffbb\076\uffbb\077\uffbb\001\002\000\060\003\uffb9\010\uffb9" +
    "\025\uffb9\026\uffb9\030\uffb9\031\uffb9\032\uffb9\034\uffb9\035" +
    "\uffb9\036\uffb9\041\uffb9\042\uffb9\051\uffb9\056\uffb9\061\uffb9" +
    "\063\uffb9\064\uffb9\071\uffb9\073\uffb9\074\uffb9\075\uffb9\076" +
    "\uffb9\077\uffb9\001\002\000\014\007\uffae\051\uffae\052\uffae" +
    "\053\uffae\054\uffae\001\002\000\014\007\uffb3\051\uffb3\052" +
    "\uffb3\053\uffb3\054\uffb3\001\002\000\014\007\uffb0\051\uffb0" +
    "\052\uffb0\053\uffb0\054\uffb0\001\002\000\014\007\125\051" +
    "\123\052\132\053\126\054\131\001\002\000\014\007\uffaf" +
    "\051\uffaf\052\uffaf\053\uffaf\054\uffaf\001\002\000\014\007" +
    "\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\001\002\000\014" +
    "\007\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\001\002\000" +
    "\060\003\uffb5\010\uffb5\025\uffb5\026\uffb5\030\uffb5\031\uffb5" +
    "\032\uffb5\034\uffb5\035\uffb5\036\uffb5\041\uffb5\042\uffb5\051" +
    "\uffb5\056\uffb5\061\uffb5\063\uffb5\064\uffb5\071\uffb5\073\uffb5" +
    "\074\uffb5\075\uffb5\076\uffb5\077\uffb5\001\002\000\006\010" +
    "\222\025\223\001\002\000\024\006\211\010\142\011\143" +
    "\012\144\043\215\044\212\045\214\046\210\072\216\001" +
    "\002\000\060\003\uffb4\010\uffb4\025\uffb4\026\uffb4\030\uffb4" +
    "\031\uffb4\032\uffb4\034\uffb4\035\uffb4\036\uffb4\041\uffb4\042" +
    "\uffb4\051\uffb4\056\uffb4\061\uffb4\063\uffb4\064\uffb4\071\uffb4" +
    "\073\uffb4\074\uffb4\075\uffb4\076\uffb4\077\uffb4\001\002\000" +
    "\022\007\200\027\202\037\176\040\177\051\123\052\132" +
    "\053\126\054\131\001\002\000\060\003\uffbd\010\uffbd\025" +
    "\uffbd\026\205\030\uffbd\031\uffbd\032\uffbd\034\uffbd\035\uffbd" +
    "\036\uffbd\041\uffbd\042\uffbd\051\uffbd\056\uffbd\061\uffbd\063" +
    "\uffbd\064\uffbd\071\uffbd\073\uffbd\074\uffbd\075\uffbd\076\uffbd" +
    "\077\uffbd\001\002\000\034\003\075\030\074\031\106\032" +
    "\057\034\104\035\055\036\064\041\061\051\062\056\067" +
    "\063\063\064\053\076\066\001\002\000\034\003\uff9a\030" +
    "\uff9a\031\uff9a\032\uff9a\034\uff9a\035\uff9a\036\uff9a\041\uff9a" +
    "\051\uff9a\056\uff9a\063\uff9a\064\uff9a\076\uff9a\001\002\000" +
    "\010\042\172\061\uff9b\074\173\001\002\000\004\061\uff9c" +
    "\001\002\000\004\061\uff9d\001\002\000\004\041\233\001" +
    "\002\000\050\003\uff9f\030\uff9f\031\uff9f\032\uff9f\034\uff9f" +
    "\035\uff9f\036\uff9f\041\uff9f\042\uff9f\051\uff9f\056\uff9f\061" +
    "\uff9f\063\uff9f\064\uff9f\071\uff9f\073\uff9f\074\uff9f\076\uff9f" +
    "\077\uff9f\001\002\000\004\050\235\001\002\000\004\010" +
    "\236\001\002\000\050\003\uffdf\030\uffdf\031\uffdf\032\uffdf" +
    "\034\uffdf\035\uffdf\036\uffdf\041\uffdf\042\uffdf\051\uffdf\056" +
    "\uffdf\061\uffdf\063\uffdf\064\uffdf\071\uffdf\073\uffdf\074\uffdf" +
    "\076\uffdf\077\uffdf\001\002\000\004\061\240\001\002\000" +
    "\004\035\241\001\002\000\050\003\uffbf\030\uffbf\031\uffbf" +
    "\032\uffbf\034\uffbf\035\uffbf\036\uffbf\041\uffbf\042\uffbf\051" +
    "\uffbf\056\uffbf\061\uffbf\063\uffbf\064\uffbf\071\uffbf\073\uffbf" +
    "\074\uffbf\076\uffbf\077\uffbf\001\002\000\012\006\252\021" +
    "\uffa3\057\uffa3\112\uffa3\001\002\000\006\021\247\057\261" +
    "\001\002\000\052\003\uffac\021\245\030\uffac\031\uffac\032" +
    "\uffac\034\uffac\035\uffac\036\uffac\041\uffac\042\uffac\051\uffac" +
    "\056\uffac\061\uffac\063\uffac\064\uffac\071\uffac\073\uffac\074" +
    "\uffac\076\uffac\077\uffac\001\002\000\004\051\242\001\002" +
    "\000\006\021\247\057\250\001\002\000\004\051\257\001" +
    "\002\000\010\022\034\023\036\024\035\001\002\000\054" +
    "\003\uffa3\006\252\021\uffa3\030\uffa3\031\uffa3\032\uffa3\034" +
    "\uffa3\035\uffa3\036\uffa3\041\uffa3\042\uffa3\051\uffa3\056\uffa3" +
    "\061\uffa3\063\uffa3\064\uffa3\071\uffa3\073\uffa3\074\uffa3\076" +
    "\uffa3\077\uffa3\001\002\000\016\007\125\050\255\051\123" +
    "\052\132\053\126\054\131\001\002\000\052\003\uffab\021" +
    "\uffab\030\uffab\031\uffab\032\uffab\034\uffab\035\uffab\036\uffab" +
    "\041\uffab\042\uffab\051\uffab\056\uffab\061\uffab\063\uffab\064" +
    "\uffab\071\uffab\073\uffab\074\uffab\076\uffab\077\uffab\001\002" +
    "\000\056\003\uffa4\021\uffa4\030\uffa4\031\uffa4\032\uffa4\034" +
    "\uffa4\035\uffa4\036\uffa4\041\uffa4\042\uffa4\051\uffa4\056\uffa4" +
    "\057\uffa4\061\uffa4\063\uffa4\064\uffa4\071\uffa4\073\uffa4\074" +
    "\uffa4\076\uffa4\077\uffa4\112\uffa4\001\002\000\062\003\uffd8" +
    "\010\uffd8\020\uffd8\021\uffd8\030\uffd8\031\uffd8\032\uffd8\034" +
    "\uffd8\035\uffd8\036\uffd8\041\uffd8\042\uffd8\051\uffd8\056\uffd8" +
    "\057\uffd8\061\uffd8\063\uffd8\064\uffd8\071\uffd8\073\uffd8\074" +
    "\uffd8\076\uffd8\077\uffd8\112\uffd8\001\002\000\066\003\uffd7" +
    "\010\uffd7\011\143\012\144\020\uffd7\021\uffd7\030\uffd7\031" +
    "\uffd7\032\uffd7\034\uffd7\035\uffd7\036\uffd7\041\uffd7\042\uffd7" +
    "\051\uffd7\056\uffd7\057\uffd7\061\uffd7\063\uffd7\064\uffd7\071" +
    "\uffd7\073\uffd7\074\uffd7\076\uffd7\077\uffd7\112\uffd7\001\002" +
    "\000\012\006\252\021\uffa3\057\uffa3\112\uffa3\001\002\000" +
    "\010\021\uffa6\057\uffa6\112\uffa6\001\002\000\010\022\034" +
    "\023\036\024\035\001\002\000\054\003\uffa3\006\252\021" +
    "\uffa3\030\uffa3\031\uffa3\032\uffa3\034\uffa3\035\uffa3\036\uffa3" +
    "\041\uffa3\042\uffa3\051\uffa3\056\uffa3\061\uffa3\063\uffa3\064" +
    "\uffa3\071\uffa3\073\uffa3\074\uffa3\076\uffa3\077\uffa3\001\002" +
    "\000\052\003\uffaa\021\uffaa\030\uffaa\031\uffaa\032\uffaa\034" +
    "\uffaa\035\uffaa\036\uffaa\041\uffaa\042\uffaa\051\uffaa\056\uffaa" +
    "\061\uffaa\063\uffaa\064\uffaa\071\uffaa\073\uffaa\074\uffaa\076" +
    "\uffaa\077\uffaa\001\002\000\010\021\uffa5\057\uffa5\112\uffa5" +
    "\001\002\000\004\051\266\001\002\000\004\077\uff97\001" +
    "\002\000\004\073\270\001\002\000\004\035\271\001\002" +
    "\000\022\007\200\027\202\037\176\040\177\051\123\052" +
    "\132\053\126\054\131\001\002\000\052\003\uffad\025\223" +
    "\030\uffad\031\uffad\032\uffad\034\uffad\035\uffad\036\uffad\041" +
    "\uffad\042\uffad\051\uffad\056\uffad\061\uffad\063\uffad\064\uffad" +
    "\071\uffad\073\uffad\074\uffad\076\uffad\077\uffad\001\002\000" +
    "\022\010\uffd9\020\275\042\uffd9\061\uffd9\071\uffd9\073\uffd9" +
    "\074\uffd9\077\uffd9\001\002\000\016\042\uffea\061\uffea\071" +
    "\uffea\073\uffea\074\uffea\077\uffea\001\002\000\016\007\125" +
    "\050\255\051\123\052\132\053\126\054\131\001\002\000" +
    "\020\010\uffda\042\uffda\061\uffda\071\uffda\073\uffda\074\uffda" +
    "\077\uffda\001\002\000\016\007\125\050\255\051\123\052" +
    "\132\053\126\054\131\001\002\000\050\003\uffa2\030\uffa2" +
    "\031\uffa2\032\uffa2\034\uffa2\035\uffa2\036\uffa2\041\uffa2\042" +
    "\uffa2\051\uffa2\056\uffa2\061\uffa2\063\uffa2\064\uffa2\071\uffa2" +
    "\073\uffa2\074\uffa2\076\uffa2\077\uffa2\001\002\000\040\003" +
    "\uff99\025\223\030\uff99\031\uff99\032\uff99\034\uff99\035\uff99" +
    "\036\uff99\041\uff99\051\uff99\056\uff99\063\uff99\064\uff99\075" +
    "\226\076\uff99\001\002\000\034\003\uff9e\030\uff9e\031\uff9e" +
    "\032\uff9e\034\uff9e\035\uff9e\036\uff9e\041\uff9e\051\uff9e\056" +
    "\uff9e\063\uff9e\064\uff9e\076\uff9e\001\002\000\032\007\125" +
    "\042\uffec\050\255\051\123\052\132\053\126\054\131\061" +
    "\uffec\071\uffec\073\uffec\074\uffec\077\uffec\001\002\000\050" +
    "\003\uffe8\030\uffe8\031\uffe8\032\uffe8\034\uffe8\035\uffe8\036" +
    "\uffe8\041\uffe8\042\uffee\051\uffe8\056\uffe8\061\uffee\063\uffe8" +
    "\064\uffe8\071\uffee\073\uffee\074\uffee\076\uffe8\077\uffee\001" +
    "\002\000\016\042\uffed\061\uffed\071\uffed\073\uffed\074\uffed" +
    "\077\uffed\001\002\000\004\050\307\001\002\000\004\010" +
    "\310\001\002\000\050\003\uffde\030\uffde\031\uffde\032\uffde" +
    "\034\uffde\035\uffde\036\uffde\041\uffde\042\uffde\051\uffde\056" +
    "\uffde\061\uffde\063\uffde\064\uffde\071\uffde\073\uffde\074\uffde" +
    "\076\uffde\077\uffde\001\002\000\036\003\uffbe\025\223\030" +
    "\uffbe\031\uffbe\032\uffbe\034\uffbe\035\uffbe\036\uffbe\041\uffbe" +
    "\051\uffbe\056\uffbe\063\uffbe\064\uffbe\076\uffbe\001\002\000" +
    "\006\065\314\066\313\001\002\000\004\007\320\001\002" +
    "\000\004\007\315\001\002\000\016\007\125\050\255\051" +
    "\123\052\132\053\126\054\131\001\002\000\004\010\317" +
    "\001\002\000\050\003\uffdc\030\uffdc\031\uffdc\032\uffdc\034" +
    "\uffdc\035\uffdc\036\uffdc\041\uffdc\042\uffdc\051\uffdc\056\uffdc" +
    "\061\uffdc\063\uffdc\064\uffdc\071\uffdc\073\uffdc\074\uffdc\076" +
    "\uffdc\077\uffdc\001\002\000\016\007\125\050\255\051\123" +
    "\052\132\053\126\054\131\001\002\000\004\010\322\001" +
    "\002\000\050\003\uffdb\030\uffdb\031\uffdb\032\uffdb\034\uffdb" +
    "\035\uffdb\036\uffdb\041\uffdb\042\uffdb\051\uffdb\056\uffdb\061" +
    "\uffdb\063\uffdb\064\uffdb\071\uffdb\073\uffdb\074\uffdb\076\uffdb" +
    "\077\uffdb\001\002\000\014\007\125\051\123\052\132\053" +
    "\126\054\131\001\002\000\042\003\uffcc\011\143\012\144" +
    "\030\uffcc\031\uffcc\032\uffcc\034\uffcc\035\uffcc\036\uffcc\041" +
    "\uffcc\051\uffcc\056\uffcc\063\uffcc\064\uffcc\070\326\076\uffcc" +
    "\001\002\000\034\003\uffd2\030\uffd2\031\uffd2\032\uffd2\034" +
    "\uffd2\035\uffd2\036\uffd2\041\uffd2\051\uffd2\056\uffd2\063\uffd2" +
    "\064\uffd2\076\uffd2\001\002\000\016\011\330\012\331\051" +
    "\155\052\161\053\160\054\162\001\002\000\034\003\uffcf" +
    "\030\uffcf\031\uffcf\032\uffcf\034\uffcf\035\uffcf\036\uffcf\041" +
    "\uffcf\051\uffcf\056\uffcf\063\uffcf\064\uffcf\076\uffcf\001\002" +
    "\000\012\051\155\052\161\053\160\054\162\001\002\000" +
    "\012\051\155\052\161\053\160\054\162\001\002\000\034" +
    "\003\uffce\030\uffce\031\uffce\032\uffce\034\uffce\035\uffce\036" +
    "\uffce\041\uffce\051\uffce\056\uffce\063\uffce\064\uffce\076\uffce" +
    "\001\002\000\034\003\uffcd\030\uffcd\031\uffcd\032\uffcd\034" +
    "\uffcd\035\uffcd\036\uffcd\041\uffcd\051\uffcd\056\uffcd\063\uffcd" +
    "\064\uffcd\076\uffcd\001\002\000\004\055\ufffd\001\002\000" +
    "\004\061\336\001\002\000\004\062\337\001\002\000\014" +
    "\003\ufff7\033\ufff7\055\ufff7\060\ufff7\062\ufff7\001\002\000" +
    "\004\055\ufffc\001\002\000\004\055\ufffa\001\002\000\004" +
    "\100\u01c1\001\002\000\006\033\uff8c\100\uff8c\001\002\000" +
    "\006\033\347\100\uff8e\001\002\000\006\033\uff8d\100\uff8d" +
    "\001\002\000\004\113\352\001\002\000\004\101\350\001" +
    "\002\000\004\051\351\001\002\000\004\113\uff8a\001\002" +
    "\000\042\003\370\022\034\023\036\024\035\030\364\031" +
    "\u0105\032\377\033\u0103\034\360\035\u0100\036\u010c\041\365" +
    "\051\366\104\375\105\374\106\u0102\001\002\000\004\113" +
    "\u01bc\001\002\000\044\003\uff86\022\uff86\023\uff86\024\uff86" +
    "\030\uff86\031\uff86\032\uff86\033\uff86\034\uff86\035\uff86\036" +
    "\uff86\041\uff86\051\uff86\104\uff86\105\uff86\106\uff86\114\uff86" +
    "\001\002\000\004\112\u01bb\001\002\000\054\003\uff64\022" +
    "\uff64\023\uff64\024\uff64\030\uff64\031\uff64\032\uff64\033\uff64" +
    "\034\uff64\035\uff64\036\uff64\041\uff64\051\uff64\103\uff64\104" +
    "\uff64\105\uff64\106\uff64\107\uff64\110\uff64\111\uff64\114\uff64" +
    "\001\002\000\044\003\uff85\022\uff85\023\uff85\024\uff85\030" +
    "\uff85\031\uff85\032\uff85\033\uff85\034\uff85\035\uff85\036\uff85" +
    "\041\uff85\051\uff85\104\uff85\105\uff85\106\uff85\114\uff85\001" +
    "\002\000\004\007\u0196\001\002\000\004\113\u0193\001\002" +
    "\000\004\113\u0182\001\002\000\004\112\u0181\001\002\000" +
    "\004\007\u017e\001\002\000\004\007\u017b\001\002\000\004" +
    "\006\u0179\001\002\000\054\003\uff4f\022\uff4f\023\uff4f\024" +
    "\uff4f\030\uff4f\031\uff4f\032\uff4f\033\uff4f\034\uff4f\035\uff4f" +
    "\036\uff4f\041\uff4f\051\uff4f\103\uff4f\104\uff4f\105\uff4f\106" +
    "\uff4f\107\uff4f\110\uff4f\111\uff4f\114\uff4f\001\002\000\054" +
    "\003\uff63\022\uff63\023\uff63\024\uff63\030\uff63\031\uff63\032" +
    "\uff63\033\uff63\034\uff63\035\uff63\036\uff63\041\uff63\051\uff63" +
    "\103\uff63\104\uff63\105\uff63\106\uff63\107\uff63\110\uff63\111" +
    "\uff63\114\uff63\001\002\000\004\113\u0176\001\002\000\044" +
    "\003\uff84\022\uff84\023\uff84\024\uff84\030\uff84\031\uff84\032" +
    "\uff84\033\uff84\034\uff84\035\uff84\036\uff84\041\uff84\051\uff84" +
    "\104\uff84\105\uff84\106\uff84\114\uff84\001\002\000\004\112" +
    "\u0175\001\002\000\004\007\u0172\001\002\000\004\007\u0168" +
    "\001\002\000\004\113\u0164\001\002\000\004\007\u0161\001" +
    "\002\000\004\007\u014a\001\002\000\004\112\u0149\001\002" +
    "\000\004\007\u0146\001\002\000\014\022\034\023\036\024" +
    "\035\051\u0131\102\u0133\001\002\000\004\113\u012e\001\002" +
    "\000\004\007\u012b\001\002\000\054\003\uff67\022\uff67\023" +
    "\uff67\024\uff67\030\uff67\031\uff67\032\uff67\033\uff67\034\uff67" +
    "\035\uff67\036\uff67\041\uff67\051\uff67\103\uff67\104\uff67\105" +
    "\uff67\106\uff67\107\uff67\110\uff67\111\uff67\114\uff67\001\002" +
    "\000\004\113\u0122\001\002\000\004\051\242\001\002\000" +
    "\044\003\uff82\022\uff82\023\uff82\024\uff82\030\uff82\031\uff82" +
    "\032\uff82\033\uff82\034\uff82\035\uff82\036\uff82\041\uff82\051" +
    "\uff82\104\uff82\105\uff82\106\uff82\114\uff82\001\002\000\044" +
    "\003\370\022\034\023\036\024\035\030\364\031\u0105\032" +
    "\377\033\u0103\034\360\035\u0100\036\u010c\041\365\051\366" +
    "\104\375\105\374\106\u0102\114\u0120\001\002\000\044\003" +
    "\uff83\022\uff83\023\uff83\024\uff83\030\uff83\031\uff83\032\uff83" +
    "\033\uff83\034\uff83\035\uff83\036\uff83\041\uff83\051\uff83\104" +
    "\uff83\105\uff83\106\uff83\114\uff83\001\002\000\004\113\u010d" +
    "\001\002\000\042\003\370\022\034\023\036\024\035\030" +
    "\364\031\u0105\032\377\033\u010f\034\360\035\u0100\036\u010c" +
    "\041\365\051\366\104\375\105\374\106\u0102\001\002\000" +
    "\054\003\uff74\022\uff74\023\uff74\024\uff74\030\uff74\031\uff74" +
    "\032\uff74\033\uff74\034\uff74\035\uff74\036\uff74\041\uff74\051" +
    "\uff74\103\uff74\104\uff74\105\uff74\106\uff74\107\uff74\110\uff74" +
    "\111\uff74\114\uff74\001\002\000\010\022\034\023\036\024" +
    "\035\001\002\000\054\003\370\022\034\023\036\024\035" +
    "\030\364\031\u0105\032\377\033\u010f\034\360\035\u0100\036" +
    "\u010c\041\365\051\366\103\u0116\104\375\105\374\106\u0102" +
    "\107\uff76\110\uff76\111\uff76\114\uff76\001\002\000\004\114" +
    "\u0112\001\002\000\004\035\u0100\001\002\000\004\112\u0114" +
    "\001\002\000\054\003\uff5b\022\uff5b\023\uff5b\024\uff5b\030" +
    "\uff5b\031\uff5b\032\uff5b\033\uff5b\034\uff5b\035\uff5b\036\uff5b" +
    "\041\uff5b\051\uff5b\103\uff5b\104\uff5b\105\uff5b\106\uff5b\107" +
    "\uff5b\110\uff5b\111\uff5b\114\uff5b\001\002\000\054\003\uff75" +
    "\022\uff75\023\uff75\024\uff75\030\uff75\031\uff75\032\uff75\033" +
    "\uff75\034\uff75\035\uff75\036\uff75\041\uff75\051\uff75\103\uff75" +
    "\104\uff75\105\uff75\106\uff75\107\uff75\110\uff75\111\uff75\114" +
    "\uff75\001\002\000\016\007\125\050\u0119\051\123\052\132" +
    "\053\126\054\131\001\002\000\012\107\uff77\110\uff77\111" +
    "\uff77\114\uff77\001\002\000\016\011\u011b\107\uff73\110\uff73" +
    "\111\uff73\114\uff73\115\uff73\001\002\000\016\011\uff70\107" +
    "\uff70\110\uff70\111\uff70\114\uff70\115\uff70\001\002\000\020" +
    "\011\143\012\144\107\uff72\110\uff72\111\uff72\114\uff72\115" +
    "\uff72\001\002\000\004\050\u011c\001\002\000\016\011\uff71" +
    "\107\uff71\110\uff71\111\uff71\114\uff71\115\uff71\001\002\000" +
    "\004\051\242\001\002\000\006\021\247\112\uff52\001\002" +
    "\000\044\003\uff87\022\uff87\023\uff87\024\uff87\030\uff87\031" +
    "\uff87\032\uff87\033\uff87\034\uff87\035\uff87\036\uff87\041\uff87" +
    "\051\uff87\104\uff87\105\uff87\106\uff87\114\uff87\001\002\000" +
    "\006\033\uff8b\100\uff8b\001\002\000\006\021\247\112\uff51" +
    "\001\002\000\042\003\370\022\034\023\036\024\035\030" +
    "\364\031\u0105\032\377\033\u010f\034\360\035\u0100\036\u010c" +
    "\041\365\051\366\104\375\105\374\106\u0102\001\002\000" +
    "\004\114\u0124\001\002\000\056\003\uff49\022\uff49\023\uff49" +
    "\024\uff49\030\uff49\031\uff49\032\uff49\033\uff49\034\uff49\035" +
    "\uff49\036\uff49\041\uff49\042\u0125\051\uff49\103\uff49\104\uff49" +
    "\105\uff49\106\uff49\107\uff49\110\uff49\111\uff49\114\uff49\001" +
    "\002\000\006\041\365\113\u0127\001\002\000\054\003\uff4d" +
    "\022\uff4d\023\uff4d\024\uff4d\030\uff4d\031\uff4d\032\uff4d\033" +
    "\uff4d\034\uff4d\035\uff4d\036\uff4d\041\uff4d\051\uff4d\103\uff4d" +
    "\104\uff4d\105\uff4d\106\uff4d\107\uff4d\110\uff4d\111\uff4d\114" +
    "\uff4d\001\002\000\042\003\370\022\034\023\036\024\035" +
    "\030\364\031\u0105\032\377\033\u010f\034\360\035\u0100\036" +
    "\u010c\041\365\051\366\104\375\105\374\106\u0102\001\002" +
    "\000\054\003\uff4a\022\uff4a\023\uff4a\024\uff4a\030\uff4a\031" +
    "\uff4a\032\uff4a\033\uff4a\034\uff4a\035\uff4a\036\uff4a\041\uff4a" +
    "\051\uff4a\103\uff4a\104\uff4a\105\uff4a\106\uff4a\107\uff4a\110" +
    "\uff4a\111\uff4a\114\uff4a\001\002\000\004\114\u012a\001\002" +
    "\000\054\003\uff4b\022\uff4b\023\uff4b\024\uff4b\030\uff4b\031" +
    "\uff4b\032\uff4b\033\uff4b\034\uff4b\035\uff4b\036\uff4b\041\uff4b" +
    "\051\uff4b\103\uff4b\104\uff4b\105\uff4b\106\uff4b\107\uff4b\110" +
    "\uff4b\111\uff4b\114\uff4b\001\002\000\004\050\u012c\001\002" +
    "\000\004\010\u012d\001\002\000\004\112\uff5e\001\002\000" +
    "\042\003\370\022\034\023\036\024\035\030\364\031\u0105" +
    "\032\377\033\u010f\034\360\035\u0100\036\u010c\041\365\051" +
    "\366\104\375\105\374\106\u0102\001\002\000\004\114\u0130" +
    "\001\002\000\054\003\uff5c\022\uff5c\023\uff5c\024\uff5c\030" +
    "\uff5c\031\uff5c\032\uff5c\033\uff5c\034\uff5c\035\uff5c\036\uff5c" +
    "\041\uff5c\051\uff5c\103\uff5c\104\uff5c\105\uff5c\106\uff5c\107" +
    "\uff5c\110\uff5c\111\uff5c\114\uff5c\001\002\000\004\007\u0143" +
    "\001\002\000\004\051\u013e\001\002\000\004\051\u0134\001" +
    "\002\000\004\007\u0135\001\002\000\012\010\u0137\022\034" +
    "\023\036\024\035\001\002\000\004\051\u013d\001\002\000" +
    "\004\113\uff78\001\002\000\006\010\u013a\021\u0139\001\002" +
    "\000\010\022\034\023\036\024\035\001\002\000\004\113" +
    "\uff79\001\002\000\004\051\u013c\001\002\000\006\010\uff89" +
    "\021\uff89\001\002\000\006\010\uff88\021\uff88\001\002\000" +
    "\012\006\252\007\u013f\021\uffa3\112\uffa3\001\002\000\012" +
    "\010\u0140\022\034\023\036\024\035\001\002\000\004\113" +
    "\uff7c\001\002\000\006\010\u0142\021\u0139\001\002\000\004" +
    "\113\uff7d\001\002\000\010\022\034\023\036\024\035\001" +
    "\002\000\006\010\u0145\021\u0139\001\002\000\004\113\uff80" +
    "\001\002\000\004\051\u0147\001\002\000\004\010\u0148\001" +
    "\002\000\004\113\uff48\001\002\000\054\003\uff65\022\uff65" +
    "\023\uff65\024\uff65\030\uff65\031\uff65\032\uff65\033\uff65\034" +
    "\uff65\035\uff65\036\uff65\041\uff65\051\uff65\103\uff65\104\uff65" +
    "\105\uff65\106\uff65\107\uff65\110\uff65\111\uff65\114\uff65\001" +
    "\002\000\022\007\u014e\027\u0150\037\u014b\040\u014c\051\123" +
    "\052\132\053\126\054\131\001\002\000\004\010\uff37\001" +
    "\002\000\004\010\uff36\001\002\000\004\010\uff33\001\002" +
    "\000\022\007\u014e\027\u0150\037\u014b\040\u014c\051\123\052" +
    "\132\053\126\054\131\001\002\000\022\011\143\012\144" +
    "\043\u015b\044\u0158\045\u015a\046\u0157\047\u0159\116\u0156\001" +
    "\002\000\022\007\u014e\027\u0150\037\u014b\040\u014c\051\123" +
    "\052\132\053\126\054\131\001\002\000\004\010\u0153\001" +
    "\002\000\022\007\u014e\027\u0150\037\u014b\040\u014c\051\123" +
    "\052\132\053\126\054\131\001\002\000\006\112\uff58\113" +
    "\uff58\001\002\000\004\010\uff34\001\002\000\004\010\uff39" +
    "\001\002\000\014\007\uff3e\051\uff3e\052\uff3e\053\uff3e\054" +
    "\uff3e\001\002\000\014\007\uff3a\051\uff3a\052\uff3a\053\uff3a" +
    "\054\uff3a\001\002\000\014\007\uff3c\051\uff3c\052\uff3c\053" +
    "\uff3c\054\uff3c\001\002\000\014\007\uff3f\051\uff3f\052\uff3f" +
    "\053\uff3f\054\uff3f\001\002\000\014\007\uff3b\051\uff3b\052" +
    "\uff3b\053\uff3b\054\uff3b\001\002\000\014\007\uff3d\051\uff3d" +
    "\052\uff3d\053\uff3d\054\uff3d\001\002\000\014\007\125\051" +
    "\123\052\132\053\126\054\131\001\002\000\010\010\uff35" +
    "\011\143\012\144\001\002\000\024\010\142\011\143\012" +
    "\144\043\u015b\044\u0158\045\u015a\046\u0157\047\u0159\116\u0156" +
    "\001\002\000\004\010\u0160\001\002\000\004\010\uff38\001" +
    "\002\000\004\050\u0162\001\002\000\004\010\u0163\001\002" +
    "\000\004\112\uff5f\001\002\000\044\003\370\022\034\023" +
    "\036\024\035\030\364\031\u0105\032\377\033\u010f\034\360" +
    "\035\u0100\036\u010c\041\365\051\366\104\375\105\374\106" +
    "\u0102\114\u0165\001\002\000\044\003\uff7e\022\uff7e\023\uff7e" +
    "\024\uff7e\030\uff7e\031\uff7e\032\uff7e\033\uff7e\034\uff7e\035" +
    "\uff7e\036\uff7e\041\uff7e\051\uff7e\104\uff7e\105\uff7e\106\uff7e" +
    "\114\uff7e\001\002\000\004\114\u0167\001\002\000\044\003" +
    "\uff7f\022\uff7f\023\uff7f\024\uff7f\030\uff7f\031\uff7f\032\uff7f" +
    "\033\uff7f\034\uff7f\035\uff7f\036\uff7f\041\uff7f\051\uff7f\104" +
    "\uff7f\105\uff7f\106\uff7f\114\uff7f\001\002\000\012\050\u016b" +
    "\051\u0169\053\u016d\054\u016e\001\002\000\006\010\uff6d\011" +
    "\uff6d\001\002\000\006\010\uff6e\011\uff6e\001\002\000\006" +
    "\010\uff6a\011\uff6a\001\002\000\006\010\u016f\011\u0170\001" +
    "\002\000\006\010\uff6c\011\uff6c\001\002\000\006\010\uff6b" +
    "\011\uff6b\001\002\000\004\112\uff62\001\002\000\012\050" +
    "\u016b\051\u0169\053\u016d\054\u016e\001\002\000\006\010\uff6f" +
    "\011\uff6f\001\002\000\012\050\u016b\051\u0169\053\u016d\054" +
    "\u016e\001\002\000\006\010\u0174\011\u0170\001\002\000\004" +
    "\112\uff61\001\002\000\054\003\uff69\022\uff69\023\uff69\024" +
    "\uff69\030\uff69\031\uff69\032\uff69\033\uff69\034\uff69\035\uff69" +
    "\036\uff69\041\uff69\051\uff69\103\uff69\104\uff69\105\uff69\106" +
    "\uff69\107\uff69\110\uff69\111\uff69\114\uff69\001\002\000\042" +
    "\003\370\022\034\023\036\024\035\030\364\031\u0105\032" +
    "\377\033\u010f\034\360\035\u0100\036\u010c\041\365\051\366" +
    "\104\375\105\374\106\u0102\001\002\000\004\114\u0178\001" +
    "\002\000\054\003\uff5d\022\uff5d\023\uff5d\024\uff5d\030\uff5d" +
    "\031\uff5d\032\uff5d\033\uff5d\034\uff5d\035\uff5d\036\uff5d\041" +
    "\uff5d\051\uff5d\103\uff5d\104\uff5d\105\uff5d\106\uff5d\107\uff5d" +
    "\110\uff5d\111\uff5d\114\uff5d\001\002\000\016\007\125\050" +
    "\255\051\123\052\132\053\126\054\131\001\002\000\004" +
    "\112\uff50\001\002\000\022\007\u014e\027\u0150\037\u014b\040" +
    "\u014c\051\123\052\132\053\126\054\131\001\002\000\004" +
    "\010\u017d\001\002\000\004\113\uff4c\001\002\000\004\050" +
    "\u017f\001\002\000\004\010\u0180\001\002\000\004\112\uff60" +
    "\001\002\000\054\003\uff68\022\uff68\023\uff68\024\uff68\030" +
    "\uff68\031\uff68\032\uff68\033\uff68\034\uff68\035\uff68\036\uff68" +
    "\041\uff68\051\uff68\103\uff68\104\uff68\105\uff68\106\uff68\107" +
    "\uff68\110\uff68\111\uff68\114\uff68\001\002\000\004\107\u0183" +
    "\001\002\000\016\007\125\050\u0119\051\123\052\132\053" +
    "\126\054\131\001\002\000\010\107\uff43\110\uff43\114\uff45" +
    "\001\002\000\006\107\u0183\110\u0188\001\002\000\004\114" +
    "\u0187\001\002\000\054\003\uff4e\022\uff4e\023\uff4e\024\uff4e" +
    "\030\uff4e\031\uff4e\032\uff4e\033\uff4e\034\uff4e\035\uff4e\036" +
    "\uff4e\041\uff4e\051\uff4e\103\uff4e\104\uff4e\105\uff4e\106\uff4e" +
    "\107\uff4e\110\uff4e\111\uff4e\114\uff4e\001\002\000\004\115" +
    "\u018a\001\002\000\010\107\uff44\110\uff44\114\uff47\001\002" +
    "\000\042\003\370\022\034\023\036\024\035\030\364\031" +
    "\u0105\032\377\033\u010f\034\360\035\u0100\036\u010c\041\365" +
    "\051\366\104\375\105\374\106\u0102\001\002\000\006\111" +
    "\u018d\114\uff40\001\002\000\004\114\uff46\001\002\000\004" +
    "\112\u018e\001\002\000\010\107\uff41\110\uff41\114\uff41\001" +
    "\002\000\004\115\u0190\001\002\000\042\003\370\022\034" +
    "\023\036\024\035\030\364\031\u0105\032\377\033\u010f\034" +
    "\360\035\u0100\036\u010c\041\365\051\366\104\375\105\374" +
    "\106\u0102\001\002\000\012\107\uff40\110\uff40\111\u018d\114" +
    "\uff40\001\002\000\010\107\uff42\110\uff42\114\uff42\001\002" +
    "\000\042\003\370\022\034\023\036\024\035\030\364\031" +
    "\u0105\032\377\033\u010f\034\360\035\u0100\036\u010c\041\365" +
    "\051\366\104\375\105\374\106\u0102\001\002\000\004\114" +
    "\u0195\001\002\000\044\003\uff81\022\uff81\023\uff81\024\uff81" +
    "\030\uff81\031\uff81\032\uff81\033\uff81\034\uff81\035\uff81\036" +
    "\uff81\041\uff81\051\uff81\104\uff81\105\uff81\106\uff81\114\uff81" +
    "\001\002\000\012\022\034\023\036\024\035\051\u0197\001" +
    "\002\000\004\006\u01b2\001\002\000\004\051\u0199\001\002" +
    "\000\004\006\u019a\001\002\000\014\007\125\051\123\052" +
    "\132\053\126\054\131\001\002\000\010\011\143\012\144" +
    "\112\u019c\001\002\000\004\051\u019d\001\002\000\016\043" +
    "\u015b\044\u0158\045\u015a\046\u0157\047\u0159\116\u0156\001\002" +
    "\000\014\007\125\051\123\052\132\053\126\054\131\001" +
    "\002\000\010\011\143\012\144\112\u01a0\001\002\000\004" +
    "\051\u01a1\001\002\000\014\006\u01a6\011\u01a5\012\u01a8\013" +
    "\u01a4\014\u01a7\001\002\000\004\010\u01a3\001\002\000\004" +
    "\113\uff5a\001\002\000\004\006\u01b0\001\002\000\004\006" +
    "\u01ae\001\002\000\014\007\125\051\123\052\132\053\126" +
    "\054\131\001\002\000\004\006\u01ab\001\002\000\004\006" +
    "\u01a9\001\002\000\014\007\125\051\123\052\132\053\126" +
    "\054\131\001\002\000\010\010\uff55\011\143\012\144\001" +
    "\002\000\014\007\125\051\123\052\132\053\126\054\131" +
    "\001\002\000\010\010\uff53\011\143\012\144\001\002\000" +
    "\010\010\uff57\011\143\012\144\001\002\000\014\007\125" +
    "\051\123\052\132\053\126\054\131\001\002\000\010\010" +
    "\uff56\011\143\012\144\001\002\000\014\007\125\051\123" +
    "\052\132\053\126\054\131\001\002\000\010\010\uff54\011" +
    "\143\012\144\001\002\000\014\007\125\051\123\052\132" +
    "\053\126\054\131\001\002\000\010\011\143\012\144\112" +
    "\u01b4\001\002\000\004\051\u01b5\001\002\000\016\043\u015b" +
    "\044\u0158\045\u015a\046\u0157\047\u0159\116\u0156\001\002\000" +
    "\014\007\125\051\123\052\132\053\126\054\131\001\002" +
    "\000\010\011\143\012\144\112\u01b8\001\002\000\004\051" +
    "\u01a1\001\002\000\004\010\u01ba\001\002\000\004\113\uff59" +
    "\001\002\000\054\003\uff66\022\uff66\023\uff66\024\uff66\030" +
    "\uff66\031\uff66\032\uff66\033\uff66\034\uff66\035\uff66\036\uff66" +
    "\041\uff66\051\uff66\103\uff66\104\uff66\105\uff66\106\uff66\107" +
    "\uff66\110\uff66\111\uff66\114\uff66\001\002\000\044\003\370" +
    "\022\034\023\036\024\035\030\364\031\u0105\032\377\033" +
    "\u010f\034\360\035\u0100\036\u010c\041\365\051\366\104\375" +
    "\105\374\106\u0102\114\u01bd\001\002\000\044\003\uff7a\022" +
    "\uff7a\023\uff7a\024\uff7a\030\uff7a\031\uff7a\032\uff7a\033\uff7a" +
    "\034\uff7a\035\uff7a\036\uff7a\041\uff7a\051\uff7a\104\uff7a\105" +
    "\uff7a\106\uff7a\114\uff7a\001\002\000\004\114\u01bf\001\002" +
    "\000\044\003\uff7b\022\uff7b\023\uff7b\024\uff7b\030\uff7b\031" +
    "\uff7b\032\uff7b\033\uff7b\034\uff7b\035\uff7b\036\uff7b\041\uff7b" +
    "\051\uff7b\104\uff7b\105\uff7b\106\uff7b\114\uff7b\001\002\000" +
    "\004\117\u01c4\001\002\000\004\117\uff31\001\002\000\004" +
    "\117\uff32\001\002\000\004\002\000\001\002\000\006\123" +
    "\uff2e\126\uff2e\001\002\000\006\123\u01c7\126\u01c9\001\002" +
    "\000\012\022\034\023\036\024\035\123\u01c7\001\002\000" +
    "\010\022\034\023\036\024\035\001\002\000\004\112\u01d2" +
    "\001\002\000\006\044\u01cc\050\u01cb\001\002\000\006\123" +
    "\uff2f\126\uff2f\001\002\000\006\123\uff1f\126\uff1f\001\002" +
    "\000\004\051\u01cd\001\002\000\006\017\ufee7\043\ufee7\001" +
    "\002\000\006\017\u01cf\043\u01d0\001\002\000\004\051\u01d1" +
    "\001\002\000\006\123\uff1e\126\uff1e\001\002\000\010\007" +
    "\ufee8\017\ufee8\043\ufee8\001\002\000\012\022\uff2c\023\uff2c" +
    "\024\uff2c\123\uff2c\001\002\000\004\051\u01d4\001\002\000" +
    "\006\006\u01d6\124\u01d7\001\002\000\006\006\u01f0\124\u01e4" +
    "\001\002\000\020\007\125\050\u01dd\051\u01e0\052\132\053" +
    "\126\054\131\131\u01df\001\002\000\014\007\125\051\123" +
    "\052\132\053\126\054\131\001\002\000\010\011\143\012" +
    "\144\125\u01d9\001\002\000\014\006\uff28\010\uff28\021\uff28" +
    "\112\uff28\124\uff28\001\002\000\004\112\uff2b\001\002\000" +
    "\010\010\ufee2\021\ufee2\112\ufee2\001\002\000\010\010\ufee0" +
    "\021\ufee0\112\ufee0\001\002\000\010\010\ufee4\021\ufee4\112" +
    "\ufee4\001\002\000\006\007\u01e9\017\u01cf\001\002\000\004" +
    "\007\u01e7\001\002\000\030\007\ufee7\010\uffc1\011\uffc1\012" +
    "\uffc1\013\uffc1\014\uffc1\015\uffc1\017\ufee7\021\uffc1\112\uffc1" +
    "\124\u01d7\001\002\000\014\010\ufee3\011\143\012\144\021" +
    "\ufee3\112\ufee3\001\002\000\010\010\ufee1\021\ufee1\112\ufee1" +
    "\001\002\000\012\010\ufedf\021\ufedf\112\ufedf\124\u01e4\001" +
    "\002\000\014\007\125\051\123\052\132\053\126\054\131" +
    "\001\002\000\010\011\143\012\144\125\u01e6\001\002\000" +
    "\014\006\uff29\010\uff29\021\uff29\112\uff29\124\uff29\001\002" +
    "\000\004\010\u01e8\001\002\000\010\010\ufeec\021\ufeec\112" +
    "\ufeec\001\002\000\022\007\125\010\u01ec\050\u01dd\051\u01e0" +
    "\052\132\053\126\054\131\131\u01df\001\002\000\006\010" +
    "\ufee5\021\ufee5\001\002\000\006\010\u01ee\021\u01ed\001\002" +
    "\000\010\010\ufee9\021\ufee9\112\ufee9\001\002\000\020\007" +
    "\125\050\u01dd\051\u01e0\052\132\053\126\054\131\131\u01df" +
    "\001\002\000\010\010\ufeea\021\ufeea\112\ufeea\001\002\000" +
    "\006\010\ufee6\021\ufee6\001\002\000\004\113\u01f1\001\002" +
    "\000\016\007\125\051\123\052\132\053\126\054\131\113" +
    "\u01f6\001\002\000\004\112\uff2a\001\002\000\006\021\u01f8" +
    "\114\u0200\001\002\000\006\021\u01fb\114\u01fc\001\002\000" +
    "\014\011\143\012\144\021\uff24\114\uff24\125\uff24\001\002" +
    "\000\014\007\125\051\123\052\132\053\126\054\131\001" +
    "\002\000\006\021\u01f8\125\u01f9\001\002\000\014\007\125" +
    "\051\123\052\132\053\126\054\131\001\002\000\006\021" +
    "\uff22\114\uff22\001\002\000\014\011\143\012\144\021\uff25" +
    "\114\uff25\125\uff25\001\002\000\004\113\u01fd\001\002\000" +
    "\006\021\uff26\112\uff26\001\002\000\014\007\125\051\123" +
    "\052\132\053\126\054\131\001\002\000\006\021\u01f8\125" +
    "\u01ff\001\002\000\006\021\uff23\114\uff23\001\002\000\006" +
    "\021\uff27\112\uff27\001\002\000\004\112\u02a3\001\002\000" +
    "\004\051\u0299\001\002\000\012\022\034\023\036\024\035" +
    "\102\u0207\001\002\000\004\112\u0205\001\002\000\012\022" +
    "\uff2d\023\uff2d\024\uff2d\123\uff2d\001\002\000\004\112\u0298" +
    "\001\002\000\004\133\u0209\001\002\000\004\002\uff30\001" +
    "\002\000\004\007\u020a\001\002\000\004\010\u020b\001\002" +
    "\000\004\113\u020c\001\002\000\034\022\034\023\036\024" +
    "\035\034\u0223\035\u0211\036\u021b\041\u0217\051\u0219\106\u020d" +
    "\127\u0218\130\u021d\131\u01df\132\u020e\001\002\000\004\007" +
    "\u0295\001\002\000\004\007\u028f\001\002\000\004\113\u0281" +
    "\001\002\000\036\022\034\023\036\024\035\034\u0223\035" +
    "\u0211\036\u021b\041\u0217\051\u0219\106\u020d\114\u0280\127\u0218" +
    "\130\u021d\131\u01df\132\u020e\001\002\000\004\007\u027d\001" +
    "\002\000\044\022\uff1b\023\uff1b\024\uff1b\034\uff1b\035\uff1b" +
    "\036\uff1b\041\uff1b\051\uff1b\106\uff1b\107\uff1b\110\uff1b\111" +
    "\uff1b\114\uff1b\127\uff1b\130\uff1b\131\uff1b\132\uff1b\001\002" +
    "\000\004\112\u027c\001\002\000\004\113\u0279\001\002\000" +
    "\004\112\u0278\001\002\000\004\112\u0277\001\002\000\004" +
    "\007\u0274\001\002\000\004\007\u026a\001\002\000\012\006" +
    "\u0266\007\ufee7\017\ufee7\124\u01d7\001\002\000\004\113\u0262" +
    "\001\002\000\004\113\u025d\001\002\000\004\112\u025c\001" +
    "\002\000\004\007\u025a\001\002\000\044\022\uff17\023\uff17" +
    "\024\uff17\034\uff17\035\uff17\036\uff17\041\uff17\051\uff17\106" +
    "\uff17\107\uff17\110\uff17\111\uff17\114\uff17\127\uff17\130\uff17" +
    "\131\uff17\132\uff17\001\002\000\004\112\u0259\001\002\000" +
    "\044\022\uff18\023\uff18\024\uff18\034\uff18\035\uff18\036\uff18" +
    "\041\uff18\051\uff18\106\uff18\107\uff18\110\uff18\111\uff18\114" +
    "\uff18\127\uff18\130\uff18\131\uff18\132\uff18\001\002\000\004" +
    "\112\u0258\001\002\000\004\113\u0254\001\002\000\004\007" +
    "\u0224\001\002\000\012\022\034\023\036\024\035\051\u0225" +
    "\001\002\000\004\006\u024d\001\002\000\004\051\u0227\001" +
    "\002\000\004\006\u0228\001\002\000\020\007\125\050\u01dd" +
    "\051\u01e0\052\132\053\126\054\131\131\u01df\001\002\000" +
    "\004\112\u022a\001\002\000\022\007\u0230\027\u0232\037\u022c" +
    "\040\u022e\051\u022f\052\132\053\126\054\131\001\002\000" +
    "\004\112\u023a\001\002\000\006\010\ufedb\112\ufedb\001\002" +
    "\000\006\010\ufedc\112\ufedc\001\002\000\006\010\ufeda\112" +
    "\ufeda\001\002\000\034\007\ufee7\011\uffc1\012\uffc1\013\uffc1" +
    "\014\uffc1\015\uffc1\017\ufee7\043\uffc1\044\uffc1\045\uffc1\046" +
    "\uffc1\047\uffc1\116\uffc1\001\002\000\022\007\u014e\027\u0150" +
    "\037\u014b\040\u014c\051\123\052\132\053\126\054\131\001" +
    "\002\000\022\011\143\012\144\043\u015b\044\u0158\045\u015a" +
    "\046\u0157\047\u0159\116\u0156\001\002\000\022\007\u0230\027" +
    "\u0232\037\u022c\040\u022e\051\u022f\052\132\053\126\054\131" +
    "\001\002\000\006\010\ufed7\112\ufed7\001\002\000\006\010" +
    "\ufede\112\ufede\001\002\000\014\007\125\051\123\052\132" +
    "\053\126\054\131\001\002\000\012\010\ufed9\011\143\012" +
    "\144\112\ufed9\001\002\000\004\010\u0238\001\002\000\006" +
    "\010\ufedd\112\ufedd\001\002\000\022\007\u0230\027\u0232\037" +
    "\u022c\040\u022e\051\u022f\052\132\053\126\054\131\001\002" +
    "\000\004\051\u023b\001\002\000\014\006\u0240\011\u023f\012" +
    "\u0242\013\u023e\014\u0241\001\002\000\004\010\u023d\001\002" +
    "\000\004\113\ufefc\001\002\000\004\006\u024a\001\002\000" +
    "\004\006\u0248\001\002\000\020\007\125\050\u01dd\051\u01e0" +
    "\052\132\053\126\054\131\131\u01df\001\002\000\004\006" +
    "\u0245\001\002\000\004\006\u0243\001\002\000\020\007\125" +
    "\050\u01dd\051\u01e0\052\132\053\126\054\131\131\u01df\001" +
    "\002\000\004\010\ufef7\001\002\000\020\007\125\050\u01dd" +
    "\051\u01e0\052\132\053\126\054\131\131\u01df\001\002\000" +
    "\004\010\ufef5\001\002\000\004\010\ufef9\001\002\000\020" +
    "\007\125\050\u01dd\051\u01e0\052\132\053\126\054\131\131" +
    "\u01df\001\002\000\004\010\ufef8\001\002\000\020\007\125" +
    "\050\u01dd\051\u01e0\052\132\053\126\054\131\131\u01df\001" +
    "\002\000\004\010\ufef6\001\002\000\006\010\ufed8\112\ufed8" +
    "\001\002\000\020\007\125\050\u01dd\051\u01e0\052\132\053" +
    "\126\054\131\131\u01df\001\002\000\004\112\u024f\001\002" +
    "\000\022\007\u0230\027\u0232\037\u022c\040\u022e\051\u022f\052" +
    "\132\053\126\054\131\001\002\000\004\112\u0251\001\002" +
    "\000\004\051\u023b\001\002\000\004\010\u0253\001\002\000" +
    "\004\113\ufefb\001\002\000\034\022\034\023\036\024\035" +
    "\034\u0223\035\u0211\036\u021b\041\u0217\051\u0219\106\u020d\127" +
    "\u0218\130\u021d\131\u01df\132\u020e\001\002\000\036\022\034" +
    "\023\036\024\035\034\u0223\035\u0211\036\u021b\041\u0217\051" +
    "\u0219\106\u020d\114\u0257\127\u0218\130\u021d\131\u01df\132\u020e" +
    "\001\002\000\044\022\uff1c\023\uff1c\024\uff1c\034\uff1c\035" +
    "\uff1c\036\uff1c\041\uff1c\051\uff1c\106\uff1c\107\uff1c\110\uff1c" +
    "\111\uff1c\114\uff1c\127\uff1c\130\uff1c\131\uff1c\132\uff1c\001" +
    "\002\000\044\022\ufeff\023\ufeff\024\ufeff\034\ufeff\035\ufeff" +
    "\036\ufeff\041\ufeff\051\ufeff\106\ufeff\107\ufeff\110\ufeff\111" +
    "\ufeff\114\ufeff\127\ufeff\130\ufeff\131\ufeff\132\ufeff\001\002" +
    "\000\044\022\uff16\023\uff16\024\uff16\034\uff16\035\uff16\036" +
    "\uff16\041\uff16\051\uff16\106\uff16\107\uff16\110\uff16\111\uff16" +
    "\114\uff16\127\uff16\130\uff16\131\uff16\132\uff16\001\002\000" +
    "\044\022\uff14\023\uff14\024\uff14\034\uff14\035\uff14\036\uff14" +
    "\041\uff14\051\uff14\106\uff14\107\uff14\110\uff14\111\uff14\114" +
    "\uff14\127\uff14\130\uff14\131\uff14\132\uff14\001\002\000\004" +
    "\010\u025b\001\002\000\004\112\ufef3\001\002\000\044\022" +
    "\uff15\023\uff15\024\uff15\034\uff15\035\uff15\036\uff15\041\uff15" +
    "\051\uff15\106\uff15\107\uff15\110\uff15\111\uff15\114\uff15\127" +
    "\uff15\130\uff15\131\uff15\132\uff15\001\002\000\034\022\034" +
    "\023\036\024\035\034\u0223\035\u0211\036\u021b\041\u0217\051" +
    "\u0219\106\u020d\127\u0218\130\u021d\131\u01df\132\u020e\001\002" +
    "\000\036\022\034\023\036\024\035\034\u0223\035\u0211\036" +
    "\u021b\041\u0217\051\u0219\106\u020d\114\u025f\127\u0218\130\u021d" +
    "\131\u01df\132\u020e\001\002\000\004\035\u0211\001\002\000" +
    "\004\112\u0261\001\002\000\044\022\ufefd\023\ufefd\024\ufefd" +
    "\034\ufefd\035\ufefd\036\ufefd\041\ufefd\051\ufefd\106\ufefd\107" +
    "\ufefd\110\ufefd\111\ufefd\114\ufefd\127\ufefd\130\ufefd\131\ufefd" +
    "\132\ufefd\001\002\000\034\022\034\023\036\024\035\034" +
    "\u0223\035\u0211\036\u021b\041\u0217\051\u0219\106\u020d\127\u0218" +
    "\130\u021d\131\u01df\132\u020e\001\002\000\036\022\034\023" +
    "\036\024\035\034\u0223\035\u0211\036\u021b\041\u0217\051\u0219" +
    "\106\u020d\114\u0264\127\u0218\130\u021d\131\u01df\132\u020e\001" +
    "\002\000\044\022\uff09\023\uff09\024\uff09\034\uff09\035\uff09" +
    "\036\uff09\041\uff09\051\uff09\106\uff09\107\uff09\110\uff09\111" +
    "\uff09\114\uff09\127\uff09\130\uff09\131\uff09\132\uff09\001\002" +
    "\000\006\006\u0268\124\u01e4\001\002\000\020\007\125\050" +
    "\u01dd\051\u01e0\052\132\053\126\054\131\131\u01df\001\002" +
    "\000\004\112\uff0b\001\002\000\020\007\125\050\u01dd\051" +
    "\u01e0\052\132\053\126\054\131\131\u01df\001\002\000\004" +
    "\112\uff0a\001\002\000\012\050\u026c\051\u026b\053\u026d\054" +
    "\u026f\001\002\000\006\010\ufeef\021\ufeef\001\002\000\006" +
    "\010\ufeed\021\ufeed\001\002\000\006\010\ufef0\021\ufef0\001" +
    "\002\000\006\010\u0272\021\u0271\001\002\000\006\010\ufeee" +
    "\021\ufeee\001\002\000\006\010\ufef1\021\ufef1\001\002\000" +
    "\012\050\u026c\051\u026b\053\u026d\054\u026f\001\002\000\004" +
    "\112\ufef4\001\002\000\006\010\ufef2\021\ufef2\001\002\000" +
    "\022\007\u0230\027\u0232\037\u022c\040\u022e\051\u022f\052\132" +
    "\053\126\054\131\001\002\000\004\010\u0276\001\002\000" +
    "\004\113\uff07\001\002\000\044\022\uff1a\023\uff1a\024\uff1a" +
    "\034\uff1a\035\uff1a\036\uff1a\041\uff1a\051\uff1a\106\uff1a\107" +
    "\uff1a\110\uff1a\111\uff1a\114\uff1a\127\uff1a\130\uff1a\131\uff1a" +
    "\132\uff1a\001\002\000\044\022\uff13\023\uff13\024\uff13\034" +
    "\uff13\035\uff13\036\uff13\041\uff13\051\uff13\106\uff13\107\uff13" +
    "\110\uff13\111\uff13\114\uff13\127\uff13\130\uff13\131\uff13\132" +
    "\uff13\001\002\000\034\022\034\023\036\024\035\034\u0223" +
    "\035\u0211\036\u021b\041\u0217\051\u0219\106\u020d\127\u0218\130" +
    "\u021d\131\u01df\132\u020e\001\002\000\036\022\034\023\036" +
    "\024\035\034\u0223\035\u0211\036\u021b\041\u0217\051\u0219\106" +
    "\u020d\114\u027b\127\u0218\130\u021d\131\u01df\132\u020e\001\002" +
    "\000\044\022\ufefe\023\ufefe\024\ufefe\034\ufefe\035\ufefe\036" +
    "\ufefe\041\ufefe\051\ufefe\106\ufefe\107\ufefe\110\ufefe\111\ufefe" +
    "\114\ufefe\127\ufefe\130\ufefe\131\ufefe\132\ufefe\001\002\000" +
    "\044\022\uff19\023\uff19\024\uff19\034\uff19\035\uff19\036\uff19" +
    "\041\uff19\051\uff19\106\uff19\107\uff19\110\uff19\111\uff19\114" +
    "\uff19\127\uff19\130\uff19\131\uff19\132\uff19\001\002\000\022" +
    "\007\u0230\027\u0232\037\u022c\040\u022e\051\u022f\052\132\053" +
    "\126\054\131\001\002\000\004\010\u027f\001\002\000\006" +
    "\112\ufefa\113\ufefa\001\002\000\004\002\uff1d\001\002\000" +
    "\004\107\u0282\001\002\000\004\115\u028c\001\002\000\010" +
    "\107\uff01\110\uff01\114\uff03\001\002\000\004\114\u028b\001" +
    "\002\000\006\107\u0282\110\u0286\001\002\000\004\115\u0288" +
    "\001\002\000\010\107\uff02\110\uff02\114\uff05\001\002\000" +
    "\034\022\034\023\036\024\035\034\u0223\035\u0211\036\u021b" +
    "\041\u0217\051\u0219\106\u020d\127\u0218\130\u021d\131\u01df\132" +
    "\u020e\001\002\000\040\022\034\023\036\024\035\034\u0223" +
    "\035\u0211\036\u021b\041\u0217\051\u0219\106\u020d\111\u018d\114" +
    "\uff40\127\u0218\130\u021d\131\u01df\132\u020e\001\002\000\004" +
    "\114\uff04\001\002\000\044\022\uff08\023\uff08\024\uff08\034" +
    "\uff08\035\uff08\036\uff08\041\uff08\051\uff08\106\uff08\107\uff08" +
    "\110\uff08\111\uff08\114\uff08\127\uff08\130\uff08\131\uff08\132" +
    "\uff08\001\002\000\034\022\034\023\036\024\035\034\u0223" +
    "\035\u0211\036\u021b\041\u0217\051\u0219\106\u020d\127\u0218\130" +
    "\u021d\131\u01df\132\u020e\001\002\000\044\022\034\023\036" +
    "\024\035\034\u0223\035\u0211\036\u021b\041\u0217\051\u0219\106" +
    "\u020d\107\uff40\110\uff40\111\u018d\114\uff40\127\u0218\130\u021d" +
    "\131\u01df\132\u020e\001\002\000\010\107\uff00\110\uff00\114" +
    "\uff00\001\002\000\004\050\u0290\001\002\000\004\021\u0291" +
    "\001\002\000\004\020\u0292\001\002\000\004\051\u0293\001" +
    "\002\000\004\010\u0294\001\002\000\004\112\ufeeb\001\002" +
    "\000\004\051\u0296\001\002\000\004\010\u0297\001\002\000" +
    "\004\113\uff06\001\002\000\012\022\uff21\023\uff21\024\uff21" +
    "\102\uff21\001\002\000\012\006\u029d\021\uff0c\112\uff0c\124" +
    "\u01d7\001\002\000\004\112\uff12\001\002\000\006\021\u02a1" +
    "\112\uff10\001\002\000\012\006\u029f\021\uff0e\112\uff0e\124" +
    "\u01e4\001\002\000\020\007\125\050\u01dd\051\u01e0\052\132" +
    "\053\126\054\131\131\u01df\001\002\000\006\021\uff0f\112" +
    "\uff0f\001\002\000\004\113\u01f1\001\002\000\006\021\uff0d" +
    "\112\uff0d\001\002\000\004\051\242\001\002\000\006\021" +
    "\247\112\uff11\001\002\000\012\022\uff20\023\uff20\024\uff20" +
    "\102\uff20\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02a1\000\010\002\006\003\004\012\005\001\001\000" +
    "\002\001\001\000\004\004\341\001\001\000\016\006\010" +
    "\015\017\016\015\017\016\020\012\021\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\006\340\015\017\016\015\017\016\020\012\021\013\001" +
    "\001\000\016\006\337\015\017\016\015\017\016\020\012" +
    "\021\013\001\001\000\052\024\334\025\075\026\107\027" +
    "\057\030\071\031\047\034\077\035\106\036\104\037\051" +
    "\044\050\045\067\053\053\054\070\060\072\061\100\062" +
    "\064\063\076\066\055\067\101\001\001\000\002\001\001" +
    "\000\016\006\333\015\017\016\015\017\016\020\012\021" +
    "\013\001\001\000\052\024\102\025\075\026\107\027\057" +
    "\030\071\031\047\034\077\035\106\036\104\037\051\044" +
    "\050\045\067\053\053\054\070\060\072\061\100\062\064" +
    "\063\076\066\055\067\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\022\025\023\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\040\001\001\000\002\001\001\000\004\014" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\022\045\023\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\041\200\042" +
    "\127\043\126\046\310\047\203\050\202\051\173\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\026\303\030" +
    "\071\031\047\034\077\035\106\036\104\037\051\044\050" +
    "\045\067\053\053\054\070\060\072\061\100\062\064\063" +
    "\076\066\055\067\101\001\001\000\020\041\200\042\127" +
    "\043\126\046\300\047\203\050\202\051\173\001\001\000" +
    "\002\001\001\000\014\032\273\033\272\041\255\042\127" +
    "\043\126\001\001\000\052\024\266\025\075\026\107\027" +
    "\057\030\071\031\047\034\077\035\106\036\104\037\051" +
    "\044\050\045\067\053\053\054\070\060\072\061\100\062" +
    "\064\063\076\066\055\067\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\055\243\056\242\001\001\000" +
    "\052\024\236\025\075\026\107\027\057\030\071\031\047" +
    "\034\077\035\106\036\104\037\051\044\050\045\067\053" +
    "\053\054\070\060\072\061\100\062\064\063\076\066\055" +
    "\067\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\024\167\025\075\026\107\027\057\030" +
    "\071\031\047\034\077\035\106\036\104\037\051\044\050" +
    "\045\067\053\053\054\070\060\072\061\100\062\064\063" +
    "\076\066\055\067\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\070\152\071\151\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\024\113\025\075\026\107" +
    "\027\057\030\071\031\047\034\077\035\106\036\104\037" +
    "\051\044\050\045\067\053\053\054\070\060\072\061\100" +
    "\062\064\063\076\066\055\067\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\041\146\042\127" +
    "\043\126\001\001\000\004\014\120\001\001\000\002\001" +
    "\001\000\010\041\123\042\127\043\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\041\140\042\127\043" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\137\001\001\000\004\043\136\001\001\000\004\043\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\042\145" +
    "\043\126\001\001\000\006\042\144\043\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\024\166\025\075\026" +
    "\107\027\057\030\071\031\047\034\077\035\106\036\104" +
    "\037\051\044\050\045\067\053\053\054\070\060\072\061" +
    "\100\062\064\063\076\066\055\067\101\001\001\000\004" +
    "\071\162\001\001\000\004\072\156\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\024\165\025" +
    "\075\026\107\027\057\030\071\031\047\034\077\035\106" +
    "\036\104\037\051\044\050\045\067\053\053\054\070\060" +
    "\072\061\100\062\064\063\076\066\055\067\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\064\170\001\001\000\002\001\001" +
    "\000\052\024\230\025\075\026\107\027\057\030\071\031" +
    "\047\034\077\035\106\036\104\037\051\044\050\045\067" +
    "\053\053\054\070\060\072\061\100\062\064\063\076\066" +
    "\055\067\101\001\001\000\020\041\200\042\127\043\126" +
    "\046\174\047\203\050\202\051\173\001\001\000\002\001" +
    "\001\000\004\065\224\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\041\220\042\127\043\126\046\217\047" +
    "\203\050\202\051\173\001\001\000\004\052\212\001\001" +
    "\000\012\041\200\042\127\043\126\051\206\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\041\200\042\127" +
    "\043\126\050\205\051\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\216\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\052\212\001\001\000\002\001\001\000" +
    "\016\041\200\042\127\043\126\047\223\050\202\051\173" +
    "\001\001\000\002\001\001\000\052\024\226\025\075\026" +
    "\107\027\057\030\071\031\047\034\077\035\106\036\104" +
    "\037\051\044\050\045\067\053\053\054\070\060\072\061" +
    "\100\062\064\063\076\066\055\067\101\001\001\000\002" +
    "\001\001\000\004\064\227\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\057\263" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\056" +
    "\245\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\250\001\001\000\004\057\252\001\001\000\012\033" +
    "\253\041\255\042\127\043\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\057\257\001\001\000\002\001\001\000\004\014\261" +
    "\001\001\000\004\057\262\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\041\200\042\127\043" +
    "\126\046\271\047\203\050\202\051\173\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\032" +
    "\275\033\272\041\255\042\127\043\126\001\001\000\002" +
    "\001\001\000\012\033\277\041\255\042\127\043\126\001" +
    "\001\000\002\001\001\000\004\065\301\001\001\000\002" +
    "\001\001\000\014\032\304\033\272\041\255\042\127\043" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\032\315\033\272\041\255\042\127\043\126\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\032\320" +
    "\033\272\041\255\042\127\043\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\041\323\042\127\043\126" +
    "\001\001\000\004\040\324\001\001\000\002\001\001\000" +
    "\004\072\326\001\001\000\002\001\001\000\004\072\332" +
    "\001\001\000\004\072\331\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\u01bf\001\001\000\004\007\343\001\001" +
    "\000\006\073\344\074\345\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\054\014\u0107\075\360\077\u0109\100\353\101" +
    "\356\102\375\103\371\104\352\113\u010a\114\372\115\362" +
    "\116\u0105\117\370\120\u0103\122\354\123\u0100\124\355\125" +
    "\366\126\u0106\130\361\140\u0108\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\u0131\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\056" +
    "\u0120\001\001\000\002\001\001\000\052\014\u0107\075\360" +
    "\100\u011e\101\356\102\375\103\371\104\352\113\u010a\114" +
    "\372\115\362\116\u0105\117\370\120\u0103\122\354\123\u0100" +
    "\124\355\125\366\126\u0106\130\361\140\u0108\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\014\u0107\105\u0110" +
    "\106\u010f\113\u010d\114\372\115\362\116\u0105\117\370\120" +
    "\u0103\122\354\123\u0100\124\355\125\366\126\u0106\130\361" +
    "\001\001\000\002\001\001\000\004\014\u011c\001\001\000" +
    "\034\014\u0107\113\u0114\114\372\115\362\116\u0105\117\370" +
    "\120\u0103\122\354\123\u0100\124\355\125\366\126\u0106\130" +
    "\361\001\001\000\002\001\001\000\004\120\u0112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\041\u0119\042\127\043\126\107\u0116\110\u0117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\056\u011d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\014\u0107\105\u0122" +
    "\106\u010f\113\u010d\114\372\115\362\116\u0105\117\370\120" +
    "\u0103\122\354\123\u0100\124\355\125\366\126\u0106\130\361" +
    "\001\001\000\002\001\001\000\004\127\u0125\001\001\000" +
    "\006\125\u0127\126\u0106\001\001\000\002\001\001\000\040" +
    "\014\u0107\105\u0128\106\u010f\113\u010d\114\372\115\362\116" +
    "\u0105\117\370\120\u0103\122\354\123\u0100\124\355\125\366" +
    "\126\u0106\130\361\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\014\u0107\105\u012e\106\u010f\113" +
    "\u010d\114\372\115\362\116\u0105\117\370\120\u0103\122\354" +
    "\123\u0100\124\355\125\366\126\u0106\130\361\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\056\u011d\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\u0135\076\u0137\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\u013a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\057\263\001\001\000\006\014\u0135\076" +
    "\u0140\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\u0135\076\u0143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\041\u014e\042" +
    "\127\043\126\136\u014c\137\u0150\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\041\u015d\042" +
    "\127\043\126\136\u014c\137\u015e\001\001\000\004\135\u015b" +
    "\001\001\000\012\041\u014e\042\127\043\126\136\u0154\001" +
    "\001\000\004\013\u0151\001\001\000\012\041\u014e\042\127" +
    "\043\126\136\u0153\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\041\u015c\042\127\043\126\001\001" +
    "\000\002\001\001\000\004\135\u015b\001\001\000\004\013" +
    "\u0151\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\014\u0107\105\u0165\106" +
    "\u010f\113\u010d\114\372\115\362\116\u0105\117\370\120\u0103" +
    "\122\354\123\u0100\124\355\125\366\126\u0106\130\361\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\111\u016b\112\u0169\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\112" +
    "\u0170\001\001\000\002\001\001\000\006\111\u0172\112\u0169" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\014\u0107\105\u0176\106\u010f\113\u010d\114\372" +
    "\115\362\116\u0105\117\370\120\u0103\122\354\123\u0100\124" +
    "\355\125\366\126\u0106\130\361\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\033\u0179\041\255\042\127\043" +
    "\126\001\001\000\002\001\001\000\014\041\u014e\042\127" +
    "\043\126\136\u014c\137\u017b\001\001\000\004\013\u0151\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\131\u0185\132" +
    "\u0184\133\u0183\001\001\000\014\041\u0119\042\127\043\126" +
    "\107\u018e\110\u0117\001\001\000\002\001\001\000\004\133" +
    "\u0188\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\014\u0107\105\u018a\106" +
    "\u010f\113\u010d\114\372\115\362\116\u0105\117\370\120\u0103" +
    "\122\354\123\u0100\124\355\125\366\126\u0106\130\361\001" +
    "\001\000\004\134\u018b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\014" +
    "\u0107\105\u0190\106\u010f\113\u010d\114\372\115\362\116\u0105" +
    "\117\370\120\u0103\122\354\123\u0100\124\355\125\366\126" +
    "\u0106\130\361\001\001\000\004\134\u0191\001\001\000\002" +
    "\001\001\000\040\014\u0107\105\u0193\106\u010f\113\u010d\114" +
    "\372\115\362\116\u0105\117\370\120\u0103\122\354\123\u0100" +
    "\124\355\125\366\126\u0106\130\361\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\u0197\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\041" +
    "\u019a\042\127\043\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\135\u019d\001\001\000\010\041\u019e\042" +
    "\127\043\126\001\001\000\002\001\001\000\004\121\u01a1" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\041\u01ac" +
    "\042\127\043\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\041\u01a9\042\127\043\126\001\001\000\002" +
    "\001\001\000\010\041\u01ab\042\127\043\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\041\u01ae\042\127" +
    "\043\126\001\001\000\002\001\001\000\010\041\u01b0\042" +
    "\127\043\126\001\001\000\002\001\001\000\010\041\u01b2" +
    "\042\127\043\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\135\u01b5\001\001\000\010\041\u01b6\042\127" +
    "\043\126\001\001\000\002\001\001\000\004\121\u01b8\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\014\u0107\105\u01bd\106\u010f\113\u010d\114\372\115" +
    "\362\116\u0105\117\370\120\u0103\122\354\123\u0100\124\355" +
    "\125\366\126\u0106\130\361\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\u01c2\001\001" +
    "\000\004\010\u01c1\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\141\u01c4\001\001\000\010\143\u01c5\144\u01c7" +
    "\152\u01c9\001\001\000\012\014\u0201\144\u0203\151\u0202\155" +
    "\u0200\001\001\000\004\014\u01d2\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\201\u01cd\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\145\u01d4\001\001" +
    "\000\002\001\001\000\022\041\u01e0\042\127\043\126\176" +
    "\u01e1\200\u01da\201\u01dd\203\u01d9\206\u01db\001\001\000\010" +
    "\041\u01d7\042\127\043\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\145\u01e2\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\041\u01e4\042\127\043" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\041\u01e0\042\127\043" +
    "\126\176\u01e1\200\u01da\201\u01dd\202\u01ea\203\u01e9\206\u01db" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\041\u01e0\042\127\043\126\176\u01e1\200\u01da" +
    "\201\u01dd\203\u01ee\206\u01db\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\146\u01f1\001\001\000\014\041\u01f4" +
    "\042\127\043\126\147\u01f2\150\u01f3\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\041\u01f4\042\127\043\126\147\u01f6\001\001\000" +
    "\002\001\001\000\010\041\u01f9\042\127\043\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\041\u01f4\042\127\043\126\147\u01fd" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\156\u0299\001\001\000\010" +
    "\014\u0201\142\u0207\155\u0205\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\014\u0201\153\u020f\154\u0211\155\u0215\160\u0212" +
    "\161\u021f\162\u0219\163\u020e\167\u021d\170\u0221\171\u0213\173" +
    "\u0220\176\u021b\177\u021e\200\u0214\201\u01dd\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\014" +
    "\u0201\154\u0255\155\u0215\160\u0212\161\u021f\162\u0219\163\u020e" +
    "\167\u021d\170\u0221\171\u0213\173\u0220\176\u021b\177\u021e\200" +
    "\u0214\201\u01dd\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\145\u0264\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\u0225\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\041" +
    "\u01e0\042\127\043\126\176\u01e1\200\u01da\201\u01dd\203\u0228" +
    "\206\u01db\001\001\000\002\001\001\000\020\041\u0230\042" +
    "\127\043\126\200\u022c\201\u01dd\204\u0232\205\u022a\001\001" +
    "\000\004\013\u0238\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\041\u015d" +
    "\042\127\043\126\136\u014c\137\u0236\001\001\000\004\135" +
    "\u0234\001\001\000\016\041\u0230\042\127\043\126\200\u022c" +
    "\201\u01dd\204\u0233\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\041\u0235\042\127\043\126\001\001\000\002" +
    "\001\001\000\004\013\u0151\001\001\000\002\001\001\000" +
    "\016\041\u0230\042\127\043\126\200\u022c\201\u01dd\204\u024b" +
    "\001\001\000\004\172\u023b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\041\u01e0\042\127\043\126\176\u01e1\200" +
    "\u01da\201\u01dd\203\u0246\206\u01db\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\041\u01e0\042\127\043\126\176" +
    "\u01e1\200\u01da\201\u01dd\203\u0243\206\u01db\001\001\000\002" +
    "\001\001\000\022\041\u01e0\042\127\043\126\176\u01e1\200" +
    "\u01da\201\u01dd\203\u0245\206\u01db\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\041\u01e0\042\127\043\126\176" +
    "\u01e1\200\u01da\201\u01dd\203\u0248\206\u01db\001\001\000\002" +
    "\001\001\000\022\041\u01e0\042\127\043\126\176\u01e1\200" +
    "\u01da\201\u01dd\203\u024a\206\u01db\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\041\u01e0\042\127\043\126\176" +
    "\u01e1\200\u01da\201\u01dd\203\u024d\206\u01db\001\001\000\002" +
    "\001\001\000\020\041\u0230\042\127\043\126\200\u022c\201" +
    "\u01dd\204\u0232\205\u024f\001\001\000\004\013\u0238\001\001" +
    "\000\004\172\u0251\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\014\u0201\153\u0254\154\u0211\155\u0215\160\u0212" +
    "\161\u021f\162\u0219\163\u020e\167\u021d\170\u0221\171\u0213\173" +
    "\u0220\176\u021b\177\u021e\200\u0214\201\u01dd\001\001\000\040" +
    "\014\u0201\154\u0255\155\u0215\160\u0212\161\u021f\162\u0219\163" +
    "\u020e\167\u021d\170\u0221\171\u0213\173\u0220\176\u021b\177\u021e" +
    "\200\u0214\201\u01dd\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\014\u0201\153" +
    "\u025d\154\u0211\155\u0215\160\u0212\161\u021f\162\u0219\163\u020e" +
    "\167\u021d\170\u0221\171\u0213\173\u0220\176\u021b\177\u021e\200" +
    "\u0214\201\u01dd\001\001\000\040\014\u0201\154\u0255\155\u0215" +
    "\160\u0212\161\u021f\162\u0219\163\u020e\167\u021d\170\u0221\171" +
    "\u0213\173\u0220\176\u021b\177\u021e\200\u0214\201\u01dd\001\001" +
    "\000\004\171\u025f\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\014\u0201\153\u0262\154\u0211\155\u0215\160\u0212" +
    "\161\u021f\162\u0219\163\u020e\167\u021d\170\u0221\171\u0213\173" +
    "\u0220\176\u021b\177\u021e\200\u0214\201\u01dd\001\001\000\040" +
    "\014\u0201\154\u0255\155\u0215\160\u0212\161\u021f\162\u0219\163" +
    "\u020e\167\u021d\170\u0221\171\u0213\173\u0220\176\u021b\177\u021e" +
    "\200\u0214\201\u01dd\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\041\u01e0\042\127\043\126\176\u01e1\200\u01da" +
    "\201\u01dd\203\u0266\206\u01db\001\001\000\002\001\001\000" +
    "\022\041\u01e0\042\127\043\126\176\u01e1\200\u01da\201\u01dd" +
    "\203\u0268\206\u01db\001\001\000\002\001\001\000\006\174" +
    "\u026d\175\u026f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\175\u0272\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\041\u0230\042\127\043\126\200" +
    "\u022c\201\u01dd\204\u0232\205\u0274\001\001\000\004\013\u0238" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\014\u0201\153\u0279\154\u0211\155\u0215\160\u0212" +
    "\161\u021f\162\u0219\163\u020e\167\u021d\170\u0221\171\u0213\173" +
    "\u0220\176\u021b\177\u021e\200\u0214\201\u01dd\001\001\000\040" +
    "\014\u0201\154\u0255\155\u0215\160\u0212\161\u021f\162\u0219\163" +
    "\u020e\167\u021d\170\u0221\171\u0213\173\u0220\176\u021b\177\u021e" +
    "\200\u0214\201\u01dd\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\041\u0230\042\127\043\126\200\u022c\201\u01dd" +
    "\204\u0232\205\u027d\001\001\000\004\013\u0238\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\164\u0283\165\u0284" +
    "\166\u0282\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\166\u0286\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\014\u0201\153\u0288\154\u0211\155" +
    "\u0215\160\u0212\161\u021f\162\u0219\163\u020e\167\u021d\170\u0221" +
    "\171\u0213\173\u0220\176\u021b\177\u021e\200\u0214\201\u01dd\001" +
    "\001\000\042\014\u0201\134\u0289\154\u0255\155\u0215\160\u0212" +
    "\161\u021f\162\u0219\163\u020e\167\u021d\170\u0221\171\u0213\173" +
    "\u0220\176\u021b\177\u021e\200\u0214\201\u01dd\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\014\u0201\153\u028c\154" +
    "\u0211\155\u0215\160\u0212\161\u021f\162\u0219\163\u020e\167\u021d" +
    "\170\u0221\171\u0213\173\u0220\176\u021b\177\u021e\200\u0214\201" +
    "\u01dd\001\001\000\042\014\u0201\134\u028d\154\u0255\155\u0215" +
    "\160\u0212\161\u021f\162\u0219\163\u020e\167\u021d\170\u0221\171" +
    "\u0213\173\u0220\176\u021b\177\u021e\200\u0214\201\u01dd\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\145\u029b\157\u029a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\041\u01e0\042\127\043\126\176\u01e1\200\u01da\201\u01dd" +
    "\203\u029d\206\u01db\001\001\000\002\001\001\000\004\146" +
    "\u029f\001\001\000\002\001\001\000\004\056\u02a1\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SyntaxMlgAnalyzer$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SyntaxMlgAnalyzer$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SyntaxMlgAnalyzer$do_action(act_num, parser, stack, top,this);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    

public boolean SyntaxError;
    public boolean SyntaxRecoverableError;
    public TestManager testManager;
    public TranslateControlerTAC translateControlerTAC;

    public void setTestManager(TestManager testManager) {
        this.testManager = testManager;
    }

public void setTranslateControlerTAC(TranslateControlerTAC translateControlerTAC) {
        this.translateControlerTAC = translateControlerTAC;
    }

     public void syntax_error(Symbol s){
        try {
            String lexema = s.value.toString();
            int fila = s.right;
            int columna = s.left;
            System.out.println("Error Sintactico Recuperado\n");
            System.out.println("\t \tLexema: " + lexema + "\n");
            System.out.println("\t \tFila: " + fila + "\n");
            System.out.println("\t \tColumna: " + columna + "\n");
        } catch (Exception e) {
            System.out.println("error");
            int fila = s.right;
            int columna = s.left;
            System.out.println("\t \tFila: " + fila + "\n");
            System.out.println("\t \tColumna: " + columna + "\n");
        }

    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        try{
            String lexema = s.value.toString();
            int fila = s.right;
            int columna = s.left;
        System.out.println("Error Sintactico Recuperado\n");
        System.out.println("\t \tLexema: "+ lexema+"\n");
        System.out.println("\t \tFila: "+ fila+"\n");
        System.out.println("\t \tColumna: "+ columna+"\n");

        } catch (Exception ex) {
            
         }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SyntaxMlgAnalyzer$actions {




  private final SyntaxMlgAnalyzer parser;

  /** Constructor */
  CUP$SyntaxMlgAnalyzer$actions(SyntaxMlgAnalyzer parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SyntaxMlgAnalyzer$do_action(
    int                        CUP$SyntaxMlgAnalyzer$act_num,
    java_cup.runtime.lr_parser CUP$SyntaxMlgAnalyzer$parser,
    java.util.Stack            CUP$SyntaxMlgAnalyzer$stack,
    int                        CUP$SyntaxMlgAnalyzer$top,SyntaxMlgAnalyzer sma)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SyntaxMlgAnalyzer$result;

      /* select the action based on the action number */
      switch (CUP$SyntaxMlgAnalyzer$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // OpBoolC ::= BoolValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBoolC",131, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // OpBoolC ::= OpBoolC OpLogic BoolValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBoolC",131, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // BoolValueC ::= NumberValue ExBoolJ NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueC",130, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // BoolValueC ::= FALSE 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueC",130, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // BoolValueC ::= TRUE 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueC",130, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // BoolValueC ::= FuntionCall 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueC",130, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // BoolValueC ::= PARENTHESIS_A OpBoolJ PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueC",130, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // BoolValueC ::= NOT BoolValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueC",130, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // ArrayVal ::= ID Dimensions 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ArrayVal",132, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // ValueC ::= ArrayVal 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValueC",129, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // ValueC ::= Getch 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValueC",129, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // ValueC ::= FuntionCall 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValueC",129, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // ValueC ::= NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValueC",129, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // ValueC ::= STRING 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValueC",129, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // ParametersC ::= ValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParametersC",128, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // ParametersC ::= ParametersC COMMA ValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParametersC",128, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // FuntionIDs ::= ID 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FuntionIDs",127, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // FuntionIDs ::= FuntionIDs POINT ID 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FuntionIDs",127, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // FuntionCall ::= FuntionIDs PARENTHESIS_A PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FuntionCall",126, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // FuntionCall ::= FuntionIDs PARENTHESIS_A ParametersC PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FuntionCall",126, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // Input ::= SCAN_F PARENTHESIS_A STRING COMMA AMPERSON ID PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Input",125, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // Getch ::= GETCH PARENTHESIS_A PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Getch",124, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // OutputValueC ::= STRING 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValueC",123, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // OutputValueC ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValueC",123, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // OutputValueC ::= ID 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValueC",123, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // OutputValueC ::= NUMBER 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValueC",123, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // OutputValuesC ::= OutputValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValuesC",122, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // OutputValuesC ::= OutputValuesC COMMA OutputValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValuesC",122, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // OutputC ::= CLRSCR PARENTHESIS_A PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputC",121, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // OutputC ::= PRINTF PARENTHESIS_A OutputValuesC PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputC",121, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // StepC ::= ID DIVISION EQUAL ValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepC",120, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // StepC ::= ID MULTIPLICATION EQUAL ValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepC",120, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // StepC ::= ID MINUS EQUAL ValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepC",120, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // StepC ::= ID PLUS EQUAL ValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepC",120, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // StepC ::= ID EQUAL ValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepC",120, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // WhileCHeader ::= WHILE PARENTHESIS_A OpBoolC PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("WhileCHeader",119, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // ForCHeader ::= FOR PARENTHESIS_A ID EQUAL ValueC SEMICOLON OpBoolC SEMICOLON StepC PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForCHeader",118, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-9)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // ForCHeader ::= FOR PARENTHESIS_A Type ID EQUAL ValueC SEMICOLON OpBoolC SEMICOLON StepC PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForCHeader",118, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-10)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // CycleC ::= DO LEFT_CB MainCode RIGHT_CB WhileCHeader SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleC",117, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // CycleC ::= WhileCHeader LEFT_CB MainCode RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleC",117, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // CycleC ::= ForCHeader LEFT_CB MainCode RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleC",117, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // CaseC ::= CASE_J COLON MainCode BreakJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseC",116, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // CasesC2 ::= CaseC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesC2",115, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // CasesC2 ::= CasesC2 CaseC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesC2",115, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // CasesC ::= CaseC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesC",114, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // CasesC ::= CasesC2 DEFAULT_J COLON MainCode BreakJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesC",114, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // CasesC ::= CasesC2 CaseC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesC",114, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // SwitchCHeader ::= SWITCH_J PARENTHESIS_A ID PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("SwitchCHeader",113, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // IfCHeader ::= IF PARENTHESIS_A OpBoolC PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IfCHeader",112, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // ConditionC ::= SwitchCHeader LEFT_CB CasesC RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionC",111, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // ConditionC ::= IfCHeader LEFT_CB MainCode RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionC",111, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // AssignmentC ::= ID Dimensions EQUAL ValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentC",110, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // AssignmentC ::= ID EQUAL ValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentC",110, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // AssiC ::= 
            {
              Object RESULT =null;
		System.out.println("ASSI VACIO");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssiC",109, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // AssiC ::= Dimensions EQUAL ArrayValues 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssiC",109, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // AssiC ::= Dimensions 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssiC",109, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // AssiC ::= EQUAL ValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssiC",109, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // IdsC ::= ID AssiC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IdsC",108, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // IdsC ::= ID AssiC COMMA IdsVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IdsC",108, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // DeclarationC ::= Type IdsC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationC",107, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // MainLineCode ::= FuntionCall SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",106, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // MainLineCode ::= Input SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",106, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // MainLineCode ::= Getch SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",106, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // MainLineCode ::= OutputC SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",106, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // MainLineCode ::= CycleC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",106, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // MainLineCode ::= ConditionC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",106, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // MainLineCode ::= AssignmentC SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",106, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // MainLineCode ::= DeclarationC SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",106, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // MainCode ::= MainLineCode 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainCode",105, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // MainCode ::= MainCode MainLineCode 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainCode",105, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // Main ::= VOID_J MAIN PARENTHESIS_A PARENTHESIS_B LEFT_CB MainCode RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Main",96, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // Include ::= INCLUDE LESS_THAN FuntionIDs GREATER_THAN 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Include",104, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // Include ::= INCLUDE STRING 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Include",104, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // Globals ::= DeclarationC SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Globals",103, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // Globals ::= Globals DeclarationC SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Globals",103, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // Rows ::= LEFT_CB Nums RIGHT_BRACKET 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Rows",102, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // Rows ::= Rows COMMA LEFT_CB Nums RIGHT_BRACKET 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Rows",102, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // Nums ::= NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Nums",101, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // Nums ::= Nums COMMA NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Nums",101, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // ArrayValues ::= LEFT_CB Rows RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ArrayValues",100, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // ArrayValues ::= LEFT_CB Nums RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ArrayValues",100, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // Dimensions ::= LEFT_BRACKET NumberValue RIGHT_BRACKET 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Dimensions",99, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // Dimensions ::= Dimensions LEFT_BRACKET NumberValue RIGHT_BRACKET 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Dimensions",99, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // Constante ::= CONST Type ID Dimensions EQUAL ArrayValues 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Constante",98, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // Constante ::= CONST Type ID EQUAL ValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Constante",98, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // Constantes ::= Constante SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Constantes",97, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // Constantes ::= Constantes Constante SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Constantes",97, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // Library ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Library",95, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // Library ::= Library Include 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Library",95, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // Programa ::= PROGRAM_SEPERATOR Library Constantes Globals Main 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Programa",7, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // PythonCode ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("PythonCode",6, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // Python ::= PYTHON_SEPERATOR PythonCode 
            {
              Object RESULT =null;
		sma.testManager.switchNextTypes();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Python",3, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // OpBoolJ ::= BoolValueJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBoolJ",93, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // OpBoolJ ::= OpBoolJ OpLogic BoolValueJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBoolJ",93, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // BoolValueJ ::= NumberValue ExBoolJ NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueJ",92, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // BoolValueJ ::= FALSE 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueJ",92, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // BoolValueJ ::= TRUE 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueJ",92, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // BoolValueJ ::= PARENTHESIS_A OpBoolJ PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueJ",92, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // BoolValueJ ::= NOT BoolValueJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueJ",92, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // ExBoolJ ::= LESS_THAN_EQUAL 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolJ",91, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // ExBoolJ ::= GREATER_THAN_EQUAL 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolJ",91, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // ExBoolJ ::= LESS_THAN 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolJ",91, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // ExBoolJ ::= GREATER_THAN 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolJ",91, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // ExBoolJ ::= DIFERENT_J 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolJ",91, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // ExBoolJ ::= EQUAL_BOOL 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolJ",91, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // BreakJ ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BreakJ",90, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // BreakJ ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BreakJ",90, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // CaseJ ::= CASE_J ValuesJ COLON LineCodesJ BreakJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseJ",89, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // CasesJ2 ::= CaseJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesJ2",88, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // CasesJ2 ::= CasesJ2 CaseJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesJ2",88, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // CasesJ1 ::= CaseJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesJ1",87, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // CasesJ1 ::= CasesJ2 DEFAULT_J COLON LineCodesJ BreakJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesJ1",87, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // CasesJ1 ::= CasesJ2 CaseJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesJ1",87, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // SwitchJHeader ::= SWITCH_J PARENTHESIS_A ID PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("SwitchJHeader",86, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // ElseJ ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseJ",85, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // ElseJ ::= ELSE IfJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseJ",85, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // ElseJ ::= ELSE LEFT_CB LineCodesJ RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseJ",85, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // IfJHeader ::= IF PARENTHESIS_A OpBoolJ PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IfJHeader",84, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // IfJ ::= IfJHeader LEFT_CB LineCodesJ RIGHT_CB ElseJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IfJ",83, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // ConditionJ ::= SwitchJHeader LEFT_CB CasesJ1 RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionJ",82, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // ConditionJ ::= IfJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionJ",82, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // AssignmentJ ::= ID EQUAL ValueVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentJ",81, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // DeclarationJ ::= Type IdsVb 
            {
              Object RESULT =null;
		
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationJ",80, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // DeclarationJ ::= PUBLIC Type IdsVb 
            {
              Object RESULT =null;
		
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationJ",80, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // StepJ ::= ID DIVISION EQUAL NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepJ",79, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // StepJ ::= ID MULTIPLICATION EQUAL NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepJ",79, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // StepJ ::= ID MINUS EQUAL NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepJ",79, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // StepJ ::= ID PLUS EQUAL NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepJ",79, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // StepJ ::= ID EQUAL NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepJ",79, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // WhileJHeader ::= WHILE PARENTHESIS_A OpBoolJ PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("WhileJHeader",78, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // ForJHeader ::= FOR PARENTHESIS_A ID EQUAL NumberValue SEMICOLON ID ExBoolJ NumberValue SEMICOLON StepJ PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForJHeader",77, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-11)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // ForJHeader ::= FOR PARENTHESIS_A Type ID EQUAL NumberValue SEMICOLON ID ExBoolJ NumberValue SEMICOLON StepJ PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForJHeader",77, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-12)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // CycleJ ::= DO LEFT_CB LineCodesJ RIGHT_CB WhileJHeader SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleJ",76, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // CycleJ ::= WhileJHeader LEFT_CB LineCodesJ RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleJ",76, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // CycleJ ::= ForJHeader LEFT_CB LineCodesJ RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleJ",76, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // InputJ ::= CHARINPUT PARENTHESIS_A STRING PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InputJ",75, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // InputJ ::= FLOATINPUT PARENTHESIS_A STRING PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InputJ",75, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // InputJ ::= INTINPUT PARENTHESIS_A STRING PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InputJ",75, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // OutputJ ::= SYSTEM_OUT_PRINT PARENTHESIS_A ValuesOutputJ PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputJ",74, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // OutputJ ::= SYSTEM_OUT_PRINTLN PARENTHESIS_A ValuesOutputJ PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputJ",74, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // LineCodeJ ::= error 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",73, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // LineCodeJ ::= ConditionJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",73, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // LineCodeJ ::= AssignmentJ SEMICOLON 
            {
              Object RESULT =null;
		System.out.println("ASIGNACION");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",73, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // LineCodeJ ::= DeclarationJ SEMICOLON 
            {
              Object RESULT =null;
		System.out.println("DECLARACION");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",73, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // LineCodeJ ::= CycleJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",73, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // LineCodeJ ::= InputJ SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",73, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // LineCodeJ ::= OutputJ SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",73, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // ValJ ::= STRING 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValJ",72, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // ValJ ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValJ",72, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // ValJ ::= NUMBER 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValJ",72, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ValJ ::= ID 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValJ",72, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ValuesOutputJ ::= ValJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValuesOutputJ",71, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ValuesOutputJ ::= ValuesOutputJ PLUS ValJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValuesOutputJ",71, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // StringValue ::= STRING 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StringValue",70, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // StringValue ::= StringValue PLUS STRING 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StringValue",70, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ValuesJ ::= NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValuesJ",69, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ValuesJ ::= StringValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValuesJ",69, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // LineCodesJ2 ::= LineCodeJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodesJ2",68, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // LineCodesJ2 ::= LineCodesJ2 LineCodeJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodesJ2",68, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // LineCodesJ ::= LineCodesJ2 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodesJ",67, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // LineCodesJ ::= LineCodesJ2 RETURN_J ValuesJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodesJ",67, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ProcessJHeader ::= PUBLIC VOID_J ID PARENTHESIS_A PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ProcessJHeader",66, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ProcessJHeader ::= PUBLIC VOID_J ID PARENTHESIS_A ParametersJ PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ProcessJHeader",66, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ProcessJ ::= ProcessJHeader LEFT_CB RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ProcessJ",65, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ProcessJ ::= ProcessJHeader LEFT_CB LineCodesJ RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ProcessJ",65, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // FunctionJHeader ::= PUBLIC Type ID PARENTHESIS_A PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionJHeader",64, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // FunctionJHeader ::= PUBLIC Type ID PARENTHESIS_A ParametersJ PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionJHeader",64, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // FunctionJ ::= FunctionJHeader LEFT_CB RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionJ",63, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // FunctionJ ::= FunctionJHeader LEFT_CB LineCodesJ RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionJ",63, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ConditionJHeader ::= PUBLIC ID PARENTHESIS_A ParametersJ PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionJHeader",59, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ConstructorJ ::= ConditionJHeader LEFT_CB LineCodesJ RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConstructorJ",94, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ClassCodeJ ::= ConstructorJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClassCodeJ",62, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ClassCodeJ ::= LineCodeJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClassCodeJ",62, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ClassCodeJ ::= ProcessJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClassCodeJ",62, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ClassCodeJ ::= FunctionJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClassCodeJ",62, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // JavaClassCode ::= ClassCodeJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("JavaClassCode",61, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // JavaClassCode ::= JavaClassCode ClassCodeJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("JavaClassCode",61, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ParametersJ ::= Type ID 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParametersJ",60, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ParametersJ ::= ParametersJ COMMA Type ID 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParametersJ",60, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ClaseJHeader ::= PUBLIC CLASS_J ID 
            {
              Object RESULT =null;
		sma.testManager.creatFatherAmbit();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClaseJHeader",58, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ClaseJ ::= ClaseJHeader LEFT_CB JavaClassCode RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClaseJ",57, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // JavaCode ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("JavaCode",5, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // JavaCode ::= JavaCode ClaseJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("JavaCode",5, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Java ::= JAVA_SEPERATOR JavaCode 
            {
              Object RESULT =null;
		sma.testManager.switchNextTypes();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Java",2, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CaseValue ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type=sma.testManager.getTypeFromST(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                            if(type!=null){
                                RESULT=id;
                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseValue",56, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CaseValue ::= CHAR 
            {
              Object RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=ch;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseValue",56, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CaseValue ::= DECIMAL 
            {
              Object RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=dec;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseValue",56, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CaseValue ::= NUMBER 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=num;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseValue",56, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CasesVbHeader ::= CASE_VB ELSE 
            {
              Object RESULT =null;
		RESULT=Switch.ELSE;
                    sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesVbHeader",55, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CasesVbHeader ::= CASE_VB CaseValue 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=val;
                                            sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesVbHeader",55, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CasesVb ::= CasesVbHeader InstructionsFunctionVb 
            {
              Object RESULT =null;
		int caseHleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int caseHright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object caseH = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		UniquenessTable ut=sma.testManager.createNewUniquenessTable();
                                                                        if(caseH!=null){
                                                                            
                                                                            boolean verified =ut.add(caseH,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                            if(verified){
                                                                            
                                                                            sma.translateControlerTAC.getSwitchAsst().addCases((String)caseH,(ArrayList<Object>)lines);}
                                                                            }
                                                                        RESULT=ut;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesVb",54, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CasesVb ::= CasesVb CasesVbHeader InstructionsFunctionVb 
            {
              Object RESULT =null;
		int caseVbleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int caseVbright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object caseVb = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int caseHleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int caseHright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object caseH = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		UniquenessTable ut=(UniquenessTable)caseVb;
                                                                        if(caseH!=null){
                                                                            
                                                                            boolean verified =ut.add(caseH,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                            if(verified){
                                                                            
                                                                            sma.translateControlerTAC.getSwitchAsst().addCases((String)caseH,(ArrayList<Object>)lines);}
                                                                            }
                                                                        RESULT=ut;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesVb",54, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SwitchVbHeader ::= SELECT_VB CASE_VB ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.translateControlerTAC.createSwitchAsst(id);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("SwitchVbHeader",53, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SwitchVb ::= SwitchVbHeader CasesVb END_VB SELECT_VB 
            {
              Object RESULT =null;
		sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(sma.translateControlerTAC.getSwitchAsst().getFatherCases()));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("SwitchVb",52, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ThenVb ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ThenVb",51, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ThenVb ::= THEN_VB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ThenVb",51, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ElseVb ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseVb",50, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ElseVb ::= ELSE_IF_VB OpBool ThenVb InstructionsFunctionVb ElseVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseVb",50, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ElseVb ::= ELSE InstructionsFunctionVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseVb",50, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // IfVbHeader ::= IF OpBool ThenVb 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT=op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IfVbHeader",49, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // IfVb ::= IfVbHeader InstructionsFunctionVb ElseVb END_VB IF 
            {
              Object RESULT =null;
		int ifBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int ifBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object ifBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int elseBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int elseBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object elseBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		BoolQuad bool=(BoolQuad)ifBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    if(elseBool!=null){bool.changeFatherNoBool((ArrayList<Object>)elseBool);}
                                                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool));
                                                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IfVb",48, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ConditionVb ::= SwitchVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionVb",47, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ConditionVb ::= IfVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionVb",47, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // AssignmentVb ::= ID EQUAL ValueVb 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                if(bool){sma.translateControlerTAC.creatTempIdQuadAssign(val,id);
                                                        sma.translateControlerTAC.acceptAllIdQuas();}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentVb",46, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // AssiVb ::= 
            {
              Object RESULT =null;
		System.out.println("ASSI VACIO");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssiVb",45, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // AssiVb ::= EQUAL ValueVb 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT = val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssiVb",45, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // IdsVb ::= ID AssiVb 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.insertPreTuple(id,null,val,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                        if(val!=null){ 
                                                            sma.translateControlerTAC.creatTempIdQuadAssign(val,id);}
                                        sma.translateControlerTAC.nextIdQuad();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IdsVb",44, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // IdsVb ::= IdsVb COMMA ID AssiVb 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.insertPreTuple(id,null,val,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        if(val!=null){ 
                                                            sma.translateControlerTAC.creatTempIdQuadAssign(val,id);}
                                                       
                                                        sma.translateControlerTAC.nextIdQuad();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IdsVb",44, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Type ::= CHAR_TYPE 
            {
              Object RESULT =null;
		RESULT=TypeManager.CHAR_TYPE;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Type ::= FLOAT_TYPE 
            {
              Object RESULT =null;
		RESULT=TypeManager.FLOAT_TYPE;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Type ::= INTEGER_TYPE 
            {
              Object RESULT =null;
		RESULT=TypeManager.INTEGER_TYPE;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DeTypeVb ::= IdsVb AS_VB Type AssiVb 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.testManager.insertPreTuplesToSymbolTable((Integer)type,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeTypeVb",43, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DeTypeVb ::= DeTypeVb COMMA IdsVb AS_VB Type AssiVb 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.testManager.insertPreTuplesToSymbolTable((Integer)type,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeTypeVb",43, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DeclarationVb ::= DIM_VB DeTypeVb 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationVb",42, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DoWhileVb ::= DO InstructionsFunctionVb LOOP_VB WHILE OpBool 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DoWhileVb",41, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ExBoolVb ::= LESS_THAN_EQUAL 
            {
              Object RESULT =null;
		RESULT=Operation.LESS_THAN_EQUAL;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb",40, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ExBoolVb ::= GREATER_THAN_EQUAL 
            {
              Object RESULT =null;
		RESULT=Operation.GREATER_THAN_EQUAL;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb",40, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ExBoolVb ::= LESS_THAN 
            {
              Object RESULT =null;
		RESULT=Operation.LESS_THAN;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb",40, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ExBoolVb ::= GREATER_THAN 
            {
              Object RESULT =null;
		RESULT=Operation.GREATER_THAN;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb",40, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ExBoolVb ::= DIFERENT_VB 
            {
              Object RESULT =null;
		RESULT=Operation.DIFERENT;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb",40, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ExBoolVb ::= EQUAL 
            {
              Object RESULT =null;
		RESULT=Operation.EQUAL_BOOL;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb",40, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // BoolValueVb ::= PARENTHESIS_A OpBool PARENTHESIS_B 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT=val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueVb",39, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // BoolValueVb ::= NumberValue ExBoolVb Number3 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int exValleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int exValright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object exVal = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateBoolType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdBoolQuadruple(s1.getQuadruple(),s2.getQuadruple(),(Integer)exVal);
                                                                    RESULT=sma.translateControlerTAC.getcurrentTempQuads();
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueVb",39, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // BoolValueVb ::= FALSE 
            {
              Object RESULT =null;
		 Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.BOOL_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL_BOOL,0,1,null);
		                    RESULT=sma.translateControlerTAC.getcurrentTempQuads();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueVb",39, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // BoolValueVb ::= TRUE 
            {
              Object RESULT =null;
		 Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.BOOL_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL_BOOL,1,1,null);
		                    RESULT=sma.translateControlerTAC.getcurrentTempQuads();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueVb",39, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OpBool3 ::= BoolValueVb 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(val!=null){
                   RESULT = sma.translateControlerTAC.getBoolQuadControl().convertQuadToBool(((ArrayList<Object>)val)); 
        }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBool3",38, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OpBool3 ::= NOT BoolValueVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBool3",38, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OpBool2 ::= OpBool3 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBool2",37, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OpBool2 ::= OpBool2 AND OpBool3 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(val1!=null &&val2!=null){
                                            RESULT= sma.translateControlerTAC.getBoolQuadControl().operateBoolQuad(val1,val2,Operation.OP_AND);}
                                            
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBool2",37, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OpBool ::= OpBool2 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBool",36, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OpBool ::= OpBool OR OpBool2 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(val1!=null &&val2!=null){
                                            RESULT= sma.translateControlerTAC.getBoolQuadControl().operateBoolQuad(val1,val2,Operation.OP_OR);}
                                            
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBool",36, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // WhileVbHeader ::= WHILE OpBool 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT=op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("WhileVbHeader",35, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // WhileVb ::= WhileVbHeader InstructionsFunctionVb END_VB WHILE 
            {
              Object RESULT =null;
		int whileBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int whileBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object whileBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		BoolQuad bool=(BoolQuad)whileBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.addGotoWhileTags(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool)));
                                                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("WhileVb",34, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Number3 ::= PARENTHESIS_A NumberValue PARENTHESIS_B 
            {
              Object RESULT =null;
		int asstleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int asstright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object asst = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT=asst;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3",33, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Number3 ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type=sma.testManager.getTypeFromST(val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                            if(type!=null){
                                Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL,val,null,null);
                                RESULT=new SynthesizedOpAsst(quadruple,type);
                            }else{

                                RESULT=null;
                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3",33, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Number3 ::= CHAR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.CHAR_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL,val,null,null);
		                    RESULT=new SynthesizedOpAsst(quadruple,type);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3",33, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Number3 ::= DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.FLOAT_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL,val,null,null);
		                    RESULT=new SynthesizedOpAsst(quadruple,type);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3",33, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Number3 ::= NUMBER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		 Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.INTEGER_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL,val,null,null);
		                    RESULT=new SynthesizedOpAsst(quadruple,type);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3",33, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Number2 ::= Number3 
            {
              Object RESULT =null;
		int asstleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int asstright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object asst = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=asst;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number2",32, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Number2 ::= Number2 MOD Number3 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.MOD);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number2",32, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Number2 ::= Number2 DIVISION Number3 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.DIVISION);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number2",32, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Number2 ::= Number2 MULTIPLICATION Number3 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.MULTIPLICATION);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number2",32, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NumberValue ::= Number2 
            {
              Object RESULT =null;
		int asstleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int asstright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object asst = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=asst;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumberValue",31, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NumberValue ::= NumberValue MINUS Number2 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.MINUS);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumberValue",31, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NumberValue ::= NumberValue PLUS Number2 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.PLUS);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumberValue",31, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Step ::= 
            {
              Object RESULT =null;
		RESULT="1";
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Step",30, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Step ::= STEP_VB PLUS CaseValue 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=value;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Step",30, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Step ::= STEP_VB MINUS CaseValue 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT="-"+(String)value;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Step",30, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Step ::= STEP_VB CaseValue 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=value;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Step",30, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ForVbHeaderStart ::= FOR ID EQUAL NumberValue 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type=sma.testManager.getTypeFromST(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    if(type!=null){
                                                    if(sma.testManager.getTypeManager().isNumerico(type.getNumber())){
                                                        sma.testManager.creatSonAmbit();
                                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                                        boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        if(bool){sma.translateControlerTAC.creatTempIdQuadAssign(val,id);
                                                            sma.translateControlerTAC.acceptAllIdQuas();
                                                            RESULT=id;
                                                        }
                                                    }else{
                                                        sma.testManager.callNumericError(id,type,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    }}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForVbHeaderStart",29, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ForVbHeaderStart ::= FOR ID AS_VB Type EQUAL NumberValue 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                if(bool){sma.translateControlerTAC.creatTempIdQuadAssign(val,id);
                                                        sma.translateControlerTAC.acceptAllIdQuas();
                                                        RESULT=id;}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForVbHeaderStart",29, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ForVbHeader ::= ForVbHeaderStart TO_VB NumberValue Step 
            {
              Object RESULT =null;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForVbHeader",28, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ForVb ::= ForVbHeader InstructionsFunctionVb NEXT_VB 
            {
              Object RESULT =null;
		
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForVb",27, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CycleVb ::= DoWhileVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleVb",26, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CycleVb ::= WhileVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleVb",26, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CycleVb ::= ForVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleVb",26, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ValueVb ::= NumberValue 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT = val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValueVb",25, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ValueVb ::= STRING 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValueVb",25, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ValuesVb ::= ValueVb 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=val;
                                if(val!=null){System.out.println(((SynthesizedOpAsst)val).toString());}else{}System.out.println("NULL");
                                
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValuesVb",24, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ValuesVb ::= ValueVb AMPERSON ValuesVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValuesVb",24, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OutputVb ::= CONSOLE_VB POINT WRITELN_VB PARENTHESIS_A ValuesVb PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputVb",23, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OutputVb ::= CONSOLE_VB POINT WRITE_VB PARENTHESIS_A ValuesVb PARENTHESIS_B 
            {
              Object RESULT =null;
		System.out.println("OUTPUT LINE");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputVb",23, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // InputVb ::= CHARINPUT PARENTHESIS_A STRING PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InputVb",22, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // InputVb ::= FLOATINPUT PARENTHESIS_A STRING PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InputVb",22, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // InputVb ::= INTINPUT PARENTHESIS_A STRING PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InputVb",22, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LnInstructionsVb ::= error 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",20, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LnInstructionsVb ::= ConditionVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",20, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LnInstructionsVb ::= AssignmentVb 
            {
              Object RESULT =null;
		System.out.println("ASIGNACION");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",20, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LnInstructionsVb ::= DeclarationVb 
            {
              Object RESULT =null;
		System.out.println("DECLARACION");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",20, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LnInstructionsVb ::= CycleVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",20, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LnInstructionsVb ::= OutputVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",20, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LnInstructionsVb ::= InputVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",20, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Lines ::= LnInstructionsVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Lines",21, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Lines ::= Lines LnInstructionsVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Lines",21, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // InstructionsFunctionVb2 ::= RETURN_VB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb2",19, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // InstructionsFunctionVb2 ::= RETURN_VB ValuesVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb2",19, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // InstructionsFunctionVb2 ::= LnInstructionsVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb2",19, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // InstructionsFunctionVb2 ::= Lines RETURN_VB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb2",19, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // InstructionsFunctionVb2 ::= Lines RETURN_VB ValuesVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb2",19, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // InstructionsFunctionVb2 ::= Lines LnInstructionsVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb2",19, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // InstructionsFunctionVb ::= InstructionsFunctionVb2 
            {
              Object RESULT =null;
		 RESULT=sma.translateControlerTAC.getcurrentQuads();
                                                    sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb",18, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Parameter ::= ID AS_VB Type 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.getParameterControl().insertParameter((Integer)type,id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Parameter",17, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Parameter ::= Parameter COMMA ID AS_VB Type 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.getParameterControl().insertParameter((Integer)type,id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Parameter",17, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Parameters ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Parameters",16, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Parameters ::= Parameter 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Parameters",16, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Public ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Public",11, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Public ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Public",11, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SubVbHeader ::= Public SUB_VB ID PARENTHESIS_A Parameters PARENTHESIS_B 
            {
              Object RESULT =null;
		sma.testManager.creatFatherAmbit();
                                                                                            sma.translateControlerTAC.createNewQuadrupleBlock();
                                                                                            sma.testManager.insertParameters();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("SubVbHeader",15, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SubVb ::= SubVbHeader InstructionsFunctionVb END_VB SUB_VB 
            {
              Object RESULT =null;
		sma.testManager.finishAmbit();
                                                                            sma.translateControlerTAC.acceptCurrentBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("SubVb",14, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FunctionVbHeader ::= Public FUNCTION_VB ID PARENTHESIS_A Parameters PARENTHESIS_B AS_VB Type 
            {
              Object RESULT =null;
		sma.testManager.creatFatherAmbit();
                                                                                            sma.translateControlerTAC.createNewQuadrupleBlock();
                                                                                            sma.testManager.insertParameters();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionVbHeader",13, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-7)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FunctionVB ::= FunctionVbHeader InstructionsFunctionVb END_VB FUNCTION_VB 
            {
              Object RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		sma.translateControlerTAC.convertQuads((ArrayList<Object>)ins);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionVB",12, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VbCode ::= error VbCode 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("VbCode",4, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VbCode ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("VbCode",4, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VbCode ::= SubVb VbCode 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("VbCode",4, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VbCode ::= FunctionVB VbCode 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("VbCode",4, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VbSeperator ::= VB_SEPERATOR 
            {
              Object RESULT =null;
		sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("VbSeperator",8, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // VB ::= VbSeperator VbCode 
            {
              Object RESULT =null;
		sma.testManager.switchNextTypes();
                                    sma.translateControlerTAC.acceptCurrentBlock();
                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("VB",1, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicio ::= VB Java Python Programa 
            {
              Object RESULT =null;
		System.out.println("FIN Inicio");
                                        sma.translateControlerTAC.printQuads();
                                        
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT = start_val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SyntaxMlgAnalyzer$parser.done_parsing();
          return CUP$SyntaxMlgAnalyzer$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

