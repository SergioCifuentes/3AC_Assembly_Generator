
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Oct 28 23:05:06 CST 2020
//----------------------------------------------------

package tac_assembly_generator.languages.analyzers.syntax;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import javax.swing.JTextPane;
import tac_assembly_generator.languages.semantic.verification.TestManager;
import tac_assembly_generator.TAC.TranslateControlerTAC;
import tac_assembly_generator.TAC.quadruple.Operation;
import tac_assembly_generator.TAC.quadruple.Quadruple;
import tac_assembly_generator.TAC.quadruple.BoolQuad;
import tac_assembly_generator.languages.semantic.type.*;
import tac_assembly_generator.TAC.asst.Switch;
import tac_assembly_generator.languages.semantic.UniquenessTable;
import tac_assembly_generator.TAC.asst.For;
import tac_assembly_generator.languages.ResultQuads;
import tac_assembly_generator.languages.semantic.SemanticAsstIdQuad;
import tac_assembly_generator.ui.backend.OutputErrors;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Oct 28 23:05:06 CST 2020
  */
public class SyntaxMlgAnalyzer extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SyntaxMlgAnalyzer() {super();}

  /** Constructor which sets the default scanner. */
  public SyntaxMlgAnalyzer(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SyntaxMlgAnalyzer(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u017c\000\002\002\004\000\002\002\006\000\002\003" +
    "\004\000\002\012\003\000\002\006\004\000\002\006\002" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\021\006\000\002\022\012\000\002\025\006\000\002" +
    "\026\010\000\002\016\003\000\002\016\002\000\002\027" +
    "\003\000\002\027\002\000\002\030\010\000\002\030\006" +
    "\000\002\031\003\000\002\023\003\000\002\023\002\000" +
    "\002\032\004\000\002\032\005\000\002\032\004\000\002" +
    "\032\003\000\002\032\004\000\002\032\003\000\002\034" +
    "\004\000\002\034\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\263\006\000\002" +
    "\263\006\000\002\263\006\000\002\035\010\000\002\035" +
    "\010\000\002\036\005\000\002\036\003\000\002\037\003" +
    "\000\002\037\003\000\002\041\003\000\002\041\003\000" +
    "\002\041\003\000\002\042\005\000\002\043\006\000\002" +
    "\044\010\000\002\044\006\000\002\045\003\000\002\046" +
    "\004\000\002\046\005\000\002\046\005\000\002\046\002" +
    "\000\002\047\005\000\002\047\005\000\002\047\003\000" +
    "\002\050\005\000\002\050\005\000\002\050\005\000\002" +
    "\050\003\000\002\051\003\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\005\000\002\052\006" +
    "\000\002\053\004\000\002\054\005\000\002\054\003\000" +
    "\002\055\005\000\002\055\003\000\002\056\004\000\002" +
    "\056\003\000\002\057\003\000\002\057\003\000\002\057" +
    "\005\000\002\057\005\000\002\060\003\000\002\060\003" +
    "\000\002\060\003\000\002\060\003\000\002\060\003\000" +
    "\002\060\003\000\002\061\007\000\002\062\003\000\002" +
    "\063\010\000\002\063\007\000\002\063\010\000\002\064" +
    "\006\000\002\064\005\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\065\006\000\002\065\004\000" +
    "\002\066\004\000\002\066\002\000\002\067\005\000\002" +
    "\067\005\000\002\070\003\000\002\070\003\000\002\071" +
    "\007\000\002\072\005\000\002\073\004\000\002\073\005" +
    "\000\002\073\002\000\002\074\003\000\002\075\005\000" +
    "\002\076\003\000\002\076\002\000\002\077\006\000\002" +
    "\100\005\000\002\101\005\000\002\101\004\000\002\102" +
    "\004\000\002\102\004\000\002\103\003\000\002\103\003" +
    "\000\002\103\003\000\002\103\003\000\002\004\004\000" +
    "\002\017\003\000\002\007\004\000\002\007\002\000\002" +
    "\104\006\000\002\105\005\000\002\111\003\000\002\130" +
    "\004\000\002\130\002\000\002\112\003\000\002\112\003" +
    "\000\002\112\003\000\002\112\003\000\002\112\003\000" +
    "\002\155\006\000\002\106\007\000\002\113\006\000\002" +
    "\114\010\000\002\115\006\000\002\116\010\000\002\107" +
    "\003\000\002\107\002\000\002\110\006\000\002\110\004" +
    "\000\002\117\003\000\002\117\002\000\002\121\005\000" +
    "\002\121\003\000\002\120\004\000\002\120\003\000\002" +
    "\123\005\000\002\123\003\000\002\124\003\000\002\124" +
    "\003\000\002\124\003\000\002\124\003\000\002\124\003" +
    "\000\002\125\004\000\002\125\004\000\002\125\003\000" +
    "\002\125\004\000\002\125\004\000\002\125\003\000\002" +
    "\125\003\000\002\126\006\000\002\126\006\000\002\131" +
    "\006\000\002\131\006\000\002\131\010\000\002\132\007" +
    "\000\002\134\005\000\002\133\011\000\002\133\010\000" +
    "\002\135\006\000\002\136\005\000\002\136\007\000\002" +
    "\137\005\000\002\137\005\000\002\140\007\000\002\140" +
    "\006\000\002\141\006\000\002\142\006\000\002\142\007" +
    "\000\002\142\002\000\002\144\003\000\002\143\007\000" +
    "\002\145\006\000\002\146\004\000\002\146\007\000\002" +
    "\146\003\000\002\150\004\000\002\150\003\000\002\151" +
    "\006\000\002\147\004\000\002\152\004\000\002\005\004" +
    "\000\002\013\003\000\002\010\004\000\002\010\002\000" +
    "\002\156\006\000\002\156\003\000\002\160\010\000\002" +
    "\161\003\000\002\161\002\000\002\162\005\000\002\162" +
    "\003\000\002\163\003\000\002\157\003\000\002\157\005" +
    "\000\002\164\004\000\002\164\002\000\002\165\003\000" +
    "\002\165\003\000\002\165\003\000\002\165\003\000\002" +
    "\165\003\000\002\165\003\000\002\166\006\000\002\167" +
    "\005\000\002\167\003\000\002\170\003\000\002\170\003" +
    "\000\002\171\007\000\002\173\010\000\002\173\006\000" +
    "\002\174\010\000\002\172\003\000\002\175\006\000\002" +
    "\176\005\000\002\177\005\000\002\177\005\000\002\200" +
    "\003\000\002\201\007\000\002\202\005\000\002\203\007" +
    "\000\002\203\006\000\002\203\002\000\002\205\004\000" +
    "\002\204\005\000\002\011\007\000\002\020\003\000\002" +
    "\206\004\000\002\206\002\000\002\213\005\000\002\213" +
    "\004\000\002\214\007\000\002\276\005\000\002\276\005" +
    "\000\002\276\003\000\002\277\005\000\002\277\005\000" +
    "\002\277\005\000\002\277\003\000\002\300\003\000\002" +
    "\300\003\000\002\300\003\000\002\300\005\000\002\247" +
    "\005\000\002\247\005\000\002\247\003\000\002\250\005" +
    "\000\002\250\005\000\002\250\005\000\002\250\003\000" +
    "\002\251\003\000\002\251\003\000\002\251\003\000\002" +
    "\251\003\000\002\251\005\000\002\251\004\000\002\251" +
    "\003\000\002\215\006\000\002\215\005\000\002\221\005" +
    "\000\002\221\004\000\002\301\006\000\002\301\005\000" +
    "\002\302\005\000\002\302\005\000\002\302\003\000\002" +
    "\303\005\000\002\303\005\000\002\303\005\000\002\303" +
    "\003\000\002\304\003\000\002\304\003\000\002\304\003" +
    "\000\002\304\005\000\002\222\004\000\002\222\006\000" +
    "\002\265\005\000\002\265\003\000\002\265\005\000\002" +
    "\207\006\000\002\207\003\000\002\210\006\000\002\223" +
    "\003\000\002\211\004\000\002\211\003\000\002\224\004" +
    "\000\002\224\004\000\002\224\003\000\002\224\003\000" +
    "\002\224\004\000\002\224\004\000\002\224\004\000\002" +
    "\224\004\000\002\224\003\000\002\127\011\000\002\225" +
    "\006\000\002\225\005\000\002\225\006\000\002\225\005" +
    "\000\002\227\006\000\002\227\005\000\002\230\004\000" +
    "\002\230\002\000\002\231\005\000\002\231\006\000\002" +
    "\231\005\000\002\232\007\000\002\232\006\000\002\233" +
    "\006\000\002\234\006\000\002\234\007\000\002\234\002" +
    "\000\002\235\003\000\002\236\007\000\002\237\006\000" +
    "\002\242\004\000\002\242\010\000\002\242\003\000\002" +
    "\243\004\000\002\243\003\000\002\252\007\000\002\241" +
    "\004\000\002\240\003\000\002\244\003\000\002\244\003" +
    "\000\002\244\003\000\002\244\003\000\002\244\003\000" +
    "\002\253\006\000\002\253\006\000\002\253\013\000\002" +
    "\254\007\000\002\246\011\000\002\246\010\000\002\255" +
    "\006\000\002\245\005\000\002\257\006\000\002\257\005" +
    "\000\002\260\005\000\002\260\003\000\002\261\003\000" +
    "\002\261\003\000\002\262\005\000\002\263\011\000\002" +
    "\264\006\000\002\264\005\000\002\271\005\000\002\271" +
    "\003\000\002\266\005\000\002\266\003\000\002\275\004" +
    "\000\002\272\005\000\002\272\003\000\002\273\005\000" +
    "\002\273\003\000\002\274\004\000\002\274\003\000\002" +
    "\270\003\000\002\270\003\000\002\270\005\000\002\270" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0320\000\004\004\004\001\002\000\014\003\ufffe\032" +
    "\ufffe\060\ufffe\063\ufffe\065\ufffe\001\002\000\004\060\360" +
    "\001\002\000\014\003\ufffc\032\ufffc\060\ufffc\063\ufffc\065" +
    "\ufffc\001\002\000\004\002\010\001\002\000\004\002\001" +
    "\001\002\000\014\003\012\032\021\060\uffff\063\ufff3\065" +
    "\ufff3\001\002\000\014\003\ufff9\032\ufff9\060\ufff9\063\ufff9" +
    "\065\ufff9\001\002\000\014\003\ufffa\032\ufffa\060\ufffa\063" +
    "\ufffa\065\ufffa\001\002\000\014\003\ufffd\032\ufffd\060\ufffd" +
    "\063\ufffd\065\ufffd\001\002\000\036\003\102\027\072\030" +
    "\113\031\110\033\065\034\111\035\117\040\076\043\101" +
    "\054\077\061\115\066\074\101\116\134\073\001\002\000" +
    "\014\003\ufffb\032\ufffb\060\ufffb\063\ufffb\065\ufffb\001\002" +
    "\000\036\003\102\027\072\030\113\031\110\033\065\034" +
    "\111\035\117\040\076\043\101\054\077\061\115\066\074" +
    "\101\116\134\073\001\002\000\006\063\023\065\022\001" +
    "\002\000\022\021\ufff4\022\ufff4\023\ufff4\054\ufff4\063\ufff4" +
    "\065\ufff4\104\ufff4\105\ufff4\001\002\000\004\054\050\001" +
    "\002\000\004\054\024\001\002\000\004\007\025\001\002" +
    "\000\010\010\ufff1\054\uffec\074\027\001\002\000\004\010" +
    "\045\001\002\000\004\054\uffed\001\002\000\004\054\042" +
    "\001\002\000\006\010\ufff2\020\032\001\002\000\006\054" +
    "\uffec\074\027\001\002\000\004\054\034\001\002\000\004" +
    "\062\035\001\002\000\010\021\040\022\041\023\037\001" +
    "\002\000\006\010\ufff0\020\ufff0\001\002\000\060\003\uffa0" +
    "\006\uffa0\010\uffa0\020\uffa0\027\uffa0\030\uffa0\031\uffa0\033" +
    "\uffa0\034\uffa0\035\uffa0\040\uffa0\041\uffa0\043\uffa0\054\uffa0" +
    "\061\uffa0\064\uffa0\066\uffa0\073\uffa0\076\uffa0\077\uffa0\101" +
    "\uffa0\102\uffa0\134\uffa0\001\002\000\060\003\uffa2\006\uffa2" +
    "\010\uffa2\020\uffa2\027\uffa2\030\uffa2\031\uffa2\033\uffa2\034" +
    "\uffa2\035\uffa2\040\uffa2\041\uffa2\043\uffa2\054\uffa2\061\uffa2" +
    "\064\uffa2\066\uffa2\073\uffa2\076\uffa2\077\uffa2\101\uffa2\102" +
    "\uffa2\134\uffa2\001\002\000\060\003\uffa1\006\uffa1\010\uffa1" +
    "\020\uffa1\027\uffa1\030\uffa1\031\uffa1\033\uffa1\034\uffa1\035" +
    "\uffa1\040\uffa1\041\uffa1\043\uffa1\054\uffa1\061\uffa1\064\uffa1" +
    "\066\uffa1\073\uffa1\076\uffa1\077\uffa1\101\uffa1\102\uffa1\134" +
    "\uffa1\001\002\000\004\062\043\001\002\000\010\021\040" +
    "\022\041\023\037\001\002\000\006\010\uffef\020\uffef\001" +
    "\002\000\004\062\046\001\002\000\010\021\040\022\041" +
    "\023\037\001\002\000\036\003\ufff7\027\ufff7\030\ufff7\031" +
    "\ufff7\033\ufff7\034\ufff7\035\ufff7\040\ufff7\043\ufff7\054\ufff7" +
    "\061\ufff7\066\ufff7\101\ufff7\134\ufff7\001\002\000\004\007" +
    "\051\001\002\000\010\010\ufff1\054\uffec\074\027\001\002" +
    "\000\004\010\053\001\002\000\036\003\ufff5\027\ufff5\030" +
    "\ufff5\031\ufff5\033\ufff5\034\ufff5\035\ufff5\040\ufff5\043\ufff5" +
    "\054\ufff5\061\ufff5\066\ufff5\101\ufff5\134\ufff5\001\002\000" +
    "\052\003\uff99\027\uff99\030\uff99\031\uff99\033\uff99\034\uff99" +
    "\035\uff99\040\uff99\041\uff99\043\uff99\054\uff99\061\uff99\064" +
    "\uff99\066\uff99\073\uff99\076\uff99\077\uff99\101\uff99\102\uff99" +
    "\134\uff99\001\002\000\052\003\uffe1\027\uffe1\030\uffe1\031" +
    "\uffe1\033\uffe1\034\uffe1\035\uffe1\040\uffe1\041\uffe1\043\uffe1" +
    "\054\uffe1\061\uffe1\064\uffe1\066\uffe1\073\uffe1\076\uffe1\077" +
    "\uffe1\101\uffe1\102\uffe1\134\uffe1\001\002\000\052\003\uffe0" +
    "\027\uffe0\030\uffe0\031\uffe0\033\uffe0\034\uffe0\035\uffe0\040" +
    "\uffe0\041\uffe0\043\uffe0\054\uffe0\061\uffe0\064\uffe0\066\uffe0" +
    "\073\uffe0\076\uffe0\077\uffe0\101\uffe0\102\uffe0\134\uffe0\001" +
    "\002\000\052\003\uffd3\027\uffd3\030\uffd3\031\uffd3\033\uffd3" +
    "\034\uffd3\035\uffd3\040\uffd3\041\uffd3\043\uffd3\054\uffd3\061" +
    "\uffd3\064\uffd3\066\uffd3\073\uffd3\076\uffd3\077\uffd3\101\uffd3" +
    "\102\uffd3\134\uffd3\001\002\000\052\003\uffde\027\uffde\030" +
    "\uffde\031\uffde\033\uffde\034\uffde\035\uffde\040\uffde\041\uffde" +
    "\043\uffde\054\uffde\061\uffde\064\uffde\066\uffde\073\uffde\076" +
    "\uffde\077\uffde\101\uffde\102\uffde\134\uffde\001\002\000\016" +
    "\041\uffee\064\uffee\073\uffee\076\uffee\077\uffee\102\uffee\001" +
    "\002\000\036\003\102\027\072\030\113\031\110\033\065" +
    "\034\111\035\117\040\076\043\101\054\077\061\115\066" +
    "\074\101\116\134\073\001\002\000\036\003\102\027\072" +
    "\030\113\031\110\033\065\034\111\035\117\040\076\043" +
    "\101\054\077\061\115\066\074\101\116\134\073\001\002" +
    "\000\052\003\uffe2\027\uffe2\030\uffe2\031\uffe2\033\uffe2\034" +
    "\uffe2\035\uffe2\040\uffe2\041\uffe2\043\uffe2\054\uffe2\061\uffe2" +
    "\064\uffe2\066\uffe2\073\uffe2\076\uffe2\077\uffe2\101\uffe2\102" +
    "\uffe2\134\uffe2\001\002\000\006\007\uffcc\054\uffcc\001\002" +
    "\000\004\071\322\001\002\000\052\003\uffd1\027\uffd1\030" +
    "\uffd1\031\uffd1\033\uffd1\034\uffd1\035\uffd1\040\uffd1\041\uffd1" +
    "\043\uffd1\054\uffd1\061\uffd1\064\uffd1\066\uffd1\073\uffd1\076" +
    "\uffd1\077\uffd1\101\uffd1\102\uffd1\134\uffd1\001\002\000\052" +
    "\003\uffe4\027\uffe4\030\uffe4\031\uffe4\033\uffe4\034\uffe4\035" +
    "\uffe4\040\uffe4\041\uffe8\043\uffe4\054\uffe4\061\uffe4\064\uffe8" +
    "\066\uffe4\073\uffe8\076\uffe8\077\uffe8\101\uffe4\102\uffe8\134" +
    "\uffe4\001\002\000\036\003\102\027\072\030\113\031\110" +
    "\033\065\034\111\035\117\040\076\043\317\054\077\061" +
    "\115\066\074\101\116\134\073\001\002\000\004\007\314" +
    "\001\002\000\004\007\306\001\002\000\004\016\270\001" +
    "\002\000\052\003\uffdf\027\uffdf\030\uffdf\031\uffdf\033\uffdf" +
    "\034\uffdf\035\uffdf\040\uffdf\041\uffdf\043\uffdf\054\uffdf\061" +
    "\uffdf\064\uffdf\066\uffdf\073\uffdf\076\uffdf\077\uffdf\101\uffdf" +
    "\102\uffdf\134\uffdf\001\002\000\022\007\200\026\202\036" +
    "\176\037\177\054\133\055\141\056\136\057\142\001\002" +
    "\000\004\006\262\001\002\000\004\054\253\001\002\000" +
    "\030\007\135\041\uffe6\054\133\055\141\056\136\057\142" +
    "\064\uffe6\073\uffe6\076\uffe6\077\uffe6\102\uffe6\001\002\000" +
    "\052\003\uffdd\027\uffdd\030\uffdd\031\uffdd\033\uffdd\034\uffdd" +
    "\035\uffdd\040\uffdd\041\uffdd\043\uffdd\054\uffdd\061\uffdd\064" +
    "\uffdd\066\uffdd\073\uffdd\076\uffdd\077\uffdd\101\uffdd\102\uffdd" +
    "\134\uffdd\001\002\000\004\102\236\001\002\000\004\064" +
    "\232\001\002\000\052\003\uffd2\027\uffd2\030\uffd2\031\uffd2" +
    "\033\uffd2\034\uffd2\035\uffd2\040\uffd2\041\uffd2\043\uffd2\054" +
    "\uffd2\061\uffd2\064\uffd2\066\uffd2\073\uffd2\076\uffd2\077\uffd2" +
    "\101\uffd2\102\uffd2\134\uffd2\001\002\000\052\003\uff98\027" +
    "\uff98\030\uff98\031\uff98\033\uff98\034\uff98\035\uff98\040\uff98" +
    "\041\uff98\043\uff98\054\uff98\061\uff98\064\uff98\066\uff98\073" +
    "\uff98\076\uff98\077\uff98\101\uff98\102\uff98\134\uff98\001\002" +
    "\000\036\003\102\027\072\030\113\031\110\033\065\034" +
    "\111\035\117\040\076\043\101\054\077\061\115\066\074" +
    "\101\116\134\073\001\002\000\004\007\225\001\002\000" +
    "\022\007\200\026\202\036\176\037\177\054\133\055\141" +
    "\056\136\057\142\001\002\000\052\003\uffe3\027\uffe3\030" +
    "\uffe3\031\uffe3\033\uffe3\034\uffe3\035\uffe3\040\uffe3\041\uffe3" +
    "\043\uffe3\054\uffe3\061\uffe3\064\uffe3\066\uffe3\073\uffe3\076" +
    "\uffe3\077\uffe3\101\uffe3\102\uffe3\134\uffe3\001\002\000\004" +
    "\007\171\001\002\000\036\003\102\027\072\030\113\031" +
    "\110\033\065\034\111\035\117\040\076\043\101\054\077" +
    "\061\115\066\074\101\116\134\073\001\002\000\004\054" +
    "\122\001\002\000\004\102\120\001\002\000\040\003\uffa8" +
    "\027\uffa8\030\uffa8\031\uffa8\033\uffa8\034\uffa8\035\uffa8\040" +
    "\uffa8\043\uffa8\054\uffa8\061\uffa8\066\uffa8\101\uffa8\113\uffa8" +
    "\134\uffa8\001\002\000\004\054\121\001\002\000\004\102" +
    "\uff8d\001\002\000\010\006\125\020\uff9c\062\157\001\002" +
    "\000\004\054\124\001\002\000\010\006\125\020\uff9c\062" +
    "\126\001\002\000\014\007\135\054\133\055\141\056\136" +
    "\057\142\001\002\000\010\021\040\022\041\023\037\001" +
    "\002\000\004\020\130\001\002\000\004\054\uffa4\001\002" +
    "\000\054\003\uff9c\006\125\027\uff9c\030\uff9c\031\uff9c\033" +
    "\uff9c\034\uff9c\035\uff9c\040\uff9c\041\uff9c\043\uff9c\054\uff9c" +
    "\061\uff9c\064\uff9c\066\uff9c\073\uff9c\076\uff9c\077\uff9c\101" +
    "\uff9c\102\uff9c\134\uff9c\001\002\000\052\003\uffa7\027\uffa7" +
    "\030\uffa7\031\uffa7\033\uffa7\034\uffa7\035\uffa7\040\uffa7\041" +
    "\uffa7\043\uffa7\054\uffa7\061\uffa7\064\uffa7\066\uffa7\073\uffa7" +
    "\076\uffa7\077\uffa7\101\uffa7\102\uffa7\134\uffa7\001\002\000" +
    "\146\003\uffbd\006\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd" +
    "\014\uffbd\015\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023" +
    "\uffbd\024\uffbd\025\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd" +
    "\033\uffbd\034\uffbd\035\uffbd\040\uffbd\041\uffbd\042\uffbd\043" +
    "\uffbd\044\uffbd\050\uffbd\051\uffbd\052\uffbd\054\uffbd\061\uffbd" +
    "\064\uffbd\066\uffbd\071\uffbd\072\uffbd\073\uffbd\075\uffbd\076" +
    "\uffbd\077\uffbd\100\uffbd\101\uffbd\102\uffbd\105\uffbd\111\uffbd" +
    "\112\uffbd\114\uffbd\115\uffbd\117\uffbd\134\uffbd\001\002\000" +
    "\076\003\uff9d\011\153\012\154\020\uff9d\021\uff9d\022\uff9d" +
    "\023\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d\034" +
    "\uff9d\035\uff9d\040\uff9d\041\uff9d\043\uff9d\054\uff9d\061\uff9d" +
    "\064\uff9d\066\uff9d\073\uff9d\076\uff9d\077\uff9d\101\uff9d\102" +
    "\uff9d\105\uff9d\112\uff9d\114\uff9d\134\uff9d\001\002\000\014" +
    "\007\135\054\133\055\141\056\136\057\142\001\002\000" +
    "\146\003\uffc0\006\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0" +
    "\014\uffc0\015\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023" +
    "\uffc0\024\uffc0\025\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0" +
    "\033\uffc0\034\uffc0\035\uffc0\040\uffc0\041\uffc0\042\uffc0\043" +
    "\uffc0\044\uffc0\050\uffc0\051\uffc0\052\uffc0\054\uffc0\061\uffc0" +
    "\064\uffc0\066\uffc0\071\uffc0\072\uffc0\073\uffc0\075\uffc0\076" +
    "\uffc0\077\uffc0\100\uffc0\101\uffc0\102\uffc0\105\uffc0\111\uffc0" +
    "\112\uffc0\114\uffc0\115\uffc0\117\uffc0\134\uffc0\001\002\000" +
    "\136\003\uffc1\006\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1" +
    "\014\uffc1\015\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023" +
    "\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1" +
    "\035\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\050" +
    "\uffc1\051\uffc1\052\uffc1\054\uffc1\061\uffc1\064\uffc1\066\uffc1" +
    "\071\uffc1\072\uffc1\073\uffc1\075\uffc1\076\uffc1\077\uffc1\101" +
    "\uffc1\102\uffc1\105\uffc1\111\uffc1\112\uffc1\114\uffc1\117\uffc1" +
    "\134\uffc1\001\002\000\136\003\uffc5\006\uffc5\010\uffc5\011" +
    "\uffc5\012\uffc5\013\144\014\145\015\143\017\uffc5\020\uffc5" +
    "\021\uffc5\022\uffc5\023\uffc5\027\uffc5\030\uffc5\031\uffc5\032" +
    "\uffc5\033\uffc5\034\uffc5\035\uffc5\040\uffc5\041\uffc5\042\uffc5" +
    "\043\uffc5\044\uffc5\050\uffc5\051\uffc5\052\uffc5\054\uffc5\061" +
    "\uffc5\064\uffc5\066\uffc5\071\uffc5\072\uffc5\073\uffc5\075\uffc5" +
    "\076\uffc5\077\uffc5\101\uffc5\102\uffc5\105\uffc5\111\uffc5\112" +
    "\uffc5\114\uffc5\117\uffc5\134\uffc5\001\002\000\146\003\uffbe" +
    "\006\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015" +
    "\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe" +
    "\025\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034" +
    "\uffbe\035\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe" +
    "\050\uffbe\051\uffbe\052\uffbe\054\uffbe\061\uffbe\064\uffbe\066" +
    "\uffbe\071\uffbe\072\uffbe\073\uffbe\075\uffbe\076\uffbe\077\uffbe" +
    "\100\uffbe\101\uffbe\102\uffbe\105\uffbe\111\uffbe\112\uffbe\114" +
    "\uffbe\115\uffbe\117\uffbe\134\uffbe\001\002\000\146\003\uffbf" +
    "\006\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015" +
    "\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf" +
    "\025\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034" +
    "\uffbf\035\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf" +
    "\050\uffbf\051\uffbf\052\uffbf\054\uffbf\061\uffbf\064\uffbf\066" +
    "\uffbf\071\uffbf\072\uffbf\073\uffbf\075\uffbf\076\uffbf\077\uffbf" +
    "\100\uffbf\101\uffbf\102\uffbf\105\uffbf\111\uffbf\112\uffbf\114" +
    "\uffbf\115\uffbf\117\uffbf\134\uffbf\001\002\000\014\007\135" +
    "\054\133\055\141\056\136\057\142\001\002\000\014\007" +
    "\135\054\133\055\141\056\136\057\142\001\002\000\014" +
    "\007\135\054\133\055\141\056\136\057\142\001\002\000" +
    "\136\003\uffc3\006\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3" +
    "\014\uffc3\015\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023" +
    "\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3" +
    "\035\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\050" +
    "\uffc3\051\uffc3\052\uffc3\054\uffc3\061\uffc3\064\uffc3\066\uffc3" +
    "\071\uffc3\072\uffc3\073\uffc3\075\uffc3\076\uffc3\077\uffc3\101" +
    "\uffc3\102\uffc3\105\uffc3\111\uffc3\112\uffc3\114\uffc3\117\uffc3" +
    "\134\uffc3\001\002\000\136\003\uffc4\006\uffc4\010\uffc4\011" +
    "\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\017\uffc4\020\uffc4" +
    "\021\uffc4\022\uffc4\023\uffc4\027\uffc4\030\uffc4\031\uffc4\032" +
    "\uffc4\033\uffc4\034\uffc4\035\uffc4\040\uffc4\041\uffc4\042\uffc4" +
    "\043\uffc4\044\uffc4\050\uffc4\051\uffc4\052\uffc4\054\uffc4\061" +
    "\uffc4\064\uffc4\066\uffc4\071\uffc4\072\uffc4\073\uffc4\075\uffc4" +
    "\076\uffc4\077\uffc4\101\uffc4\102\uffc4\105\uffc4\111\uffc4\112" +
    "\uffc4\114\uffc4\117\uffc4\134\uffc4\001\002\000\136\003\uffc2" +
    "\006\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015" +
    "\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\027\uffc2" +
    "\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\040" +
    "\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\050\uffc2\051\uffc2" +
    "\052\uffc2\054\uffc2\061\uffc2\064\uffc2\066\uffc2\071\uffc2\072" +
    "\uffc2\073\uffc2\075\uffc2\076\uffc2\077\uffc2\101\uffc2\102\uffc2" +
    "\105\uffc2\111\uffc2\112\uffc2\114\uffc2\117\uffc2\134\uffc2\001" +
    "\002\000\010\010\152\011\153\012\154\001\002\000\146" +
    "\003\uffbc\006\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014" +
    "\uffbc\015\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc" +
    "\024\uffbc\025\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033" +
    "\uffbc\034\uffbc\035\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc" +
    "\044\uffbc\050\uffbc\051\uffbc\052\uffbc\054\uffbc\061\uffbc\064" +
    "\uffbc\066\uffbc\071\uffbc\072\uffbc\073\uffbc\075\uffbc\076\uffbc" +
    "\077\uffbc\100\uffbc\101\uffbc\102\uffbc\105\uffbc\111\uffbc\112" +
    "\uffbc\114\uffbc\115\uffbc\117\uffbc\134\uffbc\001\002\000\014" +
    "\007\135\054\133\055\141\056\136\057\142\001\002\000" +
    "\014\007\135\054\133\055\141\056\136\057\142\001\002" +
    "\000\136\003\uffc6\006\uffc6\010\uffc6\011\uffc6\012\uffc6\013" +
    "\144\014\145\015\143\017\uffc6\020\uffc6\021\uffc6\022\uffc6" +
    "\023\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034" +
    "\uffc6\035\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6" +
    "\050\uffc6\051\uffc6\052\uffc6\054\uffc6\061\uffc6\064\uffc6\066" +
    "\uffc6\071\uffc6\072\uffc6\073\uffc6\075\uffc6\076\uffc6\077\uffc6" +
    "\101\uffc6\102\uffc6\105\uffc6\111\uffc6\112\uffc6\114\uffc6\117" +
    "\uffc6\134\uffc6\001\002\000\136\003\uffc7\006\uffc7\010\uffc7" +
    "\011\uffc7\012\uffc7\013\144\014\145\015\143\017\uffc7\020" +
    "\uffc7\021\uffc7\022\uffc7\023\uffc7\027\uffc7\030\uffc7\031\uffc7" +
    "\032\uffc7\033\uffc7\034\uffc7\035\uffc7\040\uffc7\041\uffc7\042" +
    "\uffc7\043\uffc7\044\uffc7\050\uffc7\051\uffc7\052\uffc7\054\uffc7" +
    "\061\uffc7\064\uffc7\066\uffc7\071\uffc7\072\uffc7\073\uffc7\075" +
    "\uffc7\076\uffc7\077\uffc7\101\uffc7\102\uffc7\105\uffc7\111\uffc7" +
    "\112\uffc7\114\uffc7\117\uffc7\134\uffc7\001\002\000\010\021" +
    "\040\022\041\023\037\001\002\000\004\020\161\001\002" +
    "\000\004\054\uffa3\001\002\000\054\003\uff9c\006\163\027" +
    "\uff9c\030\uff9c\031\uff9c\033\uff9c\034\uff9c\035\uff9c\040\uff9c" +
    "\041\uff9c\043\uff9c\054\uff9c\061\uff9c\064\uff9c\066\uff9c\073" +
    "\uff9c\076\uff9c\077\uff9c\101\uff9c\102\uff9c\134\uff9c\001\002" +
    "\000\024\007\135\027\072\030\113\031\110\054\133\055" +
    "\141\056\136\057\142\134\073\001\002\000\052\003\uffa6" +
    "\027\uffa6\030\uffa6\031\uffa6\033\uffa6\034\uffa6\035\uffa6\040" +
    "\uffa6\041\uffa6\043\uffa6\054\uffa6\061\uffa6\064\uffa6\066\uffa6" +
    "\073\uffa6\076\uffa6\077\uffa6\101\uffa6\102\uffa6\134\uffa6\001" +
    "\002\000\052\003\uffa5\027\uffa5\030\uffa5\031\uffa5\033\uffa5" +
    "\034\uffa5\035\uffa5\040\uffa5\041\uffa5\043\uffa5\054\uffa5\061" +
    "\uffa5\064\uffa5\066\uffa5\073\uffa5\076\uffa5\077\uffa5\101\uffa5" +
    "\102\uffa5\134\uffa5\001\002\000\004\064\167\001\002\000" +
    "\004\034\170\001\002\000\052\003\uffbb\027\uffbb\030\uffbb" +
    "\031\uffbb\033\uffbb\034\uffbb\035\uffbb\040\uffbb\041\uffbb\043" +
    "\uffbb\054\uffbb\061\uffbb\064\uffbb\066\uffbb\073\uffbb\076\uffbb" +
    "\077\uffbb\101\uffbb\102\uffbb\134\uffbb\001\002\000\004\053" +
    "\172\001\002\000\004\010\173\001\002\000\074\003\uffda" +
    "\021\uffda\022\uffda\023\uffda\027\uffda\030\uffda\031\uffda\032" +
    "\uffda\033\uffda\034\uffda\035\uffda\040\uffda\041\uffda\043\uffda" +
    "\044\uffda\054\uffda\061\uffda\064\uffda\066\uffda\073\uffda\076" +
    "\uffda\077\uffda\101\uffda\102\uffda\105\uffda\112\uffda\114\uffda" +
    "\117\uffda\134\uffda\001\002\000\066\003\uffb4\010\uffb4\024" +
    "\uffb4\025\uffb4\027\uffb4\030\uffb4\031\uffb4\033\uffb4\034\uffb4" +
    "\035\uffb4\040\uffb4\041\uffb4\043\uffb4\054\uffb4\061\uffb4\064" +
    "\uffb4\066\uffb4\073\uffb4\076\uffb4\077\uffb4\100\uffb4\101\uffb4" +
    "\102\uffb4\112\uffb4\115\uffb4\134\uffb4\001\002\000\040\003" +
    "\uffba\024\223\027\uffba\030\uffba\031\uffba\033\uffba\034\uffba" +
    "\035\uffba\040\uffba\043\uffba\054\uffba\061\uffba\066\uffba\101" +
    "\uffba\134\uffba\001\002\000\066\003\uffb3\010\uffb3\024\uffb3" +
    "\025\uffb3\027\uffb3\030\uffb3\031\uffb3\033\uffb3\034\uffb3\035" +
    "\uffb3\040\uffb3\041\uffb3\043\uffb3\054\uffb3\061\uffb3\064\uffb3" +
    "\066\uffb3\073\uffb3\076\uffb3\077\uffb3\100\uffb3\101\uffb3\102" +
    "\uffb3\112\uffb3\115\uffb3\134\uffb3\001\002\000\066\003\uffb2" +
    "\010\uffb2\024\uffb2\025\uffb2\027\uffb2\030\uffb2\031\uffb2\033" +
    "\uffb2\034\uffb2\035\uffb2\040\uffb2\041\uffb2\043\uffb2\054\uffb2" +
    "\061\uffb2\064\uffb2\066\uffb2\073\uffb2\076\uffb2\077\uffb2\100" +
    "\uffb2\101\uffb2\102\uffb2\112\uffb2\115\uffb2\134\uffb2\001\002" +
    "\000\022\007\200\026\202\036\176\037\177\054\133\055" +
    "\141\056\136\057\142\001\002\000\022\006\211\011\153" +
    "\012\154\042\215\050\212\051\214\052\210\075\216\001" +
    "\002\000\020\007\200\036\176\037\177\054\133\055\141" +
    "\056\136\057\142\001\002\000\066\003\uffb6\010\uffb6\024" +
    "\uffb6\025\uffb6\027\uffb6\030\uffb6\031\uffb6\033\uffb6\034\uffb6" +
    "\035\uffb6\040\uffb6\041\uffb6\043\uffb6\054\uffb6\061\uffb6\064" +
    "\uffb6\066\uffb6\073\uffb6\076\uffb6\077\uffb6\100\uffb6\101\uffb6" +
    "\102\uffb6\112\uffb6\115\uffb6\134\uffb6\001\002\000\066\003" +
    "\uffb8\010\uffb8\024\uffb8\025\205\027\uffb8\030\uffb8\031\uffb8" +
    "\033\uffb8\034\uffb8\035\uffb8\040\uffb8\041\uffb8\043\uffb8\054" +
    "\uffb8\061\uffb8\064\uffb8\066\uffb8\073\uffb8\076\uffb8\077\uffb8" +
    "\100\uffb8\101\uffb8\102\uffb8\112\uffb8\115\uffb8\134\uffb8\001" +
    "\002\000\022\007\200\026\202\036\176\037\177\054\133" +
    "\055\141\056\136\057\142\001\002\000\066\003\uffb7\010" +
    "\uffb7\024\uffb7\025\uffb7\027\uffb7\030\uffb7\031\uffb7\033\uffb7" +
    "\034\uffb7\035\uffb7\040\uffb7\041\uffb7\043\uffb7\054\uffb7\061" +
    "\uffb7\064\uffb7\066\uffb7\073\uffb7\076\uffb7\077\uffb7\100\uffb7" +
    "\101\uffb7\102\uffb7\112\uffb7\115\uffb7\134\uffb7\001\002\000" +
    "\066\003\uffb5\010\uffb5\024\uffb5\025\uffb5\027\uffb5\030\uffb5" +
    "\031\uffb5\033\uffb5\034\uffb5\035\uffb5\040\uffb5\041\uffb5\043" +
    "\uffb5\054\uffb5\061\uffb5\064\uffb5\066\uffb5\073\uffb5\076\uffb5" +
    "\077\uffb5\100\uffb5\101\uffb5\102\uffb5\112\uffb5\115\uffb5\134" +
    "\uffb5\001\002\000\014\007\uffaa\054\uffaa\055\uffaa\056\uffaa" +
    "\057\uffaa\001\002\000\014\007\uffaf\054\uffaf\055\uffaf\056" +
    "\uffaf\057\uffaf\001\002\000\014\007\uffac\054\uffac\055\uffac" +
    "\056\uffac\057\uffac\001\002\000\014\007\135\054\133\055" +
    "\141\056\136\057\142\001\002\000\014\007\uffab\054\uffab" +
    "\055\uffab\056\uffab\057\uffab\001\002\000\014\007\uffad\054" +
    "\uffad\055\uffad\056\uffad\057\uffad\001\002\000\014\007\uffae" +
    "\054\uffae\055\uffae\056\uffae\057\uffae\001\002\000\066\003" +
    "\uffb1\010\uffb1\024\uffb1\025\uffb1\027\uffb1\030\uffb1\031\uffb1" +
    "\033\uffb1\034\uffb1\035\uffb1\040\uffb1\041\uffb1\043\uffb1\054" +
    "\uffb1\061\uffb1\064\uffb1\066\uffb1\073\uffb1\076\uffb1\077\uffb1" +
    "\100\uffb1\101\uffb1\102\uffb1\112\uffb1\115\uffb1\134\uffb1\001" +
    "\002\000\006\010\222\024\223\001\002\000\024\006\211" +
    "\010\152\011\153\012\154\042\215\050\212\051\214\052" +
    "\210\075\216\001\002\000\066\003\uffb0\010\uffb0\024\uffb0" +
    "\025\uffb0\027\uffb0\030\uffb0\031\uffb0\033\uffb0\034\uffb0\035" +
    "\uffb0\040\uffb0\041\uffb0\043\uffb0\054\uffb0\061\uffb0\064\uffb0" +
    "\066\uffb0\073\uffb0\076\uffb0\077\uffb0\100\uffb0\101\uffb0\102" +
    "\uffb0\112\uffb0\115\uffb0\134\uffb0\001\002\000\022\007\200" +
    "\026\202\036\176\037\177\054\133\055\141\056\136\057" +
    "\142\001\002\000\066\003\uffb9\010\uffb9\024\uffb9\025\205" +
    "\027\uffb9\030\uffb9\031\uffb9\033\uffb9\034\uffb9\035\uffb9\040" +
    "\uffb9\041\uffb9\043\uffb9\054\uffb9\061\uffb9\064\uffb9\066\uffb9" +
    "\073\uffb9\076\uffb9\077\uffb9\100\uffb9\101\uffb9\102\uffb9\112" +
    "\uffb9\115\uffb9\134\uffb9\001\002\000\004\053\226\001\002" +
    "\000\004\010\227\001\002\000\074\003\uffdb\021\uffdb\022" +
    "\uffdb\023\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb" +
    "\034\uffdb\035\uffdb\040\uffdb\041\uffdb\043\uffdb\044\uffdb\054" +
    "\uffdb\061\uffdb\064\uffdb\066\uffdb\073\uffdb\076\uffdb\077\uffdb" +
    "\101\uffdb\102\uffdb\105\uffdb\112\uffdb\114\uffdb\117\uffdb\134" +
    "\uffdb\001\002\000\004\073\231\001\002\000\052\003\uffd0" +
    "\027\uffd0\030\uffd0\031\uffd0\033\uffd0\034\uffd0\035\uffd0\040" +
    "\uffd0\041\uffd0\043\uffd0\054\uffd0\061\uffd0\064\uffd0\066\uffd0" +
    "\073\uffd0\076\uffd0\077\uffd0\101\uffd0\102\uffd0\134\uffd0\001" +
    "\002\000\004\063\233\001\002\000\014\003\ufff8\032\ufff8" +
    "\060\ufff8\063\ufff8\065\ufff8\001\002\000\036\003\102\027" +
    "\072\030\113\031\110\033\065\034\111\035\117\040\076" +
    "\043\101\054\077\061\115\066\074\101\116\134\073\001" +
    "\002\000\006\064\246\102\236\001\002\000\014\041\241" +
    "\054\237\055\244\056\242\057\243\001\002\000\040\003" +
    "\uff85\010\uff85\027\uff85\030\uff85\031\uff85\033\uff85\034\uff85" +
    "\035\uff85\040\uff85\043\uff85\054\uff85\061\uff85\066\uff85\101" +
    "\uff85\134\uff85\001\002\000\036\003\uff8a\027\uff8a\030\uff8a" +
    "\031\uff8a\033\uff8a\034\uff8a\035\uff8a\040\uff8a\043\uff8a\054" +
    "\uff8a\061\uff8a\066\uff8a\101\uff8a\134\uff8a\001\002\000\036" +
    "\003\uff89\027\uff89\030\uff89\031\uff89\033\uff89\034\uff89\035" +
    "\uff89\040\uff89\043\uff89\054\uff89\061\uff89\066\uff89\101\uff89" +
    "\134\uff89\001\002\000\040\003\uff88\010\uff88\027\uff88\030" +
    "\uff88\031\uff88\033\uff88\034\uff88\035\uff88\040\uff88\043\uff88" +
    "\054\uff88\061\uff88\066\uff88\101\uff88\134\uff88\001\002\000" +
    "\040\003\uff87\010\uff87\027\uff87\030\uff87\031\uff87\033\uff87" +
    "\034\uff87\035\uff87\040\uff87\043\uff87\054\uff87\061\uff87\066" +
    "\uff87\101\uff87\134\uff87\001\002\000\040\003\uff86\010\uff86" +
    "\027\uff86\030\uff86\031\uff86\033\uff86\034\uff86\035\uff86\040" +
    "\uff86\043\uff86\054\uff86\061\uff86\066\uff86\101\uff86\134\uff86" +
    "\001\002\000\036\003\102\027\072\030\113\031\110\033" +
    "\065\034\111\035\117\040\076\043\101\054\077\061\115" +
    "\066\074\101\116\134\073\001\002\000\004\101\247\001" +
    "\002\000\052\003\uff8e\027\uff8e\030\uff8e\031\uff8e\033\uff8e" +
    "\034\uff8e\035\uff8e\040\uff8e\041\uff8e\043\uff8e\054\uff8e\061" +
    "\uff8e\064\uff8e\066\uff8e\073\uff8e\076\uff8e\077\uff8e\101\uff8e" +
    "\102\uff8e\134\uff8e\001\002\000\006\064\uff8c\102\uff8c\001" +
    "\002\000\006\064\uff8b\102\uff8b\001\002\000\022\011\153" +
    "\012\154\041\uffe7\064\uffe7\073\uffe7\076\uffe7\077\uffe7\102" +
    "\uffe7\001\002\000\006\006\254\062\255\001\002\000\014" +
    "\007\135\054\133\055\141\056\136\057\142\001\002\000" +
    "\010\021\040\022\041\023\037\001\002\000\004\006\257" +
    "\001\002\000\014\007\135\054\133\055\141\056\136\057" +
    "\142\001\002\000\010\011\153\012\154\071\uffce\001\002" +
    "\000\010\011\153\012\154\071\uffcd\001\002\000\024\007" +
    "\135\027\072\030\113\031\110\054\133\055\141\056\136" +
    "\057\142\134\073\001\002\000\052\003\uff9a\027\uff9a\030" +
    "\uff9a\031\uff9a\033\uff9a\034\uff9a\035\uff9a\040\uff9a\041\uff9a" +
    "\043\uff9a\054\uff9a\061\uff9a\064\uff9a\066\uff9a\073\uff9a\076" +
    "\uff9a\077\uff9a\101\uff9a\102\uff9a\134\uff9a\001\002\000\056" +
    "\003\uff9b\011\153\012\154\027\uff9b\030\uff9b\031\uff9b\033" +
    "\uff9b\034\uff9b\035\uff9b\040\uff9b\041\uff9b\043\uff9b\054\uff9b" +
    "\061\uff9b\064\uff9b\066\uff9b\073\uff9b\076\uff9b\077\uff9b\101" +
    "\uff9b\102\uff9b\134\uff9b\001\002\000\042\003\uff8f\024\223" +
    "\027\uff8f\030\uff8f\031\uff8f\033\uff8f\034\uff8f\035\uff8f\040" +
    "\uff8f\043\uff8f\054\uff8f\061\uff8f\066\uff8f\100\267\101\uff8f" +
    "\134\uff8f\001\002\000\036\003\uff96\027\uff96\030\uff96\031" +
    "\uff96\033\uff96\034\uff96\035\uff96\040\uff96\043\uff96\054\uff96" +
    "\061\uff96\066\uff96\101\uff96\134\uff96\001\002\000\036\003" +
    "\uff90\027\uff90\030\uff90\031\uff90\033\uff90\034\uff90\035\uff90" +
    "\040\uff90\043\uff90\054\uff90\061\uff90\066\uff90\101\uff90\134" +
    "\uff90\001\002\000\006\067\272\070\271\001\002\000\004" +
    "\007\303\001\002\000\004\007\273\001\002\000\016\007" +
    "\135\053\275\054\133\055\141\056\136\057\142\001\002" +
    "\000\006\010\uffd6\017\uffd6\001\002\000\010\010\uffd5\017" +
    "\uffd5\020\uffd5\001\002\000\006\010\300\017\301\001\002" +
    "\000\014\010\uffd4\011\153\012\154\017\uffd4\020\uffd4\001" +
    "\002\000\052\003\uffd9\027\uffd9\030\uffd9\031\uffd9\033\uffd9" +
    "\034\uffd9\035\uffd9\040\uffd9\041\uffd9\043\uffd9\054\uffd9\061" +
    "\uffd9\064\uffd9\066\uffd9\073\uffd9\076\uffd9\077\uffd9\101\uffd9" +
    "\102\uffd9\134\uffd9\001\002\000\016\007\135\053\275\054" +
    "\133\055\141\056\136\057\142\001\002\000\006\010\uffd7" +
    "\017\uffd7\001\002\000\016\007\135\053\275\054\133\055" +
    "\141\056\136\057\142\001\002\000\006\010\305\017\301" +
    "\001\002\000\052\003\uffd8\027\uffd8\030\uffd8\031\uffd8\033" +
    "\uffd8\034\uffd8\035\uffd8\040\uffd8\041\uffd8\043\uffd8\054\uffd8" +
    "\061\uffd8\064\uffd8\066\uffd8\073\uffd8\076\uffd8\077\uffd8\101" +
    "\uffd8\102\uffd8\134\uffd8\001\002\000\004\053\307\001\002" +
    "\000\004\020\310\001\002\000\004\017\311\001\002\000" +
    "\004\054\312\001\002\000\004\010\313\001\002\000\074" +
    "\003\ufe97\021\ufe97\022\ufe97\023\ufe97\027\ufe97\030\ufe97\031" +
    "\ufe97\032\ufe97\033\ufe97\034\ufe97\035\ufe97\040\ufe97\041\ufe97" +
    "\043\ufe97\044\ufe97\054\ufe97\061\ufe97\064\ufe97\066\ufe97\073" +
    "\ufe97\076\ufe97\077\ufe97\101\ufe97\102\ufe97\105\ufe97\112\ufe97" +
    "\114\ufe97\117\ufe97\134\ufe97\001\002\000\004\053\315\001" +
    "\002\000\004\010\316\001\002\000\074\003\uffdc\021\uffdc" +
    "\022\uffdc\023\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033" +
    "\uffdc\034\uffdc\035\uffdc\040\uffdc\041\uffdc\043\uffdc\044\uffdc" +
    "\054\uffdc\061\uffdc\064\uffdc\066\uffdc\073\uffdc\076\uffdc\077" +
    "\uffdc\101\uffdc\102\uffdc\105\uffdc\112\uffdc\114\uffdc\117\uffdc" +
    "\134\uffdc\001\002\000\030\007\135\041\uffe9\054\133\055" +
    "\141\056\136\057\142\064\uffe9\073\uffe9\076\uffe9\077\uffe9" +
    "\102\uffe9\001\002\000\052\003\uffe5\027\uffe5\030\uffe5\031" +
    "\uffe5\033\uffe5\034\uffe5\035\uffe5\040\uffe5\041\uffeb\043\uffe5" +
    "\054\uffe5\061\uffe5\064\uffeb\066\uffe5\073\uffeb\076\uffeb\077" +
    "\uffeb\101\uffe5\102\uffeb\134\uffe5\001\002\000\022\011\153" +
    "\012\154\041\uffea\064\uffea\073\uffea\076\uffea\077\uffea\102" +
    "\uffea\001\002\000\014\007\135\054\133\055\141\056\136" +
    "\057\142\001\002\000\044\003\uffc8\011\153\012\154\027" +
    "\uffc8\030\uffc8\031\uffc8\033\uffc8\034\uffc8\035\uffc8\040\uffc8" +
    "\043\uffc8\054\uffc8\061\uffc8\066\uffc8\072\325\101\uffc8\134" +
    "\uffc8\001\002\000\036\003\uffcf\027\uffcf\030\uffcf\031\uffcf" +
    "\033\uffcf\034\uffcf\035\uffcf\040\uffcf\043\uffcf\054\uffcf\061" +
    "\uffcf\066\uffcf\101\uffcf\134\uffcf\001\002\000\016\011\327" +
    "\012\330\054\237\055\244\056\242\057\243\001\002\000" +
    "\036\003\uffcb\027\uffcb\030\uffcb\031\uffcb\033\uffcb\034\uffcb" +
    "\035\uffcb\040\uffcb\043\uffcb\054\uffcb\061\uffcb\066\uffcb\101" +
    "\uffcb\134\uffcb\001\002\000\012\054\237\055\244\056\242" +
    "\057\243\001\002\000\012\054\237\055\244\056\242\057" +
    "\243\001\002\000\036\003\uffca\027\uffca\030\uffca\031\uffca" +
    "\033\uffca\034\uffca\035\uffca\040\uffca\043\uffca\054\uffca\061" +
    "\uffca\066\uffca\101\uffca\134\uffca\001\002\000\036\003\uffc9" +
    "\027\uffc9\030\uffc9\031\uffc9\033\uffc9\034\uffc9\035\uffc9\040" +
    "\uffc9\043\uffc9\054\uffc9\061\uffc9\066\uffc9\101\uffc9\134\uffc9" +
    "\001\002\000\004\076\334\001\002\000\004\034\335\001" +
    "\002\000\022\007\200\026\202\036\176\037\177\054\133" +
    "\055\141\056\136\057\142\001\002\000\054\003\uffa9\024" +
    "\223\027\uffa9\030\uffa9\031\uffa9\033\uffa9\034\uffa9\035\uffa9" +
    "\040\uffa9\041\uffa9\043\uffa9\054\uffa9\061\uffa9\064\uffa9\066" +
    "\uffa9\073\uffa9\076\uffa9\077\uffa9\101\uffa9\102\uffa9\134\uffa9" +
    "\001\002\000\010\041\343\064\uff93\077\344\001\002\000" +
    "\036\003\102\027\072\030\113\031\110\033\065\034\111" +
    "\035\117\040\076\043\101\054\077\061\115\066\074\101" +
    "\116\134\073\001\002\000\036\003\102\027\072\030\113" +
    "\031\110\033\065\034\111\035\117\040\076\043\101\054" +
    "\077\061\115\066\074\101\116\134\073\001\002\000\004" +
    "\064\347\001\002\000\036\003\uff92\027\uff92\030\uff92\031" +
    "\uff92\033\uff92\034\uff92\035\uff92\040\uff92\043\uff92\054\uff92" +
    "\061\uff92\066\uff92\101\uff92\134\uff92\001\002\000\022\007" +
    "\200\026\202\036\176\037\177\054\133\055\141\056\136" +
    "\057\142\001\002\000\042\003\uff8f\024\223\027\uff8f\030" +
    "\uff8f\031\uff8f\033\uff8f\034\uff8f\035\uff8f\040\uff8f\043\uff8f" +
    "\054\uff8f\061\uff8f\066\uff8f\100\267\101\uff8f\134\uff8f\001" +
    "\002\000\036\003\uff91\027\uff91\030\uff91\031\uff91\033\uff91" +
    "\034\uff91\035\uff91\040\uff91\043\uff91\054\uff91\061\uff91\066" +
    "\uff91\101\uff91\134\uff91\001\002\000\004\040\350\001\002" +
    "\000\052\003\uff97\027\uff97\030\uff97\031\uff97\033\uff97\034" +
    "\uff97\035\uff97\040\uff97\041\uff97\043\uff97\054\uff97\061\uff97" +
    "\064\uff97\066\uff97\073\uff97\076\uff97\077\uff97\101\uff97\102" +
    "\uff97\134\uff97\001\002\000\010\041\343\064\uff93\077\344" +
    "\001\002\000\004\064\uff94\001\002\000\004\064\uff95\001" +
    "\002\000\004\064\355\001\002\000\004\065\356\001\002" +
    "\000\014\003\ufff6\032\ufff6\060\ufff6\063\ufff6\065\ufff6\001" +
    "\002\000\004\103\u01a8\001\002\000\010\032\uff83\103\uff83" +
    "\104\uff83\001\002\000\010\032\uff81\103\uff81\104\uff81\001" +
    "\002\000\010\032\021\103\uff84\104\ufff3\001\002\000\010" +
    "\032\uff82\103\uff82\104\uff82\001\002\000\004\113\370\001" +
    "\002\000\004\104\366\001\002\000\004\054\367\001\002" +
    "\000\004\113\uff7f\001\002\000\022\003\uff7c\021\uff7c\022" +
    "\uff7c\023\uff7c\032\uff7c\054\uff7c\105\uff7c\114\uff7c\001\002" +
    "\000\004\114\u01a5\001\002\000\022\003\u0102\021\ufff3\022" +
    "\ufff3\023\ufff3\032\021\054\ufff3\105\ufff3\114\uff7e\001\002" +
    "\000\022\003\uff7d\021\uff7d\022\uff7d\023\uff7d\032\uff7d\054" +
    "\uff7d\105\uff7d\114\uff7d\001\002\000\022\003\uff7a\021\uff7a" +
    "\022\uff7a\023\uff7a\032\uff7a\054\uff7a\105\uff7a\114\uff7a\001" +
    "\002\000\022\003\uff7b\021\uff7b\022\uff7b\023\uff7b\032\uff7b" +
    "\054\uff7b\105\uff7b\114\uff7b\001\002\000\022\003\uff79\021" +
    "\uff79\022\uff79\023\uff79\032\uff79\054\uff79\105\uff79\114\uff79" +
    "\001\002\000\014\021\040\022\041\023\037\054\u0191\105" +
    "\u0193\001\002\000\004\113\u018e\001\002\000\022\003\uff78" +
    "\021\uff78\022\uff78\023\uff78\032\uff78\054\uff78\105\uff78\114" +
    "\uff78\001\002\000\022\003\uff77\021\uff77\022\uff77\023\uff77" +
    "\032\uff77\054\uff77\105\uff77\114\uff77\001\002\000\004\113" +
    "\u018b\001\002\000\004\113\u0105\001\002\000\046\003\u0118" +
    "\021\ufff3\022\ufff3\023\ufff3\027\072\030\113\031\110\032" +
    "\021\033\065\034\u010b\035\u0114\040\u0110\054\u0111\106\u0107" +
    "\107\u010f\110\u0106\114\uff6b\134\073\001\002\000\004\007" +
    "\u0188\001\002\000\004\007\u0185\001\002\000\004\112\u0184" +
    "\001\002\000\004\007\u017a\001\002\000\004\112\u0179\001" +
    "\002\000\004\007\u0176\001\002\000\004\113\u0163\001\002" +
    "\000\052\003\uff67\021\uff67\022\uff67\023\uff67\027\uff67\030" +
    "\uff67\031\uff67\032\uff67\033\uff67\034\uff67\035\uff67\040\uff67" +
    "\043\uff67\054\uff67\106\uff67\107\uff67\110\uff67\111\uff67\114" +
    "\uff67\134\uff67\001\002\000\004\113\u0160\001\002\000\004" +
    "\007\u0155\001\002\000\004\007\u0152\001\002\000\004\006" +
    "\u014f\001\002\000\052\003\u0118\021\ufff3\022\ufff3\023\ufff3" +
    "\027\072\030\113\031\110\032\021\033\065\034\u010b\035" +
    "\u0114\040\u0110\043\u014d\054\u0111\106\u0107\107\u010f\110\u0106" +
    "\111\uff69\114\uff69\134\073\001\002\000\006\111\uff6c\114" +
    "\uff6c\001\002\000\004\113\u0147\001\002\000\052\003\uff5d" +
    "\021\uff5d\022\uff5d\023\uff5d\027\uff5d\030\uff5d\031\uff5d\032" +
    "\uff5d\033\uff5d\034\uff5d\035\uff5d\040\uff5d\043\uff5d\054\uff5d" +
    "\106\uff5d\107\uff5d\110\uff5d\111\uff5d\114\uff5d\134\uff5d\001" +
    "\002\000\052\003\uff5a\021\uff5a\022\uff5a\023\uff5a\027\uff5a" +
    "\030\uff5a\031\uff5a\032\uff5a\033\uff5a\034\uff5a\035\uff5a\040" +
    "\uff5a\043\uff5a\054\uff5a\106\uff5a\107\uff5a\110\uff5a\111\uff5a" +
    "\114\uff5a\134\uff5a\001\002\000\004\112\u0146\001\002\000" +
    "\052\003\uff59\021\uff59\022\uff59\023\uff59\027\uff59\030\uff59" +
    "\031\uff59\032\uff59\033\uff59\034\uff59\035\uff59\040\uff59\043" +
    "\uff59\054\uff59\106\uff59\107\uff59\110\uff59\111\uff59\114\uff59" +
    "\134\uff59\001\002\000\022\007\200\026\202\036\176\037" +
    "\177\054\133\055\141\056\136\057\142\001\002\000\004" +
    "\112\u013e\001\002\000\010\021\040\022\041\023\037\001" +
    "\002\000\004\113\u0132\001\002\000\004\114\u0131\001\002" +
    "\000\004\113\u011f\001\002\000\046\003\u0118\021\ufff3\022" +
    "\ufff3\023\ufff3\027\072\030\113\031\110\032\021\033\065" +
    "\034\u010b\035\u0114\040\u0110\054\u0111\106\u0107\107\u010f\110" +
    "\u0106\114\uff6b\134\073\001\002\000\004\114\u0121\001\002" +
    "\000\054\003\uff45\021\uff45\022\uff45\023\uff45\027\uff45\030" +
    "\uff45\031\uff45\032\uff45\033\uff45\034\uff45\035\uff45\040\uff45" +
    "\041\u0123\043\uff45\054\uff45\106\uff45\107\uff45\110\uff45\111" +
    "\uff45\114\uff45\134\uff45\001\002\000\004\113\u012e\001\002" +
    "\000\006\040\u012a\113\uff44\001\002\000\004\113\u0126\001" +
    "\002\000\052\003\uff4a\021\uff4a\022\uff4a\023\uff4a\027\uff4a" +
    "\030\uff4a\031\uff4a\032\uff4a\033\uff4a\034\uff4a\035\uff4a\040" +
    "\uff4a\043\uff4a\054\uff4a\106\uff4a\107\uff4a\110\uff4a\111\uff4a" +
    "\114\uff4a\134\uff4a\001\002\000\044\003\u0118\021\ufff3\022" +
    "\ufff3\023\ufff3\027\072\030\113\031\110\032\021\033\065" +
    "\034\u010b\035\u0114\040\u0110\054\u0111\106\u0107\107\u010f\110" +
    "\u0106\134\073\001\002\000\004\114\u0128\001\002\000\054" +
    "\003\uff45\021\uff45\022\uff45\023\uff45\027\uff45\030\uff45\031" +
    "\uff45\032\uff45\033\uff45\034\uff45\035\uff45\040\uff45\041\u0123" +
    "\043\uff45\054\uff45\106\uff45\107\uff45\110\uff45\111\uff45\114" +
    "\uff45\134\uff45\001\002\000\052\003\uff46\021\uff46\022\uff46" +
    "\023\uff46\027\uff46\030\uff46\031\uff46\032\uff46\033\uff46\034" +
    "\uff46\035\uff46\040\uff46\043\uff46\054\uff46\106\uff46\107\uff46" +
    "\110\uff46\111\uff46\114\uff46\134\uff46\001\002\000\004\007" +
    "\u012b\001\002\000\022\007\200\026\202\036\176\037\177" +
    "\054\133\055\141\056\136\057\142\001\002\000\006\010" +
    "\u012d\024\223\001\002\000\004\113\uff43\001\002\000\046" +
    "\003\u0118\021\ufff3\022\ufff3\023\ufff3\027\072\030\113\031" +
    "\110\032\021\033\065\034\u010b\035\u0114\040\u0110\054\u0111" +
    "\106\u0107\107\u010f\110\u0106\114\uff6b\134\073\001\002\000" +
    "\004\114\u0130\001\002\000\052\003\uff47\021\uff47\022\uff47" +
    "\023\uff47\027\uff47\030\uff47\031\uff47\032\uff47\033\uff47\034" +
    "\uff47\035\uff47\040\uff47\043\uff47\054\uff47\106\uff47\107\uff47" +
    "\110\uff47\111\uff47\114\uff47\134\uff47\001\002\000\022\003" +
    "\uff72\021\uff72\022\uff72\023\uff72\032\uff72\054\uff72\105\uff72" +
    "\114\uff72\001\002\000\046\003\u0118\021\ufff3\022\ufff3\023" +
    "\ufff3\027\072\030\113\031\110\032\021\033\065\034\u010b" +
    "\035\u0114\040\u0110\054\u0111\106\u0107\107\u010f\110\u0106\114" +
    "\uff6b\134\073\001\002\000\004\114\u0134\001\002\000\052" +
    "\003\uff56\021\uff56\022\uff56\023\uff56\027\uff56\030\uff56\031" +
    "\uff56\032\uff56\033\uff56\034\uff56\035\uff56\040\uff56\043\uff56" +
    "\054\uff56\106\uff56\107\uff56\110\uff56\111\uff56\114\uff56\134" +
    "\uff56\001\002\000\004\054\u0136\001\002\000\010\006\u013b" +
    "\020\uff9c\112\uff9c\001\002\000\026\003\uff4e\020\u0138\021" +
    "\uff4e\022\uff4e\023\uff4e\032\uff4e\054\uff4e\105\uff4e\112\uff4e" +
    "\114\uff4e\001\002\000\004\054\u0139\001\002\000\030\003" +
    "\uff9c\006\125\020\uff9c\021\uff9c\022\uff9c\023\uff9c\032\uff9c" +
    "\054\uff9c\105\uff9c\112\uff9c\114\uff9c\001\002\000\026\003" +
    "\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\032\uff9f\054\uff9f" +
    "\105\uff9f\112\uff9f\114\uff9f\001\002\000\024\007\135\027" +
    "\072\030\113\031\110\054\133\055\141\056\136\057\142" +
    "\134\073\001\002\000\026\003\uff9e\020\uff9e\021\uff9e\022" +
    "\uff9e\023\uff9e\032\uff9e\054\uff9e\105\uff9e\112\uff9e\114\uff9e" +
    "\001\002\000\024\003\uff4d\021\uff4d\022\uff4d\023\uff4d\032" +
    "\uff4d\054\uff4d\105\uff4d\112\uff4d\114\uff4d\001\002\000\052" +
    "\003\uff5e\021\uff5e\022\uff5e\023\uff5e\027\uff5e\030\uff5e\031" +
    "\uff5e\032\uff5e\033\uff5e\034\uff5e\035\uff5e\040\uff5e\043\uff5e" +
    "\054\uff5e\106\uff5e\107\uff5e\110\uff5e\111\uff5e\114\uff5e\134" +
    "\uff5e\001\002\000\006\024\223\112\u0140\001\002\000\004" +
    "\054\u0142\001\002\000\004\010\u0145\001\002\000\004\006" +
    "\u0143\001\002\000\014\007\135\054\133\055\141\056\136" +
    "\057\142\001\002\000\010\010\uff52\011\153\012\154\001" +
    "\002\000\004\113\uff53\001\002\000\052\003\uff5f\021\uff5f" +
    "\022\uff5f\023\uff5f\027\uff5f\030\uff5f\031\uff5f\032\uff5f\033" +
    "\uff5f\034\uff5f\035\uff5f\040\uff5f\043\uff5f\054\uff5f\106\uff5f" +
    "\107\uff5f\110\uff5f\111\uff5f\114\uff5f\134\uff5f\001\002\000" +
    "\046\003\u0118\021\ufff3\022\ufff3\023\ufff3\027\072\030\113" +
    "\031\110\032\021\033\065\034\u010b\035\u0114\040\u0110\054" +
    "\u0111\106\u0107\107\u010f\110\u0106\114\uff6b\134\073\001\002" +
    "\000\004\114\u0149\001\002\000\022\007\200\026\202\036" +
    "\176\037\177\054\133\055\141\056\136\057\142\001\002" +
    "\000\006\024\223\112\u014b\001\002\000\052\003\uff54\021" +
    "\uff54\022\uff54\023\uff54\027\uff54\030\uff54\031\uff54\032\uff54" +
    "\033\uff54\034\uff54\035\uff54\040\uff54\043\uff54\054\uff54\106" +
    "\uff54\107\uff54\110\uff54\111\uff54\114\uff54\134\uff54\001\002" +
    "\000\052\003\uff68\021\uff68\022\uff68\023\uff68\027\uff68\030" +
    "\uff68\031\uff68\032\uff68\033\uff68\034\uff68\035\uff68\040\uff68" +
    "\043\uff68\054\uff68\106\uff68\107\uff68\110\uff68\111\uff68\114" +
    "\uff68\134\uff68\001\002\000\014\007\135\054\133\055\141" +
    "\056\136\057\142\001\002\000\012\011\153\012\154\111" +
    "\uff6a\114\uff6a\001\002\000\024\007\135\027\072\030\113" +
    "\031\110\054\133\055\141\056\136\057\142\134\073\001" +
    "\002\000\004\112\uff4b\001\002\000\010\011\153\012\154" +
    "\112\uff4c\001\002\000\022\007\200\026\202\036\176\037" +
    "\177\054\133\055\141\056\136\057\142\001\002\000\006" +
    "\010\u0154\024\223\001\002\000\004\113\uff48\001\002\000" +
    "\014\053\u0158\054\u0156\055\u015b\056\u015a\057\u015c\001\002" +
    "\000\010\010\uff64\011\uff64\115\uff64\001\002\000\006\010" +
    "\uff65\011\uff65\001\002\000\010\010\uff60\011\uff60\115\uff60" +
    "\001\002\000\006\010\u015d\011\u015e\001\002\000\010\010" +
    "\uff63\011\uff63\115\uff63\001\002\000\010\010\uff61\011\uff61" +
    "\115\uff61\001\002\000\010\010\uff62\011\uff62\115\uff62\001" +
    "\002\000\004\112\uff58\001\002\000\014\053\u0158\054\u0156" +
    "\055\u015b\056\u015a\057\u015c\001\002\000\006\010\uff66\011" +
    "\uff66\001\002\000\046\003\u0118\021\ufff3\022\ufff3\023\ufff3" +
    "\027\072\030\113\031\110\032\021\033\065\034\u010b\035" +
    "\u0114\040\u0110\054\u0111\106\u0107\107\u010f\110\u0106\114\uff6b" +
    "\134\073\001\002\000\004\114\u0162\001\002\000\052\003" +
    "\uff55\021\uff55\022\uff55\023\uff55\027\uff55\030\uff55\031\uff55" +
    "\032\uff55\033\uff55\034\uff55\035\uff55\040\uff55\043\uff55\054" +
    "\uff55\106\uff55\107\uff55\110\uff55\111\uff55\114\uff55\134\uff55" +
    "\001\002\000\004\047\u0165\001\002\000\004\115\u0173\001" +
    "\002\000\014\053\u0158\054\u0156\055\u015b\056\u015a\057\u015c" +
    "\001\002\000\010\046\uff3d\047\uff3d\114\uff3f\001\002\000" +
    "\006\046\u016a\047\u0165\001\002\000\004\114\u0169\001\002" +
    "\000\052\003\uff49\021\uff49\022\uff49\023\uff49\027\uff49\030" +
    "\uff49\031\uff49\032\uff49\033\uff49\034\uff49\035\uff49\040\uff49" +
    "\043\uff49\054\uff49\106\uff49\107\uff49\110\uff49\111\uff49\114" +
    "\uff49\134\uff49\001\002\000\004\115\ufeac\001\002\000\004" +
    "\115\u016d\001\002\000\010\046\uff3e\047\uff3e\114\uff41\001" +
    "\002\000\046\003\u0118\021\ufff3\022\ufff3\023\ufff3\027\072" +
    "\030\113\031\110\032\021\033\065\034\u010b\035\u0114\040" +
    "\u0110\054\u0111\106\u0107\107\u010f\110\u0106\111\uff6b\134\073" +
    "\001\002\000\004\111\u0170\001\002\000\004\114\uff40\001" +
    "\002\000\004\112\u0171\001\002\000\010\046\uff3a\047\uff3a" +
    "\114\uff3a\001\002\000\004\115\uff3b\001\002\000\046\003" +
    "\u0118\021\ufff3\022\ufff3\023\ufff3\027\072\030\113\031\110" +
    "\032\021\033\065\034\u010b\035\u0114\040\u0110\054\u0111\106" +
    "\u0107\107\u010f\110\u0106\111\uff6b\134\073\001\002\000\004" +
    "\111\u0170\001\002\000\010\046\uff3c\047\uff3c\114\uff3c\001" +
    "\002\000\022\007\200\026\202\036\176\037\177\054\133" +
    "\055\141\056\136\057\142\001\002\000\006\010\u0178\024" +
    "\223\001\002\000\004\113\uff4f\001\002\000\052\003\uff5c" +
    "\021\uff5c\022\uff5c\023\uff5c\027\uff5c\030\uff5c\031\uff5c\032" +
    "\uff5c\033\uff5c\034\uff5c\035\uff5c\040\uff5c\043\uff5c\054\uff5c" +
    "\106\uff5c\107\uff5c\110\uff5c\111\uff5c\114\uff5c\134\uff5c\001" +
    "\002\000\012\021\040\022\041\023\037\054\u017b\001\002" +
    "\000\004\006\u0181\001\002\000\004\054\u017d\001\002\000" +
    "\004\006\u017e\001\002\000\014\007\135\054\133\055\141" +
    "\056\136\057\142\001\002\000\010\011\153\012\154\112" +
    "\u0180\001\002\000\022\007\uff51\026\uff51\036\uff51\037\uff51" +
    "\054\uff51\055\uff51\056\uff51\057\uff51\001\002\000\014\007" +
    "\135\054\133\055\141\056\136\057\142\001\002\000\010" +
    "\011\153\012\154\112\u0183\001\002\000\022\007\uff50\026" +
    "\uff50\036\uff50\037\uff50\054\uff50\055\uff50\056\uff50\057\uff50" +
    "\001\002\000\052\003\uff5b\021\uff5b\022\uff5b\023\uff5b\027" +
    "\uff5b\030\uff5b\031\uff5b\032\uff5b\033\uff5b\034\uff5b\035\uff5b" +
    "\040\uff5b\043\uff5b\054\uff5b\106\uff5b\107\uff5b\110\uff5b\111" +
    "\uff5b\114\uff5b\134\uff5b\001\002\000\014\053\u0158\054\u0156" +
    "\055\u015b\056\u015a\057\u015c\001\002\000\006\010\u0187\011" +
    "\u015e\001\002\000\004\112\uff57\001\002\000\004\054\u0189" +
    "\001\002\000\004\010\u018a\001\002\000\004\113\uff42\001" +
    "\002\000\046\003\u0118\021\ufff3\022\ufff3\023\ufff3\027\072" +
    "\030\113\031\110\032\021\033\065\034\u010b\035\u0114\040" +
    "\u0110\054\u0111\106\u0107\107\u010f\110\u0106\114\uff6b\134\073" +
    "\001\002\000\004\114\u018d\001\002\000\022\003\uff76\021" +
    "\uff76\022\uff76\023\uff76\032\uff76\054\uff76\105\uff76\114\uff76" +
    "\001\002\000\046\003\u0118\021\ufff3\022\ufff3\023\ufff3\027" +
    "\072\030\113\031\110\032\021\033\065\034\u010b\035\u0114" +
    "\040\u0110\054\u0111\106\u0107\107\u010f\110\u0106\114\uff6b\134" +
    "\073\001\002\000\004\114\u0190\001\002\000\022\003\uff74" +
    "\021\uff74\022\uff74\023\uff74\032\uff74\054\uff74\105\uff74\114" +
    "\uff74\001\002\000\004\007\u01a2\001\002\000\004\054\u019e" +
    "\001\002\000\004\054\u0194\001\002\000\004\007\u0195\001" +
    "\002\000\014\010\uff6f\020\uff6f\021\040\022\041\023\037" +
    "\001\002\000\004\054\u019d\001\002\000\006\010\u019a\020" +
    "\u0199\001\002\000\006\010\uff70\020\uff70\001\002\000\010" +
    "\021\040\022\041\023\037\001\002\000\004\113\uff71\001" +
    "\002\000\004\054\u019c\001\002\000\006\010\uff6e\020\uff6e" +
    "\001\002\000\006\010\uff6d\020\uff6d\001\002\000\030\003" +
    "\uff9c\006\u013b\007\u019f\020\uff9c\021\uff9c\022\uff9c\023\uff9c" +
    "\032\uff9c\054\uff9c\105\uff9c\114\uff9c\001\002\000\014\010" +
    "\uff6f\020\uff6f\021\040\022\041\023\037\001\002\000\006" +
    "\010\u01a1\020\u0199\001\002\000\004\113\uff73\001\002\000" +
    "\014\010\uff6f\020\uff6f\021\040\022\041\023\037\001\002" +
    "\000\006\010\u01a4\020\u0199\001\002\000\004\113\uff75\001" +
    "\002\000\010\032\uff80\103\uff80\104\uff80\001\002\000\004" +
    "\116\u0204\001\002\000\010\003\uff36\116\uff36\121\uff36\001" +
    "\002\000\010\003\uff38\116\uff38\121\uff38\001\002\000\010" +
    "\003\u01aa\116\uff39\121\u01ab\001\002\000\010\003\uff34\116" +
    "\uff34\121\uff34\001\002\000\004\054\u01fa\001\002\000\010" +
    "\003\uff37\116\uff37\121\uff37\001\002\000\004\120\u01ae\001" +
    "\002\000\032\003\uff2a\027\uff2a\030\uff2a\031\uff2a\033\uff2a" +
    "\034\uff2a\040\uff2a\043\uff2a\044\uff2a\054\uff2a\117\uff2a\134" +
    "\uff2a\001\002\000\032\003\u01c2\027\072\030\113\031\110" +
    "\033\u01c5\034\u01b7\040\u01bb\043\u01b9\044\u01c1\054\u01bc\117" +
    "\uff2d\134\073\001\002\000\004\117\uff2e\001\002\000\004" +
    "\117\u01b2\001\002\000\010\003\uff35\116\uff35\121\uff35\001" +
    "\002\000\032\003\uff20\027\uff20\030\uff20\031\uff20\033\uff20" +
    "\034\uff20\040\uff20\043\uff20\044\uff20\054\uff20\117\uff20\134" +
    "\uff20\001\002\000\004\020\u01f4\001\002\000\004\120\u01f1" +
    "\001\002\000\032\003\uff28\027\uff28\030\uff28\031\uff28\033" +
    "\uff28\034\uff28\040\uff28\043\uff28\044\uff28\054\uff28\117\uff28" +
    "\134\uff28\001\002\000\022\007\200\026\202\036\176\037" +
    "\177\054\133\055\141\056\136\057\142\001\002\000\032" +
    "\003\uff1f\027\uff1f\030\uff1f\031\uff1f\033\uff1f\034\uff1f\040" +
    "\uff1f\043\uff1f\044\uff1f\054\uff1f\117\uff1f\134\uff1f\001\002" +
    "\000\014\007\135\054\133\055\141\056\136\057\142\001" +
    "\002\000\004\120\u01dc\001\002\000\022\007\200\026\202" +
    "\036\176\037\177\054\133\055\141\056\136\057\142\001" +
    "\002\000\004\006\u01d7\001\002\000\004\115\u01d3\001\002" +
    "\000\004\054\u01ce\001\002\000\032\003\uff2b\027\uff2b\030" +
    "\uff2b\031\uff2b\033\uff2b\034\uff2b\040\uff2b\043\uff2b\044\uff2b" +
    "\054\uff2b\117\uff2b\134\uff2b\001\002\000\032\003\uff15\027" +
    "\uff15\030\uff15\031\uff15\033\uff15\034\uff15\040\uff15\043\uff15" +
    "\044\uff15\054\uff15\117\uff15\134\uff15\001\002\000\004\007" +
    "\u01c8\001\002\000\032\003\uff24\027\uff24\030\uff24\031\uff24" +
    "\033\uff24\034\uff24\040\uff24\043\uff24\044\uff24\054\uff24\117" +
    "\uff24\134\uff24\001\002\000\032\003\uff29\027\uff29\030\uff29" +
    "\031\uff29\033\uff29\034\uff29\040\uff29\043\uff29\044\uff29\054" +
    "\uff29\117\uff29\134\uff29\001\002\000\032\003\uff26\027\uff26" +
    "\030\uff26\031\uff26\033\uff26\034\uff26\040\uff26\043\uff26\044" +
    "\uff26\054\uff26\117\uff26\134\uff26\001\002\000\004\054\uff1a" +
    "\001\002\000\032\003\uff27\027\uff27\030\uff27\031\uff27\033" +
    "\uff27\034\uff27\040\uff27\043\uff27\044\uff27\054\uff27\117\uff27" +
    "\134\uff27\001\002\000\032\003\uff25\027\uff25\030\uff25\031" +
    "\uff25\033\uff25\034\uff25\040\uff25\043\uff25\044\uff25\054\uff25" +
    "\117\uff25\134\uff25\001\002\000\016\007\135\053\275\054" +
    "\133\055\141\056\136\057\142\001\002\000\006\010\uff21" +
    "\020\uff21\001\002\000\006\010\u01cc\020\u01cb\001\002\000" +
    "\016\007\135\053\275\054\133\055\141\056\136\057\142" +
    "\001\002\000\032\003\uff23\027\uff23\030\uff23\031\uff23\033" +
    "\uff23\034\uff23\040\uff23\043\uff23\044\uff23\054\uff23\117\uff23" +
    "\134\uff23\001\002\000\006\010\uff22\020\uff22\001\002\000" +
    "\004\122\u01cf\001\002\000\004\123\u01d0\001\002\000\004" +
    "\007\u01d1\001\002\000\014\007\135\054\133\055\141\056" +
    "\136\057\142\001\002\000\010\011\153\012\154\020\uff1b" +
    "\001\002\000\004\120\u01d4\001\002\000\032\003\uff2a\027" +
    "\uff2a\030\uff2a\031\uff2a\033\uff2a\034\uff2a\040\uff2a\043\uff2a" +
    "\044\uff2a\054\uff2a\117\uff2a\134\uff2a\001\002\000\004\117" +
    "\u01d6\001\002\000\032\003\uff1e\027\uff1e\030\uff1e\031\uff1e" +
    "\033\uff1e\034\uff1e\040\uff1e\043\uff1e\044\uff1e\054\uff1e\117" +
    "\uff1e\134\uff1e\001\002\000\024\007\135\027\072\030\113" +
    "\031\110\054\133\055\141\056\136\057\142\134\073\001" +
    "\002\000\032\003\uff16\027\uff16\030\uff16\031\uff16\033\uff16" +
    "\034\uff16\040\uff16\043\uff16\044\uff16\054\uff16\117\uff16\134" +
    "\uff16\001\002\000\036\003\uff17\011\153\012\154\027\uff17" +
    "\030\uff17\031\uff17\033\uff17\034\uff17\040\uff17\043\uff17\044" +
    "\uff17\054\uff17\117\uff17\134\uff17\001\002\000\006\024\223" +
    "\115\u01db\001\002\000\004\120\uff13\001\002\000\032\003" +
    "\uff2a\027\uff2a\030\uff2a\031\uff2a\033\uff2a\034\uff2a\040\uff2a" +
    "\043\uff2a\044\uff2a\054\uff2a\117\uff2a\134\uff2a\001\002\000" +
    "\004\117\u01de\001\002\000\036\003\uff10\027\uff10\030\uff10" +
    "\031\uff10\033\uff10\034\uff10\040\uff10\041\u01df\043\uff10\044" +
    "\uff10\054\uff10\117\uff10\124\u01e0\134\uff10\001\002\000\004" +
    "\115\u01ed\001\002\000\022\007\200\026\202\036\176\037" +
    "\177\054\133\055\141\056\136\057\142\001\002\000\004" +
    "\120\u01e8\001\002\000\032\003\uff14\027\uff14\030\uff14\031" +
    "\uff14\033\uff14\034\uff14\040\uff14\043\uff14\044\uff14\054\uff14" +
    "\117\uff14\134\uff14\001\002\000\004\120\u01e4\001\002\000" +
    "\032\003\uff2a\027\uff2a\030\uff2a\031\uff2a\033\uff2a\034\uff2a" +
    "\040\uff2a\043\uff2a\044\uff2a\054\uff2a\117\uff2a\134\uff2a\001" +
    "\002\000\004\117\u01e6\001\002\000\036\003\uff10\027\uff10" +
    "\030\uff10\031\uff10\033\uff10\034\uff10\040\uff10\041\u01df\043" +
    "\uff10\044\uff10\054\uff10\117\uff10\124\u01e0\134\uff10\001\002" +
    "\000\032\003\uff12\027\uff12\030\uff12\031\uff12\033\uff12\034" +
    "\uff12\040\uff12\043\uff12\044\uff12\054\uff12\117\uff12\134\uff12" +
    "\001\002\000\032\003\uff2a\027\uff2a\030\uff2a\031\uff2a\033" +
    "\uff2a\034\uff2a\040\uff2a\043\uff2a\044\uff2a\054\uff2a\117\uff2a" +
    "\134\uff2a\001\002\000\004\117\u01ea\001\002\000\032\003" +
    "\uff11\027\uff11\030\uff11\031\uff11\033\uff11\034\uff11\040\uff11" +
    "\043\uff11\044\uff11\054\uff11\117\uff11\134\uff11\001\002\000" +
    "\006\024\223\115\u01ec\001\002\000\004\120\uff0e\001\002" +
    "\000\004\120\uff0f\001\002\000\010\011\153\012\154\117" +
    "\uff2c\001\002\000\006\024\223\115\u01f0\001\002\000\004" +
    "\120\uff18\001\002\000\032\003\uff2a\027\uff2a\030\uff2a\031" +
    "\uff2a\033\uff2a\034\uff2a\040\uff2a\043\uff2a\044\uff2a\054\uff2a" +
    "\117\uff2a\134\uff2a\001\002\000\004\117\u01f3\001\002\000" +
    "\032\003\uff19\027\uff19\030\uff19\031\uff19\033\uff19\034\uff19" +
    "\040\uff19\043\uff19\044\uff19\054\uff19\117\uff19\134\uff19\001" +
    "\002\000\014\007\135\054\133\055\141\056\136\057\142" +
    "\001\002\000\012\010\u01f7\011\153\012\154\020\u01f6\001" +
    "\002\000\012\054\237\055\244\056\242\057\243\001\002" +
    "\000\004\115\uff1c\001\002\000\004\010\u01f9\001\002\000" +
    "\004\115\uff1d\001\002\000\004\007\u01fb\001\002\000\006" +
    "\010\uff31\054\u01fc\001\002\000\006\010\uff2f\020\uff2f\001" +
    "\002\000\006\010\uff32\020\u0201\001\002\000\004\010\u01ff" +
    "\001\002\000\004\115\u0200\001\002\000\004\120\uff33\001" +
    "\002\000\004\054\u0202\001\002\000\006\010\uff30\020\uff30" +
    "\001\002\000\004\002\000\001\002\000\006\125\uff0c\130" +
    "\uff0c\001\002\000\006\125\uff0a\130\uff0a\001\002\000\006" +
    "\125\u0208\130\u020a\001\002\000\012\021\040\022\041\023" +
    "\037\125\u0208\001\002\000\010\021\040\022\041\023\037" +
    "\001\002\000\004\112\u0214\001\002\000\006\050\u020c\053" +
    "\u020d\001\002\000\006\125\uff0b\130\uff0b\001\002\000\004" +
    "\054\u020e\001\002\000\006\125\ufedc\130\ufedc\001\002\000" +
    "\006\016\u0211\042\ufed9\001\002\000\004\042\u0210\001\002" +
    "\000\006\125\ufedb\130\ufedb\001\002\000\006\013\u0213\054" +
    "\u0212\001\002\000\004\042\ufeda\001\002\000\004\042\ufed8" +
    "\001\002\000\012\021\uff08\022\uff08\023\uff08\125\uff08\001" +
    "\002\000\004\054\u0216\001\002\000\004\006\u0217\001\002" +
    "\000\012\007\u0219\055\u021c\056\u021b\057\u021d\001\002\000" +
    "\016\011\uff00\012\uff00\013\uff00\014\uff00\015\uff00\112\uff00" +
    "\001\002\000\014\007\135\054\133\055\141\056\136\057" +
    "\142\001\002\000\016\011\uff04\012\uff04\013\u0223\014\u0224" +
    "\015\u0222\112\uff04\001\002\000\016\011\ufeff\012\ufeff\013" +
    "\ufeff\014\ufeff\015\ufeff\112\ufeff\001\002\000\016\011\ufefe" +
    "\012\ufefe\013\ufefe\014\ufefe\015\ufefe\112\ufefe\001\002\000" +
    "\016\011\ufefd\012\ufefd\013\ufefd\014\ufefd\015\ufefd\112\ufefd" +
    "\001\002\000\010\011\u021f\012\u0220\112\uff07\001\002\000" +
    "\012\007\u0219\055\u021c\056\u021b\057\u021d\001\002\000\012" +
    "\007\u0219\055\u021c\056\u021b\057\u021d\001\002\000\016\011" +
    "\uff05\012\uff05\013\u0223\014\u0224\015\u0222\112\uff05\001\002" +
    "\000\012\007\u0219\055\u021c\056\u021b\057\u021d\001\002\000" +
    "\012\007\u0219\055\u021c\056\u021b\057\u021d\001\002\000\012" +
    "\007\u0219\055\u021c\056\u021b\057\u021d\001\002\000\016\011" +
    "\uff02\012\uff02\013\uff02\014\uff02\015\uff02\112\uff02\001\002" +
    "\000\016\011\uff03\012\uff03\013\uff03\014\uff03\015\uff03\112" +
    "\uff03\001\002\000\016\011\uff01\012\uff01\013\uff01\014\uff01" +
    "\015\uff01\112\uff01\001\002\000\016\011\uff06\012\uff06\013" +
    "\u0223\014\u0224\015\u0222\112\uff06\001\002\000\010\010\u022a" +
    "\011\153\012\154\001\002\000\016\011\ufefc\012\ufefc\013" +
    "\ufefc\014\ufefc\015\ufefc\112\ufefc\001\002\000\004\112\u0322" +
    "\001\002\000\014\003\u027d\021\040\022\041\023\037\105" +
    "\u027c\001\002\000\004\054\u0230\001\002\000\004\112\u022f" +
    "\001\002\000\012\021\uff09\022\uff09\023\uff09\125\uff09\001" +
    "\002\000\012\006\u025e\020\ufec0\112\ufec0\126\u025d\001\002" +
    "\000\004\054\u0232\001\002\000\010\006\u0234\020\ufec0\112" +
    "\ufec0\001\002\000\006\020\u025b\112\ufec7\001\002\000\014" +
    "\007\u023c\054\u023d\055\u023e\056\u0237\057\u0235\001\002\000" +
    "\044\006\ufef3\010\ufef3\011\ufef3\012\ufef3\013\ufef3\014\ufef3" +
    "\015\ufef3\020\ufef3\024\ufef3\025\ufef3\042\ufef3\050\ufef3\051" +
    "\ufef3\052\ufef3\075\ufef3\112\ufef3\127\ufef3\001\002\000\044" +
    "\006\ufef5\010\ufef5\011\ufef5\012\ufef5\013\ufef5\014\ufef5\015" +
    "\ufef5\020\ufef5\024\ufef5\025\ufef5\042\ufef5\050\ufef5\051\ufef5" +
    "\052\ufef5\075\ufef5\112\ufef5\127\ufef5\001\002\000\044\006" +
    "\ufef4\010\ufef4\011\ufef4\012\ufef4\013\ufef4\014\ufef4\015\ufef4" +
    "\020\ufef4\024\ufef4\025\ufef4\042\ufef4\050\ufef4\051\ufef4\052" +
    "\ufef4\075\ufef4\112\ufef4\127\ufef4\001\002\000\044\006\ufeee" +
    "\010\ufeee\011\ufeee\012\ufeee\013\ufeee\014\ufeee\015\ufeee\020" +
    "\ufeee\024\ufeee\025\ufeee\042\ufeee\050\ufeee\051\ufeee\052\ufeee" +
    "\075\ufeee\112\ufeee\127\ufeee\001\002\000\012\011\u0244\012" +
    "\u0245\020\ufec1\112\ufec1\001\002\000\004\007\u0254\001\002" +
    "\000\044\006\ufef9\010\ufef9\011\ufef9\012\ufef9\013\u0248\014" +
    "\u0249\015\u0247\020\ufef9\024\ufef9\025\ufef9\042\ufef9\050\ufef9" +
    "\051\ufef9\052\ufef9\075\ufef9\112\ufef9\127\ufef9\001\002\000" +
    "\014\007\u023c\054\u023d\055\u023e\056\u0237\057\u0235\001\002" +
    "\000\052\006\ufef1\007\ufe93\010\ufef1\011\ufef1\012\ufef1\013" +
    "\ufef1\014\ufef1\015\ufef1\016\u023f\020\ufef1\024\ufef1\025\ufef1" +
    "\042\ufef1\050\ufef1\051\ufef1\052\ufef1\075\ufef1\112\ufef1\126" +
    "\u0241\127\ufef1\001\002\000\044\006\ufef2\010\ufef2\011\ufef2" +
    "\012\ufef2\013\ufef2\014\ufef2\015\ufef2\020\ufef2\024\ufef2\025" +
    "\ufef2\042\ufef2\050\ufef2\051\ufef2\052\ufef2\075\ufef2\112\ufef2" +
    "\127\ufef2\001\002\000\004\054\u0251\001\002\000\046\006" +
    "\ufeef\010\ufeef\011\ufeef\012\ufeef\013\ufeef\014\ufeef\015\ufeef" +
    "\020\ufeef\024\ufeef\025\ufeef\042\ufeef\050\ufeef\051\ufeef\052" +
    "\ufeef\075\ufeef\112\ufeef\126\u024e\127\ufeef\001\002\000\014" +
    "\007\u023c\054\u023d\055\u023e\056\u0237\057\u0235\001\002\000" +
    "\010\011\u0244\012\u0245\127\u0243\001\002\000\050\006\ufeec" +
    "\010\ufeec\011\ufeec\012\ufeec\013\ufeec\014\ufeec\015\ufeec\020" +
    "\ufeec\024\ufeec\025\ufeec\042\ufeec\050\ufeec\051\ufeec\052\ufeec" +
    "\075\ufeec\112\ufeec\115\ufeec\126\ufeec\127\ufeec\001\002\000" +
    "\014\007\u023c\054\u023d\055\u023e\056\u0237\057\u0235\001\002" +
    "\000\014\007\u023c\054\u023d\055\u023e\056\u0237\057\u0235\001" +
    "\002\000\044\006\ufefa\010\ufefa\011\ufefa\012\ufefa\013\u0248" +
    "\014\u0249\015\u0247\020\ufefa\024\ufefa\025\ufefa\042\ufefa\050" +
    "\ufefa\051\ufefa\052\ufefa\075\ufefa\112\ufefa\127\ufefa\001\002" +
    "\000\014\007\u023c\054\u023d\055\u023e\056\u0237\057\u0235\001" +
    "\002\000\014\007\u023c\054\u023d\055\u023e\056\u0237\057\u0235" +
    "\001\002\000\014\007\u023c\054\u023d\055\u023e\056\u0237\057" +
    "\u0235\001\002\000\044\006\ufef7\010\ufef7\011\ufef7\012\ufef7" +
    "\013\ufef7\014\ufef7\015\ufef7\020\ufef7\024\ufef7\025\ufef7\042" +
    "\ufef7\050\ufef7\051\ufef7\052\ufef7\075\ufef7\112\ufef7\127\ufef7" +
    "\001\002\000\044\006\ufef8\010\ufef8\011\ufef8\012\ufef8\013" +
    "\ufef8\014\ufef8\015\ufef8\020\ufef8\024\ufef8\025\ufef8\042\ufef8" +
    "\050\ufef8\051\ufef8\052\ufef8\075\ufef8\112\ufef8\127\ufef8\001" +
    "\002\000\044\006\ufef6\010\ufef6\011\ufef6\012\ufef6\013\ufef6" +
    "\014\ufef6\015\ufef6\020\ufef6\024\ufef6\025\ufef6\042\ufef6\050" +
    "\ufef6\051\ufef6\052\ufef6\075\ufef6\112\ufef6\127\ufef6\001\002" +
    "\000\044\006\ufefb\010\ufefb\011\ufefb\012\ufefb\013\u0248\014" +
    "\u0249\015\u0247\020\ufefb\024\ufefb\025\ufefb\042\ufefb\050\ufefb" +
    "\051\ufefb\052\ufefb\075\ufefb\112\ufefb\127\ufefb\001\002\000" +
    "\014\007\u023c\054\u023d\055\u023e\056\u0237\057\u0235\001\002" +
    "\000\010\011\u0244\012\u0245\127\u0250\001\002\000\050\006" +
    "\ufeed\010\ufeed\011\ufeed\012\ufeed\013\ufeed\014\ufeed\015\ufeed" +
    "\020\ufeed\024\ufeed\025\ufeed\042\ufeed\050\ufeed\051\ufeed\052" +
    "\ufeed\075\ufeed\112\ufeed\115\ufeed\126\ufeed\127\ufeed\001\002" +
    "\000\004\007\ufe94\001\002\000\010\010\u0253\011\u0244\012" +
    "\u0245\001\002\000\044\006\ufef0\010\ufef0\011\ufef0\012\ufef0" +
    "\013\ufef0\014\ufef0\015\ufef0\020\ufef0\024\ufef0\025\ufef0\042" +
    "\ufef0\050\ufef0\051\ufef0\052\ufef0\075\ufef0\112\ufef0\127\ufef0" +
    "\001\002\000\016\007\u023c\010\u0257\054\u023d\055\u023e\056" +
    "\u0237\057\u0235\001\002\000\006\010\u0259\020\u0258\001\002" +
    "\000\012\010\ufe91\011\u0244\012\u0245\020\ufe91\001\002\000" +
    "\044\006\ufe95\010\ufe95\011\ufe95\012\ufe95\013\ufe95\014\ufe95" +
    "\015\ufe95\020\ufe95\024\ufe95\025\ufe95\042\ufe95\050\ufe95\051" +
    "\ufe95\052\ufe95\075\ufe95\112\ufe95\127\ufe95\001\002\000\014" +
    "\007\u023c\054\u023d\055\u023e\056\u0237\057\u0235\001\002\000" +
    "\044\006\ufe96\010\ufe96\011\ufe96\012\ufe96\013\ufe96\014\ufe96" +
    "\015\ufe96\020\ufe96\024\ufe96\025\ufe96\042\ufe96\050\ufe96\051" +
    "\ufe96\052\ufe96\075\ufe96\112\ufe96\127\ufe96\001\002\000\012" +
    "\010\ufe92\011\u0244\012\u0245\020\ufe92\001\002\000\004\054" +
    "\ufec3\001\002\000\006\020\u027b\112\ufec6\001\002\000\012" +
    "\007\u0262\054\u0261\055\u0267\056\u0263\001\002\000\016\007" +
    "\u023c\054\u023d\055\u023e\056\u0237\057\u0235\133\u0275\001\002" +
    "\000\006\112\ufec4\126\u0260\001\002\000\012\007\u0262\054" +
    "\u0261\055\u0267\056\u0263\001\002\000\016\011\ufede\012\ufede" +
    "\013\ufede\014\ufede\015\ufede\127\ufede\001\002\000\014\007" +
    "\135\054\133\055\141\056\136\057\142\001\002\000\016" +
    "\011\ufee0\012\ufee0\013\ufee0\014\ufee0\015\ufee0\127\ufee0\001" +
    "\002\000\010\011\u026f\012\u0270\127\u026e\001\002\000\016" +
    "\011\ufee1\012\ufee1\013\ufee1\014\ufee1\015\ufee1\127\ufee1\001" +
    "\002\000\016\011\ufee5\012\ufee5\013\u0269\014\u026a\015\u0268" +
    "\127\ufee5\001\002\000\016\011\ufedf\012\ufedf\013\ufedf\014" +
    "\ufedf\015\ufedf\127\ufedf\001\002\000\012\007\u0262\054\u0261" +
    "\055\u0267\056\u0263\001\002\000\012\007\u0262\054\u0261\055" +
    "\u0267\056\u0263\001\002\000\012\007\u0262\054\u0261\055\u0267" +
    "\056\u0263\001\002\000\016\011\ufee3\012\ufee3\013\ufee3\014" +
    "\ufee3\015\ufee3\127\ufee3\001\002\000\016\011\ufee4\012\ufee4" +
    "\013\ufee4\014\ufee4\015\ufee4\127\ufee4\001\002\000\016\011" +
    "\ufee2\012\ufee2\013\ufee2\014\ufee2\015\ufee2\127\ufee2\001\002" +
    "\000\006\112\ufee9\126\ufee9\001\002\000\012\007\u0262\054" +
    "\u0261\055\u0267\056\u0263\001\002\000\012\007\u0262\054\u0261" +
    "\055\u0267\056\u0263\001\002\000\016\011\ufee6\012\ufee6\013" +
    "\u0269\014\u026a\015\u0268\127\ufee6\001\002\000\016\011\ufee7" +
    "\012\ufee7\013\u0269\014\u026a\015\u0268\127\ufee7\001\002\000" +
    "\010\010\u0274\011\153\012\154\001\002\000\016\011\ufedd" +
    "\012\ufedd\013\ufedd\014\ufedd\015\ufedd\127\ufedd\001\002\000" +
    "\004\007\u0277\001\002\000\004\112\ufec5\001\002\000\004" +
    "\010\u0278\001\002\000\004\112\ufe98\001\002\000\010\011" +
    "\u026f\012\u0270\127\u027a\001\002\000\006\112\ufee8\126\ufee8" +
    "\001\002\000\004\054\ufec2\001\002\000\004\135\u031f\001" +
    "\002\000\004\002\ufed6\001\002\000\004\002\uff0d\001\002" +
    "\000\004\112\u031e\001\002\000\004\113\u0281\001\002\000" +
    "\036\003\u0296\021\040\022\041\023\037\033\065\034\u0286" +
    "\035\117\040\u028f\045\u028d\054\u0292\131\u0290\132\u0294\133" +
    "\u0275\134\u0282\001\002\000\004\007\u0318\001\002\000\004" +
    "\007\u030e\001\002\000\004\114\u030d\001\002\000\004\113" +
    "\u02f5\001\002\000\004\007\u02f2\001\002\000\042\003\ufed2" +
    "\021\ufed2\022\ufed2\023\ufed2\033\ufed2\034\ufed2\035\ufed2\040" +
    "\ufed2\045\ufed2\054\ufed2\111\ufed2\114\ufed2\131\ufed2\132\ufed2" +
    "\133\ufed2\134\ufed2\001\002\000\042\003\u0296\021\040\022" +
    "\041\023\037\033\065\034\u0286\035\117\040\u028f\045\u028d" +
    "\054\u0292\111\ufed4\114\ufed4\131\u0290\132\u0294\133\u0275\134" +
    "\u0282\001\002\000\004\112\u02f0\001\002\000\004\113\u02ed" +
    "\001\002\000\022\007\u02a7\026\u02a8\036\u02a4\037\u02a6\054" +
    "\u023d\055\u023e\056\u0237\057\u0235\001\002\000\004\112\u02e5" +
    "\001\002\000\004\007\u02e2\001\002\000\004\112\u02e1\001" +
    "\002\000\004\007\u02de\001\002\000\004\007\u02d6\001\002" +
    "\000\004\113\u02c4\001\002\000\012\006\u02bf\007\ufe93\016" +
    "\u023f\126\u0241\001\002\000\004\112\u02bd\001\002\000\004" +
    "\007\u02bb\001\002\000\042\003\ufece\021\ufece\022\ufece\023" +
    "\ufece\033\ufece\034\ufece\035\ufece\040\ufece\045\ufece\054\ufece" +
    "\111\ufece\114\ufece\131\ufece\132\ufece\133\ufece\134\ufece\001" +
    "\002\000\042\003\ufec9\021\ufec9\022\ufec9\023\ufec9\033\ufec9" +
    "\034\ufec9\035\ufec9\040\ufec9\045\ufec9\054\ufec9\111\ufec9\114" +
    "\ufec9\131\ufec9\132\ufec9\133\ufec9\134\ufec9\001\002\000\042" +
    "\003\ufecf\021\ufecf\022\ufecf\023\ufecf\033\ufecf\034\ufecf\035" +
    "\ufecf\040\ufecf\045\ufecf\054\ufecf\111\ufecf\114\ufecf\131\ufecf" +
    "\132\ufecf\133\ufecf\134\ufecf\001\002\000\004\112\u02ba\001" +
    "\002\000\004\113\u02b7\001\002\000\004\112\u02b6\001\002" +
    "\000\004\113\u029c\001\002\000\036\003\u0296\021\040\022" +
    "\041\023\037\033\065\034\u0286\035\117\040\u028f\045\u028d" +
    "\054\u0292\131\u0290\132\u0294\133\u0275\134\u0282\001\002\000" +
    "\004\114\u029e\001\002\000\004\034\u029f\001\002\000\004" +
    "\007\u02a0\001\002\000\022\007\u02a7\026\u02a8\036\u02a4\037" +
    "\u02a6\054\u023d\055\u023e\056\u0237\057\u0235\001\002\000\012" +
    "\010\ufe8c\024\ufe8c\025\ufe8c\112\ufe8c\001\002\000\012\010" +
    "\ufe8e\024\ufe8e\025\u02b2\112\ufe8e\001\002\000\006\010\u02b4" +
    "\024\u02b0\001\002\000\012\010\ufe89\024\ufe89\025\ufe89\112" +
    "\ufe89\001\002\000\022\006\211\011\u0244\012\u0245\042\215" +
    "\050\212\051\214\052\210\075\216\001\002\000\012\010" +
    "\ufe88\024\ufe88\025\ufe88\112\ufe88\001\002\000\022\007\u02a7" +
    "\026\u02a8\036\u02a4\037\u02a6\054\u023d\055\u023e\056\u0237\057" +
    "\u0235\001\002\000\020\007\u02a7\036\u02a4\037\u02a6\054\u023d" +
    "\055\u023e\056\u0237\057\u0235\001\002\000\012\010\ufe8a\024" +
    "\ufe8a\025\ufe8a\112\ufe8a\001\002\000\012\010\ufe8b\024\ufe8b" +
    "\025\ufe8b\112\ufe8b\001\002\000\006\010\u02af\024\u02b0\001" +
    "\002\000\024\006\211\010\u0253\011\u0244\012\u0245\042\215" +
    "\050\212\051\214\052\210\075\216\001\002\000\014\007" +
    "\u023c\054\u023d\055\u023e\056\u0237\057\u0235\001\002\000\016" +
    "\010\ufe87\011\u0244\012\u0245\024\ufe87\025\ufe87\112\ufe87\001" +
    "\002\000\012\010\ufe86\024\ufe86\025\ufe86\112\ufe86\001\002" +
    "\000\022\007\u02a7\026\u02a8\036\u02a4\037\u02a6\054\u023d\055" +
    "\u023e\056\u0237\057\u0235\001\002\000\012\010\ufe8f\024\ufe8f" +
    "\025\u02b2\112\ufe8f\001\002\000\022\007\u02a7\026\u02a8\036" +
    "\u02a4\037\u02a6\054\u023d\055\u023e\056\u0237\057\u0235\001\002" +
    "\000\012\010\ufe8d\024\ufe8d\025\ufe8d\112\ufe8d\001\002\000" +
    "\004\112\u02b5\001\002\000\042\003\ufea4\021\ufea4\022\ufea4" +
    "\023\ufea4\033\ufea4\034\ufea4\035\ufea4\040\ufea4\045\ufea4\054" +
    "\ufea4\111\ufea4\114\ufea4\131\ufea4\132\ufea4\133\ufea4\134\ufea4" +
    "\001\002\000\042\003\ufecb\021\ufecb\022\ufecb\023\ufecb\033" +
    "\ufecb\034\ufecb\035\ufecb\040\ufecb\045\ufecb\054\ufecb\111\ufecb" +
    "\114\ufecb\131\ufecb\132\ufecb\133\ufecb\134\ufecb\001\002\000" +
    "\036\003\u0296\021\040\022\041\023\037\033\065\034\u0286" +
    "\035\117\040\u028f\045\u028d\054\u0292\131\u0290\132\u0294\133" +
    "\u0275\134\u0282\001\002\000\004\114\u02b9\001\002\000\042" +
    "\003\ufea6\021\ufea6\022\ufea6\023\ufea6\033\ufea6\034\ufea6\035" +
    "\ufea6\040\ufea6\045\ufea6\054\ufea6\111\ufea6\114\ufea6\131\ufea6" +
    "\132\ufea6\133\ufea6\134\ufea6\001\002\000\042\003\ufecd\021" +
    "\ufecd\022\ufecd\023\ufecd\033\ufecd\034\ufecd\035\ufecd\040\ufecd" +
    "\045\ufecd\054\ufecd\111\ufecd\114\ufecd\131\ufecd\132\ufecd\133" +
    "\ufecd\134\ufecd\001\002\000\004\010\u02bc\001\002\000\004" +
    "\112\ufe9d\001\002\000\042\003\ufecc\021\ufecc\022\ufecc\023" +
    "\ufecc\033\ufecc\034\ufecc\035\ufecc\040\ufecc\045\ufecc\054\ufecc" +
    "\111\ufecc\114\ufecc\131\ufecc\132\ufecc\133\ufecc\134\ufecc\001" +
    "\002\000\006\006\u02c2\126\u024e\001\002\000\016\007\u023c" +
    "\054\u023d\055\u023e\056\u0237\057\u0235\133\u0275\001\002\000" +
    "\010\011\u0244\012\u0245\112\ufebf\001\002\000\004\112\ufebd" +
    "\001\002\000\014\007\u023c\054\u023d\055\u023e\056\u0237\057" +
    "\u0235\001\002\000\010\011\u0244\012\u0245\112\ufebe\001\002" +
    "\000\036\003\u0296\021\040\022\041\023\037\033\065\034" +
    "\u0286\035\117\040\u028f\045\u028d\054\u0292\131\u0290\132\u0294" +
    "\133\u0275\134\u0282\001\002\000\004\114\u02c6\001\002\000" +
    "\044\003\ufeb7\021\ufeb7\022\ufeb7\023\ufeb7\033\ufeb7\034\ufeb7" +
    "\035\ufeb7\040\ufeb7\041\u02c8\045\ufeb7\054\ufeb7\111\ufeb7\114" +
    "\ufeb7\131\ufeb7\132\ufeb7\133\ufeb7\134\ufeb7\001\002\000\004" +
    "\113\u02d3\001\002\000\006\040\u02cf\113\ufeb6\001\002\000" +
    "\042\003\ufebc\021\ufebc\022\ufebc\023\ufebc\033\ufebc\034\ufebc" +
    "\035\ufebc\040\ufebc\045\ufebc\054\ufebc\111\ufebc\114\ufebc\131" +
    "\ufebc\132\ufebc\133\ufebc\134\ufebc\001\002\000\004\113\u02cb" +
    "\001\002\000\036\003\u0296\021\040\022\041\023\037\033" +
    "\065\034\u0286\035\117\040\u028f\045\u028d\054\u0292\131\u0290" +
    "\132\u0294\133\u0275\134\u0282\001\002\000\004\114\u02cd\001" +
    "\002\000\044\003\ufeb7\021\ufeb7\022\ufeb7\023\ufeb7\033\ufeb7" +
    "\034\ufeb7\035\ufeb7\040\ufeb7\041\u02c8\045\ufeb7\054\ufeb7\111" +
    "\ufeb7\114\ufeb7\131\ufeb7\132\ufeb7\133\ufeb7\134\ufeb7\001\002" +
    "\000\042\003\ufeb8\021\ufeb8\022\ufeb8\023\ufeb8\033\ufeb8\034" +
    "\ufeb8\035\ufeb8\040\ufeb8\045\ufeb8\054\ufeb8\111\ufeb8\114\ufeb8" +
    "\131\ufeb8\132\ufeb8\133\ufeb8\134\ufeb8\001\002\000\004\007" +
    "\u02d0\001\002\000\022\007\u02a7\026\u02a8\036\u02a4\037\u02a6" +
    "\054\u023d\055\u023e\056\u0237\057\u0235\001\002\000\006\010" +
    "\u02d2\024\u02b0\001\002\000\004\113\ufeb5\001\002\000\036" +
    "\003\u0296\021\040\022\041\023\037\033\065\034\u0286\035" +
    "\117\040\u028f\045\u028d\054\u0292\131\u0290\132\u0294\133\u0275" +
    "\134\u0282\001\002\000\004\114\u02d5\001\002\000\042\003" +
    "\ufeb9\021\ufeb9\022\ufeb9\023\ufeb9\033\ufeb9\034\ufeb9\035\ufeb9" +
    "\040\ufeb9\045\ufeb9\054\ufeb9\111\ufeb9\114\ufeb9\131\ufeb9\132" +
    "\ufeb9\133\ufeb9\134\ufeb9\001\002\000\016\007\u023c\053\u02d8" +
    "\054\u023d\055\u023e\056\u0237\057\u0235\001\002\000\012\010" +
    "\ufe9a\011\u0244\012\u0245\020\ufe9a\001\002\000\006\010\ufe99" +
    "\020\ufe99\001\002\000\006\010\u02dc\020\u02db\001\002\000" +
    "\006\010\ufe9b\020\ufe9b\001\002\000\016\007\u023c\053\u02d8" +
    "\054\u023d\055\u023e\056\u0237\057\u0235\001\002\000\004\112" +
    "\ufe9e\001\002\000\006\010\ufe9c\020\ufe9c\001\002\000\022" +
    "\007\u02a7\026\u02a8\036\u02a4\037\u02a6\054\u023d\055\u023e\056" +
    "\u0237\057\u0235\001\002\000\006\010\u02e0\024\u02b0\001\002" +
    "\000\004\113\ufeba\001\002\000\042\003\ufed1\021\ufed1\022" +
    "\ufed1\023\ufed1\033\ufed1\034\ufed1\035\ufed1\040\ufed1\045\ufed1" +
    "\054\ufed1\111\ufed1\114\ufed1\131\ufed1\132\ufed1\133\ufed1\134" +
    "\ufed1\001\002\000\004\054\u02e3\001\002\000\004\010\u02e4" +
    "\001\002\000\004\113\ufeb4\001\002\000\042\003\ufeca\021" +
    "\ufeca\022\ufeca\023\ufeca\033\ufeca\034\ufeca\035\ufeca\040\ufeca" +
    "\045\ufeca\054\ufeca\111\ufeca\114\ufeca\131\ufeca\132\ufeca\133" +
    "\ufeca\134\ufeca\001\002\000\006\024\u02b0\112\u02e7\001\002" +
    "\000\004\054\u02e8\001\002\000\004\006\u02eb\001\002\000" +
    "\004\010\u02ea\001\002\000\004\113\ufea3\001\002\000\014" +
    "\007\u023c\054\u023d\055\u023e\056\u0237\057\u0235\001\002\000" +
    "\010\010\ufe9f\011\u0244\012\u0245\001\002\000\036\003\u0296" +
    "\021\040\022\041\023\037\033\065\034\u0286\035\117\040" +
    "\u028f\045\u028d\054\u0292\131\u0290\132\u0294\133\u0275\134\u0282" +
    "\001\002\000\004\114\u02ef\001\002\000\042\003\ufea5\021" +
    "\ufea5\022\ufea5\023\ufea5\033\ufea5\034\ufea5\035\ufea5\040\ufea5" +
    "\045\ufea5\054\ufea5\111\ufea5\114\ufea5\131\ufea5\132\ufea5\133" +
    "\ufea5\134\ufea5\001\002\000\042\003\ufed0\021\ufed0\022\ufed0" +
    "\023\ufed0\033\ufed0\034\ufed0\035\ufed0\040\ufed0\045\ufed0\054" +
    "\ufed0\111\ufed0\114\ufed0\131\ufed0\132\ufed0\133\ufed0\134\ufed0" +
    "\001\002\000\042\003\ufed3\021\ufed3\022\ufed3\023\ufed3\033" +
    "\ufed3\034\ufed3\035\ufed3\040\ufed3\045\ufed3\054\ufed3\111\ufed3" +
    "\114\ufed3\131\ufed3\132\ufed3\133\ufed3\134\ufed3\001\002\000" +
    "\022\007\u02a7\026\u02a8\036\u02a4\037\u02a6\054\u023d\055\u023e" +
    "\056\u0237\057\u0235\001\002\000\006\010\u02f4\024\u02b0\001" +
    "\002\000\004\113\ufea0\001\002\000\004\047\u02fa\001\002" +
    "\000\004\114\u030c\001\002\000\010\046\ufeaf\047\ufeaf\114" +
    "\ufeb1\001\002\000\006\046\u016a\047\u02fa\001\002\000\004" +
    "\115\u0302\001\002\000\012\054\u02fb\055\u02ff\056\u02fe\057" +
    "\u0300\001\002\000\006\115\ufea8\126\u0241\001\002\000\004" +
    "\115\ufea7\001\002\000\004\115\ufead\001\002\000\004\115" +
    "\ufeab\001\002\000\004\115\ufea9\001\002\000\004\115\ufeaa" +
    "\001\002\000\006\115\ufe90\126\u024e\001\002\000\036\003" +
    "\u0296\021\040\022\041\023\037\033\065\034\u0286\035\117" +
    "\040\u028f\045\u028d\054\u0292\131\u0290\132\u0294\133\u0275\134" +
    "\u0282\001\002\000\004\111\u0304\001\002\000\004\112\u0305" +
    "\001\002\000\010\046\ufeae\047\ufeae\114\ufeae\001\002\000" +
    "\004\115\u0308\001\002\000\010\046\ufeb0\047\ufeb0\114\ufeb3" +
    "\001\002\000\036\003\u0296\021\040\022\041\023\037\033" +
    "\065\034\u0286\035\117\040\u028f\045\u028d\054\u0292\131\u0290" +
    "\132\u0294\133\u0275\134\u0282\001\002\000\004\111\u030a\001" +
    "\002\000\004\112\u030b\001\002\000\004\114\ufeb2\001\002" +
    "\000\042\003\ufebb\021\ufebb\022\ufebb\023\ufebb\033\ufebb\034" +
    "\ufebb\035\ufebb\040\ufebb\045\ufebb\054\ufebb\111\ufebb\114\ufebb" +
    "\131\ufebb\132\ufebb\133\ufebb\134\ufebb\001\002\000\004\002" +
    "\ufed7\001\002\000\012\021\040\022\041\023\037\054\u030f" +
    "\001\002\000\004\006\u0315\001\002\000\004\054\u0311\001" +
    "\002\000\004\006\u0312\001\002\000\014\007\u023c\054\u023d" +
    "\055\u023e\056\u0237\057\u0235\001\002\000\010\011\u0244\012" +
    "\u0245\112\u0314\001\002\000\022\007\ufea2\026\ufea2\036\ufea2" +
    "\037\ufea2\054\ufea2\055\ufea2\056\ufea2\057\ufea2\001\002\000" +
    "\014\007\u023c\054\u023d\055\u023e\056\u0237\057\u0235\001\002" +
    "\000\010\011\u0244\012\u0245\112\u0317\001\002\000\022\007" +
    "\ufea1\026\ufea1\036\ufea1\037\ufea1\054\ufea1\055\ufea1\056\ufea1" +
    "\057\ufea1\001\002\000\004\053\u0319\001\002\000\004\020" +
    "\u031a\001\002\000\004\017\u031b\001\002\000\004\054\u031c" +
    "\001\002\000\004\010\u031d\001\002\000\004\112\ufec8\001" +
    "\002\000\014\003\ufeeb\021\ufeeb\022\ufeeb\023\ufeeb\105\ufeeb" +
    "\001\002\000\004\007\u0320\001\002\000\004\010\u0321\001" +
    "\002\000\004\113\ufed5\001\002\000\014\003\ufeea\021\ufeea" +
    "\022\ufeea\023\ufeea\105\ufeea\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0320\000\010\002\006\003\004\012\005\001\001\000" +
    "\002\001\001\000\006\004\356\017\360\001\001\000\004" +
    "\006\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\016\017\021\015\022\016\024\013\025\012\026\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\031\353\032\060\033\067\034\070\035\063" +
    "\041\054\042\056\043\106\044\065\045\077\052\104\053" +
    "\113\061\066\062\062\063\055\067\074\070\057\071\053" +
    "\072\061\077\105\100\102\263\111\001\001\000\002\001" +
    "\001\000\056\031\103\032\060\033\067\034\070\035\063" +
    "\041\054\042\056\043\106\044\065\045\077\052\104\053" +
    "\113\061\066\062\062\063\055\067\074\070\057\071\053" +
    "\072\061\077\105\100\102\263\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\023\027\027\025\030\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\023\027\027\051" +
    "\030\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\031" +
    "\336\032\060\033\067\034\070\035\063\041\054\042\056" +
    "\043\106\044\065\045\077\052\104\053\113\061\066\062" +
    "\062\063\055\067\074\070\057\071\053\072\061\077\105" +
    "\100\102\263\111\001\001\000\056\031\332\032\060\033" +
    "\067\034\070\035\063\041\054\042\056\043\106\044\065" +
    "\045\077\052\104\053\113\061\066\062\062\063\055\067" +
    "\074\070\057\071\053\072\061\077\105\100\102\263\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\033\317" +
    "\035\063\041\054\042\056\043\106\044\065\045\077\052" +
    "\104\053\113\061\066\062\062\063\055\067\074\070\057" +
    "\071\053\072\061\077\105\100\102\263\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\047\200\050\137\051\136\054\264\055" +
    "\203\056\202\057\173\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\047\251\050\137\051\136\001\001\000" +
    "\002\001\001\000\006\101\234\102\233\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\031" +
    "\227\032\060\033\067\034\070\035\063\041\054\042\056" +
    "\043\106\044\065\045\077\052\104\053\113\061\066\062" +
    "\062\063\055\067\074\070\057\071\053\072\061\077\105" +
    "\100\102\263\111\001\001\000\002\001\001\000\020\047" +
    "\200\050\137\051\136\054\174\055\203\056\202\057\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\031" +
    "\165\032\060\033\067\034\070\035\063\041\054\042\056" +
    "\043\106\044\065\045\077\052\104\053\113\061\066\062" +
    "\062\063\055\067\074\070\057\071\053\072\061\077\105" +
    "\100\102\263\111\001\001\000\004\064\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\066\157\001\001\000\002\001\001\000" +
    "\004\066\126\001\001\000\010\047\133\050\137\051\136" +
    "\001\001\000\004\015\130\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\066\131\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\047\150\050" +
    "\137\051\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\051\147\001\001\000\004\051\146\001\001\000\004" +
    "\051\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\050\155\051\136\001\001\000\006\050\154\051\136\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\066" +
    "\163\001\001\000\012\047\133\050\137\051\136\263\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\047\220\050\137\051\136\054\217\055\203\056\202\057" +
    "\173\001\001\000\004\060\212\001\001\000\012\047\200" +
    "\050\137\051\136\057\206\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\047\200\050\137\051\136\056\205" +
    "\057\173\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\051\216\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\060\212\001\001\000\002\001\001\000\016\047\200\050" +
    "\137\051\136\055\223\056\202\057\173\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\031\250\032\060\033\067\034" +
    "\070\035\063\041\054\042\056\043\106\044\065\045\077" +
    "\052\104\053\113\061\066\062\062\063\055\067\074\070" +
    "\057\071\053\072\061\077\105\100\102\263\111\001\001" +
    "\000\004\102\244\001\001\000\004\103\237\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\031" +
    "\247\032\060\033\067\034\070\035\063\041\054\042\056" +
    "\043\106\044\065\045\077\052\104\053\113\061\066\062" +
    "\062\063\055\067\074\070\057\071\053\072\061\077\105" +
    "\100\102\263\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\047\260\050\137\051\136\001" +
    "\001\000\004\015\255\001\001\000\002\001\001\000\010" +
    "\047\257\050\137\051\136\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\047\263\050\137\051\136\263\262" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\076" +
    "\265\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\036" +
    "\275\037\273\047\276\050\137\051\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\037\301\047\276\050\137" +
    "\051\136\001\001\000\002\001\001\000\014\036\303\037" +
    "\273\047\276\050\137\051\136\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\047\320\050\137\051\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\047\322\050\137\051" +
    "\136\001\001\000\004\046\323\001\001\000\002\001\001" +
    "\000\004\103\325\001\001\000\002\001\001\000\004\103" +
    "\331\001\001\000\004\103\330\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\047\200\050\137\051\136\054\335\055\203\056\202" +
    "\057\173\001\001\000\002\001\001\000\010\073\341\074" +
    "\337\075\340\001\001\000\056\031\352\032\060\033\067" +
    "\034\070\035\063\041\054\042\056\043\106\044\065\045" +
    "\077\052\104\053\113\061\066\062\062\063\055\067\074" +
    "\070\057\071\053\072\061\077\105\100\102\263\111\001" +
    "\001\000\056\031\350\032\060\033\067\034\070\035\063" +
    "\041\054\042\056\043\106\044\065\045\077\052\104\053" +
    "\113\061\066\062\062\063\055\067\074\070\057\071\053" +
    "\072\061\077\105\100\102\263\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\047\200\050\137\051\136" +
    "\054\344\055\203\056\202\057\173\001\001\000\004\076" +
    "\345\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\073\351\074\337\075\340\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\u01a5\013\u01a6\001" +
    "\001\000\002\001\001\000\004\007\361\001\001\000\010" +
    "\016\364\104\362\105\363\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\111\370\130\371\001\001\000\002\001" +
    "\001\000\024\016\376\106\u0102\112\372\113\374\114\377" +
    "\115\373\116\u0103\136\375\155\u0100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\u0191\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\016\u011a\045\u0108\117\u011c\120\u0111\121\u0112\125" +
    "\u010c\126\u0116\131\u0114\132\u011b\133\u0118\135\u010d\136\u0109" +
    "\137\u0107\140\u0115\141\u011d\145\u010b\263\u0119\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\016\u011a\045" +
    "\u0108\125\u014b\126\u0116\131\u0114\132\u011b\133\u0118\135\u010d" +
    "\136\u0109\137\u0107\140\u0115\141\u011d\145\u010b\263\u0119\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\047\200\050\137\051\136\054\u013e\055\203\056\202" +
    "\057\173\001\001\000\002\001\001\000\004\015\u0134\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\016\u011a\045\u0108\117\u011f\120\u0111\121\u0112\125" +
    "\u010c\126\u0116\131\u0114\132\u011b\133\u0118\135\u010d\136\u0109" +
    "\137\u0107\140\u0115\141\u011d\145\u010b\263\u0119\001\001\000" +
    "\002\001\001\000\010\142\u0124\143\u0123\144\u0121\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\016\u011a\045\u0108\125\u0126\126\u0116" +
    "\131\u0114\132\u011b\133\u0118\135\u010d\136\u0109\137\u0107\140" +
    "\u0115\141\u011d\145\u010b\263\u0119\001\001\000\002\001\001" +
    "\000\010\142\u0128\143\u0123\144\u0121\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\047\200\050\137\051\136" +
    "\054\u012b\055\203\056\202\057\173\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\016\u011a\045\u0108\117\u012e" +
    "\120\u0111\121\u0112\125\u010c\126\u0116\131\u0114\132\u011b\133" +
    "\u0118\135\u010d\136\u0109\137\u0107\140\u0115\141\u011d\145\u010b" +
    "\263\u0119\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\016\u011a\045\u0108\117\u0132\120\u0111" +
    "\121\u0112\125\u010c\126\u0116\131\u0114\132\u011b\133\u0118\135" +
    "\u010d\136\u0109\137\u0107\140\u0115\141\u011d\145\u010b\263\u0119" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\065" +
    "\u0136\001\001\000\004\066\u013b\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\066\u0139\001\001\000\002\001" +
    "\001\000\012\047\133\050\137\051\136\263\u013c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\134\u0140\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\047\u0143\050\137\051\136\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\016\u011a\045\u0108\117\u0147\120\u0111\121\u0112\125" +
    "\u010c\126\u0116\131\u0114\132\u011b\133\u0118\135\u010d\136\u0109" +
    "\137\u0107\140\u0115\141\u011d\145\u010b\263\u0119\001\001\000" +
    "\002\001\001\000\020\047\200\050\137\051\136\054\u0149" +
    "\055\203\056\202\057\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\047\u014d\050\137" +
    "\051\136\001\001\000\002\001\001\000\012\047\u0150\050" +
    "\137\051\136\263\u014f\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\047\200\050\137\051\136\054\u0152\055" +
    "\203\056\202\057\173\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\123\u0158\124\u0156\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\124\u015e\001\001\000\002\001\001" +
    "\000\044\016\u011a\045\u0108\117\u0160\120\u0111\121\u0112\125" +
    "\u010c\126\u0116\131\u0114\132\u011b\133\u0118\135\u010d\136\u0109" +
    "\137\u0107\140\u0115\141\u011d\145\u010b\263\u0119\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\146\u0167\147\u0163" +
    "\150\u0166\151\u0165\001\001\000\002\001\001\000\004\124" +
    "\u0171\001\001\000\002\001\001\000\010\147\u0163\151\u016b" +
    "\240\u016a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\016\u011a\045\u0108\117\u016d\120\u0111\121\u0112\125\u010c\126" +
    "\u0116\131\u0114\132\u011b\133\u0118\135\u010d\136\u0109\137\u0107" +
    "\140\u0115\141\u011d\145\u010b\263\u0119\001\001\000\004\152" +
    "\u016e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\016\u011a\045\u0108\117" +
    "\u0173\120\u0111\121\u0112\125\u010c\126\u0116\131\u0114\132\u011b" +
    "\133\u0118\135\u010d\136\u0109\137\u0107\140\u0115\141\u011d\145" +
    "\u010b\263\u0119\001\001\000\004\152\u0174\001\001\000\002" +
    "\001\001\000\020\047\200\050\137\051\136\054\u0176\055" +
    "\203\056\202\057\173\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\u017b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\047\u017e\050\137\051\136\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\047\u0181\050\137\051\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\123\u0185\124\u0156\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\016\u011a\045\u0108\117\u018b\120\u0111\121\u0112" +
    "\125\u010c\126\u0116\131\u0114\132\u011b\133\u0118\135\u010d\136" +
    "\u0109\137\u0107\140\u0115\141\u011d\145\u010b\263\u0119\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\016\u011a\045" +
    "\u0108\117\u018e\120\u0111\121\u0112\125\u010c\126\u0116\131\u0114" +
    "\132\u011b\133\u0118\135\u010d\136\u0109\137\u0107\140\u0115\141" +
    "\u011d\145\u010b\263\u0119\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\065\u0136\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\u0195\107\u0196" +
    "\110\u0197\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\u019a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\066\u013b\001\001\000\010\015\u0195\107\u019f\110\u0197" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\u0195\107\u01a2\110\u0197\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\u0202\020\u0204\001" +
    "\001\000\004\010\u01a8\001\001\000\002\001\001\000\006" +
    "\156\u01ab\160\u01ac\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\157\u01af" +
    "\163\u01b0\164\u01ae\001\001\000\036\165\u01be\166\u01b5\170" +
    "\u01c5\171\u01b2\172\u01bd\173\u01bc\174\u01b3\175\u01b7\176\u01b4" +
    "\177\u01c3\200\u01c6\201\u01bf\202\u01b9\263\u01c2\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\047\200\050\137\051\136\054\u01ee\055\203" +
    "\056\202\057\173\001\001\000\002\001\001\000\010\047" +
    "\u01ed\050\137\051\136\001\001\000\002\001\001\000\020" +
    "\047\200\050\137\051\136\054\u01d9\055\203\056\202\057" +
    "\173\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\037\u01c8\047\276\050\137\051\136\167\u01c9\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\037\u01cc\047" +
    "\276\050\137\051\136\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\047\u01d1\050\137\051\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\157\u01af\163\u01d4\164" +
    "\u01ae\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\047\u01d8\050\137\051\136\263\u01d7\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\157\u01af\163\u01dc\164\u01ae\001\001\000\002\001" +
    "\001\000\010\203\u01e1\204\u01e2\205\u01e0\001\001\000\002" +
    "\001\001\000\020\047\200\050\137\051\136\054\u01ea\055" +
    "\203\056\202\057\173\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\157\u01af\163\u01e4\164" +
    "\u01ae\001\001\000\002\001\001\000\010\203\u01e6\204\u01e2" +
    "\205\u01e0\001\001\000\002\001\001\000\010\157\u01af\163" +
    "\u01e8\164\u01ae\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\157\u01af\163\u01f1\164\u01ae\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\047\u01f4\050\137\051\136\001\001" +
    "\000\002\001\001\000\004\103\u01f7\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\161\u01fd\162\u01fc\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\206\u0205\001\001\000\010" +
    "\213\u0206\214\u0208\222\u020a\001\001\000\012\015\u022c\214" +
    "\u022d\221\u022b\225\u022a\001\001\000\004\015\u0214\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\265\u020e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\276\u021d\277\u0219\300" +
    "\u0217\001\001\000\002\001\001\000\010\047\u0228\050\137" +
    "\051\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\277\u0227\300\u0217\001\001\000\006\277\u0220\300\u0217\001" +
    "\001\000\002\001\001\000\004\300\u0226\001\001\000\004" +
    "\300\u0225\001\001\000\004\300\u0224\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\015\u022c\207\u027d\210\u027f\225\u027e\001\001\000\004" +
    "\227\u0230\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\230\u025b\301\u025e\001\001\000\002\001\001\000\004" +
    "\230\u0232\001\001\000\002\001\001\000\014\247\u0238\250" +
    "\u023a\251\u0235\264\u0237\271\u0239\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\247\u0251\250\u023a\251\u0235\264\u0237\271\u0239\001\001\000" +
    "\004\215\u023f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\247\u0241\250\u023a\251\u0235\264" +
    "\u0237\271\u0239\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\250\u024c\251\u0235\264\u0237\271\u0239\001\001\000" +
    "\012\250\u0245\251\u0235\264\u0237\271\u0239\001\001\000\002" +
    "\001\001\000\010\251\u024b\264\u0237\271\u0239\001\001\000" +
    "\010\251\u024a\264\u0237\271\u0239\001\001\000\010\251\u0249" +
    "\264\u0237\271\u0239\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\247\u024e" +
    "\250\u023a\251\u0235\264\u0237\271\u0239\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\247\u0255\250\u023a\251\u0235\264" +
    "\u0237\266\u0254\271\u0239\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\247\u0259\250\u023a\251" +
    "\u0235\264\u0237\271\u0239\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\302" +
    "\u0278\303\u0265\304\u0264\001\001\000\016\247\u0238\250\u023a" +
    "\251\u0235\262\u0275\264\u0237\271\u0239\001\001\000\002\001" +
    "\001\000\010\302\u0263\303\u0265\304\u0264\001\001\000\002" +
    "\001\001\000\010\047\u0272\050\137\051\136\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\304\u026c\001\001\000" +
    "\004\304\u026b\001\001\000\004\304\u026a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\303\u0271\304\u0264\001\001\000\006\303\u0270" +
    "\304\u0264\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\015\u022c\045\u0282\062\u029a\127\u0299" +
    "\211\u0287\223\u0283\224\u0286\225\u028d\231\u0288\232\u0296\233" +
    "\u0290\237\u0284\246\u028a\253\u0294\254\u0298\255\u0289\257\u0297" +
    "\262\u0292\264\u028b\271\u0239\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\015\u022c\045\u0282\062" +
    "\u029a\127\u0299\224\u02f0\225\u028d\231\u0288\232\u0296\233\u0290" +
    "\237\u0284\246\u028a\253\u0294\254\u0298\255\u0289\257\u0297\262" +
    "\u0292\264\u028b\271\u0239\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\247\u02a4\250\u023a\251\u0235\264\u0237\270" +
    "\u02a8\271\u0239\272\u02e5\273\u02a1\274\u02a0\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\215\u02bd" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\015\u022c\045\u0282\062\u029a\127\u0299\211\u0287\223\u029c" +
    "\224\u0286\225\u028d\231\u0288\232\u0296\233\u0290\237\u0284\246" +
    "\u028a\253\u0294\254\u0298\255\u0289\257\u0297\262\u0292\264\u028b" +
    "\271\u0239\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\247\u02a4\250\u023a\251\u0235\264\u0237" +
    "\270\u02a8\271\u0239\272\u02a2\273\u02a1\274\u02a0\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\060\u02ac\001\001\000\002\001\001\000" +
    "\024\247\u02ab\250\u023a\251\u0235\264\u0237\270\u02a8\271\u0239" +
    "\272\u02aa\273\u02a1\274\u02a0\001\001\000\016\247\u02a4\250" +
    "\u023a\251\u0235\264\u0237\270\u02a9\271\u0239\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\060" +
    "\u02ac\001\001\000\014\247\u02ad\250\u023a\251\u0235\264\u0237" +
    "\271\u0239\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\247\u02a4\250\u023a\251\u0235\264\u0237\270\u02a8\271\u0239" +
    "\273\u02b0\274\u02a0\001\001\000\002\001\001\000\020\247" +
    "\u02a4\250\u023a\251\u0235\264\u0237\270\u02a8\271\u0239\274\u02b2" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\015\u022c\045\u0282\062\u029a" +
    "\127\u0299\211\u0287\223\u02b7\224\u0286\225\u028d\231\u0288\232" +
    "\u0296\233\u0290\237\u0284\246\u028a\253\u0294\254\u0298\255\u0289" +
    "\257\u0297\262\u0292\264\u028b\271\u0239\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\247\u02bf\250\u023a\251\u0235\262\u02c0\264\u0237\271\u0239" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\247" +
    "\u02c2\250\u023a\251\u0235\264\u0237\271\u0239\001\001\000\002" +
    "\001\001\000\052\015\u022c\045\u0282\062\u029a\127\u0299\211" +
    "\u0287\223\u02c4\224\u0286\225\u028d\231\u0288\232\u0296\233\u0290" +
    "\237\u0284\246\u028a\253\u0294\254\u0298\255\u0289\257\u0297\262" +
    "\u0292\264\u028b\271\u0239\001\001\000\002\001\001\000\010" +
    "\234\u02c8\235\u02c6\236\u02c9\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\015\u022c\045\u0282\062\u029a\127\u0299\211\u0287\223\u02cb\224" +
    "\u0286\225\u028d\231\u0288\232\u0296\233\u0290\237\u0284\246\u028a" +
    "\253\u0294\254\u0298\255\u0289\257\u0297\262\u0292\264\u028b\271" +
    "\u0239\001\001\000\002\001\001\000\010\234\u02cd\235\u02c6" +
    "\236\u02c9\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\247\u02a4\250\u023a\251\u0235\264\u0237\270\u02a8\271\u0239" +
    "\272\u02d0\273\u02a1\274\u02a0\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\015\u022c\045\u0282\062\u029a\127\u0299" +
    "\211\u0287\223\u02d3\224\u0286\225\u028d\231\u0288\232\u0296\233" +
    "\u0290\237\u0284\246\u028a\253\u0294\254\u0298\255\u0289\257\u0297" +
    "\262\u0292\264\u028b\271\u0239\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\247\u02d6\250\u023a\251\u0235\260\u02d8" +
    "\261\u02d9\264\u0237\271\u0239\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\247\u02d6\250\u023a\251\u0235\261\u02dc\264\u0237\271\u0239\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\247\u02a4" +
    "\250\u023a\251\u0235\264\u0237\270\u02a8\271\u0239\272\u02de\273" +
    "\u02a1\274\u02a0\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\245\u02e8\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\247\u02eb\250\u023a\251\u0235\264\u0237" +
    "\271\u0239\001\001\000\002\001\001\000\052\015\u022c\045" +
    "\u0282\062\u029a\127\u0299\211\u0287\223\u02ed\224\u0286\225\u028d" +
    "\231\u0288\232\u0296\233\u0290\237\u0284\246\u028a\253\u0294\254" +
    "\u0298\255\u0289\257\u0297\262\u0292\264\u028b\271\u0239\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\247\u02a4\250\u023a\251\u0235\264\u0237" +
    "\270\u02a8\271\u0239\272\u02f2\273\u02a1\274\u02a0\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\241\u02f8\242\u02f5" +
    "\243\u02f7\252\u02f6\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\240\u0305\241\u02f8\252\u0306\001\001\000\002" +
    "\001\001\000\006\244\u02fc\275\u02fb\001\001\000\004\215" +
    "\u0300\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\015\u022c\045\u0282\062\u029a\127\u0299\211\u0287" +
    "\223\u0302\224\u0286\225\u028d\231\u0288\232\u0296\233\u0290\237" +
    "\u0284\246\u028a\253\u0294\254\u0298\255\u0289\257\u0297\262\u0292" +
    "\264\u028b\271\u0239\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\015\u022c\045\u0282\062\u029a\127\u0299\211\u0287\223" +
    "\u0308\224\u0286\225\u028d\231\u0288\232\u0296\233\u0290\237\u0284" +
    "\246\u028a\253\u0294\254\u0298\255\u0289\257\u0297\262\u0292\264" +
    "\u028b\271\u0239\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\u030f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\247\u0312\250\u023a\251\u0235\264" +
    "\u0237\271\u0239\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\247\u0315\250\u023a\251\u0235\264\u0237\271\u0239\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SyntaxMlgAnalyzer$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SyntaxMlgAnalyzer$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SyntaxMlgAnalyzer$do_action(act_num, parser, stack, top,this);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    

public boolean SyntaxError;
    public boolean SyntaxRecoverableError;
    public TestManager testManager;
    public TranslateControlerTAC translateControlerTAC;
    public boolean error=false;
    public ResultQuads resultQuads;

    public boolean getError(){
        return error;
    }
    public ResultQuads getResultQuad(){
        return resultQuads;
    }
    public void setTestManager(TestManager testManager) {
        this.testManager = testManager;
        testManager.creatFatherAmbit();
    }

public void setTranslateControlerTAC(TranslateControlerTAC translateControlerTAC) {
        this.translateControlerTAC = translateControlerTAC;
                            
    }

     public void syntax_error(Symbol s){
        try {
            String lexema = s.value.toString();
            int fila = s.right;
            int columna = s.left;
            OutputErrors.syntacticRecovered(testManager.getMainFrame().getOutputPannel(), lexema, columna, fila, s);
        } catch (Exception e) {
            System.out.println("error");
            int fila = s.right;
            int columna = s.left;
            System.out.println("\t \tFila: " + fila + "\n");
            System.out.println("\t \tColumna: " + columna + "\n");
        }

    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        try{
            String lexema = s.value.toString();
            int fila = s.right;
            int columna = s.left;
        OutputErrors.syntacticNotRecovered(testManager.getMainFrame().getOutputPannel(), lexema, columna, fila, s);

        } catch (Exception ex) {
            
         }
    }

    public void syntaxerrorhelp(){


    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SyntaxMlgAnalyzer$actions {


public boolean error=false;
     protected void mostrarErrores(int numero, Symbol s,SyntaxMlgAnalyzer sma) {
         JTextPane text= sma.testManager.getMainFrame().getOutputPannel();
    switch (numero) {
                case 1:
                    OutputErrors.syntaxFunctionVB(text,s);
                    break;
                case 2:
                    
                    break;
                 case 3:
                    
                    break;
                case 4:
                    break;
                default:
                    throw new AssertionError();
            }
        

    }

  private final SyntaxMlgAnalyzer parser;

  /** Constructor */
  CUP$SyntaxMlgAnalyzer$actions(SyntaxMlgAnalyzer parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SyntaxMlgAnalyzer$do_action(
    int                        CUP$SyntaxMlgAnalyzer$act_num,
    java_cup.runtime.lr_parser CUP$SyntaxMlgAnalyzer$parser,
    java.util.Stack            CUP$SyntaxMlgAnalyzer$stack,
    int                        CUP$SyntaxMlgAnalyzer$top,SyntaxMlgAnalyzer sma)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SyntaxMlgAnalyzer$result;

      /* select the action based on the action number */
      switch (CUP$SyntaxMlgAnalyzer$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // BoolValueC ::= PARENTHESIS_A OpBoolC PARENTHESIS_B 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT=val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueC",182, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // BoolValueC ::= NumberValueC ExBoolVb NumberValueC 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int exValleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int exValright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object exVal = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateBoolType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdBoolQuadruple(s1.getQuadruple(),s2.getQuadruple(),(Integer)exVal);
                                                                    RESULT=sma.translateControlerTAC.getcurrentTempQuads();
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueC",182, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // BoolValueC ::= FALSE 
            {
              Object RESULT =null;
		 Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.BOOL_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL_BOOL,0,1,null);
		                    RESULT=sma.translateControlerTAC.getcurrentTempQuads();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueC",182, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // BoolValueC ::= TRUE 
            {
              Object RESULT =null;
		 Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.BOOL_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL_BOOL,1,1,null);
		                    RESULT=sma.translateControlerTAC.getcurrentTempQuads();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueC",182, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // OpBoolC3 ::= BoolValueC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(val!=null){
                   RESULT = sma.translateControlerTAC.getBoolQuadControl().convertQuadToBool(((ArrayList<Object>)val)); 
        }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBoolC3",186, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // OpBoolC3 ::= NOT BoolValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBoolC3",186, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // OpBoolC2 ::= OpBoolC3 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBoolC2",185, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // OpBoolC2 ::= OpBoolC2 AND OpBoolC3 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(val1!=null &&val2!=null){
                                            RESULT= sma.translateControlerTAC.getBoolQuadControl().operateBoolQuad(val1,val2,Operation.OP_AND);}
                                            
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBoolC2",185, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // OpBoolC ::= OpBoolC2 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBoolC",184, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // OpBoolC ::= OpBoolC OR OpBoolC2 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(val1!=null &&val2!=null){
                                            RESULT= sma.translateControlerTAC.getBoolQuadControl().operateBoolQuad(val1,val2,Operation.OP_OR);}
                                            
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBoolC",184, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // ArrayVal ::= ID Dimensions 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ArrayVal",187, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // ParametersC ::= NumberValueC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> params=new ArrayList<Object>();
                            if(val!=null){
                                SynthesizedOpAsst soa=(SynthesizedOpAsst)val;
                                //sma.translateControlerTAC.creatTempIdQuad(Operation.PARAMS,null,null,soa.getQuadruple().getResult());
                                params.add(soa.getQuadruple().getResult());
                            }
                            RESULT=params;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParametersC",180, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // ParametersC ::= ParametersC COMMA NumberValueC 
            {
              Object RESULT =null;
		int paramsCleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int paramsCright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object paramsC = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> params=new ArrayList<Object>();
                            if(paramsC!=null){params.addAll((ArrayList<Object>)paramsC);}
                                                        if(val!=null){
                                SynthesizedOpAsst soa=(SynthesizedOpAsst)val;
                                //sma.translateControlerTAC.creatTempIdQuad(Operation.PARAMS,null,null,soa.getQuadruple().getResult());
                                params.add(soa.getQuadruple().getResult());
                            }
                            RESULT=params;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParametersC",180, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // FuntionIDsCall ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT = id;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FuntionIDsCall",183, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // FuntionIDsCall ::= ID POINT ID 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=id1+"."+id2;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FuntionIDsCall",183, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // FuntionCall ::= FuntionIDsCall PARENTHESIS_A PARENTHESIS_B 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		
                                                                            SynthesizedOpAsst sao=sma.testManager.verifyFunction((String)ids,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
                                                                            if(sao!=null){
                                                                                RESULT =sao;
                                                                            }else{
                                                                                sma.translateControlerTAC.removeIdQuads();
                                                                            }
                                                                        
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FuntionCall",178, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // FuntionCall ::= FuntionIDsCall PARENTHESIS_A ParametersC PARENTHESIS_B 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int paraleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		if(para!=null){
                                                                            SynthesizedOpAsst sao=sma.testManager.verifyFunction((String)ids,(ArrayList<Object>)para,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
                                                                            if(sao!=null){
                                                                                RESULT= sao;
                                                                            }else{
                                                                                sma.translateControlerTAC.removeIdQuads();
                                                                            }
                                                                        }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FuntionCall",178, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // Input ::= SCAN_F PARENTHESIS_A STRING COMMA AMPERSON ID PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Input",177, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // Getch ::= GETCH PARENTHESIS_A PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Getch",176, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // OutputValueC ::= STRING 
            {
              Object RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.add(sma.translateControlerTAC.createPrintQuad(string));
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValueC",175, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // OutputValueC ::= NumberValueC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll(sma.translateControlerTAC.getcurrentTempQuads());
                                    printQuad.add(sma.translateControlerTAC.createPrintQuad(val));
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValueC",175, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // OutputValuesC ::= OutputValueC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll((ArrayList<Object>)val);
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValuesC",174, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // OutputValuesC ::= OutputValuesC COMMA OutputValueC 
            {
              Object RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll((ArrayList<Object>)vals);
                                    printQuad.addAll((ArrayList<Object>)val);
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValuesC",174, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // OutputC ::= CLRSCR PARENTHESIS_A PARENTHESIS_B 
            {
              Object RESULT =null;
		sma.translateControlerTAC.addClrScrToCurrent();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputC",173, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // OutputC ::= PRINTF PARENTHESIS_A OutputValuesC PARENTHESIS_B 
            {
              Object RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		 if(vals!=null){
                                                                                                sma.translateControlerTAC.addQuadsToCurrent((ArrayList<Object>)vals);
                                                                                                
                                                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputC",173, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // AssignmentStepC ::= ID EQUAL NumberValueC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                        RESULT=sma.translateControlerTAC.getcurrentTempQuads();}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentStepC",163, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // WhileCHeader ::= WHILE PARENTHESIS_A OpBoolC PARENTHESIS_B 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT=op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("WhileCHeader",171, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // ForCHeaderStart ::= For PARENTHESIS_A ID EQUAL NumberValueC SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		Type type=sma.testManager.getTypeFromST(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    if(type!=null){
                                                    if(sma.testManager.getTypeManager().isNumerico(type.getNumber())){
                                                        
                                                        boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                            RESULT=new SemanticAsstIdQuad(id, sma.translateControlerTAC.getcurrentTempQuads());
                                                        }
                                                    }else{
                                                        sma.testManager.callNumericError(id,type,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    }}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForCHeaderStart",164, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // ForCHeaderStart ::= For PARENTHESIS_A Type ID EQUAL NumberValueC SEMICOLON 
            {
              Object RESULT =null;
		int type1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int type1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object type1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		 boolean boolExistence= sma.testManager.checkExistence(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                if(boolExistence){

                                                    if(sma.testManager.getTypeManager().isNumerico((Integer)type1)){
                                                        sma.testManager.insertTuple(id,(Integer)type1,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                            RESULT=new SemanticAsstIdQuad(id, sma.translateControlerTAC.getcurrentTempQuads());
                                                        }
                                                    }else{
                                                        sma.testManager.callNumericError(id,sma.testManager.getTypeManager().getType((Integer)type1),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    }
                                                }
                                                
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForCHeaderStart",164, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // ForCHeader ::= ForCHeaderStart OpBoolC SEMICOLON AssignmentStepC PARENTHESIS_B 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int stepleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int stepright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object step = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		if (id!=null) {
                    BoolQuad boolQuad=(BoolQuad)op;
                    SemanticAsstIdQuad saiq= (SemanticAsstIdQuad)id;
                    
                    
                     For f=sma.translateControlerTAC.createForAsst(saiq.getQuads(),step,boolQuad );
                    RESULT=f;}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForCHeader",170, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // CycleC ::= DoHeader LEFT_CB MainCode RIGHT_CB WHILE PARENTHESIS_A OpBoolC PARENTHESIS_B SEMICOLON 
            {
              Object RESULT =null;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-6)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-6)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-6)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		if(op!=null){
                                                                                sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.creatDoWhile((ArrayList<Object>)lines,(BoolQuad)op));
                                                                                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleC",169, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-8)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // CycleC ::= WhileCHeader LEFT_CB MainCode RIGHT_CB 
            {
              Object RESULT =null;
		int whileBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int whileBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object whileBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		BoolQuad bool=(BoolQuad)whileBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.addGotoWhileTags(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool)));
                                                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleC",169, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // CycleC ::= ForCHeader LEFT_CB MainCode RIGHT_CB 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		if(f!=null){
                                                                For fo=(For)f;
                                                                fo.addCode((ArrayList<Object>)lines);
                                                                sma.translateControlerTAC.addQuadsToCurrent(fo.convertToQuad());
                                                                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleC",169, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // CaseValueC ::= ArrayVal 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseValueC",162, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // CaseValueC ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type=sma.testManager.getTypeFromST(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                            if(type!=null){
                                RESULT=id;
                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseValueC",162, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // CaseValueC ::= CHAR 
            {
              Object RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=ch;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseValueC",162, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // CaseValueC ::= DECIMAL 
            {
              Object RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=dec;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseValueC",162, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // CaseValueC ::= NUMBER 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=num;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseValueC",162, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // CaseElseCHeader ::= DEFAULT 
            {
              Object RESULT =null;
		RESULT=Switch.ELSE;
                    sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseElseCHeader",158, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // CaseCHeader ::= CASE CaseValueC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=val;
                                            sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseCHeader",159, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // CaseC ::= CaseCHeader COLON MainCode BREAK SEMICOLON 
            {
              Object RESULT =null;
		int caseHleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int caseHright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object caseH = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		UniquenessTable ut=sma.testManager.createNewUniquenessTable();
                                                                        if(caseH!=null){
                                                                            
                                                                            boolean verified =ut.add(caseH,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                            if(verified){
                                                                            
                                                                            sma.translateControlerTAC.getSwitchAsst().addCases((String)caseH,(ArrayList<Object>)lines);}
                                                                            }
                                                                        RESULT=ut;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseC",168, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // CasesC2 ::= CaseC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesC2",161, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // CasesC2 ::= CasesC2 CaseC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesC2",161, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // CasesC ::= CaseC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesC",160, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // CasesC ::= CasesC2 CaseElseCHeader COLON MainCode BREAK SEMICOLON 
            {
              Object RESULT =null;
		int caseHleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int caseHright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object caseH = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		UniquenessTable ut=sma.testManager.createNewUniquenessTable();
                                                                        if(caseH!=null){
                                                                            
                                                                            boolean verified =ut.add(caseH,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                            if(verified){
                                                                            
                                                                            sma.translateControlerTAC.getSwitchAsst().addCases((String)caseH,(ArrayList<Object>)lines);}
                                                                            }
                                                                        RESULT=ut;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesC",160, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // CasesC ::= CasesC2 CaseC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesC",160, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // SwitchCHeader ::= SWITCH PARENTHESIS_A ID PARENTHESIS_B 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.translateControlerTAC.createSwitchAsst(id);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("SwitchCHeader",157, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // ElseIfCHeader ::= ELSE IF PARENTHESIS_A OpBoolC PARENTHESIS_B 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT =op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseIfCHeader",156, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // ElseCHeader ::= ELSE 
            {
              Object RESULT =null;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseCHeader",155, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // ElseC ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseC",154, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // ElseC ::= ElseIfCHeader LEFT_CB MainCode RIGHT_CB ElseC 
            {
              Object RESULT =null;
		int ifBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int ifBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object ifBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int elseBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int elseBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object elseBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(ifBool!=null){
                                                                    BoolQuad bool=(BoolQuad)ifBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    if(elseBool!=null){bool.changeFatherNoBool((ArrayList<Object>)elseBool);}
                                                                                    RESULT =sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool);
                                                                                    
                                                                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseC",154, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // ElseC ::= ElseCHeader LEFT_CB MainCode RIGHT_CB 
            {
              Object RESULT =null;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT=lines;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseC",154, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // IfCHeader ::= IF PARENTHESIS_A OpBoolC PARENTHESIS_B 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT=op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IfCHeader",153, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // ConditionC ::= SwitchCHeader LEFT_CB CasesC RIGHT_CB 
            {
              Object RESULT =null;
		sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(sma.translateControlerTAC.getSwitchAsst().getFatherCases()));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionC",152, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // ConditionC ::= IfCHeader LEFT_CB MainCode RIGHT_CB ElseC 
            {
              Object RESULT =null;
		int ifBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int ifBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object ifBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int elseBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int elseBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object elseBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		BoolQuad bool=(BoolQuad)ifBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    if(elseBool!=null){bool.changeFatherNoBool((ArrayList<Object>)elseBool);}
                                                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool));
                                                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionC",152, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // AssignmentC ::= ID EQUAL Getch 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		Type type = sma.testManager.getTypeFromST(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                    if(type!=null){
                                        sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getch(id));}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentC",151, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // AssignmentC ::= ID Dimensions EQUAL NumberValueC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object dim = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(dim !=null&& val!=null){
                            SynthesizedOpAsst soa=sma.testManager.getArrayType(id,dim,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
                            boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,soa.getQuadruple().getResult());
                                                        sma.translateControlerTAC.acceptAllIdQuas();}}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentC",151, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // AssignmentC ::= ID EQUAL NumberValueC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                        sma.translateControlerTAC.acceptAllIdQuas();}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentC",151, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // AssiC ::= 
            {
              Object RESULT =null;
		System.out.println("ASSI VACIO");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssiC",150, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // AssiC ::= EQUAL NumberValueC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT =val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssiC",150, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // IdsC ::= ID AssiC COMMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.testManager.insertPreTuple(id,null,val,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        //if(val!=null){ 
                                                          //  sma.translateControlerTAC.createTempIdQuadAssign(val,id);}
                                                       
                                                        sma.translateControlerTAC.nextIdQuad();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IdsC",149, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // IdsC ::= IdsC ID AssiC COMMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.testManager.insertPreTuple(id,null,val,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        //if(val!=null){ 
                                                          //  sma.translateControlerTAC.createTempIdQuadAssign(val,id);}
                                                       
                                                        sma.translateControlerTAC.nextIdQuad();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IdsC",149, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // DeclarationC ::= Type ID DimensionsDec 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object dims = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(dims!=null&&!sma.testManager.checkExistence(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()))){

                        ArrayList<Object> dimensions=(ArrayList<Object>)dims;
                        sma.testManager.insertArray(id, (Integer) type, dimensions, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                        sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.createArrayQuads(id,dimensions));
                    }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationC",147, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // DeclarationC ::= Type ID EQUAL Getch 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		if(!sma.testManager.checkExistence(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()))){
                                                      
                                                      sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getch(id));     
                        }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationC",147, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // DeclarationC ::= Type ID AssiC 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		 sma.testManager.insertPreTuple(id,null,val, 0,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                    sma.testManager.insertPreTuplesToSymbolTable((Integer)type,0,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
                                   sma.translateControlerTAC.nextIdQuad(); 
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationC",147, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // DeclarationC ::= Type IdsC ID AssiC 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		 sma.testManager.insertPreTuple(id,null,val, 0,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                    sma.testManager.insertPreTuplesToSymbolTable((Integer)type,0,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
                                   sma.translateControlerTAC.nextIdQuad(); 
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationC",147, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // InputJ ::= SCAN_F PARENTHESIS_A STRING COMMA AMPERSON ID PARENTHESIS_B 
            {
              Object RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		 String split= sma.testManager.testInput(id, string, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                        if(split!=null){
                                                                                sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.createInputQuads(string,id,split));
                                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InputJ",85, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // MainLineCode ::= error 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",146, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // MainLineCode ::= FuntionCall SEMICOLON 
            {
              Object RESULT =null;
		sma.translateControlerTAC.acceptAllIdQuas();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",146, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // MainLineCode ::= InputJ SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",146, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // MainLineCode ::= Getch SEMICOLON 
            {
              Object RESULT =null;
		sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getch(null));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",146, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // MainLineCode ::= OutputC SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",146, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // MainLineCode ::= CycleC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",146, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // MainLineCode ::= ConditionC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",146, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // MainLineCode ::= AssignmentC SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",146, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // MainLineCode ::= DeclarationC SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",146, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // MainCode1 ::= MainLineCode 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainCode1",135, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // MainCode1 ::= MainCode1 MainLineCode 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainCode1",135, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // MainCode ::= MainCode1 
            {
              Object RESULT =null;
		RESULT=sma.translateControlerTAC.getcurrentQuads();
                                                    sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainCode",145, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // MainHeader ::= VOID_J MAIN PARENTHESIS_A PARENTHESIS_B 
            {
              Object RESULT =null;
		sma.testManager.creatSonAmbit();
                                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                                        String name =sma.testManager.insertFunction("main", null, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                RESULT= name;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainHeader",134, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // Main ::= error 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Main",133, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // Main ::= MainHeader LEFT_CB MainCode RIGHT_CB 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		ArrayList<Object>quad=new ArrayList<>();
                                                                        if(name!=null){
                                                                        quad=sma.translateControlerTAC.tagFunction((String)name,(ArrayList<Object>) lines);
                                                                         
                                                                          }
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    sma.translateControlerTAC.addQuadsToCurrent(quad);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Main",133, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // FuntionIDs ::= ID POINT MULTIPLICATION 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		sma.testManager.include(id1,"*",((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FuntionIDs",179, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // FuntionIDs ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.include(id,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FuntionIDs",179, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // FuntionIDs ::= ID POINT ID 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.include(id1,id2,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FuntionIDs",179, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // Include ::= INCLUDE LESS_THAN FuntionIDs GREATER_THAN 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Include",144, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // Include ::= INCLUDE STRING 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.include(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Include",144, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // NumDecC3 ::= PARENTHESIS_A NumberValue PARENTHESIS_B 
            {
              Object RESULT =null;
		int asstleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int asstright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object asst = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT=asst;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumDecC3",194, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // NumDecC3 ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=sma.testManager.getConstValue(val, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumDecC3",194, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // NumDecC3 ::= CHAR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		char charVal=val.charAt(1);
                 RESULT=(int)charVal;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumDecC3",194, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // NumDecC3 ::= NUMBER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		 RESULT=Integer.valueOf(val);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumDecC3",194, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // NumDecC2 ::= NumDecC3 
            {
              Object RESULT =null;
		int asstleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int asstright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object asst = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=asst;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumDecC2",193, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // NumDecC2 ::= NumDecC2 MOD NumDecC3 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                                    RESULT=(Integer)num1%(Integer)num2;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumDecC2",193, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // NumDecC2 ::= NumDecC2 DIVISION NumDecC3 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){
                                                            RESULT=(Integer)num1/(Integer)num2;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumDecC2",193, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // NumDecC2 ::= NumDecC2 MULTIPLICATION NumDecC3 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){
                                                                RESULT=(Integer)num1*(Integer)num2;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumDecC2",193, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // NumDecC ::= NumDecC2 
            {
              Object RESULT =null;
		int asstleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int asstright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object asst = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=asst;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumDecC",192, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // NumDecC ::= NumDecC MINUS NumDecC2 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){
                                                                RESULT=(Integer)num1-(Integer)num2;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumDecC",192, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // NumDecC ::= NumDecC PLUS NumDecC2 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               RESULT=(Integer)num1+(Integer)num2;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumDecC",192, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // DimensionsDec ::= LEFT_BRACKET NumDecC RIGHT_BRACKET 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		ArrayList<Object> dim=new ArrayList<>();
                                                            if(val!=null){
                                                                    dim.add(val);
                                                                RESULT =dim;}
                                                                
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DimensionsDec",191, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // DimensionsDec ::= DimensionsDec LEFT_BRACKET NumDecC RIGHT_BRACKET 
            {
              Object RESULT =null;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object dims = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		if(dims!=null){
                                                                            ArrayList<Object> dim=new ArrayList<>();
                                                                            ArrayList<Object> asst=(ArrayList<Object>) dims;
                                                                            dim.addAll(asst);
                                                                            if(val!=null){
                                                                                dim.add(val);
                                                                            }RESULT=dim;
                                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DimensionsDec",191, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // Globals ::= DeclarationC SEMICOLON 
            {
              Object RESULT =null;
		
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Globals",143, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // Globals ::= Globals DeclarationC SEMICOLON 
            {
              Object RESULT =null;
		
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Globals",143, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // Dimensions ::= LEFT_BRACKET NumberValueC RIGHT_BRACKET 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		ArrayList<Object> dim=new ArrayList<>();
                                                            if(val!=null){
                                                                SynthesizedOpAsst soa= (SynthesizedOpAsst)val;
                                                                if(sma.testManager.verifyIntegerValue(val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()))){
                                                                    dim.add(soa.getQuadruple().getResult());
                                                                RESULT =dim;}
                                                                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Dimensions",139, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // Dimensions ::= Dimensions LEFT_BRACKET NumberValueC RIGHT_BRACKET 
            {
              Object RESULT =null;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object dims = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		if(dims!=null){
                                                                            ArrayList<Object> dim=new ArrayList<>();
                                                                            ArrayList<Object> asst=(ArrayList<Object>) dims;
                                                                            dim.addAll(asst);
                                                                            if(val!=null){
                                                                        SynthesizedOpAsst soa= (SynthesizedOpAsst)val;
                                                                        if(sma.testManager.verifyIntegerValue(val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()))){
                                                                                dim.add(soa.getQuadruple().getResult());
                                                                            RESULT =dim;}
}}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Dimensions",139, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // Number3C ::= FuntionCall 
            {
              Object RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int funright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object fun = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT= fun;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3C",167, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // Number3C ::= ID Dimensions 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int dimensionsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int dimensionsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object dimensions = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(dimensions!=null){
                                            RESULT =sma.testManager.getArrayType(id,dimensions,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);

                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3C",167, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // Number3C ::= PARENTHESIS_A NumberValueC PARENTHESIS_B 
            {
              Object RESULT =null;
		int asstleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int asstright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object asst = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT=asst;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3C",167, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // Number3C ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type=sma.testManager.getTypeFromST(val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                            if(type!=null){
                                Quadruple quadruple=sma.translateControlerTAC.getIdForStack(val);
                                RESULT=new SynthesizedOpAsst(quadruple,type);
                            }else{
                                RESULT=null;
                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3C",167, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // Number3C ::= CHAR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.CHAR_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL,val,null,null);
		                    RESULT=new SynthesizedOpAsst(quadruple,type);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3C",167, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // Number3C ::= DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.FLOAT_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL,val,null,null);
		                    RESULT=new SynthesizedOpAsst(quadruple,type);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3C",167, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // Number3C ::= NUMBER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		 Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.INTEGER_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL,val,null,null);
		                    RESULT=new SynthesizedOpAsst(quadruple,type);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3C",167, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // Number2C ::= Number3C 
            {
              Object RESULT =null;
		int asstleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int asstright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object asst = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=asst;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number2C",166, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // Number2C ::= Number2C MOD Number3C 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.MOD);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number2C",166, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // Number2C ::= Number2C DIVISION Number3C 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.DIVISION);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number2C",166, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // Number2C ::= Number2C MULTIPLICATION Number3C 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.MULTIPLICATION);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number2C",166, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // NumberValueC ::= Number2C 
            {
              Object RESULT =null;
		int asstleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int asstright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object asst = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=asst;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumberValueC",165, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // NumberValueC ::= NumberValueC MINUS Number2C 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.MINUS);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumberValueC",165, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // NumberValueC ::= NumberValueC PLUS Number2C 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.PLUS);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumberValueC",165, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // NumConst3 ::= PARENTHESIS_A NumberValue PARENTHESIS_B 
            {
              Object RESULT =null;
		int asstleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int asstright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object asst = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT=asst;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumConst3",190, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // NumConst3 ::= DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=new SyntaxConstAsst(Float.valueOf(val),TypeManager.FLOAT_TYPE);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumConst3",190, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // NumConst3 ::= CHAR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=new SyntaxConstAsst(val,TypeManager.CHAR_TYPE);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumConst3",190, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // NumConst3 ::= NUMBER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		 RESULT=new SyntaxConstAsst(Integer.valueOf(val),TypeManager.INTEGER_TYPE);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumConst3",190, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // NumConst2 ::= NumConst3 
            {
              Object RESULT =null;
		int asstleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int asstright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object asst = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=asst;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumConst2",189, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // NumConst2 ::= NumConst2 MOD NumConst3 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                                    RESULT=sma.testManager.operateConstAsst(num1,num2,Operation.MOD,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumConst2",189, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // NumConst2 ::= NumConst2 DIVISION NumConst3 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){
                                                            RESULT=sma.testManager.operateConstAsst(num1,num2,Operation.DIVISION,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumConst2",189, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // NumConst2 ::= NumConst2 MULTIPLICATION NumConst3 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){
                                                                RESULT=sma.testManager.operateConstAsst(num1,num2,Operation.MULTIPLICATION,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumConst2",189, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // NumConstC ::= NumConst2 
            {
              Object RESULT =null;
		int asstleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int asstright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object asst = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=asst;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumConstC",188, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // NumConstC ::= NumConstC MINUS NumConst2 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){
                                                                RESULT=sma.testManager.operateConstAsst(num1,num2,Operation.MINUS,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumConstC",188, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // NumConstC ::= NumConstC PLUS NumConst2 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               RESULT=sma.testManager.operateConstAsst(num1,num2,Operation.PLUS,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumConstC",188, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // Constante ::= CONST Type ID EQUAL NumConstC 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		
                                        if(val!=null){ 
                                            boolean bool=sma.testManager.insertConst(id,(Integer)type,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        if(bool){
                                                            Quadruple quad= sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                        quad.setConstante(true);
                                                        
                                                        }
                                                       
                                                       }
                                        
                                        
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Constante",138, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // Constantes ::= Constante SEMICOLON 
            {
              Object RESULT =null;
		sma.translateControlerTAC.acceptAllIdQuas();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Constantes",137, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // Constantes ::= Constantes Constante SEMICOLON 
            {
              Object RESULT =null;
		sma.translateControlerTAC.acceptAllIdQuas();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Constantes",137, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // Library ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Library",132, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // Library ::= Library Include 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Library",132, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // ProgramSeperator ::= PROGRAM_SEPERATOR 
            {
              Object RESULT =null;
		sma.testManager.creatSonAmbit();
                            sma.translateControlerTAC.createNewQuadrupleBlock();
                            sma.testManager.enterMain();
                             
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ProgramSeperator",14, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // Program ::= ProgramSeperator Library Constantes Globals Main 
            {
              Object RESULT =null;
		
                                    sma.testManager.finishAmbit();
                                    sma.translateControlerTAC.acceptCurrentBlock();
                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getcurrentQuads());
                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Program",7, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // ElifHeader ::= ELIF OpBool COLON 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT =op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElifHeader",130, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // ElseHeaderPY ::= ELSE COLON 
            {
              Object RESULT =null;
		sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseHeaderPY",131, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // Elif ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Elif",129, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // Elif ::= ElseHeaderPY INDENT FunctionLinesPY DEDENT 
            {
              Object RESULT =null;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT=lines;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Elif",129, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // Elif ::= ElifHeader INDENT FunctionLinesPY DEDENT Elif 
            {
              Object RESULT =null;
		int ifBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int ifBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object ifBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int elseBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int elseBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object elseBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(ifBool!=null){
                                                                    BoolQuad bool=(BoolQuad)ifBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    if(elseBool!=null){bool.changeFatherNoBool((ArrayList<Object>)elseBool);}
                                                                                    RESULT =sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool);
                                                                                    
                                                                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Elif",129, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // IfPYHeader ::= IF OpBool COLON 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT=op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IfPYHeader",128, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // IfPY ::= IfPYHeader INDENT FunctionLinesPY DEDENT Elif 
            {
              Object RESULT =null;
		int ifBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int ifBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object ifBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int elseBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int elseBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object elseBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		BoolQuad bool=(BoolQuad)ifBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    if(elseBool!=null){bool.changeFatherNoBool((ArrayList<Object>)elseBool);}
                                                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool));
                                                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IfPY",127, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // ConditionPY ::= IfPY 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionPY",126, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // AssignmentPY ::= ID EQUAL Input 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type = sma.testManager.getTypeFromST(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                            if(type!=null&&in!=null){
                                                SyntaxInputAsst sia= (SyntaxInputAsst) in;
                                                
                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.createInputQuads(id,sia.getString()));
                                                
                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentPY",125, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // AssignmentPY ::= ID EQUAL NumberValue 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num!=null){
                                                                    if(!sma.testManager.checkExistence(id)){
                                                                    sma.testManager.insertTuple(id,TypeManager.VAR_TYPE,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                            }
                                                           sma.translateControlerTAC.createTempIdQuadAssign(num,id);
                                                        sma.translateControlerTAC.acceptAllIdQuas();}
                                                    

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentPY",125, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // WhilePYHeader ::= WHILE OpBool COLON 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT=op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("WhilePYHeader",124, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // WhilePY ::= WhilePYHeader INDENT FunctionLinesPY DEDENT 
            {
              Object RESULT =null;
		int whileBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int whileBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object whileBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		BoolQuad bool=(BoolQuad)whileBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.addGotoWhileTags(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool)));
                                                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("WhilePY",123, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // ForStartPy ::= FOR 
            {
              Object RESULT =null;
		sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForStartPy",120, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // ForPYHeader2 ::= ForStartPy ID IN RANGE PARENTHESIS_A NumberValue 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if (id!=null) {
                    if(!sma.testManager.checkExistence(id)){
                        sma.testManager.insertTuple(id,TypeManager.VAR_TYPE,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                       }
                       sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                       RESULT=new SemanticAsstIdQuad(id, sma.translateControlerTAC.getcurrentTempQuads());
                                                        
                    
                    }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForPYHeader2",122, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // ForPYHeader ::= ForPYHeader2 COMMA NumberValue PARENTHESIS_B 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		if (id!=null) {
                    SemanticAsstIdQuad saiq= (SemanticAsstIdQuad)id;
                    SynthesizedOpAsst s1= (SynthesizedOpAsst)num;
                    Quadruple quadruple=sma.translateControlerTAC.operateIdBoolQuadruple(saiq.getId(),s1.getQuadruple(),Operation.EQUAL_BOOL);
                    BoolQuad bool =sma.translateControlerTAC.getBoolQuadControl().convertQuadToBool(sma.translateControlerTAC.getcurrentTempQuads());
                     For f=sma.translateControlerTAC.createForAsst(saiq.getQuads(), "1", bool, saiq.getId());
                    RESULT=f;}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForPYHeader",121, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // ForPYHeader ::= ForPYHeader2 COMMA NumberValue COMMA CaseValue PARENTHESIS_B 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int stepleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int stepright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object step = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		if (id!=null) {
                    SemanticAsstIdQuad saiq= (SemanticAsstIdQuad)id;
                    SynthesizedOpAsst s1= (SynthesizedOpAsst)num;
                    Quadruple quadruple=sma.translateControlerTAC.operateIdBoolQuadruple(saiq.getId(),s1.getQuadruple(),Operation.EQUAL_BOOL);
                    BoolQuad bool =sma.translateControlerTAC.getBoolQuadControl().convertQuadToBool(sma.translateControlerTAC.getcurrentTempQuads());
                     For f=sma.translateControlerTAC.createForAsst(saiq.getQuads(), (String) step, bool, saiq.getId());
                    RESULT=f;}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForPYHeader",121, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // ForPY ::= ForPYHeader COLON INDENT FunctionLinesPY DEDENT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		if(f!=null){
                                                                For fo=(For)f;
                                                                fo.addCode((ArrayList<Object>)lines);
                                                                sma.translateControlerTAC.addQuadsToCurrent(fo.convertToQuad());
                                                                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForPY",119, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // CyclePY ::= WhilePY 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CyclePY",118, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // CyclePY ::= ForPY 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CyclePY",118, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // OutputValuesPY ::= ValueVb 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll((ArrayList<Object>)val);
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValuesPY",117, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // OutputValuesPY ::= OutputValuesPY COMMA ValueVb 
            {
              Object RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll((ArrayList<Object>)vals);
                                    printQuad.addAll((ArrayList<Object>)val);
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValuesPY",117, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // OutputPY ::= PRINT PARENTHESIS_A OutputValuesPY PARENTHESIS_B 
            {
              Object RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		 if(vals!=null){
                                                                                                sma.translateControlerTAC.addQuadsToCurrent((ArrayList<Object>)vals);
                                                                                                
                                                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputPY",116, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // LineCodePY ::= error 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodePY",115, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // LineCodePY ::= ConditionPY 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodePY",115, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // LineCodePY ::= AssignmentPY 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodePY",115, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // LineCodePY ::= CyclePY 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodePY",115, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // LineCodePY ::= OutputPY 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodePY",115, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // LineCodePY ::= Input 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(in!=null){
                                    SyntaxInputAsst sia= (SyntaxInputAsst)in;
                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.createInputQuads(null,sia.getString()));
                                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodePY",115, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // LinesPY ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LinesPY",114, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // LinesPY ::= LinesPY LineCodePY 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LinesPY",114, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // FunctionLinesPY1 ::= LinesPY RETURN NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionLinesPY1",109, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // FunctionLinesPY1 ::= LinesPY 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionLinesPY1",109, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // FunctionLinesPY ::= FunctionLinesPY1 
            {
              Object RESULT =null;
		RESULT=sma.translateControlerTAC.getcurrentQuads();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionLinesPY",113, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // IdsPY ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.getParameterControl().insertParameter(TypeManager.VAR_TYPE,id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IdsPY",112, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // IdsPY ::= IdsPY COMMA ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.getParameterControl().insertParameter(TypeManager.VAR_TYPE,id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IdsPY",112, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // ParametersPY ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParametersPY",111, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // ParametersPY ::= IdsPY 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParametersPY",111, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // FunctionPYHeader ::= DEF ID PARENTHESIS_A ParametersPY PARENTHESIS_B COLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		sma.testManager.creatSonAmbit();
                                                                                            sma.translateControlerTAC.createNewQuadrupleBlock();
                                                                                            String name =sma.testManager.insertFunction(id,TypeManager.VAR_TYPE, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                RESULT= name;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionPYHeader",110, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // FunctionPY ::= error 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionPY",108, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // FunctionPY ::= FunctionPYHeader INDENT FunctionLinesPY DEDENT 
            {
              Object RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int funright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object fun = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		ArrayList<Object>quad=new ArrayList<>();
                                                                        if(fun!=null){
                                                                        quad=sma.translateControlerTAC.tagFunction((String)fun,(ArrayList<Object>) ins);
                                                                         
                                                                          }
                                                                         sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    sma.translateControlerTAC.addQuadsToCurrent(quad);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionPY",108, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // PythonCode ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("PythonCode",6, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // PythonCode ::= PythonCode FunctionPY 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("PythonCode",6, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // PythonSeperator ::= PYTHON_SEPERATOR 
            {
              Object RESULT =null;
		sma.testManager.creatSonAmbit();
                            sma.translateControlerTAC.createNewQuadrupleBlock();
                             
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("PythonSeperator",9, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // Python ::= PythonSeperator PythonCode 
            {
              Object RESULT =null;
		sma.testManager.switchNextTypes();
                                            sma.testManager.finishAmbit();
                                    sma.translateControlerTAC.acceptCurrentBlock();
                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getcurrentQuads());
                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Python",3, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // BreakJ ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BreakJ",104, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // CaseJHeader ::= CASE ValJ 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=val;
                                            sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseJHeader",101, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // CaseJ ::= CaseJHeader COLON LineCodesJ BreakJ 
            {
              Object RESULT =null;
		int caseJleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int caseJright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object caseJ = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		UniquenessTable ut=sma.testManager.createNewUniquenessTable();
                                                                        if(caseJ!=null){
                                                                            
                                                                            boolean verified =ut.add(caseJ,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                            if(verified){
                                                                            
                                                                            sma.translateControlerTAC.getSwitchAsst().addCases((String)caseJ,(ArrayList<Object>)lines);}
                                                                            }
                                                                        RESULT=ut;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseJ",103, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // CasesJ2 ::= CaseJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesJ2",102, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // CasesJ2 ::= CasesJ2 CaseJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesJ2",102, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // CasesJ1 ::= CaseJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesJ1",100, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // CasesJ1 ::= CasesJ2 CaseElseCHeader COLON LineCodesJ BreakJ 
            {
              Object RESULT =null;
		int caseJleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int caseJright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object caseJ = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		UniquenessTable ut=sma.testManager.createNewUniquenessTable();
                                                                        if(caseJ!=null){
                                                                            
                                                                            boolean verified =ut.add(caseJ,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                            if(verified){
                                                                            
                                                                            sma.translateControlerTAC.getSwitchAsst().addCases((String)caseJ,(ArrayList<Object>)lines);}
                                                                            }
                                                                        RESULT=ut;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesJ1",100, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // CasesJ1 ::= CasesJ2 CaseJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesJ1",100, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // SwitchJHeader ::= SWITCH_J PARENTHESIS_A ID PARENTHESIS_B 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.translateControlerTAC.createSwitchAsst(id);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("SwitchJHeader",99, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // ElseIfJHeader ::= ELSE IF PARENTHESIS_A OpBool PARENTHESIS_B 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT =op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseIfJHeader",97, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // ElseJHeader ::= ELSE 
            {
              Object RESULT =null;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseJHeader",98, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // ElseJ ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseJ",96, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // ElseJ ::= ElseIfJHeader LEFT_CB LineCodeJ RIGHT_CB ElseJ 
            {
              Object RESULT =null;
		int ifBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int ifBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object ifBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int elseBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int elseBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object elseBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(ifBool!=null){
                                                                    BoolQuad bool=(BoolQuad)ifBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    if(elseBool!=null){bool.changeFatherNoBool((ArrayList<Object>)elseBool);}
                                                                                    RESULT =sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool);
                                                                                    
                                                                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseJ",96, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // ElseJ ::= ElseJHeader LEFT_CB LineCodesJ RIGHT_CB 
            {
              Object RESULT =null;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT=lines;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseJ",96, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // IfJHeader ::= IF PARENTHESIS_A OpBool PARENTHESIS_B 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT=op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IfJHeader",95, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // ConditionJ ::= SwitchJHeader LEFT_CB CasesJ1 RIGHT_CB 
            {
              Object RESULT =null;
		sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(sma.translateControlerTAC.getSwitchAsst().getFatherCases()));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionJ",94, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // ConditionJ ::= IfJHeader LEFT_CB LineCodesJ RIGHT_CB ElseJ 
            {
              Object RESULT =null;
		int ifBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int ifBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object ifBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int elseBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int elseBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object elseBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		BoolQuad bool=(BoolQuad)ifBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    if(elseBool!=null){bool.changeFatherNoBool((ArrayList<Object>)elseBool);}
                                                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool));
                                                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionJ",94, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // AssignmentJ ::= ID EQUAL Input 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type = sma.testManager.getTypeFromST(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                            if(type!=null&&in!=null){
                                                SyntaxInputAsst sia= (SyntaxInputAsst) in;
                                                if(sma.testManager.verifyType(type.getNumber(),sia.getType(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),id)){
                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.createInputQuads(id,sia.getString()));
                                                }
                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentJ",93, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // AssignmentJ ::= ID EQUAL NumberValue 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                        sma.translateControlerTAC.acceptAllIdQuas();}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentJ",93, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // DeclarationJ ::= Public Type ID EQUAL Input 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(in!=null&&!sma.testManager.checkExistence(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()))){
                                                        SyntaxInputAsst sia = (SyntaxInputAsst)in;

                                                      if(sma.testManager.verifyType((Integer)type,sia.getType(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),id)){
                                                          sma.testManager.insertTuple(id,(Integer)type,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.createInputQuads(id,sia.getString()));
                                                }       
                        }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationJ",92, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // DeclarationJ ::= Public Type IdsVb 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.testManager.insertPreTuplesToSymbolTable((Integer)type,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationJ",92, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // WhileJHeader ::= WHILE PARENTHESIS_A OpBool PARENTHESIS_B 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT=op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("WhileJHeader",91, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // ForJHeaderStarter ::= For PARENTHESIS_A ID EQUAL NumberValue SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		Type type=sma.testManager.getTypeFromST(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    if(type!=null){
                                                    if(sma.testManager.getTypeManager().isNumerico(type.getNumber())){
                                                        
                                                        boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                            RESULT=new SemanticAsstIdQuad(id, sma.translateControlerTAC.getcurrentTempQuads());
                                                        }
                                                    }else{
                                                        sma.testManager.callNumericError(id,type,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    }}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForJHeaderStarter",89, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // ForJHeaderStarter ::= For PARENTHESIS_A Type ID EQUAL NumberValue SEMICOLON 
            {
              Object RESULT =null;
		int type1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int type1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object type1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		 boolean boolExistence= sma.testManager.checkExistence(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                if(boolExistence){

                                                    if(sma.testManager.getTypeManager().isNumerico((Integer)type1)){
                                                        sma.testManager.insertTuple(id,(Integer)type1,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                            RESULT=new SemanticAsstIdQuad(id, sma.translateControlerTAC.getcurrentTempQuads());
                                                        }
                                                    }else{
                                                        sma.testManager.callNumericError(id,sma.testManager.getTypeManager().getType((Integer)type1),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    }
                                                }
                                                
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForJHeaderStarter",89, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // AssignmentStepJ ::= ID EQUAL NumberValue 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                        RESULT=sma.translateControlerTAC.getcurrentTempQuads();}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentStepJ",90, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // ForJHeader ::= ForJHeaderStarter OpBool SEMICOLON AssignmentStepJ PARENTHESIS_B 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int stepleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int stepright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object step = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		if (id!=null) {
                    BoolQuad boolQuad=(BoolQuad)op;
                    SemanticAsstIdQuad saiq= (SemanticAsstIdQuad)id;
                    
                    
                     For f=sma.translateControlerTAC.createForAsst(saiq.getQuads(),step,boolQuad );
                    RESULT=f;}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForJHeader",88, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // CycleJ ::= DO LEFT_CB LineCodesJ RIGHT_CB OpBool SEMICOLON 
            {
              Object RESULT =null;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		if(op!=null){
                                                                                sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.creatDoWhile((ArrayList<Object>)lines,(BoolQuad)op));
                                                                                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleJ",87, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // CycleJ ::= WhileJHeader LEFT_CB LineCodesJ RIGHT_CB 
            {
              Object RESULT =null;
		int whileBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int whileBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object whileBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		BoolQuad bool=(BoolQuad)whileBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.addGotoWhileTags(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool)));
                                                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleJ",87, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // CycleJ ::= ForJHeader LEFT_CB LineCodesJ RIGHT_CB 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		if(f!=null){
                                                                For fo=(For)f;
                                                                if(lines!=null){
                                                                    fo.addCode((ArrayList<Object>)lines);
                                                                }else{
                                                                    fo.addCode(new ArrayList<Object>());
                                                                }
                                                                
                                                                sma.translateControlerTAC.addQuadsToCurrent(fo.convertToQuad());
                                                                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleJ",87, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // OutputJ ::= SYSTEM_OUT_PRINTLN PARENTHESIS_A ValuesOutputJ PARENTHESIS_B 
            {
              Object RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		Quadruple lineBreak = sma.translateControlerTAC.createPrintQuad("\\n");
                                                                                            if(vals!=null){
                                                                                                ArrayList asst=(ArrayList<Object>)vals;
                                                                                                asst.add(lineBreak);
                                                                                                sma.translateControlerTAC.addQuadsToCurrent(asst);
                                                                                                
                                                                                                
                                                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputJ",84, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // OutputJ ::= SYSTEM_OUT_PRINT PARENTHESIS_A ValuesOutputJ PARENTHESIS_B 
            {
              Object RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		 if(vals!=null){
                                                                                                sma.translateControlerTAC.addQuadsToCurrent((ArrayList<Object>)vals);
                                                                                                
                                                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputJ",84, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // LineCodeJ ::= error 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",83, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // LineCodeJ ::= ConditionJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",83, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // LineCodeJ ::= AssignmentJ SEMICOLON 
            {
              Object RESULT =null;
		System.out.println("ASIGNACION");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",83, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // LineCodeJ ::= DeclarationJ SEMICOLON 
            {
              Object RESULT =null;
		System.out.println("DECLARACION");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",83, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // LineCodeJ ::= CycleJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",83, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // LineCodeJ ::= Input SEMICOLON 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		if(in!=null){
                                    SyntaxInputAsst sia= (SyntaxInputAsst)in;
                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.createInputQuads(null,sia.getString()));
                                }
                                
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",83, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // LineCodeJ ::= OutputJ SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",83, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // ValJ ::= STRING 
            {
              Object RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.add(sma.translateControlerTAC.createPrintQuad(string));
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValJ",82, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // ValJ ::= CHAR 
            {
              Object RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.add(sma.translateControlerTAC.createPrintQuad(ch));
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValJ",82, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // ValJ ::= DECIMAL 
            {
              Object RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.add(sma.translateControlerTAC.createPrintQuad(dec));
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValJ",82, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // ValJ ::= NUMBER 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.add(sma.translateControlerTAC.createPrintQuad(num));
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValJ",82, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // ValJ ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type = sma.testManager.getTypeFromST(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                            if(type!=null){
                                    ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll(sma.translateControlerTAC.createIdPrintQuad(id));
                                    RESULT=printQuad;}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValJ",82, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // ValuesOutputJ ::= ValJ 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll((ArrayList<Object>)val);
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValuesOutputJ",81, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // ValuesOutputJ ::= ValuesOutputJ PLUS ValJ 
            {
              Object RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll((ArrayList<Object>)vals);
                                    printQuad.addAll((ArrayList<Object>)val);
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValuesOutputJ",81, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // LineCodeJ3 ::= LineCodeJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ3",78, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // LineCodeJ3 ::= LineCodeJ3 LineCodeJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ3",78, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // LineCodesJ2 ::= LineCodeJ3 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodesJ2",79, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // LineCodesJ2 ::= LineCodeJ3 RETURN NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodesJ2",79, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // LineCodesJ ::= 
            {
              Object RESULT =null;
		 
                                                    sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodesJ",77, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // LineCodesJ ::= LineCodesJ2 
            {
              Object RESULT =null;
		 RESULT=sma.translateControlerTAC.getcurrentQuads();
                                                    sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodesJ",77, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ParameterJ ::= Type ID 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.getParameterControl().insertParameter((Integer)type,id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParameterJ",70, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ParameterJ ::= ParametersJ COMMA Type ID 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.getParameterControl().insertParameter((Integer)type,id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParameterJ",70, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ParametersJ ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParametersJ",69, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ParametersJ ::= ParameterJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParametersJ",69, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ProcessJHeader ::= Public VOID_J ID PARENTHESIS_A ParametersJ PARENTHESIS_B 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		sma.testManager.creatSonAmbit();
                                                                                            sma.translateControlerTAC.createNewQuadrupleBlock();
                                                                                            String name =sma.testManager.insertFunction(id, null, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.testManager.getCurrentClass());
                RESULT= name;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ProcessJHeader",76, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ProcessJ ::= ProcessJHeader LEFT_CB LineCodesJ RIGHT_CB 
            {
              Object RESULT =null;
		int subleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int subright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object sub = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		ArrayList<Object>quad=new ArrayList<>();
                                                                        if(sub!=null){
                                                                        if(lines==null){
                                                                                quad=sma.translateControlerTAC.tagFunction((String)sub,null);
                                                                            }else{
                                                                                quad=sma.translateControlerTAC.tagFunction((String)sub,(ArrayList<Object>) lines);
                                                                            }
                                                                          }
                                                                         sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    sma.translateControlerTAC.addQuadsToCurrent(quad);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ProcessJ",75, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // FunctionJHeader ::= Public Type ID PARENTHESIS_A ParametersJ PARENTHESIS_B 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		sma.testManager.creatSonAmbit();
                                                                                            sma.translateControlerTAC.createNewQuadrupleBlock();
                                                                                            String name =sma.testManager.insertFunction(id, (Integer) type, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.testManager.getCurrentClass());
                RESULT= name;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionJHeader",74, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // FunctionJ ::= FunctionJHeader LEFT_CB LineCodesJ RIGHT_CB 
            {
              Object RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int funright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object fun = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		ArrayList<Object>quad=new ArrayList<>();
                                                                        if(fun!=null){
                                                                            if(ins==null){
                                                                                quad=sma.translateControlerTAC.tagFunction((String)fun,null);
                                                                            }else{
                                                                                quad=sma.translateControlerTAC.tagFunction((String)fun,(ArrayList<Object>) ins);
                                                                            }
                                                                        
                                                                         
                                                                          }
                                                                         sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    sma.translateControlerTAC.addQuadsToCurrent(quad);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionJ",73, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ConstructorJHeader ::= Public ID PARENTHESIS_A ParametersJ PARENTHESIS_B 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		sma.testManager.creatSonAmbit();
                                                                                            sma.translateControlerTAC.createNewQuadrupleBlock();
                                                                                            String name =sma.testManager.insertFunction(id, null, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.testManager.getCurrentClass());
                RESULT= name;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConstructorJHeader",68, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ConstructorJ ::= ConstructorJHeader LEFT_CB LineCodesJ RIGHT_CB 
            {
              Object RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int funright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object fun = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		ArrayList<Object>quad=new ArrayList<>();
                                                                        if(fun!=null){
                                                                            if(ins==null){
                                                                                quad=sma.translateControlerTAC.tagFunction((String)fun,null);
                                                                            }else{
                                                                                quad=sma.translateControlerTAC.tagFunction((String)fun,(ArrayList<Object>) ins);
                                                                            }
                                                                        
                                                                         
                                                                          }
                                                                         sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    sma.translateControlerTAC.addQuadsToCurrent(quad);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConstructorJ",107, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ClassCodeJ ::= error 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClassCodeJ",72, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ClassCodeJ ::= ConstructorJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClassCodeJ",72, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ClassCodeJ ::= DeclarationJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClassCodeJ",72, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ClassCodeJ ::= ProcessJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClassCodeJ",72, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ClassCodeJ ::= FunctionJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClassCodeJ",72, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // JavaClassCode1 ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("JavaClassCode1",86, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // JavaClassCode1 ::= JavaClassCode1 ClassCodeJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("JavaClassCode1",86, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // JavaClassCode ::= JavaClassCode1 
            {
              Object RESULT =null;
		RESULT=sma.translateControlerTAC.getcurrentQuads();
                                                    sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("JavaClassCode",71, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ClaseJHeader ::= Public CLASS_J ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.creatSonAmbit();
                                    sma.translateControlerTAC.createNewQuadrupleBlock();
                                    sma.testManager.setCurrentClass(sma.testManager.insertClass(id, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek())));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClaseJHeader",67, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ClaseJ ::= ClaseJHeader LEFT_CB JavaClassCode RIGHT_CB 
            {
              Object RESULT =null;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		ArrayList<Object>quad=new ArrayList<>();
                                                                        
                                                                            if(lines!=null){
                                                                                quad=(ArrayList<Object>) lines;
                                                                            }
                                                                        
                                                                         
                                                                        sma.testManager.setCurrentClass(null);
                                                                         sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    sma.translateControlerTAC.addQuadsToCurrent(quad);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClaseJ",66, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // JavaCode ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("JavaCode",5, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // JavaCode ::= JavaCode ClaseJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("JavaCode",5, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // JavaSeperator ::= JAVA_SEPERATOR 
            {
              Object RESULT =null;
		sma.testManager.creatSonAmbit();
                            sma.translateControlerTAC.createNewQuadrupleBlock();
                             
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("JavaSeperator",13, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Java ::= JavaSeperator JavaCode 
            {
              Object RESULT =null;
		sma.testManager.switchNextTypes();
                                    sma.testManager.finishAmbit();
                                    sma.translateControlerTAC.acceptCurrentBlock();
                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getcurrentQuads());
                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Java",2, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CaseValue ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type=sma.testManager.getTypeFromST(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                            if(type!=null){
                                RESULT=id;
                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseValue",65, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CaseValue ::= CHAR 
            {
              Object RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=ch;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseValue",65, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CaseValue ::= DECIMAL 
            {
              Object RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=dec;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseValue",65, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CaseValue ::= NUMBER 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=num;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseValue",65, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CasesVbHeader ::= CASE_VB ELSE 
            {
              Object RESULT =null;
		RESULT=Switch.ELSE;
                    sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesVbHeader",64, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CasesVbHeader ::= CASE_VB CaseValue 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=val;
                                            sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesVbHeader",64, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CasesVb ::= CasesVbHeader InstructionsFunctionVb 
            {
              Object RESULT =null;
		int caseHleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int caseHright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object caseH = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		UniquenessTable ut=sma.testManager.createNewUniquenessTable();
                                                                        if(caseH!=null){
                                                                            
                                                                            boolean verified =ut.add(caseH,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                            if(verified){
                                                                            
                                                                            sma.translateControlerTAC.getSwitchAsst().addCases((String)caseH,(ArrayList<Object>)lines);}
                                                                            }
                                                                        RESULT=ut;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesVb",63, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CasesVb ::= CasesVb CasesVbHeader InstructionsFunctionVb 
            {
              Object RESULT =null;
		int caseVbleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int caseVbright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object caseVb = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int caseHleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int caseHright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object caseH = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		UniquenessTable ut=(UniquenessTable)caseVb;
                                                                        if(caseH!=null){
                                                                            
                                                                            boolean verified =ut.add(caseH,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                            if(verified){
                                                                            
                                                                            sma.translateControlerTAC.getSwitchAsst().addCases((String)caseH,(ArrayList<Object>)lines);}
                                                                            }
                                                                        RESULT=ut;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesVb",63, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SwitchVbHeader ::= SELECT_VB CASE_VB ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.translateControlerTAC.createSwitchAsst(id);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("SwitchVbHeader",62, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SwitchVb ::= SwitchVbHeader CasesVb END_VB SELECT_VB 
            {
              Object RESULT =null;
		sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(sma.translateControlerTAC.getSwitchAsst().getFatherCases()));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("SwitchVb",61, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ThenVb ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ThenVb",60, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ThenVb ::= THEN_VB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ThenVb",60, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ElseIfHeader ::= ELSE_IF_VB OpBool ThenVb 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT =op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseIfHeader",59, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ElseHeader ::= ELSE 
            {
              Object RESULT =null;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseHeader",58, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ElseVb ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseVb",57, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ElseVb ::= ElseIfHeader InstructionsFunctionVb ElseVb 
            {
              Object RESULT =null;
		int ifBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int ifBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object ifBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int elseBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int elseBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object elseBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(ifBool!=null){
                                                                    BoolQuad bool=(BoolQuad)ifBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    if(elseBool!=null){bool.changeFatherNoBool((ArrayList<Object>)elseBool);}
                                                                                    RESULT =sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool);
                                                                                    
                                                                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseVb",57, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ElseVb ::= ElseHeader InstructionsFunctionVb 
            {
              Object RESULT =null;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=lines;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseVb",57, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // IfVbHeader ::= IF OpBool ThenVb 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT=op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IfVbHeader",56, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // IfVb ::= IfVbHeader InstructionsFunctionVb ElseVb END_VB IF 
            {
              Object RESULT =null;
		int ifBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int ifBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object ifBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int elseBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int elseBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object elseBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		BoolQuad bool=(BoolQuad)ifBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    if(elseBool!=null){bool.changeFatherNoBool((ArrayList<Object>)elseBool);}
                                                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool));
                                                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IfVb",55, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ConditionVb ::= SwitchVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionVb",54, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ConditionVb ::= IfVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionVb",54, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // AssignmentVb ::= ID EQUAL Input 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type = sma.testManager.getTypeFromST(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                            if(type!=null&&in!=null){
                                                SyntaxInputAsst sia= (SyntaxInputAsst) in;
                                                if(sma.testManager.verifyType(type.getNumber(),sia.getType(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),id)){
                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.createInputQuads(id,sia.getString()));
                                                }
                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentVb",53, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // AssignmentVb ::= ID EQUAL NumberValue 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                        sma.translateControlerTAC.acceptAllIdQuas();}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentVb",53, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // AssiVb ::= 
            {
              Object RESULT =null;
		System.out.println("ASSI VACIO");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssiVb",52, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // AssiVb ::= EQUAL NumberValue 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT = val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssiVb",52, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // IdsVb ::= ID AssiVb 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.insertPreTuple(id,null,val,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                        if(val!=null){ 
                                                            sma.translateControlerTAC.createTempIdQuadAssign(val,id);}
                                        sma.translateControlerTAC.nextIdQuad();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IdsVb",51, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // IdsVb ::= IdsVb COMMA ID AssiVb 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.insertPreTuple(id,null,val,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        if(val!=null){ 
                                                            sma.translateControlerTAC.createTempIdQuadAssign(val,id);}
                                                       
                                                        sma.translateControlerTAC.nextIdQuad();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IdsVb",51, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Type ::= CHAR_TYPE 
            {
              Object RESULT =null;
		RESULT=TypeManager.CHAR_TYPE;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Type",11, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Type ::= FLOAT_TYPE 
            {
              Object RESULT =null;
		RESULT=TypeManager.FLOAT_TYPE;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Type",11, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Type ::= INTEGER_TYPE 
            {
              Object RESULT =null;
		RESULT=TypeManager.INTEGER_TYPE;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Type",11, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DeTypeVb ::= ID AssiVb COMMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		
                                                        sma.testManager.insertPreTuple(id,null,val,0,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        // if(val!=null){ 
                                                        //     sma.translateControlerTAC.createTempIdQuadAssign(val,id);}
                                                       
                                                        sma.translateControlerTAC.nextIdQuad();
                                                        

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeTypeVb",50, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DeTypeVb ::= DeTypeVb ID AssiVb COMMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		
                                                        sma.testManager.insertPreTuple(id,null,val,0,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        // if(val!=null){ 
                                                        //     sma.translateControlerTAC.createTempIdQuadAssign(val,id);}
                                                       
                                                        sma.translateControlerTAC.nextIdQuad();
                                                        

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeTypeVb",50, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DeclarationVb ::= DIM_VB ID AS_VB Type EQUAL Input 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(in!=null&&!sma.testManager.checkExistence(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()))){
                                                        SyntaxInputAsst sia = (SyntaxInputAsst)in;

                                                      if(sma.testManager.verifyType((Integer)type,sia.getType(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),id)){
                                                          sma.testManager.insertTuple(id,(Integer)type,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.createInputQuads(id,sia.getString()));
                                                }       
                        }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationVb",49, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DeclarationVb ::= DIM_VB ID AS_VB Type AssiVb 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.insertPreTuple(id,null,val, 0,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                             sma.testManager.insertPreTuplesToSymbolTable((Integer)type,0,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
                                                            //     if(val!=null){ 
                                                                   
                                                            // sma.translateControlerTAC.createTempIdQuadAssign(val,id);}
                                                       sma.translateControlerTAC.nextIdQuad();
                                                        
                                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationVb",49, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DeclarationVb ::= DIM_VB DeTypeVb ID AS_VB Type AssiVb 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.insertPreTuple(id,null,val, 0,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                    sma.testManager.insertPreTuplesToSymbolTable((Integer)type,0,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
                                                            //         if(val!=null){ 
                                                                        
                                                            // sma.translateControlerTAC.createTempIdQuadAssign(val,id);}
                                                       
                                                        sma.translateControlerTAC.nextIdQuad();
                                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationVb",49, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DoHeader ::= DO 
            {
              Object RESULT =null;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DoHeader",48, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DoWhileVb ::= DoHeader InstructionsFunctionVb LOOP_VB WHILE OpBool 
            {
              Object RESULT =null;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(op!=null){
                                                                                sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.creatDoWhile((ArrayList<Object>)lines,(BoolQuad)op));
                                                                                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DoWhileVb",47, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ExBoolVb ::= LESS_THAN_EQUAL 
            {
              Object RESULT =null;
		RESULT=Operation.LESS_THAN_EQUAL;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb",46, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ExBoolVb ::= GREATER_THAN_EQUAL 
            {
              Object RESULT =null;
		RESULT=Operation.GREATER_THAN_EQUAL;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb",46, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ExBoolVb ::= LESS_THAN 
            {
              Object RESULT =null;
		RESULT=Operation.LESS_THAN;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb",46, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ExBoolVb ::= GREATER_THAN 
            {
              Object RESULT =null;
		RESULT=Operation.GREATER_THAN;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb",46, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ExBoolVb ::= DIFERENT_VB 
            {
              Object RESULT =null;
		RESULT=Operation.DIFERENT;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb",46, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ExBoolVb ::= EQUAL 
            {
              Object RESULT =null;
		RESULT=Operation.EQUAL_BOOL;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb",46, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // BoolValueVb ::= PARENTHESIS_A OpBool PARENTHESIS_B 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT=val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueVb",45, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // BoolValueVb ::= NumberValue ExBoolVb Number3 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int exValleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int exValright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object exVal = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateBoolType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdBoolQuadruple(s1.getQuadruple(),s2.getQuadruple(),(Integer)exVal);
                                                                    RESULT=sma.translateControlerTAC.getcurrentTempQuads();
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueVb",45, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // BoolValueVb ::= FALSE 
            {
              Object RESULT =null;
		 Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.BOOL_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL_BOOL,0,1,null);
		                    RESULT=sma.translateControlerTAC.getcurrentTempQuads();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueVb",45, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // BoolValueVb ::= TRUE 
            {
              Object RESULT =null;
		 Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.BOOL_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL_BOOL,1,1,null);
		                    RESULT=sma.translateControlerTAC.getcurrentTempQuads();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueVb",45, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OpBool3 ::= BoolValueVb 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(val!=null){
                   RESULT = sma.translateControlerTAC.getBoolQuadControl().convertQuadToBool(((ArrayList<Object>)val)); 
        }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBool3",44, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OpBool3 ::= NOT BoolValueVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBool3",44, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OpBool2 ::= OpBool3 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBool2",43, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OpBool2 ::= OpBool2 AND OpBool3 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(val1!=null &&val2!=null){
                                            RESULT= sma.translateControlerTAC.getBoolQuadControl().operateBoolQuad(val1,val2,Operation.OP_AND);}
                                            
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBool2",43, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OpBool ::= OpBool2 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBool",42, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OpBool ::= OpBool OR OpBool2 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(val1!=null &&val2!=null){
                                            RESULT= sma.translateControlerTAC.getBoolQuadControl().operateBoolQuad(val1,val2,Operation.OP_OR);}
                                            
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBool",42, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // WhileVbHeader ::= WHILE OpBool 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT=op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("WhileVbHeader",41, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // WhileVb ::= WhileVbHeader InstructionsFunctionVb END_VB WHILE 
            {
              Object RESULT =null;
		int whileBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int whileBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object whileBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		BoolQuad bool=(BoolQuad)whileBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.addGotoWhileTags(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool)));
                                                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("WhileVb",40, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Number3 ::= PARENTHESIS_A NumberValue PARENTHESIS_B 
            {
              Object RESULT =null;
		int asstleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int asstright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object asst = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT=asst;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3",39, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Number3 ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type=sma.testManager.getTypeFromST(val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                            if(type!=null){
                                Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL,sma.translateControlerTAC.getIdForStack(val),null,null);
                                RESULT=new SynthesizedOpAsst(quadruple,type);
                            }else{
                                RESULT=null;
                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3",39, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Number3 ::= CHAR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.CHAR_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL,val,null,null);
		                    RESULT=new SynthesizedOpAsst(quadruple,type);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3",39, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Number3 ::= DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.FLOAT_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL,val,null,null);
		                    RESULT=new SynthesizedOpAsst(quadruple,type);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3",39, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Number3 ::= NUMBER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		 Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.INTEGER_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL,val,null,null);
		                    RESULT=new SynthesizedOpAsst(quadruple,type);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3",39, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Number2 ::= Number3 
            {
              Object RESULT =null;
		int asstleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int asstright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object asst = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=asst;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number2",38, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Number2 ::= Number2 MOD Number3 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.MOD);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number2",38, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Number2 ::= Number2 DIVISION Number3 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.DIVISION);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number2",38, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Number2 ::= Number2 MULTIPLICATION Number3 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.MULTIPLICATION);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number2",38, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NumberValue ::= Number2 
            {
              Object RESULT =null;
		int asstleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int asstright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object asst = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=asst;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumberValue",37, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NumberValue ::= NumberValue MINUS Number2 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.MINUS);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumberValue",37, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NumberValue ::= NumberValue PLUS Number2 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.PLUS);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumberValue",37, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Step ::= 
            {
              Object RESULT =null;
		RESULT="1";
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Step",36, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Step ::= STEP_VB PLUS CaseValue 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=value;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Step",36, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Step ::= STEP_VB MINUS CaseValue 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT="-"+(String)value;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Step",36, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Step ::= STEP_VB CaseValue 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=value;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Step",36, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // For ::= FOR 
            {
              Object RESULT =null;
		sma.testManager.creatSonAmbit();
                                                        sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("For",35, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ForVbHeaderStart ::= For ID EQUAL NumberValue 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type=sma.testManager.getTypeFromST(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    if(type!=null){
                                                    if(sma.testManager.getTypeManager().isNumerico(type.getNumber())){
                                                        
                                                        boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                            RESULT=new SemanticAsstIdQuad(id, sma.translateControlerTAC.getcurrentTempQuads());
                                                        }
                                                    }else{
                                                        sma.testManager.callNumericError(id,type,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    }}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForVbHeaderStart",34, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ForVbHeaderStart ::= For ID AS_VB Type EQUAL NumberValue 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int type1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int type1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object type1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		 boolean boolExistence= sma.testManager.checkExistence(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                if(boolExistence){

                                                    if(sma.testManager.getTypeManager().isNumerico((Integer)type1)){
                                                        sma.testManager.insertTuple(id,(Integer)type1,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                            RESULT=new SemanticAsstIdQuad(id, sma.translateControlerTAC.getcurrentTempQuads());
                                                        }
                                                    }else{
                                                        sma.testManager.callNumericError(id,sma.testManager.getTypeManager().getType((Integer)type1),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    }
                                                }
                                                
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForVbHeaderStart",34, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ForVbHeader ::= ForVbHeaderStart TO_VB NumberValue Step 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int stepleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int stepright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object step = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if (id!=null) {
                    SemanticAsstIdQuad saiq= (SemanticAsstIdQuad)id;
                    SynthesizedOpAsst s1= (SynthesizedOpAsst)num;
                    Quadruple quadruple=sma.translateControlerTAC.operateIdBoolQuadruple(saiq.getId(),s1.getQuadruple(),Operation.EQUAL_BOOL);
                    BoolQuad bool =sma.translateControlerTAC.getBoolQuadControl().convertQuadToBool(sma.translateControlerTAC.getcurrentTempQuads());
                     For f=sma.translateControlerTAC.createForAsst(saiq.getQuads(), (String) step, bool, saiq.getId());
                    RESULT=f;}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForVbHeader",33, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ForVb ::= ForVbHeader InstructionsFunctionVb NEXT_VB 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		if(f!=null){
                                                                For fo=(For)f;
                                                                fo.addCode((ArrayList<Object>)lines);
                                                                sma.translateControlerTAC.addQuadsToCurrent(fo.convertToQuad());
                                                                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForVb",32, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CycleVb ::= DoWhileVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleVb",31, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CycleVb ::= WhileVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleVb",31, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CycleVb ::= ForVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleVb",31, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ValueVb ::= NumberValue 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll(sma.translateControlerTAC.getcurrentTempQuads());
                                    printQuad.add(sma.translateControlerTAC.createPrintQuad(val));
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValueVb",29, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ValueVb ::= STRING 
            {
              Object RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.add(sma.translateControlerTAC.createPrintQuad(string));
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValueVb",29, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ValuesVb ::= ValueVb 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll((ArrayList<Object>)val);
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValuesVb",28, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ValuesVb ::= ValuesVb AMPERSON ValueVb 
            {
              Object RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll((ArrayList<Object>)vals);
                                    printQuad.addAll((ArrayList<Object>)val);
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValuesVb",28, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OutputVb ::= CONSOLE_VB POINT WRITELN_VB PARENTHESIS_A ValuesVb PARENTHESIS_B 
            {
              Object RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		Quadruple lineBreak = sma.translateControlerTAC.createPrintQuad("\\n");
                                                                                            if(vals!=null){
                                                                                                ArrayList asst=(ArrayList<Object>)vals;
                                                                                                asst.add(lineBreak);
                                                                                                sma.translateControlerTAC.addQuadsToCurrent(asst);
                                                                                                
                                                                                                
                                                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputVb",27, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OutputVb ::= CONSOLE_VB POINT WRITE_VB PARENTHESIS_A ValuesVb PARENTHESIS_B 
            {
              Object RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		 if(vals!=null){
                                                                                                sma.translateControlerTAC.addQuadsToCurrent((ArrayList<Object>)vals);
                                                                                                
                                                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputVb",27, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Input ::= CHARINPUT PARENTHESIS_A STRING PARENTHESIS_B 
            {
              Object RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT= new SyntaxInputAsst(TypeManager.CHAR_TYPE,string);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Input",177, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Input ::= FLOATINPUT PARENTHESIS_A STRING PARENTHESIS_B 
            {
              Object RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT= new SyntaxInputAsst(TypeManager.FLOAT_TYPE,string);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Input",177, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Input ::= INTINPUT PARENTHESIS_A STRING PARENTHESIS_B 
            {
              Object RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT= new SyntaxInputAsst(TypeManager.INTEGER_TYPE,string);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Input",177, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LnInstructionsVb ::= error 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",25, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LnInstructionsVb ::= ConditionVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",25, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LnInstructionsVb ::= AssignmentVb 
            {
              Object RESULT =null;
		System.out.println("ASIGNACION");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",25, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LnInstructionsVb ::= DeclarationVb 
            {
              Object RESULT =null;
		System.out.println("DECLARACION");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",25, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LnInstructionsVb ::= CycleVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",25, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LnInstructionsVb ::= OutputVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",25, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LnInstructionsVb ::= Input 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(in!=null){
                                    SyntaxInputAsst sia= (SyntaxInputAsst)in;
                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.createInputQuads(null,sia.getString()));
                                }
                                
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",25, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Lines ::= LnInstructionsVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Lines",26, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Lines ::= Lines LnInstructionsVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Lines",26, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // InstructionsFunctionVb2 ::= RETURN 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb2",24, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // InstructionsFunctionVb2 ::= RETURN NumberValue 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(val!=null&&sma.testManager.verifyFuctionForReturn(((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()))){
                                                            sma.testManager.insertReturnValue(val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
                                                        }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb2",24, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // InstructionsFunctionVb2 ::= LnInstructionsVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb2",24, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // InstructionsFunctionVb2 ::= Lines RETURN 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb2",24, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // InstructionsFunctionVb2 ::= Lines RETURN NumberValue 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(val!=null&&sma.testManager.verifyFuctionForReturn(((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()))){
                                                            sma.testManager.insertReturnValue(val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
                                                        }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb2",24, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // InstructionsFunctionVb2 ::= Lines LnInstructionsVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb2",24, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ByVal ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ByVal",17, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ByVal ::= BY_VAL 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ByVal",17, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // InstructionsFunctionVb ::= InstructionsFunctionVb2 
            {
              Object RESULT =null;
		 RESULT=sma.translateControlerTAC.getcurrentQuads();
                                                    sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb",23, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Parameter ::= ByVal ID AS_VB Type 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.getParameterControl().insertParameter((Integer)type,id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Parameter",22, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Parameter ::= Parameter COMMA ByVal ID AS_VB Type 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.getParameterControl().insertParameter((Integer)type,id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Parameter",22, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Parameters ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Parameters",21, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Parameters ::= Parameter 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Parameters",21, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Public ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Public",12, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Public ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Public",12, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SubVbHeader ::= Public SUB_VB ID PARENTHESIS_A Parameters PARENTHESIS_B 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		sma.testManager.creatSonAmbit();
                                                                                            sma.translateControlerTAC.createNewQuadrupleBlock();
                                                                                            String name =sma.testManager.insertFunction(id, null, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                RESULT= name;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("SubVbHeader",20, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SubVb ::= SubVbHeader InstructionsFunctionVb END_VB SUB_VB 
            {
              Object RESULT =null;
		int subleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int subright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object sub = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		ArrayList<Object>quad=new ArrayList<>();
                                                                        if(sub!=null){
                                                                        quad=sma.translateControlerTAC.tagFunction((String)sub,(ArrayList<Object>) lines);
                                                                         
                                                                          }
                                                                         sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    sma.translateControlerTAC.addQuadsToCurrent(quad);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("SubVb",19, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FunctionVbHeader ::= Public FUNCTION_VB ID PARENTHESIS_A Parameters PARENTHESIS_B AS_VB Type 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.creatSonAmbit();
                                                                                            sma.translateControlerTAC.createNewQuadrupleBlock();
                                                                                            String name =sma.testManager.insertFunction(id, (Integer) type, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                                            sma.testManager.setAmbitFuction();
                RESULT= name;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionVbHeader",16, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-7)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FunctionVB ::= FunctionVbHeader InstructionsFunctionVb END_VB FUNCTION_VB 
            {
              Object RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int funright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object fun = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		ArrayList<Object>quad=new ArrayList<>();
                                                                        if(fun!=null){
                                                                            if(ins==null){
                                                                                quad=sma.translateControlerTAC.tagFunction((String)fun,null);
                                                                            }else{
                                                                                quad=sma.translateControlerTAC.tagFunction((String)fun,(ArrayList<Object>) ins);
                                                                            }
                                                                        
                                                                         
                                                                          }
                                                                         sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    sma.translateControlerTAC.addQuadsToCurrent(quad);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionVB",15, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Funct ::= error 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Funct",18, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Funct ::= SubVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Funct",18, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Funct ::= FunctionVB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Funct",18, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VbCode ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("VbCode",4, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VbCode ::= VbCode Funct 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("VbCode",4, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VbSeperator ::= VB_SEPERATOR 
            {
              Object RESULT =null;
		sma.testManager.creatSonAmbit();
                            sma.translateControlerTAC.createNewQuadrupleBlock();
                             
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("VbSeperator",8, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // VB ::= VbSeperator VbCode 
            {
              Object RESULT =null;
		sma.testManager.switchNextTypes();
                                    sma.testManager.finishAmbit();
                                    sma.translateControlerTAC.acceptCurrentBlock();
                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getcurrentQuads());
                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("VB",1, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicio ::= VB Java Python Program 
            {
              Object RESULT =null;
		
                                        
                                        sma.testManager.finishAmbit();
                                    sma.translateControlerTAC.acceptCurrentBlock();
                                           sma.testManager.finishAmbit();
                                    sma.translateControlerTAC.acceptCurrentBlock();
                                    sma.resultQuads=new ResultQuads(sma.translateControlerTAC.getcurrentQuads(), sma.testManager.getStack()
                                            , sma.translateControlerTAC.getTempGenerator(), sma.translateControlerTAC.getIncludeLibraries());
                                    sma.error=error; 
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT = start_val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SyntaxMlgAnalyzer$parser.done_parsing();
          return CUP$SyntaxMlgAnalyzer$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

