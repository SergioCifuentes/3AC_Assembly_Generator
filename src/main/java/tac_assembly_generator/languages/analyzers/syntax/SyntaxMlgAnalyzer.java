
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Oct 15 10:03:10 CST 2020
//----------------------------------------------------

package tac_assembly_generator.languages.analyzers.syntax;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import javax.swing.JTextPane;
import tac_assembly_generator.languages.semantic.verification.TestManager;
import tac_assembly_generator.TAC.TranslateControlerTAC;
import tac_assembly_generator.TAC.quadruple.Operation;
import tac_assembly_generator.TAC.quadruple.Quadruple;
import tac_assembly_generator.TAC.quadruple.BoolQuad;
import tac_assembly_generator.languages.semantic.type.Type;
import tac_assembly_generator.languages.semantic.type.TypeManager;
import tac_assembly_generator.TAC.asst.Switch;
import tac_assembly_generator.languages.semantic.UniquenessTable;
import tac_assembly_generator.TAC.asst.For;
import tac_assembly_generator.languages.semantic.SemanticAsstIdQuad;
import tac_assembly_generator.ui.backend.OutputErrors;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Oct 15 10:03:10 CST 2020
  */
public class SyntaxMlgAnalyzer extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SyntaxMlgAnalyzer() {super();}

  /** Constructor which sets the default scanner. */
  public SyntaxMlgAnalyzer(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SyntaxMlgAnalyzer(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0165\000\002\002\004\000\002\002\006\000\002\003" +
    "\004\000\002\012\003\000\002\006\004\000\002\006\002" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\021\006\000\002\022\012\000\002\024\006\000\002" +
    "\025\010\000\002\016\003\000\002\016\002\000\002\026" +
    "\003\000\002\026\002\000\002\027\007\000\002\027\005" +
    "\000\002\030\003\000\002\031\004\000\002\031\005\000" +
    "\002\031\004\000\002\031\003\000\002\031\004\000\002" +
    "\031\003\000\002\033\004\000\002\033\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\264\006\000\002\264\006\000\002\264\006\000\002" +
    "\034\010\000\002\034\010\000\002\035\005\000\002\035" +
    "\003\000\002\036\003\000\002\036\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\041\005\000" +
    "\002\042\006\000\002\043\010\000\002\043\006\000\002" +
    "\044\003\000\002\045\004\000\002\045\005\000\002\045" +
    "\005\000\002\045\002\000\002\046\005\000\002\046\005" +
    "\000\002\046\003\000\002\047\005\000\002\047\005\000" +
    "\002\047\005\000\002\047\003\000\002\050\003\000\002" +
    "\050\003\000\002\050\003\000\002\050\003\000\002\050" +
    "\005\000\002\051\006\000\002\052\004\000\002\053\005" +
    "\000\002\053\003\000\002\054\005\000\002\054\003\000" +
    "\002\055\004\000\002\055\003\000\002\056\003\000\002" +
    "\056\003\000\002\056\005\000\002\056\005\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\060\007\000" +
    "\002\061\003\000\002\062\010\000\002\062\007\000\002" +
    "\062\010\000\002\063\006\000\002\063\005\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\064\006" +
    "\000\002\064\004\000\002\065\004\000\002\065\002\000" +
    "\002\066\005\000\002\066\005\000\002\067\003\000\002" +
    "\067\003\000\002\070\007\000\002\071\005\000\002\072" +
    "\004\000\002\072\005\000\002\072\002\000\002\073\003" +
    "\000\002\074\005\000\002\075\003\000\002\075\002\000" +
    "\002\076\006\000\002\077\005\000\002\100\005\000\002" +
    "\100\004\000\002\101\004\000\002\101\004\000\002\102" +
    "\003\000\002\102\003\000\002\102\003\000\002\102\003" +
    "\000\002\004\004\000\002\017\003\000\002\007\004\000" +
    "\002\007\002\000\002\103\006\000\002\104\005\000\002" +
    "\110\003\000\002\127\004\000\002\127\002\000\002\111" +
    "\003\000\002\111\003\000\002\111\003\000\002\111\003" +
    "\000\002\111\003\000\002\156\006\000\002\105\007\000" +
    "\002\112\006\000\002\113\010\000\002\114\006\000\002" +
    "\115\010\000\002\106\003\000\002\106\002\000\002\107" +
    "\006\000\002\107\004\000\002\116\003\000\002\116\002" +
    "\000\002\120\005\000\002\120\003\000\002\117\004\000" +
    "\002\117\003\000\002\122\005\000\002\122\003\000\002" +
    "\123\003\000\002\123\003\000\002\123\003\000\002\123" +
    "\003\000\002\123\003\000\002\124\004\000\002\124\004" +
    "\000\002\124\003\000\002\124\004\000\002\124\004\000" +
    "\002\124\003\000\002\124\003\000\002\125\006\000\002" +
    "\125\006\000\002\130\006\000\002\130\006\000\002\130" +
    "\010\000\002\131\007\000\002\133\005\000\002\132\011" +
    "\000\002\132\010\000\002\134\006\000\002\135\005\000" +
    "\002\135\007\000\002\136\005\000\002\136\005\000\002" +
    "\137\007\000\002\137\006\000\002\141\006\000\002\142" +
    "\006\000\002\142\007\000\002\142\002\000\002\144\003" +
    "\000\002\143\007\000\002\145\006\000\002\146\004\000" +
    "\002\146\007\000\002\146\003\000\002\150\004\000\002" +
    "\150\003\000\002\151\006\000\002\147\004\000\002\152" +
    "\004\000\002\005\004\000\002\013\003\000\002\010\004" +
    "\000\002\010\002\000\002\157\006\000\002\157\003\000" +
    "\002\161\010\000\002\162\003\000\002\162\002\000\002" +
    "\163\005\000\002\163\003\000\002\164\003\000\002\160" +
    "\003\000\002\160\005\000\002\165\004\000\002\165\002" +
    "\000\002\166\003\000\002\166\003\000\002\166\003\000" +
    "\002\166\003\000\002\166\003\000\002\166\003\000\002" +
    "\167\006\000\002\170\005\000\002\170\003\000\002\171" +
    "\003\000\002\171\003\000\002\172\007\000\002\174\010" +
    "\000\002\174\006\000\002\175\010\000\002\173\003\000" +
    "\002\176\006\000\002\177\005\000\002\200\005\000\002" +
    "\200\005\000\002\201\003\000\002\202\007\000\002\203" +
    "\005\000\002\204\007\000\002\204\006\000\002\204\002" +
    "\000\002\206\004\000\002\205\005\000\002\011\007\000" +
    "\002\020\003\000\002\207\004\000\002\207\002\000\002" +
    "\214\005\000\002\214\004\000\002\215\007\000\002\250" +
    "\005\000\002\250\005\000\002\250\003\000\002\251\005" +
    "\000\002\251\005\000\002\251\005\000\002\251\003\000" +
    "\002\252\003\000\002\252\003\000\002\252\003\000\002" +
    "\252\003\000\002\252\005\000\002\252\004\000\002\252" +
    "\003\000\002\216\006\000\002\216\005\000\002\222\005" +
    "\000\002\222\004\000\002\227\006\000\002\227\005\000" +
    "\002\227\004\000\002\223\004\000\002\223\006\000\002" +
    "\266\005\000\002\266\003\000\002\266\005\000\002\210" +
    "\006\000\002\210\003\000\002\211\006\000\002\224\003" +
    "\000\002\212\004\000\002\212\003\000\002\225\004\000" +
    "\002\225\004\000\002\225\003\000\002\225\003\000\002" +
    "\225\004\000\002\225\004\000\002\225\004\000\002\225" +
    "\004\000\002\225\003\000\002\126\011\000\002\226\004" +
    "\000\002\226\006\000\002\230\006\000\002\230\004\000" +
    "\002\231\004\000\002\231\003\000\002\231\002\000\002" +
    "\232\005\000\002\232\006\000\002\232\005\000\002\233" +
    "\007\000\002\233\006\000\002\234\006\000\002\235\006" +
    "\000\002\235\007\000\002\235\002\000\002\236\003\000" +
    "\002\237\007\000\002\240\006\000\002\243\004\000\002" +
    "\243\010\000\002\243\003\000\002\244\004\000\002\244" +
    "\003\000\002\253\007\000\002\242\004\000\002\241\003" +
    "\000\002\245\003\000\002\245\003\000\002\245\003\000" +
    "\002\245\003\000\002\245\003\000\002\254\006\000\002" +
    "\254\006\000\002\254\013\000\002\255\007\000\002\247" +
    "\011\000\002\247\010\000\002\256\006\000\002\246\005" +
    "\000\002\260\006\000\002\260\005\000\002\261\005\000" +
    "\002\261\003\000\002\262\003\000\002\262\003\000\002" +
    "\263\005\000\002\264\011\000\002\265\006\000\002\265" +
    "\005\000\002\272\005\000\002\272\003\000\002\267\005" +
    "\000\002\267\003\000\002\270\003\000\002\276\004\000" +
    "\002\273\005\000\002\273\003\000\002\274\005\000\002" +
    "\274\003\000\002\275\004\000\002\275\003\000\002\271" +
    "\003\000\002\271\003\000\002\271\005\000\002\271\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02f7\000\004\004\004\001\002\000\014\003\ufffe\033" +
    "\ufffe\062\ufffe\065\ufffe\067\ufffe\001\002\000\004\062\355" +
    "\001\002\000\014\003\ufffc\033\ufffc\062\ufffc\065\ufffc\067" +
    "\ufffc\001\002\000\004\002\010\001\002\000\004\002\001" +
    "\001\002\000\014\003\012\033\021\062\uffff\065\ufff3\067" +
    "\ufff3\001\002\000\014\003\ufff9\033\ufff9\062\ufff9\065\ufff9" +
    "\067\ufff9\001\002\000\014\003\ufffa\033\ufffa\062\ufffa\065" +
    "\ufffa\067\ufffa\001\002\000\014\003\ufffd\033\ufffd\062\ufffd" +
    "\065\ufffd\067\ufffd\001\002\000\036\003\077\030\070\031" +
    "\110\032\105\034\063\035\106\036\114\041\074\056\075" +
    "\063\112\070\062\071\072\103\113\142\071\001\002\000" +
    "\014\003\ufffb\033\ufffb\062\ufffb\065\ufffb\067\ufffb\001\002" +
    "\000\036\003\077\030\070\031\110\032\105\034\063\035" +
    "\106\036\114\041\074\056\075\063\112\070\062\071\072" +
    "\103\113\142\071\001\002\000\006\065\023\067\022\001" +
    "\002\000\022\022\ufff4\023\ufff4\024\ufff4\056\ufff4\065\ufff4" +
    "\067\ufff4\106\ufff4\107\ufff4\001\002\000\004\056\045\001" +
    "\002\000\004\056\024\001\002\000\004\007\025\001\002" +
    "\000\006\010\ufff1\056\026\001\002\000\004\064\043\001" +
    "\002\000\004\010\040\001\002\000\006\010\ufff2\021\031" +
    "\001\002\000\004\056\032\001\002\000\004\064\033\001" +
    "\002\000\010\022\036\023\037\024\035\001\002\000\006" +
    "\010\ufff0\021\ufff0\001\002\000\060\003\uffa2\006\uffa2\010" +
    "\uffa2\021\uffa2\030\uffa2\031\uffa2\032\uffa2\034\uffa2\035\uffa2" +
    "\036\uffa2\041\uffa2\042\uffa2\056\uffa2\063\uffa2\066\uffa2\070" +
    "\uffa2\071\uffa2\076\uffa2\100\uffa2\101\uffa2\103\uffa2\104\uffa2" +
    "\142\uffa2\001\002\000\060\003\uffa4\006\uffa4\010\uffa4\021" +
    "\uffa4\030\uffa4\031\uffa4\032\uffa4\034\uffa4\035\uffa4\036\uffa4" +
    "\041\uffa4\042\uffa4\056\uffa4\063\uffa4\066\uffa4\070\uffa4\071" +
    "\uffa4\076\uffa4\100\uffa4\101\uffa4\103\uffa4\104\uffa4\142\uffa4" +
    "\001\002\000\060\003\uffa3\006\uffa3\010\uffa3\021\uffa3\030" +
    "\uffa3\031\uffa3\032\uffa3\034\uffa3\035\uffa3\036\uffa3\041\uffa3" +
    "\042\uffa3\056\uffa3\063\uffa3\066\uffa3\070\uffa3\071\uffa3\076" +
    "\uffa3\100\uffa3\101\uffa3\103\uffa3\104\uffa3\142\uffa3\001\002" +
    "\000\004\064\041\001\002\000\010\022\036\023\037\024" +
    "\035\001\002\000\036\003\ufff7\030\ufff7\031\ufff7\032\ufff7" +
    "\034\ufff7\035\ufff7\036\ufff7\041\ufff7\056\ufff7\063\ufff7\070" +
    "\ufff7\071\ufff7\103\ufff7\142\ufff7\001\002\000\010\022\036" +
    "\023\037\024\035\001\002\000\006\010\uffef\021\uffef\001" +
    "\002\000\004\007\046\001\002\000\006\010\ufff1\056\026" +
    "\001\002\000\004\010\050\001\002\000\036\003\ufff5\030" +
    "\ufff5\031\ufff5\032\ufff5\034\ufff5\035\ufff5\036\ufff5\041\ufff5" +
    "\056\ufff5\063\ufff5\070\ufff5\071\ufff5\103\ufff5\142\ufff5\001" +
    "\002\000\052\003\uff9b\030\uff9b\031\uff9b\032\uff9b\034\uff9b" +
    "\035\uff9b\036\uff9b\041\uff9b\042\uff9b\056\uff9b\063\uff9b\066" +
    "\uff9b\070\uff9b\071\uff9b\076\uff9b\100\uff9b\101\uff9b\103\uff9b" +
    "\104\uff9b\142\uff9b\001\002\000\052\003\uffe3\030\uffe3\031" +
    "\uffe3\032\uffe3\034\uffe3\035\uffe3\036\uffe3\041\uffe3\042\uffe3" +
    "\056\uffe3\063\uffe3\066\uffe3\070\uffe3\071\uffe3\076\uffe3\100" +
    "\uffe3\101\uffe3\103\uffe3\104\uffe3\142\uffe3\001\002\000\052" +
    "\003\uffe2\030\uffe2\031\uffe2\032\uffe2\034\uffe2\035\uffe2\036" +
    "\uffe2\041\uffe2\042\uffe2\056\uffe2\063\uffe2\066\uffe2\070\uffe2" +
    "\071\uffe2\076\uffe2\100\uffe2\101\uffe2\103\uffe2\104\uffe2\142" +
    "\uffe2\001\002\000\052\003\uffd5\030\uffd5\031\uffd5\032\uffd5" +
    "\034\uffd5\035\uffd5\036\uffd5\041\uffd5\042\uffd5\056\uffd5\063" +
    "\uffd5\066\uffd5\070\uffd5\071\uffd5\076\uffd5\100\uffd5\101\uffd5" +
    "\103\uffd5\104\uffd5\142\uffd5\001\002\000\052\003\uffe0\030" +
    "\uffe0\031\uffe0\032\uffe0\034\uffe0\035\uffe0\036\uffe0\041\uffe0" +
    "\042\uffe0\056\uffe0\063\uffe0\066\uffe0\070\uffe0\071\uffe0\076" +
    "\uffe0\100\uffe0\101\uffe0\103\uffe0\104\uffe0\142\uffe0\001\002" +
    "\000\016\042\uffee\066\uffee\076\uffee\100\uffee\101\uffee\104" +
    "\uffee\001\002\000\036\003\077\030\070\031\110\032\105" +
    "\034\063\035\106\036\114\041\074\056\075\063\112\070" +
    "\062\071\072\103\113\142\071\001\002\000\036\003\077" +
    "\030\070\031\110\032\105\034\063\035\106\036\114\041" +
    "\074\056\075\063\112\070\062\071\072\103\113\142\071" +
    "\001\002\000\052\003\uffe4\030\uffe4\031\uffe4\032\uffe4\034" +
    "\uffe4\035\uffe4\036\uffe4\041\uffe4\042\uffe4\056\uffe4\063\uffe4" +
    "\066\uffe4\070\uffe4\071\uffe4\076\uffe4\100\uffe4\101\uffe4\103" +
    "\uffe4\104\uffe4\142\uffe4\001\002\000\032\007\132\042\uffe8" +
    "\055\271\056\130\057\137\060\133\061\136\066\uffe8\076" +
    "\uffe8\100\uffe8\101\uffe8\104\uffe8\001\002\000\006\007\uffce" +
    "\056\uffce\001\002\000\004\074\316\001\002\000\052\003" +
    "\uffd3\030\uffd3\031\uffd3\032\uffd3\034\uffd3\035\uffd3\036\uffd3" +
    "\041\uffd3\042\uffd3\056\uffd3\063\uffd3\066\uffd3\070\uffd3\071" +
    "\uffd3\076\uffd3\100\uffd3\101\uffd3\103\uffd3\104\uffd3\142\uffd3" +
    "\001\002\000\052\003\uffe6\030\uffe6\031\uffe6\032\uffe6\034" +
    "\uffe6\035\uffe6\036\uffe6\041\uffe6\042\uffea\056\uffe6\063\uffe6" +
    "\066\uffea\070\uffe6\071\uffe6\076\uffea\100\uffea\101\uffea\103" +
    "\uffe6\104\uffea\142\uffe6\001\002\000\036\003\077\030\070" +
    "\031\110\032\105\034\063\035\106\036\114\041\074\056" +
    "\075\063\112\070\313\071\072\103\113\142\071\001\002" +
    "\000\004\007\310\001\002\000\004\007\302\001\002\000" +
    "\004\017\264\001\002\000\052\003\uffe1\030\uffe1\031\uffe1" +
    "\032\uffe1\034\uffe1\035\uffe1\036\uffe1\041\uffe1\042\uffe1\056" +
    "\uffe1\063\uffe1\066\uffe1\070\uffe1\071\uffe1\076\uffe1\100\uffe1" +
    "\101\uffe1\103\uffe1\104\uffe1\142\uffe1\001\002\000\022\007" +
    "\175\027\177\037\173\040\174\056\130\057\137\060\133" +
    "\061\136\001\002\000\004\006\256\001\002\000\004\056" +
    "\247\001\002\000\052\003\uffdf\030\uffdf\031\uffdf\032\uffdf" +
    "\034\uffdf\035\uffdf\036\uffdf\041\uffdf\042\uffdf\056\uffdf\063" +
    "\uffdf\066\uffdf\070\uffdf\071\uffdf\076\uffdf\100\uffdf\101\uffdf" +
    "\103\uffdf\104\uffdf\142\uffdf\001\002\000\004\104\233\001" +
    "\002\000\004\066\227\001\002\000\052\003\uffd4\030\uffd4" +
    "\031\uffd4\032\uffd4\034\uffd4\035\uffd4\036\uffd4\041\uffd4\042" +
    "\uffd4\056\uffd4\063\uffd4\066\uffd4\070\uffd4\071\uffd4\076\uffd4" +
    "\100\uffd4\101\uffd4\103\uffd4\104\uffd4\142\uffd4\001\002\000" +
    "\052\003\uff9a\030\uff9a\031\uff9a\032\uff9a\034\uff9a\035\uff9a" +
    "\036\uff9a\041\uff9a\042\uff9a\056\uff9a\063\uff9a\066\uff9a\070" +
    "\uff9a\071\uff9a\076\uff9a\100\uff9a\101\uff9a\103\uff9a\104\uff9a" +
    "\142\uff9a\001\002\000\036\003\077\030\070\031\110\032" +
    "\105\034\063\035\106\036\114\041\074\056\075\063\112" +
    "\070\062\071\072\103\113\142\071\001\002\000\004\007" +
    "\222\001\002\000\022\007\175\027\177\037\173\040\174" +
    "\056\130\057\137\060\133\061\136\001\002\000\052\003" +
    "\uffe5\030\uffe5\031\uffe5\032\uffe5\034\uffe5\035\uffe5\036\uffe5" +
    "\041\uffe5\042\uffe5\056\uffe5\063\uffe5\066\uffe5\070\uffe5\071" +
    "\uffe5\076\uffe5\100\uffe5\101\uffe5\103\uffe5\104\uffe5\142\uffe5" +
    "\001\002\000\004\007\166\001\002\000\036\003\077\030" +
    "\070\031\110\032\105\034\063\035\106\036\114\041\074" +
    "\056\075\063\112\070\062\071\072\103\113\142\071\001" +
    "\002\000\004\056\117\001\002\000\004\104\115\001\002" +
    "\000\040\003\uffaa\030\uffaa\031\uffaa\032\uffaa\034\uffaa\035" +
    "\uffaa\036\uffaa\041\uffaa\056\uffaa\063\uffaa\070\uffaa\071\uffaa" +
    "\103\uffaa\120\uffaa\142\uffaa\001\002\000\004\056\116\001" +
    "\002\000\004\104\uff8f\001\002\000\010\006\122\021\uff9e" +
    "\064\154\001\002\000\004\056\121\001\002\000\010\006" +
    "\122\021\uff9e\064\123\001\002\000\014\007\132\056\130" +
    "\057\137\060\133\061\136\001\002\000\010\022\036\023" +
    "\037\024\035\001\002\000\004\021\125\001\002\000\004" +
    "\056\uffa6\001\002\000\054\003\uff9e\006\122\030\uff9e\031" +
    "\uff9e\032\uff9e\034\uff9e\035\uff9e\036\uff9e\041\uff9e\042\uff9e" +
    "\056\uff9e\063\uff9e\066\uff9e\070\uff9e\071\uff9e\076\uff9e\100" +
    "\uff9e\101\uff9e\103\uff9e\104\uff9e\142\uff9e\001\002\000\052" +
    "\003\uffa9\030\uffa9\031\uffa9\032\uffa9\034\uffa9\035\uffa9\036" +
    "\uffa9\041\uffa9\042\uffa9\056\uffa9\063\uffa9\066\uffa9\070\uffa9" +
    "\071\uffa9\076\uffa9\100\uffa9\101\uffa9\103\uffa9\104\uffa9\142" +
    "\uffa9\001\002\000\150\003\uffbf\006\uffbf\010\uffbf\011\uffbf" +
    "\012\uffbf\013\uffbf\014\uffbf\015\uffbf\020\uffbf\021\uffbf\022" +
    "\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\030\uffbf\031\uffbf" +
    "\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\041\uffbf\042" +
    "\uffbf\043\uffbf\044\uffbf\045\uffbf\051\uffbf\052\uffbf\053\uffbf" +
    "\056\uffbf\063\uffbf\066\uffbf\070\uffbf\071\uffbf\074\uffbf\075" +
    "\uffbf\076\uffbf\077\uffbf\100\uffbf\101\uffbf\102\uffbf\103\uffbf" +
    "\104\uffbf\107\uffbf\116\uffbf\117\uffbf\121\uffbf\122\uffbf\125" +
    "\uffbf\142\uffbf\001\002\000\076\003\uff9f\011\150\012\151" +
    "\021\uff9f\022\uff9f\023\uff9f\024\uff9f\030\uff9f\031\uff9f\032" +
    "\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f\041\uff9f\042\uff9f" +
    "\056\uff9f\063\uff9f\066\uff9f\070\uff9f\071\uff9f\076\uff9f\100" +
    "\uff9f\101\uff9f\103\uff9f\104\uff9f\107\uff9f\117\uff9f\121\uff9f" +
    "\142\uff9f\001\002\000\014\007\132\056\130\057\137\060" +
    "\133\061\136\001\002\000\150\003\uffc2\006\uffc2\010\uffc2" +
    "\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\020\uffc2\021" +
    "\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\030\uffc2" +
    "\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\041" +
    "\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\051\uffc2\052\uffc2" +
    "\053\uffc2\056\uffc2\063\uffc2\066\uffc2\070\uffc2\071\uffc2\074" +
    "\uffc2\075\uffc2\076\uffc2\077\uffc2\100\uffc2\101\uffc2\102\uffc2" +
    "\103\uffc2\104\uffc2\107\uffc2\116\uffc2\117\uffc2\121\uffc2\122" +
    "\uffc2\125\uffc2\142\uffc2\001\002\000\140\003\uffc3\006\uffc3" +
    "\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\020" +
    "\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\030\uffc3\031\uffc3" +
    "\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\041\uffc3\042" +
    "\uffc3\043\uffc3\044\uffc3\045\uffc3\051\uffc3\052\uffc3\053\uffc3" +
    "\056\uffc3\063\uffc3\066\uffc3\070\uffc3\071\uffc3\074\uffc3\075" +
    "\uffc3\076\uffc3\077\uffc3\100\uffc3\101\uffc3\103\uffc3\104\uffc3" +
    "\107\uffc3\116\uffc3\117\uffc3\121\uffc3\125\uffc3\142\uffc3\001" +
    "\002\000\140\003\uffc7\006\uffc7\010\uffc7\011\uffc7\012\uffc7" +
    "\013\141\014\142\015\140\020\uffc7\021\uffc7\022\uffc7\023" +
    "\uffc7\024\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7" +
    "\035\uffc7\036\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045" +
    "\uffc7\051\uffc7\052\uffc7\053\uffc7\056\uffc7\063\uffc7\066\uffc7" +
    "\070\uffc7\071\uffc7\074\uffc7\075\uffc7\076\uffc7\077\uffc7\100" +
    "\uffc7\101\uffc7\103\uffc7\104\uffc7\107\uffc7\116\uffc7\117\uffc7" +
    "\121\uffc7\125\uffc7\142\uffc7\001\002\000\150\003\uffc1\006" +
    "\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1" +
    "\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026" +
    "\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1" +
    "\036\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\051" +
    "\uffc1\052\uffc1\053\uffc1\056\uffc1\063\uffc1\066\uffc1\070\uffc1" +
    "\071\uffc1\074\uffc1\075\uffc1\076\uffc1\077\uffc1\100\uffc1\101" +
    "\uffc1\102\uffc1\103\uffc1\104\uffc1\107\uffc1\116\uffc1\117\uffc1" +
    "\121\uffc1\122\uffc1\125\uffc1\142\uffc1\001\002\000\150\003" +
    "\uffc0\006\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0" +
    "\015\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025" +
    "\uffc0\026\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0" +
    "\035\uffc0\036\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045" +
    "\uffc0\051\uffc0\052\uffc0\053\uffc0\056\uffc0\063\uffc0\066\uffc0" +
    "\070\uffc0\071\uffc0\074\uffc0\075\uffc0\076\uffc0\077\uffc0\100" +
    "\uffc0\101\uffc0\102\uffc0\103\uffc0\104\uffc0\107\uffc0\116\uffc0" +
    "\117\uffc0\121\uffc0\122\uffc0\125\uffc0\142\uffc0\001\002\000" +
    "\014\007\132\056\130\057\137\060\133\061\136\001\002" +
    "\000\014\007\132\056\130\057\137\060\133\061\136\001" +
    "\002\000\014\007\132\056\130\057\137\060\133\061\136" +
    "\001\002\000\140\003\uffc5\006\uffc5\010\uffc5\011\uffc5\012" +
    "\uffc5\013\uffc5\014\uffc5\015\uffc5\020\uffc5\021\uffc5\022\uffc5" +
    "\023\uffc5\024\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034" +
    "\uffc5\035\uffc5\036\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5" +
    "\045\uffc5\051\uffc5\052\uffc5\053\uffc5\056\uffc5\063\uffc5\066" +
    "\uffc5\070\uffc5\071\uffc5\074\uffc5\075\uffc5\076\uffc5\077\uffc5" +
    "\100\uffc5\101\uffc5\103\uffc5\104\uffc5\107\uffc5\116\uffc5\117" +
    "\uffc5\121\uffc5\125\uffc5\142\uffc5\001\002\000\140\003\uffc6" +
    "\006\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015" +
    "\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\030\uffc6" +
    "\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\041" +
    "\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\051\uffc6\052\uffc6" +
    "\053\uffc6\056\uffc6\063\uffc6\066\uffc6\070\uffc6\071\uffc6\074" +
    "\uffc6\075\uffc6\076\uffc6\077\uffc6\100\uffc6\101\uffc6\103\uffc6" +
    "\104\uffc6\107\uffc6\116\uffc6\117\uffc6\121\uffc6\125\uffc6\142" +
    "\uffc6\001\002\000\140\003\uffc4\006\uffc4\010\uffc4\011\uffc4" +
    "\012\uffc4\013\uffc4\014\uffc4\015\uffc4\020\uffc4\021\uffc4\022" +
    "\uffc4\023\uffc4\024\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4" +
    "\034\uffc4\035\uffc4\036\uffc4\041\uffc4\042\uffc4\043\uffc4\044" +
    "\uffc4\045\uffc4\051\uffc4\052\uffc4\053\uffc4\056\uffc4\063\uffc4" +
    "\066\uffc4\070\uffc4\071\uffc4\074\uffc4\075\uffc4\076\uffc4\077" +
    "\uffc4\100\uffc4\101\uffc4\103\uffc4\104\uffc4\107\uffc4\116\uffc4" +
    "\117\uffc4\121\uffc4\125\uffc4\142\uffc4\001\002\000\010\010" +
    "\147\011\150\012\151\001\002\000\150\003\uffbe\006\uffbe" +
    "\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\020" +
    "\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe" +
    "\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036" +
    "\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\051\uffbe" +
    "\052\uffbe\053\uffbe\056\uffbe\063\uffbe\066\uffbe\070\uffbe\071" +
    "\uffbe\074\uffbe\075\uffbe\076\uffbe\077\uffbe\100\uffbe\101\uffbe" +
    "\102\uffbe\103\uffbe\104\uffbe\107\uffbe\116\uffbe\117\uffbe\121" +
    "\uffbe\122\uffbe\125\uffbe\142\uffbe\001\002\000\014\007\132" +
    "\056\130\057\137\060\133\061\136\001\002\000\014\007" +
    "\132\056\130\057\137\060\133\061\136\001\002\000\140" +
    "\003\uffc8\006\uffc8\010\uffc8\011\uffc8\012\uffc8\013\141\014" +
    "\142\015\140\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8" +
    "\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036" +
    "\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\051\uffc8" +
    "\052\uffc8\053\uffc8\056\uffc8\063\uffc8\066\uffc8\070\uffc8\071" +
    "\uffc8\074\uffc8\075\uffc8\076\uffc8\077\uffc8\100\uffc8\101\uffc8" +
    "\103\uffc8\104\uffc8\107\uffc8\116\uffc8\117\uffc8\121\uffc8\125" +
    "\uffc8\142\uffc8\001\002\000\140\003\uffc9\006\uffc9\010\uffc9" +
    "\011\uffc9\012\uffc9\013\141\014\142\015\140\020\uffc9\021" +
    "\uffc9\022\uffc9\023\uffc9\024\uffc9\030\uffc9\031\uffc9\032\uffc9" +
    "\033\uffc9\034\uffc9\035\uffc9\036\uffc9\041\uffc9\042\uffc9\043" +
    "\uffc9\044\uffc9\045\uffc9\051\uffc9\052\uffc9\053\uffc9\056\uffc9" +
    "\063\uffc9\066\uffc9\070\uffc9\071\uffc9\074\uffc9\075\uffc9\076" +
    "\uffc9\077\uffc9\100\uffc9\101\uffc9\103\uffc9\104\uffc9\107\uffc9" +
    "\116\uffc9\117\uffc9\121\uffc9\125\uffc9\142\uffc9\001\002\000" +
    "\010\022\036\023\037\024\035\001\002\000\004\021\156" +
    "\001\002\000\004\056\uffa5\001\002\000\054\003\uff9e\006" +
    "\160\030\uff9e\031\uff9e\032\uff9e\034\uff9e\035\uff9e\036\uff9e" +
    "\041\uff9e\042\uff9e\056\uff9e\063\uff9e\066\uff9e\070\uff9e\071" +
    "\uff9e\076\uff9e\100\uff9e\101\uff9e\103\uff9e\104\uff9e\142\uff9e" +
    "\001\002\000\024\007\132\030\070\031\110\032\105\056" +
    "\130\057\137\060\133\061\136\142\071\001\002\000\052" +
    "\003\uffa8\030\uffa8\031\uffa8\032\uffa8\034\uffa8\035\uffa8\036" +
    "\uffa8\041\uffa8\042\uffa8\056\uffa8\063\uffa8\066\uffa8\070\uffa8" +
    "\071\uffa8\076\uffa8\100\uffa8\101\uffa8\103\uffa8\104\uffa8\142" +
    "\uffa8\001\002\000\052\003\uffa7\030\uffa7\031\uffa7\032\uffa7" +
    "\034\uffa7\035\uffa7\036\uffa7\041\uffa7\042\uffa7\056\uffa7\063" +
    "\uffa7\066\uffa7\070\uffa7\071\uffa7\076\uffa7\100\uffa7\101\uffa7" +
    "\103\uffa7\104\uffa7\142\uffa7\001\002\000\004\066\164\001" +
    "\002\000\004\035\165\001\002\000\052\003\uffbd\030\uffbd" +
    "\031\uffbd\032\uffbd\034\uffbd\035\uffbd\036\uffbd\041\uffbd\042" +
    "\uffbd\056\uffbd\063\uffbd\066\uffbd\070\uffbd\071\uffbd\076\uffbd" +
    "\100\uffbd\101\uffbd\103\uffbd\104\uffbd\142\uffbd\001\002\000" +
    "\004\055\167\001\002\000\004\010\170\001\002\000\076" +
    "\003\uffdc\022\uffdc\023\uffdc\024\uffdc\030\uffdc\031\uffdc\032" +
    "\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\041\uffdc\042\uffdc" +
    "\044\uffdc\045\uffdc\056\uffdc\063\uffdc\066\uffdc\070\uffdc\071" +
    "\uffdc\076\uffdc\100\uffdc\101\uffdc\103\uffdc\104\uffdc\107\uffdc" +
    "\117\uffdc\121\uffdc\125\uffdc\142\uffdc\001\002\000\066\003" +
    "\uffb6\010\uffb6\025\uffb6\026\uffb6\030\uffb6\031\uffb6\032\uffb6" +
    "\034\uffb6\035\uffb6\036\uffb6\041\uffb6\042\uffb6\056\uffb6\063" +
    "\uffb6\066\uffb6\070\uffb6\071\uffb6\076\uffb6\100\uffb6\101\uffb6" +
    "\102\uffb6\103\uffb6\104\uffb6\117\uffb6\122\uffb6\142\uffb6\001" +
    "\002\000\040\003\uffbc\025\220\030\uffbc\031\uffbc\032\uffbc" +
    "\034\uffbc\035\uffbc\036\uffbc\041\uffbc\056\uffbc\063\uffbc\070" +
    "\uffbc\071\uffbc\103\uffbc\142\uffbc\001\002\000\066\003\uffb5" +
    "\010\uffb5\025\uffb5\026\uffb5\030\uffb5\031\uffb5\032\uffb5\034" +
    "\uffb5\035\uffb5\036\uffb5\041\uffb5\042\uffb5\056\uffb5\063\uffb5" +
    "\066\uffb5\070\uffb5\071\uffb5\076\uffb5\100\uffb5\101\uffb5\102" +
    "\uffb5\103\uffb5\104\uffb5\117\uffb5\122\uffb5\142\uffb5\001\002" +
    "\000\066\003\uffb4\010\uffb4\025\uffb4\026\uffb4\030\uffb4\031" +
    "\uffb4\032\uffb4\034\uffb4\035\uffb4\036\uffb4\041\uffb4\042\uffb4" +
    "\056\uffb4\063\uffb4\066\uffb4\070\uffb4\071\uffb4\076\uffb4\100" +
    "\uffb4\101\uffb4\102\uffb4\103\uffb4\104\uffb4\117\uffb4\122\uffb4" +
    "\142\uffb4\001\002\000\022\007\175\027\177\037\173\040" +
    "\174\056\130\057\137\060\133\061\136\001\002\000\022" +
    "\006\206\011\150\012\151\043\212\051\207\052\211\053" +
    "\205\077\213\001\002\000\020\007\175\037\173\040\174" +
    "\056\130\057\137\060\133\061\136\001\002\000\066\003" +
    "\uffb8\010\uffb8\025\uffb8\026\uffb8\030\uffb8\031\uffb8\032\uffb8" +
    "\034\uffb8\035\uffb8\036\uffb8\041\uffb8\042\uffb8\056\uffb8\063" +
    "\uffb8\066\uffb8\070\uffb8\071\uffb8\076\uffb8\100\uffb8\101\uffb8" +
    "\102\uffb8\103\uffb8\104\uffb8\117\uffb8\122\uffb8\142\uffb8\001" +
    "\002\000\066\003\uffba\010\uffba\025\uffba\026\202\030\uffba" +
    "\031\uffba\032\uffba\034\uffba\035\uffba\036\uffba\041\uffba\042" +
    "\uffba\056\uffba\063\uffba\066\uffba\070\uffba\071\uffba\076\uffba" +
    "\100\uffba\101\uffba\102\uffba\103\uffba\104\uffba\117\uffba\122" +
    "\uffba\142\uffba\001\002\000\022\007\175\027\177\037\173" +
    "\040\174\056\130\057\137\060\133\061\136\001\002\000" +
    "\066\003\uffb9\010\uffb9\025\uffb9\026\uffb9\030\uffb9\031\uffb9" +
    "\032\uffb9\034\uffb9\035\uffb9\036\uffb9\041\uffb9\042\uffb9\056" +
    "\uffb9\063\uffb9\066\uffb9\070\uffb9\071\uffb9\076\uffb9\100\uffb9" +
    "\101\uffb9\102\uffb9\103\uffb9\104\uffb9\117\uffb9\122\uffb9\142" +
    "\uffb9\001\002\000\066\003\uffb7\010\uffb7\025\uffb7\026\uffb7" +
    "\030\uffb7\031\uffb7\032\uffb7\034\uffb7\035\uffb7\036\uffb7\041" +
    "\uffb7\042\uffb7\056\uffb7\063\uffb7\066\uffb7\070\uffb7\071\uffb7" +
    "\076\uffb7\100\uffb7\101\uffb7\102\uffb7\103\uffb7\104\uffb7\117" +
    "\uffb7\122\uffb7\142\uffb7\001\002\000\014\007\uffac\056\uffac" +
    "\057\uffac\060\uffac\061\uffac\001\002\000\014\007\uffb1\056" +
    "\uffb1\057\uffb1\060\uffb1\061\uffb1\001\002\000\014\007\uffae" +
    "\056\uffae\057\uffae\060\uffae\061\uffae\001\002\000\014\007" +
    "\132\056\130\057\137\060\133\061\136\001\002\000\014" +
    "\007\uffad\056\uffad\057\uffad\060\uffad\061\uffad\001\002\000" +
    "\014\007\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf\001\002" +
    "\000\014\007\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\001" +
    "\002\000\066\003\uffb3\010\uffb3\025\uffb3\026\uffb3\030\uffb3" +
    "\031\uffb3\032\uffb3\034\uffb3\035\uffb3\036\uffb3\041\uffb3\042" +
    "\uffb3\056\uffb3\063\uffb3\066\uffb3\070\uffb3\071\uffb3\076\uffb3" +
    "\100\uffb3\101\uffb3\102\uffb3\103\uffb3\104\uffb3\117\uffb3\122" +
    "\uffb3\142\uffb3\001\002\000\006\010\217\025\220\001\002" +
    "\000\024\006\206\010\147\011\150\012\151\043\212\051" +
    "\207\052\211\053\205\077\213\001\002\000\066\003\uffb2" +
    "\010\uffb2\025\uffb2\026\uffb2\030\uffb2\031\uffb2\032\uffb2\034" +
    "\uffb2\035\uffb2\036\uffb2\041\uffb2\042\uffb2\056\uffb2\063\uffb2" +
    "\066\uffb2\070\uffb2\071\uffb2\076\uffb2\100\uffb2\101\uffb2\102" +
    "\uffb2\103\uffb2\104\uffb2\117\uffb2\122\uffb2\142\uffb2\001\002" +
    "\000\022\007\175\027\177\037\173\040\174\056\130\057" +
    "\137\060\133\061\136\001\002\000\066\003\uffbb\010\uffbb" +
    "\025\uffbb\026\202\030\uffbb\031\uffbb\032\uffbb\034\uffbb\035" +
    "\uffbb\036\uffbb\041\uffbb\042\uffbb\056\uffbb\063\uffbb\066\uffbb" +
    "\070\uffbb\071\uffbb\076\uffbb\100\uffbb\101\uffbb\102\uffbb\103" +
    "\uffbb\104\uffbb\117\uffbb\122\uffbb\142\uffbb\001\002\000\004" +
    "\055\223\001\002\000\004\010\224\001\002\000\076\003" +
    "\uffdd\022\uffdd\023\uffdd\024\uffdd\030\uffdd\031\uffdd\032\uffdd" +
    "\033\uffdd\034\uffdd\035\uffdd\036\uffdd\041\uffdd\042\uffdd\044" +
    "\uffdd\045\uffdd\056\uffdd\063\uffdd\066\uffdd\070\uffdd\071\uffdd" +
    "\076\uffdd\100\uffdd\101\uffdd\103\uffdd\104\uffdd\107\uffdd\117" +
    "\uffdd\121\uffdd\125\uffdd\142\uffdd\001\002\000\004\076\226" +
    "\001\002\000\052\003\uffd2\030\uffd2\031\uffd2\032\uffd2\034" +
    "\uffd2\035\uffd2\036\uffd2\041\uffd2\042\uffd2\056\uffd2\063\uffd2" +
    "\066\uffd2\070\uffd2\071\uffd2\076\uffd2\100\uffd2\101\uffd2\103" +
    "\uffd2\104\uffd2\142\uffd2\001\002\000\004\065\230\001\002" +
    "\000\014\003\ufff8\033\ufff8\062\ufff8\065\ufff8\067\ufff8\001" +
    "\002\000\036\003\077\030\070\031\110\032\105\034\063" +
    "\035\106\036\114\041\074\056\075\063\112\070\062\071" +
    "\072\103\113\142\071\001\002\000\006\066\243\104\233" +
    "\001\002\000\014\042\235\056\234\057\240\060\237\061" +
    "\241\001\002\000\040\003\uff87\010\uff87\030\uff87\031\uff87" +
    "\032\uff87\034\uff87\035\uff87\036\uff87\041\uff87\056\uff87\063" +
    "\uff87\070\uff87\071\uff87\103\uff87\142\uff87\001\002\000\036" +
    "\003\uff8b\030\uff8b\031\uff8b\032\uff8b\034\uff8b\035\uff8b\036" +
    "\uff8b\041\uff8b\056\uff8b\063\uff8b\070\uff8b\071\uff8b\103\uff8b" +
    "\142\uff8b\001\002\000\036\003\uff8c\030\uff8c\031\uff8c\032" +
    "\uff8c\034\uff8c\035\uff8c\036\uff8c\041\uff8c\056\uff8c\063\uff8c" +
    "\070\uff8c\071\uff8c\103\uff8c\142\uff8c\001\002\000\040\003" +
    "\uff8a\010\uff8a\030\uff8a\031\uff8a\032\uff8a\034\uff8a\035\uff8a" +
    "\036\uff8a\041\uff8a\056\uff8a\063\uff8a\070\uff8a\071\uff8a\103" +
    "\uff8a\142\uff8a\001\002\000\040\003\uff88\010\uff88\030\uff88" +
    "\031\uff88\032\uff88\034\uff88\035\uff88\036\uff88\041\uff88\056" +
    "\uff88\063\uff88\070\uff88\071\uff88\103\uff88\142\uff88\001\002" +
    "\000\040\003\uff89\010\uff89\030\uff89\031\uff89\032\uff89\034" +
    "\uff89\035\uff89\036\uff89\041\uff89\056\uff89\063\uff89\070\uff89" +
    "\071\uff89\103\uff89\142\uff89\001\002\000\036\003\077\030" +
    "\070\031\110\032\105\034\063\035\106\036\114\041\074" +
    "\056\075\063\112\070\062\071\072\103\113\142\071\001" +
    "\002\000\004\103\244\001\002\000\052\003\uff90\030\uff90" +
    "\031\uff90\032\uff90\034\uff90\035\uff90\036\uff90\041\uff90\042" +
    "\uff90\056\uff90\063\uff90\066\uff90\070\uff90\071\uff90\076\uff90" +
    "\100\uff90\101\uff90\103\uff90\104\uff90\142\uff90\001\002\000" +
    "\006\066\uff8e\104\uff8e\001\002\000\006\066\uff8d\104\uff8d" +
    "\001\002\000\006\006\250\064\251\001\002\000\014\007" +
    "\132\056\130\057\137\060\133\061\136\001\002\000\010" +
    "\022\036\023\037\024\035\001\002\000\004\006\253\001" +
    "\002\000\014\007\132\056\130\057\137\060\133\061\136" +
    "\001\002\000\010\011\150\012\151\074\uffd0\001\002\000" +
    "\010\011\150\012\151\074\uffcf\001\002\000\024\007\132" +
    "\030\070\031\110\032\105\056\130\057\137\060\133\061" +
    "\136\142\071\001\002\000\052\003\uff9c\030\uff9c\031\uff9c" +
    "\032\uff9c\034\uff9c\035\uff9c\036\uff9c\041\uff9c\042\uff9c\056" +
    "\uff9c\063\uff9c\066\uff9c\070\uff9c\071\uff9c\076\uff9c\100\uff9c" +
    "\101\uff9c\103\uff9c\104\uff9c\142\uff9c\001\002\000\056\003" +
    "\uff9d\011\150\012\151\030\uff9d\031\uff9d\032\uff9d\034\uff9d" +
    "\035\uff9d\036\uff9d\041\uff9d\042\uff9d\056\uff9d\063\uff9d\066" +
    "\uff9d\070\uff9d\071\uff9d\076\uff9d\100\uff9d\101\uff9d\103\uff9d" +
    "\104\uff9d\142\uff9d\001\002\000\042\003\uff91\025\220\030" +
    "\uff91\031\uff91\032\uff91\034\uff91\035\uff91\036\uff91\041\uff91" +
    "\056\uff91\063\uff91\070\uff91\071\uff91\102\263\103\uff91\142" +
    "\uff91\001\002\000\036\003\uff98\030\uff98\031\uff98\032\uff98" +
    "\034\uff98\035\uff98\036\uff98\041\uff98\056\uff98\063\uff98\070" +
    "\uff98\071\uff98\103\uff98\142\uff98\001\002\000\036\003\uff92" +
    "\030\uff92\031\uff92\032\uff92\034\uff92\035\uff92\036\uff92\041" +
    "\uff92\056\uff92\063\uff92\070\uff92\071\uff92\103\uff92\142\uff92" +
    "\001\002\000\006\072\266\073\265\001\002\000\004\007" +
    "\277\001\002\000\004\007\267\001\002\000\016\007\132" +
    "\055\271\056\130\057\137\060\133\061\136\001\002\000" +
    "\022\010\uffd8\020\uffd8\042\uffd8\066\uffd8\076\uffd8\100\uffd8" +
    "\101\uffd8\104\uffd8\001\002\000\024\010\uffd7\020\uffd7\021" +
    "\uffd7\042\uffd7\066\uffd7\076\uffd7\100\uffd7\101\uffd7\104\uffd7" +
    "\001\002\000\006\010\274\020\275\001\002\000\030\010" +
    "\uffd6\011\150\012\151\020\uffd6\021\uffd6\042\uffd6\066\uffd6" +
    "\076\uffd6\100\uffd6\101\uffd6\104\uffd6\001\002\000\052\003" +
    "\uffdb\030\uffdb\031\uffdb\032\uffdb\034\uffdb\035\uffdb\036\uffdb" +
    "\041\uffdb\042\uffdb\056\uffdb\063\uffdb\066\uffdb\070\uffdb\071" +
    "\uffdb\076\uffdb\100\uffdb\101\uffdb\103\uffdb\104\uffdb\142\uffdb" +
    "\001\002\000\016\007\132\055\271\056\130\057\137\060" +
    "\133\061\136\001\002\000\022\010\uffd9\020\uffd9\042\uffd9" +
    "\066\uffd9\076\uffd9\100\uffd9\101\uffd9\104\uffd9\001\002\000" +
    "\016\007\132\055\271\056\130\057\137\060\133\061\136" +
    "\001\002\000\006\010\301\020\275\001\002\000\052\003" +
    "\uffda\030\uffda\031\uffda\032\uffda\034\uffda\035\uffda\036\uffda" +
    "\041\uffda\042\uffda\056\uffda\063\uffda\066\uffda\070\uffda\071" +
    "\uffda\076\uffda\100\uffda\101\uffda\103\uffda\104\uffda\142\uffda" +
    "\001\002\000\004\055\303\001\002\000\004\021\304\001" +
    "\002\000\004\020\305\001\002\000\004\056\306\001\002" +
    "\000\004\010\307\001\002\000\076\003\ufeaf\022\ufeaf\023" +
    "\ufeaf\024\ufeaf\030\ufeaf\031\ufeaf\032\ufeaf\033\ufeaf\034\ufeaf" +
    "\035\ufeaf\036\ufeaf\041\ufeaf\042\ufeaf\044\ufeaf\045\ufeaf\056" +
    "\ufeaf\063\ufeaf\066\ufeaf\070\ufeaf\071\ufeaf\076\ufeaf\100\ufeaf" +
    "\101\ufeaf\103\ufeaf\104\ufeaf\107\ufeaf\117\ufeaf\121\ufeaf\125" +
    "\ufeaf\142\ufeaf\001\002\000\004\055\311\001\002\000\004" +
    "\010\312\001\002\000\076\003\uffde\022\uffde\023\uffde\024" +
    "\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde" +
    "\036\uffde\041\uffde\042\uffde\044\uffde\045\uffde\056\uffde\063" +
    "\uffde\066\uffde\070\uffde\071\uffde\076\uffde\100\uffde\101\uffde" +
    "\103\uffde\104\uffde\107\uffde\117\uffde\121\uffde\125\uffde\142" +
    "\uffde\001\002\000\032\007\132\042\uffeb\055\271\056\130" +
    "\057\137\060\133\061\136\066\uffeb\076\uffeb\100\uffeb\101" +
    "\uffeb\104\uffeb\001\002\000\052\003\uffe7\030\uffe7\031\uffe7" +
    "\032\uffe7\034\uffe7\035\uffe7\036\uffe7\041\uffe7\042\uffed\056" +
    "\uffe7\063\uffe7\066\uffed\070\uffe7\071\uffe7\076\uffed\100\uffed" +
    "\101\uffed\103\uffe7\104\uffed\142\uffe7\001\002\000\020\020" +
    "\275\042\uffec\066\uffec\076\uffec\100\uffec\101\uffec\104\uffec" +
    "\001\002\000\014\007\132\056\130\057\137\060\133\061" +
    "\136\001\002\000\044\003\uffca\011\150\012\151\030\uffca" +
    "\031\uffca\032\uffca\034\uffca\035\uffca\036\uffca\041\uffca\056" +
    "\uffca\063\uffca\070\uffca\071\uffca\075\321\103\uffca\142\uffca" +
    "\001\002\000\036\003\uffd1\030\uffd1\031\uffd1\032\uffd1\034" +
    "\uffd1\035\uffd1\036\uffd1\041\uffd1\056\uffd1\063\uffd1\070\uffd1" +
    "\071\uffd1\103\uffd1\142\uffd1\001\002\000\016\011\323\012" +
    "\324\056\234\057\240\060\237\061\241\001\002\000\036" +
    "\003\uffcd\030\uffcd\031\uffcd\032\uffcd\034\uffcd\035\uffcd\036" +
    "\uffcd\041\uffcd\056\uffcd\063\uffcd\070\uffcd\071\uffcd\103\uffcd" +
    "\142\uffcd\001\002\000\012\056\234\057\240\060\237\061" +
    "\241\001\002\000\012\056\234\057\240\060\237\061\241" +
    "\001\002\000\036\003\uffcc\030\uffcc\031\uffcc\032\uffcc\034" +
    "\uffcc\035\uffcc\036\uffcc\041\uffcc\056\uffcc\063\uffcc\070\uffcc" +
    "\071\uffcc\103\uffcc\142\uffcc\001\002\000\036\003\uffcb\030" +
    "\uffcb\031\uffcb\032\uffcb\034\uffcb\035\uffcb\036\uffcb\041\uffcb" +
    "\056\uffcb\063\uffcb\070\uffcb\071\uffcb\103\uffcb\142\uffcb\001" +
    "\002\000\020\020\275\042\uffe9\066\uffe9\076\uffe9\100\uffe9" +
    "\101\uffe9\104\uffe9\001\002\000\004\100\331\001\002\000" +
    "\004\035\332\001\002\000\022\007\175\027\177\037\173" +
    "\040\174\056\130\057\137\060\133\061\136\001\002\000" +
    "\054\003\uffab\025\220\030\uffab\031\uffab\032\uffab\034\uffab" +
    "\035\uffab\036\uffab\041\uffab\042\uffab\056\uffab\063\uffab\066" +
    "\uffab\070\uffab\071\uffab\076\uffab\100\uffab\101\uffab\103\uffab" +
    "\104\uffab\142\uffab\001\002\000\010\042\340\066\uff95\101" +
    "\341\001\002\000\036\003\077\030\070\031\110\032\105" +
    "\034\063\035\106\036\114\041\074\056\075\063\112\070" +
    "\062\071\072\103\113\142\071\001\002\000\004\066\346" +
    "\001\002\000\036\003\077\030\070\031\110\032\105\034" +
    "\063\035\106\036\114\041\074\056\075\063\112\070\062" +
    "\071\072\103\113\142\071\001\002\000\036\003\uff94\030" +
    "\uff94\031\uff94\032\uff94\034\uff94\035\uff94\036\uff94\041\uff94" +
    "\056\uff94\063\uff94\070\uff94\071\uff94\103\uff94\142\uff94\001" +
    "\002\000\022\007\175\027\177\037\173\040\174\056\130" +
    "\057\137\060\133\061\136\001\002\000\042\003\uff91\025" +
    "\220\030\uff91\031\uff91\032\uff91\034\uff91\035\uff91\036\uff91" +
    "\041\uff91\056\uff91\063\uff91\070\uff91\071\uff91\102\263\103" +
    "\uff91\142\uff91\001\002\000\036\003\uff93\030\uff93\031\uff93" +
    "\032\uff93\034\uff93\035\uff93\036\uff93\041\uff93\056\uff93\063" +
    "\uff93\070\uff93\071\uff93\103\uff93\142\uff93\001\002\000\010" +
    "\042\340\066\uff95\101\341\001\002\000\004\066\uff96\001" +
    "\002\000\004\041\347\001\002\000\052\003\uff99\030\uff99" +
    "\031\uff99\032\uff99\034\uff99\035\uff99\036\uff99\041\uff99\042" +
    "\uff99\056\uff99\063\uff99\066\uff99\070\uff99\071\uff99\076\uff99" +
    "\100\uff99\101\uff99\103\uff99\104\uff99\142\uff99\001\002\000" +
    "\004\066\uff97\001\002\000\004\066\352\001\002\000\004" +
    "\067\353\001\002\000\014\003\ufff6\033\ufff6\062\ufff6\065" +
    "\ufff6\067\ufff6\001\002\000\004\105\u01a5\001\002\000\010" +
    "\033\uff85\105\uff85\106\uff85\001\002\000\010\033\uff83\105" +
    "\uff83\106\uff83\001\002\000\010\033\021\105\uff86\106\ufff3" +
    "\001\002\000\004\120\365\001\002\000\010\033\uff84\105" +
    "\uff84\106\uff84\001\002\000\004\106\363\001\002\000\004" +
    "\056\364\001\002\000\004\120\uff81\001\002\000\022\003" +
    "\uff7e\022\uff7e\023\uff7e\024\uff7e\033\uff7e\056\uff7e\107\uff7e" +
    "\121\uff7e\001\002\000\004\121\u01a2\001\002\000\022\003" +
    "\u0100\022\ufff3\023\ufff3\024\ufff3\033\021\056\ufff3\107\ufff3" +
    "\121\uff80\001\002\000\022\003\uff7f\022\uff7f\023\uff7f\024" +
    "\uff7f\033\uff7f\056\uff7f\107\uff7f\121\uff7f\001\002\000\022" +
    "\003\uff7c\022\uff7c\023\uff7c\024\uff7c\033\uff7c\056\uff7c\107" +
    "\uff7c\121\uff7c\001\002\000\022\003\uff7d\022\uff7d\023\uff7d" +
    "\024\uff7d\033\uff7d\056\uff7d\107\uff7d\121\uff7d\001\002\000" +
    "\022\003\uff7b\022\uff7b\023\uff7b\024\uff7b\033\uff7b\056\uff7b" +
    "\107\uff7b\121\uff7b\001\002\000\014\022\036\023\037\024" +
    "\035\056\u018e\107\u0190\001\002\000\004\120\u018b\001\002" +
    "\000\004\120\u0188\001\002\000\022\003\uff7a\022\uff7a\023" +
    "\uff7a\024\uff7a\033\uff7a\056\uff7a\107\uff7a\121\uff7a\001\002" +
    "\000\022\003\uff79\022\uff79\023\uff79\024\uff79\033\uff79\056" +
    "\uff79\107\uff79\121\uff79\001\002\000\004\120\u0102\001\002" +
    "\000\046\003\u0115\022\ufff3\023\ufff3\024\ufff3\030\070\031" +
    "\110\032\105\033\021\034\063\035\u0107\036\u0110\041\u010d" +
    "\056\u010e\111\u0104\112\u010c\113\u0103\121\uff6d\142\071\001" +
    "\002\000\004\007\u0185\001\002\000\004\007\u0182\001\002" +
    "\000\004\007\u0178\001\002\000\004\117\u0177\001\002\000" +
    "\004\007\u0174\001\002\000\004\117\u0173\001\002\000\052" +
    "\003\uff69\022\uff69\023\uff69\024\uff69\030\uff69\031\uff69\032" +
    "\uff69\033\uff69\034\uff69\035\uff69\036\uff69\041\uff69\056\uff69" +
    "\110\uff69\111\uff69\112\uff69\113\uff69\116\uff69\121\uff69\142" +
    "\uff69\001\002\000\004\120\u0160\001\002\000\004\120\u015d" +
    "\001\002\000\004\007\u0152\001\002\000\004\007\u014f\001" +
    "\002\000\004\006\u014c\001\002\000\052\003\u0115\022\ufff3" +
    "\023\ufff3\024\ufff3\030\070\031\110\032\105\033\021\034" +
    "\063\035\u0107\036\u0110\041\u010d\056\u010e\110\u014a\111\u0104" +
    "\112\u010c\113\u0103\116\uff6b\121\uff6b\142\071\001\002\000" +
    "\004\120\u0144\001\002\000\006\116\uff6e\121\uff6e\001\002" +
    "\000\052\003\uff5f\022\uff5f\023\uff5f\024\uff5f\030\uff5f\031" +
    "\uff5f\032\uff5f\033\uff5f\034\uff5f\035\uff5f\036\uff5f\041\uff5f" +
    "\056\uff5f\110\uff5f\111\uff5f\112\uff5f\113\uff5f\116\uff5f\121" +
    "\uff5f\142\uff5f\001\002\000\052\003\uff5c\022\uff5c\023\uff5c" +
    "\024\uff5c\030\uff5c\031\uff5c\032\uff5c\033\uff5c\034\uff5c\035" +
    "\uff5c\036\uff5c\041\uff5c\056\uff5c\110\uff5c\111\uff5c\112\uff5c" +
    "\113\uff5c\116\uff5c\121\uff5c\142\uff5c\001\002\000\004\117" +
    "\u0143\001\002\000\052\003\uff5b\022\uff5b\023\uff5b\024\uff5b" +
    "\030\uff5b\031\uff5b\032\uff5b\033\uff5b\034\uff5b\035\uff5b\036" +
    "\uff5b\041\uff5b\056\uff5b\110\uff5b\111\uff5b\112\uff5b\113\uff5b" +
    "\116\uff5b\121\uff5b\142\uff5b\001\002\000\004\117\u0142\001" +
    "\002\000\022\007\175\027\177\037\173\040\174\056\130" +
    "\057\137\060\133\061\136\001\002\000\010\022\036\023" +
    "\037\024\035\001\002\000\004\121\u0131\001\002\000\004" +
    "\120\u012e\001\002\000\004\120\u011c\001\002\000\046\003" +
    "\u0115\022\ufff3\023\ufff3\024\ufff3\030\070\031\110\032\105" +
    "\033\021\034\063\035\u0107\036\u0110\041\u010d\056\u010e\111" +
    "\u0104\112\u010c\113\u0103\121\uff6d\142\071\001\002\000\004" +
    "\121\u011e\001\002\000\054\003\uff47\022\uff47\023\uff47\024" +
    "\uff47\030\uff47\031\uff47\032\uff47\033\uff47\034\uff47\035\uff47" +
    "\036\uff47\041\uff47\042\u0120\056\uff47\110\uff47\111\uff47\112" +
    "\uff47\113\uff47\116\uff47\121\uff47\142\uff47\001\002\000\004" +
    "\120\u012b\001\002\000\006\041\u0127\120\uff46\001\002\000" +
    "\004\120\u0123\001\002\000\052\003\uff4c\022\uff4c\023\uff4c" +
    "\024\uff4c\030\uff4c\031\uff4c\032\uff4c\033\uff4c\034\uff4c\035" +
    "\uff4c\036\uff4c\041\uff4c\056\uff4c\110\uff4c\111\uff4c\112\uff4c" +
    "\113\uff4c\116\uff4c\121\uff4c\142\uff4c\001\002\000\044\003" +
    "\u0115\022\ufff3\023\ufff3\024\ufff3\030\070\031\110\032\105" +
    "\033\021\034\063\035\u0107\036\u0110\041\u010d\056\u010e\111" +
    "\u0104\112\u010c\113\u0103\142\071\001\002\000\004\121\u0125" +
    "\001\002\000\054\003\uff47\022\uff47\023\uff47\024\uff47\030" +
    "\uff47\031\uff47\032\uff47\033\uff47\034\uff47\035\uff47\036\uff47" +
    "\041\uff47\042\u0120\056\uff47\110\uff47\111\uff47\112\uff47\113" +
    "\uff47\116\uff47\121\uff47\142\uff47\001\002\000\052\003\uff48" +
    "\022\uff48\023\uff48\024\uff48\030\uff48\031\uff48\032\uff48\033" +
    "\uff48\034\uff48\035\uff48\036\uff48\041\uff48\056\uff48\110\uff48" +
    "\111\uff48\112\uff48\113\uff48\116\uff48\121\uff48\142\uff48\001" +
    "\002\000\004\007\u0128\001\002\000\022\007\175\027\177" +
    "\037\173\040\174\056\130\057\137\060\133\061\136\001" +
    "\002\000\006\010\u012a\025\220\001\002\000\004\120\uff45" +
    "\001\002\000\046\003\u0115\022\ufff3\023\ufff3\024\ufff3\030" +
    "\070\031\110\032\105\033\021\034\063\035\u0107\036\u0110" +
    "\041\u010d\056\u010e\111\u0104\112\u010c\113\u0103\121\uff6d\142" +
    "\071\001\002\000\004\121\u012d\001\002\000\052\003\uff49" +
    "\022\uff49\023\uff49\024\uff49\030\uff49\031\uff49\032\uff49\033" +
    "\uff49\034\uff49\035\uff49\036\uff49\041\uff49\056\uff49\110\uff49" +
    "\111\uff49\112\uff49\113\uff49\116\uff49\121\uff49\142\uff49\001" +
    "\002\000\046\003\u0115\022\ufff3\023\ufff3\024\ufff3\030\070" +
    "\031\110\032\105\033\021\034\063\035\u0107\036\u0110\041" +
    "\u010d\056\u010e\111\u0104\112\u010c\113\u0103\121\uff6d\142\071" +
    "\001\002\000\004\121\u0130\001\002\000\052\003\uff58\022" +
    "\uff58\023\uff58\024\uff58\030\uff58\031\uff58\032\uff58\033\uff58" +
    "\034\uff58\035\uff58\036\uff58\041\uff58\056\uff58\110\uff58\111" +
    "\uff58\112\uff58\113\uff58\116\uff58\121\uff58\142\uff58\001\002" +
    "\000\022\003\uff74\022\uff74\023\uff74\024\uff74\033\uff74\056" +
    "\uff74\107\uff74\121\uff74\001\002\000\004\056\u0133\001\002" +
    "\000\010\006\u0138\021\uff9e\117\uff9e\001\002\000\026\003" +
    "\uff50\021\u0135\022\uff50\023\uff50\024\uff50\033\uff50\056\uff50" +
    "\107\uff50\117\uff50\121\uff50\001\002\000\004\056\u0136\001" +
    "\002\000\030\003\uff9e\006\122\021\uff9e\022\uff9e\023\uff9e" +
    "\024\uff9e\033\uff9e\056\uff9e\107\uff9e\117\uff9e\121\uff9e\001" +
    "\002\000\026\003\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1" +
    "\033\uffa1\056\uffa1\107\uffa1\117\uffa1\121\uffa1\001\002\000" +
    "\024\007\132\030\070\031\110\032\105\056\130\057\137" +
    "\060\133\061\136\142\071\001\002\000\026\003\uffa0\021" +
    "\uffa0\022\uffa0\023\uffa0\024\uffa0\033\uffa0\056\uffa0\107\uffa0" +
    "\117\uffa0\121\uffa0\001\002\000\024\003\uff4f\022\uff4f\023" +
    "\uff4f\024\uff4f\033\uff4f\056\uff4f\107\uff4f\117\uff4f\121\uff4f" +
    "\001\002\000\006\025\220\117\u013c\001\002\000\004\056" +
    "\u013e\001\002\000\004\010\u0141\001\002\000\004\006\u013f" +
    "\001\002\000\014\007\132\056\130\057\137\060\133\061" +
    "\136\001\002\000\010\010\uff54\011\150\012\151\001\002" +
    "\000\004\120\uff55\001\002\000\052\003\uff60\022\uff60\023" +
    "\uff60\024\uff60\030\uff60\031\uff60\032\uff60\033\uff60\034\uff60" +
    "\035\uff60\036\uff60\041\uff60\056\uff60\110\uff60\111\uff60\112" +
    "\uff60\113\uff60\116\uff60\121\uff60\142\uff60\001\002\000\052" +
    "\003\uff61\022\uff61\023\uff61\024\uff61\030\uff61\031\uff61\032" +
    "\uff61\033\uff61\034\uff61\035\uff61\036\uff61\041\uff61\056\uff61" +
    "\110\uff61\111\uff61\112\uff61\113\uff61\116\uff61\121\uff61\142" +
    "\uff61\001\002\000\046\003\u0115\022\ufff3\023\ufff3\024\ufff3" +
    "\030\070\031\110\032\105\033\021\034\063\035\u0107\036" +
    "\u0110\041\u010d\056\u010e\111\u0104\112\u010c\113\u0103\121\uff6d" +
    "\142\071\001\002\000\004\121\u0146\001\002\000\022\007" +
    "\175\027\177\037\173\040\174\056\130\057\137\060\133" +
    "\061\136\001\002\000\006\025\220\117\u0148\001\002\000" +
    "\052\003\uff56\022\uff56\023\uff56\024\uff56\030\uff56\031\uff56" +
    "\032\uff56\033\uff56\034\uff56\035\uff56\036\uff56\041\uff56\056" +
    "\uff56\110\uff56\111\uff56\112\uff56\113\uff56\116\uff56\121\uff56" +
    "\142\uff56\001\002\000\052\003\uff6a\022\uff6a\023\uff6a\024" +
    "\uff6a\030\uff6a\031\uff6a\032\uff6a\033\uff6a\034\uff6a\035\uff6a" +
    "\036\uff6a\041\uff6a\056\uff6a\110\uff6a\111\uff6a\112\uff6a\113" +
    "\uff6a\116\uff6a\121\uff6a\142\uff6a\001\002\000\014\007\132" +
    "\056\130\057\137\060\133\061\136\001\002\000\012\011" +
    "\150\012\151\116\uff6c\121\uff6c\001\002\000\024\007\132" +
    "\030\070\031\110\032\105\056\130\057\137\060\133\061" +
    "\136\142\071\001\002\000\004\117\uff4d\001\002\000\010" +
    "\011\150\012\151\117\uff4e\001\002\000\022\007\175\027" +
    "\177\037\173\040\174\056\130\057\137\060\133\061\136" +
    "\001\002\000\006\010\u0151\025\220\001\002\000\004\120" +
    "\uff4a\001\002\000\014\055\u0155\056\u0153\057\u0159\060\u0157" +
    "\061\u0158\001\002\000\010\010\uff66\011\uff66\122\uff66\001" +
    "\002\000\006\010\uff67\011\uff67\001\002\000\010\010\uff62" +
    "\011\uff62\122\uff62\001\002\000\006\010\u015a\011\u015b\001" +
    "\002\000\010\010\uff65\011\uff65\122\uff65\001\002\000\010" +
    "\010\uff64\011\uff64\122\uff64\001\002\000\010\010\uff63\011" +
    "\uff63\122\uff63\001\002\000\004\117\uff5a\001\002\000\014" +
    "\055\u0155\056\u0153\057\u0159\060\u0157\061\u0158\001\002\000" +
    "\006\010\uff68\011\uff68\001\002\000\046\003\u0115\022\ufff3" +
    "\023\ufff3\024\ufff3\030\070\031\110\032\105\033\021\034" +
    "\063\035\u0107\036\u0110\041\u010d\056\u010e\111\u0104\112\u010c" +
    "\113\u0103\121\uff6d\142\071\001\002\000\004\121\u015f\001" +
    "\002\000\052\003\uff57\022\uff57\023\uff57\024\uff57\030\uff57" +
    "\031\uff57\032\uff57\033\uff57\034\uff57\035\uff57\036\uff57\041" +
    "\uff57\056\uff57\110\uff57\111\uff57\112\uff57\113\uff57\116\uff57" +
    "\121\uff57\142\uff57\001\002\000\004\050\u0162\001\002\000" +
    "\004\122\u0170\001\002\000\014\055\u0155\056\u0153\057\u0159" +
    "\060\u0157\061\u0158\001\002\000\006\047\u0167\050\u0162\001" +
    "\002\000\010\047\uff3f\050\uff3f\121\uff41\001\002\000\004" +
    "\121\u0166\001\002\000\052\003\uff4b\022\uff4b\023\uff4b\024" +
    "\uff4b\030\uff4b\031\uff4b\032\uff4b\033\uff4b\034\uff4b\035\uff4b" +
    "\036\uff4b\041\uff4b\056\uff4b\110\uff4b\111\uff4b\112\uff4b\113" +
    "\uff4b\116\uff4b\121\uff4b\142\uff4b\001\002\000\004\122\ufec4" +
    "\001\002\000\004\122\u016a\001\002\000\010\047\uff40\050" +
    "\uff40\121\uff43\001\002\000\046\003\u0115\022\ufff3\023\ufff3" +
    "\024\ufff3\030\070\031\110\032\105\033\021\034\063\035" +
    "\u0107\036\u0110\041\u010d\056\u010e\111\u0104\112\u010c\113\u0103" +
    "\116\uff6d\142\071\001\002\000\004\116\u016d\001\002\000" +
    "\004\121\uff42\001\002\000\004\117\u016e\001\002\000\010" +
    "\047\uff3c\050\uff3c\121\uff3c\001\002\000\004\122\uff3d\001" +
    "\002\000\046\003\u0115\022\ufff3\023\ufff3\024\ufff3\030\070" +
    "\031\110\032\105\033\021\034\063\035\u0107\036\u0110\041" +
    "\u010d\056\u010e\111\u0104\112\u010c\113\u0103\116\uff6d\142\071" +
    "\001\002\000\004\116\u016d\001\002\000\010\047\uff3e\050" +
    "\uff3e\121\uff3e\001\002\000\052\003\uff5e\022\uff5e\023\uff5e" +
    "\024\uff5e\030\uff5e\031\uff5e\032\uff5e\033\uff5e\034\uff5e\035" +
    "\uff5e\036\uff5e\041\uff5e\056\uff5e\110\uff5e\111\uff5e\112\uff5e" +
    "\113\uff5e\116\uff5e\121\uff5e\142\uff5e\001\002\000\022\007" +
    "\175\027\177\037\173\040\174\056\130\057\137\060\133" +
    "\061\136\001\002\000\006\010\u0176\025\220\001\002\000" +
    "\004\120\uff51\001\002\000\052\003\uff5d\022\uff5d\023\uff5d" +
    "\024\uff5d\030\uff5d\031\uff5d\032\uff5d\033\uff5d\034\uff5d\035" +
    "\uff5d\036\uff5d\041\uff5d\056\uff5d\110\uff5d\111\uff5d\112\uff5d" +
    "\113\uff5d\116\uff5d\121\uff5d\142\uff5d\001\002\000\012\022" +
    "\036\023\037\024\035\056\u0179\001\002\000\004\006\u017f" +
    "\001\002\000\004\056\u017b\001\002\000\004\006\u017c\001" +
    "\002\000\014\007\132\056\130\057\137\060\133\061\136" +
    "\001\002\000\010\011\150\012\151\117\u017e\001\002\000" +
    "\022\007\uff53\027\uff53\037\uff53\040\uff53\056\uff53\057\uff53" +
    "\060\uff53\061\uff53\001\002\000\014\007\132\056\130\057" +
    "\137\060\133\061\136\001\002\000\010\011\150\012\151" +
    "\117\u0181\001\002\000\022\007\uff52\027\uff52\037\uff52\040" +
    "\uff52\056\uff52\057\uff52\060\uff52\061\uff52\001\002\000\014" +
    "\055\u0155\056\u0153\057\u0159\060\u0157\061\u0158\001\002\000" +
    "\006\010\u0184\011\u015b\001\002\000\004\117\uff59\001\002" +
    "\000\004\056\u0186\001\002\000\004\010\u0187\001\002\000" +
    "\004\120\uff44\001\002\000\046\003\u0115\022\ufff3\023\ufff3" +
    "\024\ufff3\030\070\031\110\032\105\033\021\034\063\035" +
    "\u0107\036\u0110\041\u010d\056\u010e\111\u0104\112\u010c\113\u0103" +
    "\121\uff6d\142\071\001\002\000\004\121\u018a\001\002\000" +
    "\022\003\uff76\022\uff76\023\uff76\024\uff76\033\uff76\056\uff76" +
    "\107\uff76\121\uff76\001\002\000\046\003\u0115\022\ufff3\023" +
    "\ufff3\024\ufff3\030\070\031\110\032\105\033\021\034\063" +
    "\035\u0107\036\u0110\041\u010d\056\u010e\111\u0104\112\u010c\113" +
    "\u0103\121\uff6d\142\071\001\002\000\004\121\u018d\001\002" +
    "\000\022\003\uff78\022\uff78\023\uff78\024\uff78\033\uff78\056" +
    "\uff78\107\uff78\121\uff78\001\002\000\004\007\u019f\001\002" +
    "\000\004\056\u019b\001\002\000\004\056\u0191\001\002\000" +
    "\004\007\u0192\001\002\000\014\010\uff71\021\uff71\022\036" +
    "\023\037\024\035\001\002\000\004\056\u019a\001\002\000" +
    "\006\010\u0197\021\u0196\001\002\000\006\010\uff72\021\uff72" +
    "\001\002\000\010\022\036\023\037\024\035\001\002\000" +
    "\004\120\uff73\001\002\000\004\056\u0199\001\002\000\006" +
    "\010\uff70\021\uff70\001\002\000\006\010\uff6f\021\uff6f\001" +
    "\002\000\030\003\uff9e\006\u0138\007\u019c\021\uff9e\022\uff9e" +
    "\023\uff9e\024\uff9e\033\uff9e\056\uff9e\107\uff9e\121\uff9e\001" +
    "\002\000\014\010\uff71\021\uff71\022\036\023\037\024\035" +
    "\001\002\000\006\010\u019e\021\u0196\001\002\000\004\120" +
    "\uff75\001\002\000\014\010\uff71\021\uff71\022\036\023\037" +
    "\024\035\001\002\000\006\010\u01a1\021\u0196\001\002\000" +
    "\004\120\uff77\001\002\000\010\033\uff82\105\uff82\106\uff82" +
    "\001\002\000\004\124\u0201\001\002\000\010\003\uff38\124" +
    "\uff38\127\uff38\001\002\000\010\003\uff3a\124\uff3a\127\uff3a" +
    "\001\002\000\010\003\u01a7\124\uff3b\127\u01a8\001\002\000" +
    "\010\003\uff36\124\uff36\127\uff36\001\002\000\004\056\u01f7" +
    "\001\002\000\010\003\uff39\124\uff39\127\uff39\001\002\000" +
    "\004\126\u01ab\001\002\000\032\003\uff2c\030\uff2c\031\uff2c" +
    "\032\uff2c\034\uff2c\035\uff2c\041\uff2c\044\uff2c\045\uff2c\056" +
    "\uff2c\125\uff2c\142\uff2c\001\002\000\032\003\u01bf\030\070" +
    "\031\110\032\105\034\u01c2\035\u01b4\041\u01b8\044\u01b6\045" +
    "\u01be\056\u01b9\125\uff2f\142\071\001\002\000\004\125\uff30" +
    "\001\002\000\004\125\u01af\001\002\000\010\003\uff37\124" +
    "\uff37\127\uff37\001\002\000\004\021\u01f1\001\002\000\032" +
    "\003\uff22\030\uff22\031\uff22\032\uff22\034\uff22\035\uff22\041" +
    "\uff22\044\uff22\045\uff22\056\uff22\125\uff22\142\uff22\001\002" +
    "\000\004\126\u01ee\001\002\000\032\003\uff2a\030\uff2a\031" +
    "\uff2a\032\uff2a\034\uff2a\035\uff2a\041\uff2a\044\uff2a\045\uff2a" +
    "\056\uff2a\125\uff2a\142\uff2a\001\002\000\022\007\175\027" +
    "\177\037\173\040\174\056\130\057\137\060\133\061\136" +
    "\001\002\000\032\003\uff21\030\uff21\031\uff21\032\uff21\034" +
    "\uff21\035\uff21\041\uff21\044\uff21\045\uff21\056\uff21\125\uff21" +
    "\142\uff21\001\002\000\014\007\132\056\130\057\137\060" +
    "\133\061\136\001\002\000\004\126\u01d9\001\002\000\022" +
    "\007\175\027\177\037\173\040\174\056\130\057\137\060" +
    "\133\061\136\001\002\000\004\006\u01d4\001\002\000\004" +
    "\122\u01d0\001\002\000\004\056\u01cb\001\002\000\032\003" +
    "\uff2d\030\uff2d\031\uff2d\032\uff2d\034\uff2d\035\uff2d\041\uff2d" +
    "\044\uff2d\045\uff2d\056\uff2d\125\uff2d\142\uff2d\001\002\000" +
    "\032\003\uff17\030\uff17\031\uff17\032\uff17\034\uff17\035\uff17" +
    "\041\uff17\044\uff17\045\uff17\056\uff17\125\uff17\142\uff17\001" +
    "\002\000\004\007\u01c5\001\002\000\032\003\uff26\030\uff26" +
    "\031\uff26\032\uff26\034\uff26\035\uff26\041\uff26\044\uff26\045" +
    "\uff26\056\uff26\125\uff26\142\uff26\001\002\000\032\003\uff2b" +
    "\030\uff2b\031\uff2b\032\uff2b\034\uff2b\035\uff2b\041\uff2b\044" +
    "\uff2b\045\uff2b\056\uff2b\125\uff2b\142\uff2b\001\002\000\032" +
    "\003\uff28\030\uff28\031\uff28\032\uff28\034\uff28\035\uff28\041" +
    "\uff28\044\uff28\045\uff28\056\uff28\125\uff28\142\uff28\001\002" +
    "\000\004\056\uff1c\001\002\000\032\003\uff29\030\uff29\031" +
    "\uff29\032\uff29\034\uff29\035\uff29\041\uff29\044\uff29\045\uff29" +
    "\056\uff29\125\uff29\142\uff29\001\002\000\032\003\uff27\030" +
    "\uff27\031\uff27\032\uff27\034\uff27\035\uff27\041\uff27\044\uff27" +
    "\045\uff27\056\uff27\125\uff27\142\uff27\001\002\000\016\007" +
    "\132\055\271\056\130\057\137\060\133\061\136\001\002" +
    "\000\006\010\uff23\021\uff23\001\002\000\006\010\u01c9\021" +
    "\u01c8\001\002\000\016\007\132\055\271\056\130\057\137" +
    "\060\133\061\136\001\002\000\032\003\uff25\030\uff25\031" +
    "\uff25\032\uff25\034\uff25\035\uff25\041\uff25\044\uff25\045\uff25" +
    "\056\uff25\125\uff25\142\uff25\001\002\000\006\010\uff24\021" +
    "\uff24\001\002\000\004\130\u01cc\001\002\000\004\131\u01cd" +
    "\001\002\000\004\007\u01ce\001\002\000\014\007\132\056" +
    "\130\057\137\060\133\061\136\001\002\000\010\011\150" +
    "\012\151\021\uff1d\001\002\000\004\126\u01d1\001\002\000" +
    "\032\003\uff2c\030\uff2c\031\uff2c\032\uff2c\034\uff2c\035\uff2c" +
    "\041\uff2c\044\uff2c\045\uff2c\056\uff2c\125\uff2c\142\uff2c\001" +
    "\002\000\004\125\u01d3\001\002\000\032\003\uff20\030\uff20" +
    "\031\uff20\032\uff20\034\uff20\035\uff20\041\uff20\044\uff20\045" +
    "\uff20\056\uff20\125\uff20\142\uff20\001\002\000\024\007\132" +
    "\030\070\031\110\032\105\056\130\057\137\060\133\061" +
    "\136\142\071\001\002\000\032\003\uff18\030\uff18\031\uff18" +
    "\032\uff18\034\uff18\035\uff18\041\uff18\044\uff18\045\uff18\056" +
    "\uff18\125\uff18\142\uff18\001\002\000\036\003\uff19\011\150" +
    "\012\151\030\uff19\031\uff19\032\uff19\034\uff19\035\uff19\041" +
    "\uff19\044\uff19\045\uff19\056\uff19\125\uff19\142\uff19\001\002" +
    "\000\006\025\220\122\u01d8\001\002\000\004\126\uff15\001" +
    "\002\000\032\003\uff2c\030\uff2c\031\uff2c\032\uff2c\034\uff2c" +
    "\035\uff2c\041\uff2c\044\uff2c\045\uff2c\056\uff2c\125\uff2c\142" +
    "\uff2c\001\002\000\004\125\u01db\001\002\000\036\003\uff12" +
    "\030\uff12\031\uff12\032\uff12\034\uff12\035\uff12\041\uff12\042" +
    "\u01dc\044\uff12\045\uff12\056\uff12\125\uff12\132\u01dd\142\uff12" +
    "\001\002\000\004\122\u01ea\001\002\000\022\007\175\027" +
    "\177\037\173\040\174\056\130\057\137\060\133\061\136" +
    "\001\002\000\004\126\u01e5\001\002\000\032\003\uff16\030" +
    "\uff16\031\uff16\032\uff16\034\uff16\035\uff16\041\uff16\044\uff16" +
    "\045\uff16\056\uff16\125\uff16\142\uff16\001\002\000\004\126" +
    "\u01e1\001\002\000\032\003\uff2c\030\uff2c\031\uff2c\032\uff2c" +
    "\034\uff2c\035\uff2c\041\uff2c\044\uff2c\045\uff2c\056\uff2c\125" +
    "\uff2c\142\uff2c\001\002\000\004\125\u01e3\001\002\000\036" +
    "\003\uff12\030\uff12\031\uff12\032\uff12\034\uff12\035\uff12\041" +
    "\uff12\042\u01dc\044\uff12\045\uff12\056\uff12\125\uff12\132\u01dd" +
    "\142\uff12\001\002\000\032\003\uff14\030\uff14\031\uff14\032" +
    "\uff14\034\uff14\035\uff14\041\uff14\044\uff14\045\uff14\056\uff14" +
    "\125\uff14\142\uff14\001\002\000\032\003\uff2c\030\uff2c\031" +
    "\uff2c\032\uff2c\034\uff2c\035\uff2c\041\uff2c\044\uff2c\045\uff2c" +
    "\056\uff2c\125\uff2c\142\uff2c\001\002\000\004\125\u01e7\001" +
    "\002\000\032\003\uff13\030\uff13\031\uff13\032\uff13\034\uff13" +
    "\035\uff13\041\uff13\044\uff13\045\uff13\056\uff13\125\uff13\142" +
    "\uff13\001\002\000\006\025\220\122\u01e9\001\002\000\004" +
    "\126\uff10\001\002\000\004\126\uff11\001\002\000\010\011" +
    "\150\012\151\125\uff2e\001\002\000\006\025\220\122\u01ed" +
    "\001\002\000\004\126\uff1a\001\002\000\032\003\uff2c\030" +
    "\uff2c\031\uff2c\032\uff2c\034\uff2c\035\uff2c\041\uff2c\044\uff2c" +
    "\045\uff2c\056\uff2c\125\uff2c\142\uff2c\001\002\000\004\125" +
    "\u01f0\001\002\000\032\003\uff1b\030\uff1b\031\uff1b\032\uff1b" +
    "\034\uff1b\035\uff1b\041\uff1b\044\uff1b\045\uff1b\056\uff1b\125" +
    "\uff1b\142\uff1b\001\002\000\014\007\132\056\130\057\137" +
    "\060\133\061\136\001\002\000\012\010\u01f4\011\150\012" +
    "\151\021\u01f3\001\002\000\012\056\234\057\240\060\237" +
    "\061\241\001\002\000\004\122\uff1e\001\002\000\004\010" +
    "\u01f6\001\002\000\004\122\uff1f\001\002\000\004\007\u01f8" +
    "\001\002\000\006\010\uff33\056\u01f9\001\002\000\006\010" +
    "\uff31\021\uff31\001\002\000\006\010\uff34\021\u01fe\001\002" +
    "\000\004\010\u01fc\001\002\000\004\122\u01fd\001\002\000" +
    "\004\126\uff35\001\002\000\004\056\u01ff\001\002\000\006" +
    "\010\uff32\021\uff32\001\002\000\004\002\000\001\002\000" +
    "\006\133\uff0e\136\uff0e\001\002\000\006\133\uff0c\136\uff0c" +
    "\001\002\000\006\133\u0204\136\u0207\001\002\000\010\022" +
    "\036\023\037\024\035\001\002\000\012\022\036\023\037" +
    "\024\035\133\u0204\001\002\000\004\117\u0211\001\002\000" +
    "\006\051\u020a\055\u0209\001\002\000\006\133\uff0d\136\uff0d" +
    "\001\002\000\006\133\ufef3\136\ufef3\001\002\000\004\056" +
    "\u020b\001\002\000\006\017\u020e\043\ufef0\001\002\000\004" +
    "\043\u020d\001\002\000\006\133\ufef2\136\ufef2\001\002\000" +
    "\006\013\u0210\056\u020f\001\002\000\004\043\ufef1\001\002" +
    "\000\004\043\ufeef\001\002\000\012\022\uff0a\023\uff0a\024" +
    "\uff0a\133\uff0a\001\002\000\014\003\u0242\022\036\023\037" +
    "\024\035\107\u0241\001\002\000\004\056\u0218\001\002\000" +
    "\004\117\u0217\001\002\000\004\117\u0216\001\002\000\014" +
    "\003\ufef7\022\ufef7\023\ufef7\024\ufef7\107\ufef7\001\002\000" +
    "\012\022\uff0b\023\uff0b\024\uff0b\133\uff0b\001\002\000\010" +
    "\006\u021b\117\ufef4\134\u021a\001\002\000\006\117\ufef5\134" +
    "\u0228\001\002\000\014\007\u0223\056\u0224\057\u0225\060\u021e" +
    "\061\u021c\001\002\000\014\007\u0223\056\u0224\057\u0225\060" +
    "\u021e\061\u021c\001\002\000\044\006\uff00\010\uff00\011\uff00" +
    "\012\uff00\013\uff00\014\uff00\015\uff00\021\uff00\025\uff00\026" +
    "\uff00\043\uff00\051\uff00\052\uff00\053\uff00\077\uff00\117\uff00" +
    "\135\uff00\001\002\000\044\006\uff02\010\uff02\011\uff02\012" +
    "\uff02\013\uff02\014\uff02\015\uff02\021\uff02\025\uff02\026\uff02" +
    "\043\uff02\051\uff02\052\uff02\053\uff02\077\uff02\117\uff02\135" +
    "\uff02\001\002\000\044\006\uff01\010\uff01\011\uff01\012\uff01" +
    "\013\uff01\014\uff01\015\uff01\021\uff01\025\uff01\026\uff01\043" +
    "\uff01\051\uff01\052\uff01\053\uff01\077\uff01\117\uff01\135\uff01" +
    "\001\002\000\044\006\ufefb\010\ufefb\011\ufefb\012\ufefb\013" +
    "\ufefb\014\ufefb\015\ufefb\021\ufefb\025\ufefb\026\ufefb\043\ufefb" +
    "\051\ufefb\052\ufefb\053\ufefb\077\ufefb\117\ufefb\135\ufefb\001" +
    "\002\000\010\011\u022b\012\u022c\117\ufef6\001\002\000\004" +
    "\007\u0238\001\002\000\044\006\uff06\010\uff06\011\uff06\012" +
    "\uff06\013\u022f\014\u0230\015\u022e\021\uff06\025\uff06\026\uff06" +
    "\043\uff06\051\uff06\052\uff06\053\uff06\077\uff06\117\uff06\135" +
    "\uff06\001\002\000\014\007\u0223\056\u0224\057\u0225\060\u021e" +
    "\061\u021c\001\002\000\052\006\ufefe\007\ufeab\010\ufefe\011" +
    "\ufefe\012\ufefe\013\ufefe\014\ufefe\015\ufefe\017\u0226\021\ufefe" +
    "\025\ufefe\026\ufefe\043\ufefe\051\ufefe\052\ufefe\053\ufefe\077" +
    "\ufefe\117\ufefe\134\u021a\135\ufefe\001\002\000\044\006\ufeff" +
    "\010\ufeff\011\ufeff\012\ufeff\013\ufeff\014\ufeff\015\ufeff\021" +
    "\ufeff\025\ufeff\026\ufeff\043\ufeff\051\ufeff\052\ufeff\053\ufeff" +
    "\077\ufeff\117\ufeff\135\ufeff\001\002\000\004\056\u0235\001" +
    "\002\000\046\006\ufefc\010\ufefc\011\ufefc\012\ufefc\013\ufefc" +
    "\014\ufefc\015\ufefc\021\ufefc\025\ufefc\026\ufefc\043\ufefc\051" +
    "\ufefc\052\ufefc\053\ufefc\077\ufefc\117\ufefc\134\u0228\135\ufefc" +
    "\001\002\000\014\007\u0223\056\u0224\057\u0225\060\u021e\061" +
    "\u021c\001\002\000\010\011\u022b\012\u022c\135\u022a\001\002" +
    "\000\050\006\ufefa\010\ufefa\011\ufefa\012\ufefa\013\ufefa\014" +
    "\ufefa\015\ufefa\021\ufefa\025\ufefa\026\ufefa\043\ufefa\051\ufefa" +
    "\052\ufefa\053\ufefa\077\ufefa\117\ufefa\122\ufefa\134\ufefa\135" +
    "\ufefa\001\002\000\014\007\u0223\056\u0224\057\u0225\060\u021e" +
    "\061\u021c\001\002\000\014\007\u0223\056\u0224\057\u0225\060" +
    "\u021e\061\u021c\001\002\000\044\006\uff07\010\uff07\011\uff07" +
    "\012\uff07\013\u022f\014\u0230\015\u022e\021\uff07\025\uff07\026" +
    "\uff07\043\uff07\051\uff07\052\uff07\053\uff07\077\uff07\117\uff07" +
    "\135\uff07\001\002\000\014\007\u0223\056\u0224\057\u0225\060" +
    "\u021e\061\u021c\001\002\000\014\007\u0223\056\u0224\057\u0225" +
    "\060\u021e\061\u021c\001\002\000\014\007\u0223\056\u0224\057" +
    "\u0225\060\u021e\061\u021c\001\002\000\044\006\uff04\010\uff04" +
    "\011\uff04\012\uff04\013\uff04\014\uff04\015\uff04\021\uff04\025" +
    "\uff04\026\uff04\043\uff04\051\uff04\052\uff04\053\uff04\077\uff04" +
    "\117\uff04\135\uff04\001\002\000\044\006\uff05\010\uff05\011" +
    "\uff05\012\uff05\013\uff05\014\uff05\015\uff05\021\uff05\025\uff05" +
    "\026\uff05\043\uff05\051\uff05\052\uff05\053\uff05\077\uff05\117" +
    "\uff05\135\uff05\001\002\000\044\006\uff03\010\uff03\011\uff03" +
    "\012\uff03\013\uff03\014\uff03\015\uff03\021\uff03\025\uff03\026" +
    "\uff03\043\uff03\051\uff03\052\uff03\053\uff03\077\uff03\117\uff03" +
    "\135\uff03\001\002\000\044\006\uff08\010\uff08\011\uff08\012" +
    "\uff08\013\u022f\014\u0230\015\u022e\021\uff08\025\uff08\026\uff08" +
    "\043\uff08\051\uff08\052\uff08\053\uff08\077\uff08\117\uff08\135" +
    "\uff08\001\002\000\004\007\ufeac\001\002\000\010\010\u0237" +
    "\011\u022b\012\u022c\001\002\000\044\006\ufefd\010\ufefd\011" +
    "\ufefd\012\ufefd\013\ufefd\014\ufefd\015\ufefd\021\ufefd\025\ufefd" +
    "\026\ufefd\043\ufefd\051\ufefd\052\ufefd\053\ufefd\077\ufefd\117" +
    "\ufefd\135\ufefd\001\002\000\016\007\u0223\010\u023b\056\u0224" +
    "\057\u0225\060\u021e\061\u021c\001\002\000\006\010\u023d\021" +
    "\u023c\001\002\000\012\010\ufea9\011\u022b\012\u022c\021\ufea9" +
    "\001\002\000\044\006\ufead\010\ufead\011\ufead\012\ufead\013" +
    "\ufead\014\ufead\015\ufead\021\ufead\025\ufead\026\ufead\043\ufead" +
    "\051\ufead\052\ufead\053\ufead\077\ufead\117\ufead\135\ufead\001" +
    "\002\000\014\007\u0223\056\u0224\057\u0225\060\u021e\061\u021c" +
    "\001\002\000\044\006\ufeae\010\ufeae\011\ufeae\012\ufeae\013" +
    "\ufeae\014\ufeae\015\ufeae\021\ufeae\025\ufeae\026\ufeae\043\ufeae" +
    "\051\ufeae\052\ufeae\053\ufeae\077\ufeae\117\ufeae\135\ufeae\001" +
    "\002\000\012\010\ufeaa\011\u022b\012\u022c\021\ufeaa\001\002" +
    "\000\010\011\u022b\012\u022c\135\u0240\001\002\000\050\006" +
    "\ufef9\010\ufef9\011\ufef9\012\ufef9\013\ufef9\014\ufef9\015\ufef9" +
    "\021\ufef9\025\ufef9\026\ufef9\043\ufef9\051\ufef9\052\ufef9\053" +
    "\ufef9\077\ufef9\117\ufef9\122\ufef9\134\ufef9\135\ufef9\001\002" +
    "\000\004\143\u02f3\001\002\000\004\002\ufeed\001\002\000" +
    "\004\002\uff0f\001\002\000\004\117\u02f2\001\002\000\004" +
    "\120\u0246\001\002\000\036\003\u025c\022\036\023\037\024" +
    "\035\034\063\035\u024b\036\114\041\u0254\046\u0253\056\u0257" +
    "\137\u0255\140\u025a\141\u025f\142\u0247\001\002\000\004\007" +
    "\u02ec\001\002\000\004\007\u02e2\001\002\000\004\121\u02e1" +
    "\001\002\000\004\120\u02c9\001\002\000\004\007\u02c6\001" +
    "\002\000\042\003\ufee9\022\ufee9\023\ufee9\024\ufee9\034\ufee9" +
    "\035\ufee9\036\ufee9\041\ufee9\046\ufee9\056\ufee9\116\ufee9\121" +
    "\ufee9\137\ufee9\140\ufee9\141\ufee9\142\ufee9\001\002\000\004" +
    "\117\u02c5\001\002\000\042\003\u025c\022\036\023\037\024" +
    "\035\034\063\035\u024b\036\114\041\u0254\046\u0253\056\u0257" +
    "\116\ufeeb\121\ufeeb\137\u0255\140\u025a\141\u025f\142\u0247\001" +
    "\002\000\004\120\u02c1\001\002\000\022\007\u026e\027\u026f" +
    "\037\u026b\040\u026d\056\u0224\057\u0225\060\u021e\061\u021c\001" +
    "\002\000\004\117\u02b9\001\002\000\004\117\u02b8\001\002" +
    "\000\004\007\u02b5\001\002\000\004\007\u02b2\001\002\000" +
    "\004\007\u02aa\001\002\000\004\120\u0298\001\002\000\012" +
    "\006\u0293\007\ufeab\017\u0226\134\u021a\001\002\000\004\056" +
    "\u0287\001\002\000\004\117\u0286\001\002\000\004\007\u0284" +
    "\001\002\000\042\003\ufee5\022\ufee5\023\ufee5\024\ufee5\034" +
    "\ufee5\035\ufee5\036\ufee5\041\ufee5\046\ufee5\056\ufee5\116\ufee5" +
    "\121\ufee5\137\ufee5\140\ufee5\141\ufee5\142\ufee5\001\002\000" +
    "\042\003\ufee0\022\ufee0\023\ufee0\024\ufee0\034\ufee0\035\ufee0" +
    "\036\ufee0\041\ufee0\046\ufee0\056\ufee0\116\ufee0\121\ufee0\137" +
    "\ufee0\140\ufee0\141\ufee0\142\ufee0\001\002\000\042\003\ufee6" +
    "\022\ufee6\023\ufee6\024\ufee6\034\ufee6\035\ufee6\036\ufee6\041" +
    "\ufee6\046\ufee6\056\ufee6\116\ufee6\121\ufee6\137\ufee6\140\ufee6" +
    "\141\ufee6\142\ufee6\001\002\000\004\117\u0283\001\002\000" +
    "\004\007\u0281\001\002\000\004\120\u027e\001\002\000\004" +
    "\117\u027d\001\002\000\004\120\u0263\001\002\000\036\003" +
    "\u025c\022\036\023\037\024\035\034\063\035\u024b\036\114" +
    "\041\u0254\046\u0253\056\u0257\137\u0255\140\u025a\141\u025f\142" +
    "\u0247\001\002\000\004\121\u0265\001\002\000\004\035\u0266" +
    "\001\002\000\004\007\u0267\001\002\000\022\007\u026e\027" +
    "\u026f\037\u026b\040\u026d\056\u0224\057\u0225\060\u021e\061\u021c" +
    "\001\002\000\012\010\ufea3\025\ufea3\026\ufea3\117\ufea3\001" +
    "\002\000\012\010\ufea5\025\ufea5\026\u0279\117\ufea5\001\002" +
    "\000\006\010\u027b\025\u0277\001\002\000\012\010\ufea0\025" +
    "\ufea0\026\ufea0\117\ufea0\001\002\000\022\006\206\011\u022b" +
    "\012\u022c\043\212\051\207\052\211\053\205\077\213\001" +
    "\002\000\012\010\ufe9f\025\ufe9f\026\ufe9f\117\ufe9f\001\002" +
    "\000\022\007\u026e\027\u026f\037\u026b\040\u026d\056\u0224\057" +
    "\u0225\060\u021e\061\u021c\001\002\000\020\007\u026e\037\u026b" +
    "\040\u026d\056\u0224\057\u0225\060\u021e\061\u021c\001\002\000" +
    "\012\010\ufea1\025\ufea1\026\ufea1\117\ufea1\001\002\000\012" +
    "\010\ufea2\025\ufea2\026\ufea2\117\ufea2\001\002\000\006\010" +
    "\u0276\025\u0277\001\002\000\024\006\206\010\u0237\011\u022b" +
    "\012\u022c\043\212\051\207\052\211\053\205\077\213\001" +
    "\002\000\014\007\u0223\056\u0224\057\u0225\060\u021e\061\u021c" +
    "\001\002\000\016\010\ufe9e\011\u022b\012\u022c\025\ufe9e\026" +
    "\ufe9e\117\ufe9e\001\002\000\012\010\ufe9d\025\ufe9d\026\ufe9d" +
    "\117\ufe9d\001\002\000\022\007\u026e\027\u026f\037\u026b\040" +
    "\u026d\056\u0224\057\u0225\060\u021e\061\u021c\001\002\000\012" +
    "\010\ufea6\025\ufea6\026\u0279\117\ufea6\001\002\000\022\007" +
    "\u026e\027\u026f\037\u026b\040\u026d\056\u0224\057\u0225\060\u021e" +
    "\061\u021c\001\002\000\012\010\ufea4\025\ufea4\026\ufea4\117" +
    "\ufea4\001\002\000\004\117\u027c\001\002\000\042\003\ufebc" +
    "\022\ufebc\023\ufebc\024\ufebc\034\ufebc\035\ufebc\036\ufebc\041" +
    "\ufebc\046\ufebc\056\ufebc\116\ufebc\121\ufebc\137\ufebc\140\ufebc" +
    "\141\ufebc\142\ufebc\001\002\000\042\003\ufee2\022\ufee2\023" +
    "\ufee2\024\ufee2\034\ufee2\035\ufee2\036\ufee2\041\ufee2\046\ufee2" +
    "\056\ufee2\116\ufee2\121\ufee2\137\ufee2\140\ufee2\141\ufee2\142" +
    "\ufee2\001\002\000\036\003\u025c\022\036\023\037\024\035" +
    "\034\063\035\u024b\036\114\041\u0254\046\u0253\056\u0257\137" +
    "\u0255\140\u025a\141\u025f\142\u0247\001\002\000\004\121\u0280" +
    "\001\002\000\042\003\ufebe\022\ufebe\023\ufebe\024\ufebe\034" +
    "\ufebe\035\ufebe\036\ufebe\041\ufebe\046\ufebe\056\ufebe\116\ufebe" +
    "\121\ufebe\137\ufebe\140\ufebe\141\ufebe\142\ufebe\001\002\000" +
    "\004\010\u0282\001\002\000\004\117\ufeb0\001\002\000\042" +
    "\003\ufee4\022\ufee4\023\ufee4\024\ufee4\034\ufee4\035\ufee4\036" +
    "\ufee4\041\ufee4\046\ufee4\056\ufee4\116\ufee4\121\ufee4\137\ufee4" +
    "\140\ufee4\141\ufee4\142\ufee4\001\002\000\004\010\u0285\001" +
    "\002\000\004\117\ufeb5\001\002\000\042\003\ufee3\022\ufee3" +
    "\023\ufee3\024\ufee3\034\ufee3\035\ufee3\036\ufee3\041\ufee3\046" +
    "\ufee3\056\ufee3\116\ufee3\121\ufee3\137\ufee3\140\ufee3\141\ufee3" +
    "\142\ufee3\001\002\000\012\006\u0290\021\ufed8\117\ufed8\134" +
    "\u021a\001\002\000\006\021\u0289\117\ufede\001\002\000\004" +
    "\056\u028a\001\002\000\012\006\u028d\021\ufed8\117\ufed8\134" +
    "\u021a\001\002\000\010\021\ufed9\117\ufed9\134\u0228\001\002" +
    "\000\006\021\ufedc\117\ufedc\001\002\000\014\007\u0223\056" +
    "\u0224\057\u0225\060\u021e\061\u021c\001\002\000\012\011\u022b" +
    "\012\u022c\021\ufeda\117\ufeda\001\002\000\006\021\ufedb\117" +
    "\ufedb\001\002\000\016\007\u0223\056\u0224\057\u0225\060\u021e" +
    "\061\u021c\141\u025f\001\002\000\004\117\ufedd\001\002\000" +
    "\006\006\u0296\134\u0228\001\002\000\016\007\u0223\056\u0224" +
    "\057\u0225\060\u021e\061\u021c\141\u025f\001\002\000\010\011" +
    "\u022b\012\u022c\117\ufed7\001\002\000\004\117\ufed5\001\002" +
    "\000\014\007\u0223\056\u0224\057\u0225\060\u021e\061\u021c\001" +
    "\002\000\010\011\u022b\012\u022c\117\ufed6\001\002\000\036" +
    "\003\u025c\022\036\023\037\024\035\034\063\035\u024b\036" +
    "\114\041\u0254\046\u0253\056\u0257\137\u0255\140\u025a\141\u025f" +
    "\142\u0247\001\002\000\004\121\u029a\001\002\000\044\003" +
    "\ufecf\022\ufecf\023\ufecf\024\ufecf\034\ufecf\035\ufecf\036\ufecf" +
    "\041\ufecf\042\u029c\046\ufecf\056\ufecf\116\ufecf\121\ufecf\137" +
    "\ufecf\140\ufecf\141\ufecf\142\ufecf\001\002\000\004\120\u02a7" +
    "\001\002\000\006\041\u02a3\120\ufece\001\002\000\042\003" +
    "\ufed4\022\ufed4\023\ufed4\024\ufed4\034\ufed4\035\ufed4\036\ufed4" +
    "\041\ufed4\046\ufed4\056\ufed4\116\ufed4\121\ufed4\137\ufed4\140" +
    "\ufed4\141\ufed4\142\ufed4\001\002\000\004\120\u029f\001\002" +
    "\000\036\003\u025c\022\036\023\037\024\035\034\063\035" +
    "\u024b\036\114\041\u0254\046\u0253\056\u0257\137\u0255\140\u025a" +
    "\141\u025f\142\u0247\001\002\000\004\121\u02a1\001\002\000" +
    "\044\003\ufecf\022\ufecf\023\ufecf\024\ufecf\034\ufecf\035\ufecf" +
    "\036\ufecf\041\ufecf\042\u029c\046\ufecf\056\ufecf\116\ufecf\121" +
    "\ufecf\137\ufecf\140\ufecf\141\ufecf\142\ufecf\001\002\000\042" +
    "\003\ufed0\022\ufed0\023\ufed0\024\ufed0\034\ufed0\035\ufed0\036" +
    "\ufed0\041\ufed0\046\ufed0\056\ufed0\116\ufed0\121\ufed0\137\ufed0" +
    "\140\ufed0\141\ufed0\142\ufed0\001\002\000\004\007\u02a4\001" +
    "\002\000\022\007\u026e\027\u026f\037\u026b\040\u026d\056\u0224" +
    "\057\u0225\060\u021e\061\u021c\001\002\000\006\010\u02a6\025" +
    "\u0277\001\002\000\004\120\ufecd\001\002\000\036\003\u025c" +
    "\022\036\023\037\024\035\034\063\035\u024b\036\114\041" +
    "\u0254\046\u0253\056\u0257\137\u0255\140\u025a\141\u025f\142\u0247" +
    "\001\002\000\004\121\u02a9\001\002\000\042\003\ufed1\022" +
    "\ufed1\023\ufed1\024\ufed1\034\ufed1\035\ufed1\036\ufed1\041\ufed1" +
    "\046\ufed1\056\ufed1\116\ufed1\121\ufed1\137\ufed1\140\ufed1\141" +
    "\ufed1\142\ufed1\001\002\000\016\007\u0223\055\u02ac\056\u0224" +
    "\057\u0225\060\u021e\061\u021c\001\002\000\012\010\ufeb2\011" +
    "\u022b\012\u022c\021\ufeb2\001\002\000\006\010\ufeb1\021\ufeb1" +
    "\001\002\000\006\010\u02b0\021\u02af\001\002\000\006\010" +
    "\ufeb3\021\ufeb3\001\002\000\016\007\u0223\055\u02ac\056\u0224" +
    "\057\u0225\060\u021e\061\u021c\001\002\000\004\117\ufeb6\001" +
    "\002\000\006\010\ufeb4\021\ufeb4\001\002\000\022\007\u026e" +
    "\027\u026f\037\u026b\040\u026d\056\u0224\057\u0225\060\u021e\061" +
    "\u021c\001\002\000\006\010\u02b4\025\u0277\001\002\000\004" +
    "\120\ufed2\001\002\000\004\056\u02b6\001\002\000\004\010" +
    "\u02b7\001\002\000\004\120\ufecc\001\002\000\042\003\ufee8" +
    "\022\ufee8\023\ufee8\024\ufee8\034\ufee8\035\ufee8\036\ufee8\041" +
    "\ufee8\046\ufee8\056\ufee8\116\ufee8\121\ufee8\137\ufee8\140\ufee8" +
    "\141\ufee8\142\ufee8\001\002\000\042\003\ufee1\022\ufee1\023" +
    "\ufee1\024\ufee1\034\ufee1\035\ufee1\036\ufee1\041\ufee1\046\ufee1" +
    "\056\ufee1\116\ufee1\121\ufee1\137\ufee1\140\ufee1\141\ufee1\142" +
    "\ufee1\001\002\000\006\025\u0277\117\u02bb\001\002\000\004" +
    "\056\u02bc\001\002\000\004\006\u02bf\001\002\000\004\010" +
    "\u02be\001\002\000\004\120\ufebb\001\002\000\014\007\u0223" +
    "\056\u0224\057\u0225\060\u021e\061\u021c\001\002\000\010\010" +
    "\ufeb7\011\u022b\012\u022c\001\002\000\036\003\u025c\022\036" +
    "\023\037\024\035\034\063\035\u024b\036\114\041\u0254\046" +
    "\u0253\056\u0257\137\u0255\140\u025a\141\u025f\142\u0247\001\002" +
    "\000\004\121\u02c3\001\002\000\042\003\ufebd\022\ufebd\023" +
    "\ufebd\024\ufebd\034\ufebd\035\ufebd\036\ufebd\041\ufebd\046\ufebd" +
    "\056\ufebd\116\ufebd\121\ufebd\137\ufebd\140\ufebd\141\ufebd\142" +
    "\ufebd\001\002\000\042\003\ufeea\022\ufeea\023\ufeea\024\ufeea" +
    "\034\ufeea\035\ufeea\036\ufeea\041\ufeea\046\ufeea\056\ufeea\116" +
    "\ufeea\121\ufeea\137\ufeea\140\ufeea\141\ufeea\142\ufeea\001\002" +
    "\000\042\003\ufee7\022\ufee7\023\ufee7\024\ufee7\034\ufee7\035" +
    "\ufee7\036\ufee7\041\ufee7\046\ufee7\056\ufee7\116\ufee7\121\ufee7" +
    "\137\ufee7\140\ufee7\141\ufee7\142\ufee7\001\002\000\022\007" +
    "\u026e\027\u026f\037\u026b\040\u026d\056\u0224\057\u0225\060\u021e" +
    "\061\u021c\001\002\000\006\010\u02c8\025\u0277\001\002\000" +
    "\004\120\ufeb8\001\002\000\004\050\u02ce\001\002\000\004" +
    "\121\u02e0\001\002\000\010\047\ufec7\050\ufec7\121\ufec9\001" +
    "\002\000\006\047\u0167\050\u02ce\001\002\000\004\122\u02d6" +
    "\001\002\000\012\056\u02cf\057\u02d4\060\u02d2\061\u02d3\001" +
    "\002\000\006\122\ufec0\134\u021a\001\002\000\004\122\ufebf" +
    "\001\002\000\004\122\ufec5\001\002\000\004\122\ufec3\001" +
    "\002\000\004\122\ufec2\001\002\000\004\122\ufec1\001\002" +
    "\000\006\122\ufea7\134\u0228\001\002\000\036\003\u025c\022" +
    "\036\023\037\024\035\034\063\035\u024b\036\114\041\u0254" +
    "\046\u0253\056\u0257\137\u0255\140\u025a\141\u025f\142\u0247\001" +
    "\002\000\004\116\u02d8\001\002\000\004\117\u02d9\001\002" +
    "\000\010\047\ufec6\050\ufec6\121\ufec6\001\002\000\004\122" +
    "\u02dc\001\002\000\010\047\ufec8\050\ufec8\121\ufecb\001\002" +
    "\000\036\003\u025c\022\036\023\037\024\035\034\063\035" +
    "\u024b\036\114\041\u0254\046\u0253\056\u0257\137\u0255\140\u025a" +
    "\141\u025f\142\u0247\001\002\000\004\116\u02de\001\002\000" +
    "\004\117\u02df\001\002\000\004\121\ufeca\001\002\000\042" +
    "\003\ufed3\022\ufed3\023\ufed3\024\ufed3\034\ufed3\035\ufed3\036" +
    "\ufed3\041\ufed3\046\ufed3\056\ufed3\116\ufed3\121\ufed3\137\ufed3" +
    "\140\ufed3\141\ufed3\142\ufed3\001\002\000\004\002\ufeee\001" +
    "\002\000\012\022\036\023\037\024\035\056\u02e3\001\002" +
    "\000\004\006\u02e9\001\002\000\004\056\u02e5\001\002\000" +
    "\004\006\u02e6\001\002\000\014\007\u0223\056\u0224\057\u0225" +
    "\060\u021e\061\u021c\001\002\000\010\011\u022b\012\u022c\117" +
    "\u02e8\001\002\000\022\007\ufeba\027\ufeba\037\ufeba\040\ufeba" +
    "\056\ufeba\057\ufeba\060\ufeba\061\ufeba\001\002\000\014\007" +
    "\u0223\056\u0224\057\u0225\060\u021e\061\u021c\001\002\000\010" +
    "\011\u022b\012\u022c\117\u02eb\001\002\000\022\007\ufeb9\027" +
    "\ufeb9\037\ufeb9\040\ufeb9\056\ufeb9\057\ufeb9\060\ufeb9\061\ufeb9" +
    "\001\002\000\004\055\u02ed\001\002\000\004\021\u02ee\001" +
    "\002\000\004\020\u02ef\001\002\000\004\056\u02f0\001\002" +
    "\000\004\010\u02f1\001\002\000\004\117\ufedf\001\002\000" +
    "\014\003\ufef8\022\ufef8\023\ufef8\024\ufef8\107\ufef8\001\002" +
    "\000\004\007\u02f4\001\002\000\004\010\u02f5\001\002\000" +
    "\004\120\ufeec\001\002\000\004\056\u02f7\001\002\000\004" +
    "\006\u02f8\001\002\000\014\007\u0223\056\u0224\057\u0225\060" +
    "\u021e\061\u021c\001\002\000\010\011\u022b\012\u022c\117\uff09" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02f7\000\010\002\006\003\004\012\005\001\001\000" +
    "\002\001\001\000\006\004\353\017\355\001\001\000\004" +
    "\006\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\016\017\021\015\022\016\023\013\024\012\025\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\030\350\031\055\032\065\033\066\034\060" +
    "\040\051\041\053\042\103\043\063\044\075\051\101\052" +
    "\110\060\064\061\057\062\052\066\072\067\054\070\050" +
    "\071\056\076\102\077\077\264\106\001\001\000\002\001" +
    "\001\000\056\030\100\031\055\032\065\033\066\034\060" +
    "\040\051\041\053\042\103\043\063\044\075\051\101\052" +
    "\110\060\064\061\057\062\052\066\072\067\054\070\050" +
    "\071\056\076\102\077\077\264\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\026\026\027\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\041\001\001\000" +
    "\002\001\001\000\004\015\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\026\046\027\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\030\333\031\055\032\065" +
    "\033\066\034\060\040\051\041\053\042\103\043\063\044" +
    "\075\051\101\052\110\060\064\061\057\062\052\066\072" +
    "\067\054\070\050\071\056\076\102\077\077\264\106\001" +
    "\001\000\056\030\327\031\055\032\065\033\066\034\060" +
    "\040\051\041\053\042\103\043\063\044\075\051\101\052" +
    "\110\060\064\061\057\062\052\066\072\067\054\070\050" +
    "\071\056\076\102\077\077\264\106\001\001\000\002\001" +
    "\001\000\014\035\326\036\267\046\272\047\134\050\133" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\032\313\034\060\040\051" +
    "\041\053\042\103\043\063\044\075\051\101\052\110\060" +
    "\064\061\057\062\052\066\072\067\054\070\050\071\056" +
    "\076\102\077\077\264\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\046\175\047\134\050\133\053\260\054\200\055\177\056" +
    "\170\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\100\231\101\230\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\030\224" +
    "\031\055\032\065\033\066\034\060\040\051\041\053\042" +
    "\103\043\063\044\075\051\101\052\110\060\064\061\057" +
    "\062\052\066\072\067\054\070\050\071\056\076\102\077" +
    "\077\264\106\001\001\000\002\001\001\000\020\046\175" +
    "\047\134\050\133\053\171\054\200\055\177\056\170\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\030\162" +
    "\031\055\032\065\033\066\034\060\040\051\041\053\042" +
    "\103\043\063\044\075\051\101\052\110\060\064\061\057" +
    "\062\052\066\072\067\054\070\050\071\056\076\102\077" +
    "\077\264\106\001\001\000\004\063\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\065\154\001\001\000\002\001\001\000\004" +
    "\065\123\001\001\000\010\046\130\047\134\050\133\001" +
    "\001\000\004\015\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\065\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\046\145\047\134" +
    "\050\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\050\144\001\001\000\004\050\143\001\001\000\004\050" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\047" +
    "\152\050\133\001\001\000\006\047\151\050\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\065\160" +
    "\001\001\000\012\046\130\047\134\050\133\264\161\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\046" +
    "\215\047\134\050\133\053\214\054\200\055\177\056\170" +
    "\001\001\000\004\057\207\001\001\000\012\046\175\047" +
    "\134\050\133\056\203\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\046\175\047\134\050\133\055\202\056" +
    "\170\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\050" +
    "\213\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\057" +
    "\207\001\001\000\002\001\001\000\016\046\175\047\134" +
    "\050\133\054\220\055\177\056\170\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\030\245\031\055\032\065\033\066" +
    "\034\060\040\051\041\053\042\103\043\063\044\075\051" +
    "\101\052\110\060\064\061\057\062\052\066\072\067\054" +
    "\070\050\071\056\076\102\077\077\264\106\001\001\000" +
    "\004\101\241\001\001\000\004\102\235\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\030\244" +
    "\031\055\032\065\033\066\034\060\040\051\041\053\042" +
    "\103\043\063\044\075\051\101\052\110\060\064\061\057" +
    "\062\052\066\072\067\054\070\050\071\056\076\102\077" +
    "\077\264\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\046\254\047\134\050\133\001\001\000\004\015\251" +
    "\001\001\000\002\001\001\000\010\046\253\047\134\050" +
    "\133\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\046\257\047\134\050\133\264\256\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\075\261\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\035\271\036\267\046\272" +
    "\047\134\050\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\036\275\046\272\047\134\050\133\001\001\000" +
    "\002\001\001\000\014\035\277\036\267\046\272\047\134" +
    "\050\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\035\314" +
    "\036\267\046\272\047\134\050\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\046\316\047\134\050\133" +
    "\001\001\000\004\045\317\001\001\000\002\001\001\000" +
    "\004\102\321\001\001\000\002\001\001\000\004\102\325" +
    "\001\001\000\004\102\324\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\046\175\047\134\050\133\053\332\054" +
    "\200\055\177\056\170\001\001\000\002\001\001\000\010" +
    "\072\335\073\334\074\336\001\001\000\056\030\347\031" +
    "\055\032\065\033\066\034\060\040\051\041\053\042\103" +
    "\043\063\044\075\051\101\052\110\060\064\061\057\062" +
    "\052\066\072\067\054\070\050\071\056\076\102\077\077" +
    "\264\106\001\001\000\002\001\001\000\056\030\343\031" +
    "\055\032\065\033\066\034\060\040\051\041\053\042\103" +
    "\043\063\044\075\051\101\052\110\060\064\061\057\062" +
    "\052\066\072\067\054\070\050\071\056\076\102\077\077" +
    "\264\106\001\001\000\002\001\001\000\020\046\175\047" +
    "\134\050\133\053\341\054\200\055\177\056\170\001\001" +
    "\000\004\075\342\001\001\000\002\001\001\000\010\072" +
    "\344\073\334\074\336\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\u01a2" +
    "\013\u01a3\001\001\000\002\001\001\000\004\007\356\001" +
    "\001\000\010\016\361\103\360\104\357\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\110\365\127\366\001\001" +
    "\000\002\001\001\000\024\016\373\105\374\111\367\112" +
    "\371\113\375\114\370\115\u0100\135\372\156\376\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\u018e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\016\u0117\044\u0104\116\u0118\117\u010e" +
    "\120\u0110\124\u0108\125\u0113\130\u0111\131\u0119\132\u0116\134" +
    "\u010a\135\u0107\136\u0105\137\u0112\141\u011a\145\u0109\264\u0115" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\016\u0117\044\u0104\124\u0148\125\u0113\130\u0111\131\u0119\132" +
    "\u0116\134\u010a\135\u0107\136\u0105\137\u0112\141\u011a\145\u0109" +
    "\264\u0115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\046\175\047\134\050" +
    "\133\053\u013a\054\200\055\177\056\170\001\001\000\004" +
    "\015\u0131\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\016\u0117\044\u0104\116\u011c\117\u010e" +
    "\120\u0110\124\u0108\125\u0113\130\u0111\131\u0119\132\u0116\134" +
    "\u010a\135\u0107\136\u0105\137\u0112\141\u011a\145\u0109\264\u0115" +
    "\001\001\000\002\001\001\000\010\142\u0121\143\u0120\144" +
    "\u011e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\016\u0117\044\u0104\124" +
    "\u0123\125\u0113\130\u0111\131\u0119\132\u0116\134\u010a\135\u0107" +
    "\136\u0105\137\u0112\141\u011a\145\u0109\264\u0115\001\001\000" +
    "\002\001\001\000\010\142\u0125\143\u0120\144\u011e\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\046\175\047" +
    "\134\050\133\053\u0128\054\200\055\177\056\170\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\016\u0117\044" +
    "\u0104\116\u012b\117\u010e\120\u0110\124\u0108\125\u0113\130\u0111" +
    "\131\u0119\132\u0116\134\u010a\135\u0107\136\u0105\137\u0112\141" +
    "\u011a\145\u0109\264\u0115\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\016\u0117\044\u0104\116\u012e\117\u010e\120" +
    "\u0110\124\u0108\125\u0113\130\u0111\131\u0119\132\u0116\134\u010a" +
    "\135\u0107\136\u0105\137\u0112\141\u011a\145\u0109\264\u0115\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\064\u0133\001\001\000\004\065\u0138\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\065\u0136\001\001" +
    "\000\002\001\001\000\012\046\130\047\134\050\133\264" +
    "\u0139\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\133\u013c\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\046\u013f\047\134\050\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\016\u0117\044\u0104\116\u0144\117\u010e" +
    "\120\u0110\124\u0108\125\u0113\130\u0111\131\u0119\132\u0116\134" +
    "\u010a\135\u0107\136\u0105\137\u0112\141\u011a\145\u0109\264\u0115" +
    "\001\001\000\002\001\001\000\020\046\175\047\134\050" +
    "\133\053\u0146\054\200\055\177\056\170\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\046" +
    "\u014a\047\134\050\133\001\001\000\002\001\001\000\012" +
    "\046\u014d\047\134\050\133\264\u014c\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\046\175\047\134\050\133" +
    "\053\u014f\054\200\055\177\056\170\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\122\u0155\123\u0153\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\123\u015b\001\001\000" +
    "\002\001\001\000\044\016\u0117\044\u0104\116\u015d\117\u010e" +
    "\120\u0110\124\u0108\125\u0113\130\u0111\131\u0119\132\u0116\134" +
    "\u010a\135\u0107\136\u0105\137\u0112\141\u011a\145\u0109\264\u0115" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\146" +
    "\u0164\147\u0160\150\u0162\151\u0163\001\001\000\002\001\001" +
    "\000\004\123\u016e\001\001\000\010\147\u0160\151\u0168\241" +
    "\u0167\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\016\u0117\044\u0104\116\u016a\117\u010e\120\u0110" +
    "\124\u0108\125\u0113\130\u0111\131\u0119\132\u0116\134\u010a\135" +
    "\u0107\136\u0105\137\u0112\141\u011a\145\u0109\264\u0115\001\001" +
    "\000\004\152\u016b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\016\u0117" +
    "\044\u0104\116\u0170\117\u010e\120\u0110\124\u0108\125\u0113\130" +
    "\u0111\131\u0119\132\u0116\134\u010a\135\u0107\136\u0105\137\u0112" +
    "\141\u011a\145\u0109\264\u0115\001\001\000\004\152\u0171\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\046\175" +
    "\047\134\050\133\053\u0174\054\200\055\177\056\170\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\u0179\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\046\u017c\047\134\050\133" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\046" +
    "\u017f\047\134\050\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\122\u0182\123\u0153\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\016\u0117\044\u0104\116\u0188\117" +
    "\u010e\120\u0110\124\u0108\125\u0113\130\u0111\131\u0119\132\u0116" +
    "\134\u010a\135\u0107\136\u0105\137\u0112\141\u011a\145\u0109\264" +
    "\u0115\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\016\u0117\044\u0104\116\u018b\117\u010e\120\u0110\124\u0108\125" +
    "\u0113\130\u0111\131\u0119\132\u0116\134\u010a\135\u0107\136\u0105" +
    "\137\u0112\141\u011a\145\u0109\264\u0115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\064\u0133" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\u0192\106\u0193\107\u0194\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\u0197\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\065\u0138\001\001\000\010\015\u0192\106" +
    "\u019c\107\u0194\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\015\u0192\106\u019f\107\u0194\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\u01ff" +
    "\020\u0201\001\001\000\004\010\u01a5\001\001\000\002\001" +
    "\001\000\006\157\u01a8\161\u01a9\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\160\u01ac\164\u01ad\165\u01ab\001\001\000\036\166\u01bb" +
    "\167\u01b2\171\u01c2\172\u01b0\173\u01ba\174\u01b9\175\u01af\176" +
    "\u01b4\177\u01b1\200\u01c0\201\u01c3\202\u01bc\203\u01b6\264\u01bf" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\046\175\047\134\050\133\053" +
    "\u01eb\054\200\055\177\056\170\001\001\000\002\001\001" +
    "\000\010\046\u01ea\047\134\050\133\001\001\000\002\001" +
    "\001\000\020\046\175\047\134\050\133\053\u01d6\054\200" +
    "\055\177\056\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\036\u01c5\046\272\047\134\050\133\170" +
    "\u01c6\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\036\u01c9\046\272\047\134\050\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\046\u01ce\047\134\050\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\160\u01ac" +
    "\164\u01d1\165\u01ab\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\046\u01d5\047\134\050\133\264\u01d4\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\160\u01ac\164\u01d9\165\u01ab\001\001" +
    "\000\002\001\001\000\010\204\u01de\205\u01df\206\u01dd\001" +
    "\001\000\002\001\001\000\020\046\175\047\134\050\133" +
    "\053\u01e7\054\200\055\177\056\170\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\160\u01ac" +
    "\164\u01e1\165\u01ab\001\001\000\002\001\001\000\010\204" +
    "\u01e3\205\u01df\206\u01dd\001\001\000\002\001\001\000\010" +
    "\160\u01ac\164\u01e5\165\u01ab\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\160\u01ac\164\u01ee\165\u01ab\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\046\u01f1\047\134\050" +
    "\133\001\001\000\002\001\001\000\004\102\u01f4\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\162\u01fa\163\u01f9\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\207\u0202\001" +
    "\001\000\010\214\u0204\215\u0205\223\u0207\001\001\000\004" +
    "\015\u02f5\001\001\000\012\015\u0212\215\u0213\222\u0211\227" +
    "\u0214\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\266\u020b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\015\u0212\210\u0242\211\u0244\227\u0243\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\216\u0218\001\001" +
    "\000\002\001\001\000\014\250\u023e\251\u0221\252\u021c\265" +
    "\u021e\272\u0220\001\001\000\014\250\u021f\251\u0221\252\u021c" +
    "\265\u021e\272\u0220\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\250\u0235\251" +
    "\u0221\252\u021c\265\u021e\272\u0220\001\001\000\004\216\u0226" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\250\u0228\251\u0221\252\u021c\265\u021e\272\u0220" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\251" +
    "\u0233\252\u021c\265\u021e\272\u0220\001\001\000\012\251\u022c" +
    "\252\u021c\265\u021e\272\u0220\001\001\000\002\001\001\000" +
    "\010\252\u0232\265\u021e\272\u0220\001\001\000\010\252\u0231" +
    "\265\u021e\272\u0220\001\001\000\010\252\u0230\265\u021e\272" +
    "\u0220\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\250\u0239\251\u0221\252\u021c" +
    "\265\u021e\267\u0238\272\u0220\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\250\u023d\251\u0221" +
    "\252\u021c\265\u021e\272\u0220\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\015\u0257\044\u0247\061\u0261" +
    "\126\u0260\212\u024d\224\u0248\225\u024b\226\u0251\232\u024c\233" +
    "\u025c\234\u0255\240\u0249\247\u024f\254\u025a\255\u025f\256\u024e" +
    "\260\u025d\263\u0258\265\u0250\272\u0220\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\015\u0257\044\u0247\061\u0261\126\u0260\225\u02c3\226\u0251" +
    "\232\u024c\233\u025c\234\u0255\240\u0249\247\u024f\254\u025a\255" +
    "\u025f\256\u024e\260\u025d\263\u0258\265\u0250\272\u0220\001\001" +
    "\000\002\001\001\000\024\250\u026b\251\u0221\252\u021c\265" +
    "\u021e\271\u026f\272\u0220\273\u02b9\274\u0268\275\u0267\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\216\u0291\001\001\000\004\230\u0287\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\015\u0257\044\u0247\061\u0261\126\u0260\212\u024d\224\u0263\225" +
    "\u024b\226\u0251\232\u024c\233\u025c\234\u0255\240\u0249\247\u024f" +
    "\254\u025a\255\u025f\256\u024e\260\u025d\263\u0258\265\u0250\272" +
    "\u0220\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\250\u026b\251\u0221\252\u021c\265\u021e\271" +
    "\u026f\272\u0220\273\u0269\274\u0268\275\u0267\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\057\u0273\001\001\000\002\001\001\000\024" +
    "\250\u0272\251\u0221\252\u021c\265\u021e\271\u026f\272\u0220\273" +
    "\u0271\274\u0268\275\u0267\001\001\000\016\250\u026b\251\u0221" +
    "\252\u021c\265\u021e\271\u0270\272\u0220\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\057\u0273" +
    "\001\001\000\014\250\u0274\251\u0221\252\u021c\265\u021e\272" +
    "\u0220\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\250\u026b\251\u0221\252\u021c\265\u021e\271\u026f\272\u0220\274" +
    "\u0277\275\u0267\001\001\000\002\001\001\000\020\250\u026b" +
    "\251\u0221\252\u021c\265\u021e\271\u026f\272\u0220\275\u0279\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\015\u0257\044\u0247\061\u0261\126" +
    "\u0260\212\u024d\224\u027e\225\u024b\226\u0251\232\u024c\233\u025c" +
    "\234\u0255\240\u0249\247\u024f\254\u025a\255\u025f\256\u024e\260" +
    "\u025d\263\u0258\265\u0250\272\u0220\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\216\u028a\231\u028e\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\216\u028a\231\u028b\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\250\u028d\251" +
    "\u0221\252\u021c\265\u021e\272\u0220\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\250\u028d\251\u0221\252\u021c\263" +
    "\u0290\265\u021e\272\u0220\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\250\u0293\251\u0221\252\u021c\263\u0294\265" +
    "\u021e\272\u0220\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\250\u0296\251\u0221\252\u021c\265\u021e\272\u0220\001" +
    "\001\000\002\001\001\000\052\015\u0257\044\u0247\061\u0261" +
    "\126\u0260\212\u024d\224\u0298\225\u024b\226\u0251\232\u024c\233" +
    "\u025c\234\u0255\240\u0249\247\u024f\254\u025a\255\u025f\256\u024e" +
    "\260\u025d\263\u0258\265\u0250\272\u0220\001\001\000\002\001" +
    "\001\000\010\235\u029c\236\u029a\237\u029d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\015\u0257\044\u0247\061\u0261\126\u0260\212\u024d" +
    "\224\u029f\225\u024b\226\u0251\232\u024c\233\u025c\234\u0255\240" +
    "\u0249\247\u024f\254\u025a\255\u025f\256\u024e\260\u025d\263\u0258" +
    "\265\u0250\272\u0220\001\001\000\002\001\001\000\010\235" +
    "\u02a1\236\u029a\237\u029d\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\250\u026b\251\u0221\252\u021c\265\u021e\271" +
    "\u026f\272\u0220\273\u02a4\274\u0268\275\u0267\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\015\u0257\044\u0247\061" +
    "\u0261\126\u0260\212\u024d\224\u02a7\225\u024b\226\u0251\232\u024c" +
    "\233\u025c\234\u0255\240\u0249\247\u024f\254\u025a\255\u025f\256" +
    "\u024e\260\u025d\263\u0258\265\u0250\272\u0220\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\250\u02aa\251\u0221\252" +
    "\u021c\261\u02ac\262\u02ad\265\u021e\272\u0220\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\250\u02aa\251\u0221\252\u021c\262\u02b0\265\u021e" +
    "\272\u0220\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\250\u026b\251\u0221\252\u021c\265\u021e\271\u026f\272\u0220" +
    "\273\u02b2\274\u0268\275\u0267\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\246\u02bc\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\250\u02bf\251\u0221\252" +
    "\u021c\265\u021e\272\u0220\001\001\000\002\001\001\000\052" +
    "\015\u0257\044\u0247\061\u0261\126\u0260\212\u024d\224\u02c1\225" +
    "\u024b\226\u0251\232\u024c\233\u025c\234\u0255\240\u0249\247\u024f" +
    "\254\u025a\255\u025f\256\u024e\260\u025d\263\u0258\265\u0250\272" +
    "\u0220\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\250\u026b\251\u0221\252" +
    "\u021c\265\u021e\271\u026f\272\u0220\273\u02c6\274\u0268\275\u0267" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\242" +
    "\u02cc\243\u02c9\244\u02cb\253\u02ca\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\241\u02d9\242\u02cc\253\u02da\001" +
    "\001\000\002\001\001\000\006\245\u02d0\276\u02cf\001\001" +
    "\000\004\216\u02d4\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\015\u0257\044\u0247\061\u0261\126" +
    "\u0260\212\u024d\224\u02d6\225\u024b\226\u0251\232\u024c\233\u025c" +
    "\234\u0255\240\u0249\247\u024f\254\u025a\255\u025f\256\u024e\260" +
    "\u025d\263\u0258\265\u0250\272\u0220\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\015\u0257\044\u0247\061\u0261\126\u0260" +
    "\212\u024d\224\u02dc\225\u024b\226\u0251\232\u024c\233\u025c\234" +
    "\u0255\240\u0249\247\u024f\254\u025a\255\u025f\256\u024e\260\u025d" +
    "\263\u0258\265\u0250\272\u0220\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\u02e3\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\250\u02e6\251\u0221" +
    "\252\u021c\265\u021e\272\u0220\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\250\u02e9\251\u0221\252\u021c\265\u021e" +
    "\272\u0220\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\250\u02f8\251" +
    "\u0221\252\u021c\265\u021e\272\u0220\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SyntaxMlgAnalyzer$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SyntaxMlgAnalyzer$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SyntaxMlgAnalyzer$do_action(act_num, parser, stack, top,this);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    

public boolean SyntaxError;
    public boolean SyntaxRecoverableError;
    public TestManager testManager;
    public TranslateControlerTAC translateControlerTAC;

    public void setTestManager(TestManager testManager) {
        this.testManager = testManager;
        testManager.creatFatherAmbit();
    }

public void setTranslateControlerTAC(TranslateControlerTAC translateControlerTAC) {
        this.translateControlerTAC = translateControlerTAC;
                            
    }

     public void syntax_error(Symbol s){
        try {
            String lexema = s.value.toString();
            int fila = s.right;
            int columna = s.left;
            OutputErrors.syntacticRecovered(testManager.getMainFrame().getOutputPannel(), lexema, columna, fila, s);
        } catch (Exception e) {
            System.out.println("error");
            int fila = s.right;
            int columna = s.left;
            System.out.println("\t \tFila: " + fila + "\n");
            System.out.println("\t \tColumna: " + columna + "\n");
        }

    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        try{
            String lexema = s.value.toString();
            int fila = s.right;
            int columna = s.left;
        OutputErrors.syntacticNotRecovered(testManager.getMainFrame().getOutputPannel(), lexema, columna, fila, s);

        } catch (Exception ex) {
            
         }
    }

    public void syntaxerrorhelp(){


    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SyntaxMlgAnalyzer$actions {


     protected void mostrarErrores(int numero, Symbol s,SyntaxMlgAnalyzer sma) {
         JTextPane text= sma.testManager.getMainFrame().getOutputPannel();
    switch (numero) {
                case 1:
                    OutputErrors.syntaxFunctionVB(text,s);
                    break;
                case 2:
                    
                    break;
                 case 3:
                    
                    break;
                case 4:
                    break;
                default:
                    throw new AssertionError();
            }
        

    }

  private final SyntaxMlgAnalyzer parser;

  /** Constructor */
  CUP$SyntaxMlgAnalyzer$actions(SyntaxMlgAnalyzer parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SyntaxMlgAnalyzer$do_action(
    int                        CUP$SyntaxMlgAnalyzer$act_num,
    java_cup.runtime.lr_parser CUP$SyntaxMlgAnalyzer$parser,
    java.util.Stack            CUP$SyntaxMlgAnalyzer$stack,
    int                        CUP$SyntaxMlgAnalyzer$top,SyntaxMlgAnalyzer sma)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SyntaxMlgAnalyzer$result;

      /* select the action based on the action number */
      switch (CUP$SyntaxMlgAnalyzer$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // BoolValueC ::= PARENTHESIS_A OpBoolC PARENTHESIS_B 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT=val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueC",183, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // BoolValueC ::= NumberValueC ExBoolVb NumberValueC 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int exValleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int exValright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object exVal = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateBoolType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdBoolQuadruple(s1.getQuadruple(),s2.getQuadruple(),(Integer)exVal);
                                                                    RESULT=sma.translateControlerTAC.getcurrentTempQuads();
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueC",183, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // BoolValueC ::= FALSE 
            {
              Object RESULT =null;
		 Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.BOOL_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL_BOOL,0,1,null);
		                    RESULT=sma.translateControlerTAC.getcurrentTempQuads();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueC",183, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // BoolValueC ::= TRUE 
            {
              Object RESULT =null;
		 Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.BOOL_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL_BOOL,1,1,null);
		                    RESULT=sma.translateControlerTAC.getcurrentTempQuads();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueC",183, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // OpBoolC3 ::= BoolValueC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(val!=null){
                   RESULT = sma.translateControlerTAC.getBoolQuadControl().convertQuadToBool(((ArrayList<Object>)val)); 
        }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBoolC3",187, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // OpBoolC3 ::= NOT BoolValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBoolC3",187, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // OpBoolC2 ::= OpBoolC3 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBoolC2",186, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // OpBoolC2 ::= OpBoolC2 AND OpBoolC3 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(val1!=null &&val2!=null){
                                            RESULT= sma.translateControlerTAC.getBoolQuadControl().operateBoolQuad(val1,val2,Operation.OP_AND);}
                                            
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBoolC2",186, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // OpBoolC ::= OpBoolC2 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBoolC",185, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // OpBoolC ::= OpBoolC OR OpBoolC2 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(val1!=null &&val2!=null){
                                            RESULT= sma.translateControlerTAC.getBoolQuadControl().operateBoolQuad(val1,val2,Operation.OP_OR);}
                                            
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBoolC",185, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // ArrayVal ::= ID Dimensions 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ArrayVal",188, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // ValueC ::= NumberValueC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValueC",182, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // ParametersC ::= NumberValueC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> params=new ArrayList<Object>();
                            if(val!=null){
                                SynthesizedOpAsst soa=(SynthesizedOpAsst)val;
                                sma.translateControlerTAC.creatTempIdQuad(Operation.PARAMS,null,null,soa.getQuadruple().getResult());
                                params.add(soa.getQuadruple().getResult());
                            }
                            RESULT=params;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParametersC",181, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // ParametersC ::= ParametersC COMMA NumberValueC 
            {
              Object RESULT =null;
		int paramsCleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int paramsCright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object paramsC = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> params=new ArrayList<Object>();
                            if(paramsC!=null){params.addAll((ArrayList<Object>)paramsC);}
                                                        if(val!=null){
                                SynthesizedOpAsst soa=(SynthesizedOpAsst)val;
                                sma.translateControlerTAC.creatTempIdQuad(Operation.PARAMS,null,null,soa.getQuadruple().getResult());
                                params.add(soa.getQuadruple().getResult());
                            }
                            RESULT=params;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParametersC",181, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // FuntionIDsCall ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT = id;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FuntionIDsCall",184, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // FuntionIDsCall ::= ID POINT ID 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=id1+"."+id2;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FuntionIDsCall",184, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // FuntionCall ::= FuntionIDsCall PARENTHESIS_A PARENTHESIS_B 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		
                                                                            SynthesizedOpAsst sao=sma.testManager.verifyFunction((String)ids,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
                                                                            if(sao!=null){
                                                                                RESULT =sao;
                                                                            }else{
                                                                                sma.translateControlerTAC.removeIdQuads();
                                                                            }
                                                                        
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FuntionCall",179, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // FuntionCall ::= FuntionIDsCall PARENTHESIS_A ParametersC PARENTHESIS_B 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int paraleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		if(para!=null){
                                                                            SynthesizedOpAsst sao=sma.testManager.verifyFunction((String)ids,(ArrayList<Object>)para,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
                                                                            if(sao!=null){
                                                                                RESULT= sao;
                                                                            }else{
                                                                                sma.translateControlerTAC.removeIdQuads();
                                                                            }
                                                                        }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FuntionCall",179, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // Input ::= SCAN_F PARENTHESIS_A STRING COMMA AMPERSON ID PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Input",178, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // Getch ::= GETCH PARENTHESIS_A PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Getch",177, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // OutputValueC ::= STRING 
            {
              Object RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.add(sma.translateControlerTAC.createPrintQuad(string));
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValueC",176, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // OutputValueC ::= NumberValueC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll(sma.translateControlerTAC.getcurrentTempQuads());
                                    printQuad.add(sma.translateControlerTAC.createPrintQuad(val));
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValueC",176, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // OutputValuesC ::= OutputValueC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll((ArrayList<Object>)val);
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValuesC",175, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // OutputValuesC ::= OutputValuesC COMMA OutputValueC 
            {
              Object RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll((ArrayList<Object>)vals);
                                    printQuad.addAll((ArrayList<Object>)val);
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValuesC",175, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // OutputC ::= CLRSCR PARENTHESIS_A PARENTHESIS_B 
            {
              Object RESULT =null;
		sma.translateControlerTAC.addClrScrToCurrent();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputC",174, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // OutputC ::= PRINTF PARENTHESIS_A OutputValuesC PARENTHESIS_B 
            {
              Object RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		 if(vals!=null){
                                                                                                sma.translateControlerTAC.addQuadsToCurrent((ArrayList<Object>)vals);
                                                                                                
                                                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputC",174, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // AssignmentStepC ::= ID EQUAL NumberValueC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                        RESULT=sma.translateControlerTAC.getcurrentTempQuads();}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentStepC",164, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // WhileCHeader ::= WHILE PARENTHESIS_A OpBoolC PARENTHESIS_B 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT=op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("WhileCHeader",172, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // ForCHeaderStart ::= For PARENTHESIS_A ID EQUAL NumberValueC SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		Type type=sma.testManager.getTypeFromST(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    if(type!=null){
                                                    if(sma.testManager.getTypeManager().isNumerico(type.getNumber())){
                                                        
                                                        boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                            RESULT=new SemanticAsstIdQuad(id, sma.translateControlerTAC.getcurrentTempQuads());
                                                        }
                                                    }else{
                                                        sma.testManager.callNumericError(id,type,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    }}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForCHeaderStart",165, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // ForCHeaderStart ::= For PARENTHESIS_A Type ID EQUAL NumberValueC SEMICOLON 
            {
              Object RESULT =null;
		int type1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int type1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object type1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		 boolean boolExistence= sma.testManager.checkExistence(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                if(boolExistence){

                                                    if(sma.testManager.getTypeManager().isNumerico((Integer)type1)){
                                                        sma.testManager.insertTuple(id,(Integer)type1,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                            RESULT=new SemanticAsstIdQuad(id, sma.translateControlerTAC.getcurrentTempQuads());
                                                        }
                                                    }else{
                                                        sma.testManager.callNumericError(id,sma.testManager.getTypeManager().getType((Integer)type1),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    }
                                                }
                                                
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForCHeaderStart",165, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // ForCHeader ::= ForCHeaderStart OpBoolC SEMICOLON AssignmentStepC PARENTHESIS_B 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int stepleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int stepright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object step = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		if (id!=null) {
                    BoolQuad boolQuad=(BoolQuad)op;
                    SemanticAsstIdQuad saiq= (SemanticAsstIdQuad)id;
                    
                    
                     For f=sma.translateControlerTAC.createForAsst(saiq.getQuads(),step,boolQuad );
                    RESULT=f;}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForCHeader",171, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // CycleC ::= DoHeader LEFT_CB MainCode RIGHT_CB WHILE PARENTHESIS_A OpBoolC PARENTHESIS_B SEMICOLON 
            {
              Object RESULT =null;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-6)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-6)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-6)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		if(op!=null){
                                                                                sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.creatDoWhile((ArrayList<Object>)lines,(BoolQuad)op));
                                                                                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleC",170, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-8)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // CycleC ::= WhileCHeader LEFT_CB MainCode RIGHT_CB 
            {
              Object RESULT =null;
		int whileBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int whileBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object whileBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		BoolQuad bool=(BoolQuad)whileBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.addGotoWhileTags(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool)));
                                                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleC",170, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // CycleC ::= ForCHeader LEFT_CB MainCode RIGHT_CB 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		if(f!=null){
                                                                For fo=(For)f;
                                                                fo.addCode((ArrayList<Object>)lines);
                                                                sma.translateControlerTAC.addQuadsToCurrent(fo.convertToQuad());
                                                                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleC",170, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // CaseValueC ::= ArrayVal 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseValueC",163, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // CaseValueC ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type=sma.testManager.getTypeFromST(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                            if(type!=null){
                                RESULT=id;
                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseValueC",163, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // CaseValueC ::= CHAR 
            {
              Object RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=ch;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseValueC",163, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // CaseValueC ::= DECIMAL 
            {
              Object RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=dec;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseValueC",163, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // CaseValueC ::= NUMBER 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=num;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseValueC",163, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // CaseElseCHeader ::= DEFAULT 
            {
              Object RESULT =null;
		RESULT=Switch.ELSE;
                    sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseElseCHeader",159, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // CaseCHeader ::= CASE CaseValueC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=val;
                                            sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseCHeader",160, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // CaseC ::= CaseCHeader COLON MainCode BREAK SEMICOLON 
            {
              Object RESULT =null;
		int caseHleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int caseHright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object caseH = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		UniquenessTable ut=sma.testManager.createNewUniquenessTable();
                                                                        if(caseH!=null){
                                                                            
                                                                            boolean verified =ut.add(caseH,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                            if(verified){
                                                                            
                                                                            sma.translateControlerTAC.getSwitchAsst().addCases((String)caseH,(ArrayList<Object>)lines);}
                                                                            }
                                                                        RESULT=ut;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseC",169, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // CasesC2 ::= CaseC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesC2",162, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // CasesC2 ::= CasesC2 CaseC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesC2",162, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // CasesC ::= CaseC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesC",161, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // CasesC ::= CasesC2 CaseElseCHeader COLON MainCode BREAK SEMICOLON 
            {
              Object RESULT =null;
		int caseHleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int caseHright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object caseH = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		UniquenessTable ut=sma.testManager.createNewUniquenessTable();
                                                                        if(caseH!=null){
                                                                            
                                                                            boolean verified =ut.add(caseH,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                            if(verified){
                                                                            
                                                                            sma.translateControlerTAC.getSwitchAsst().addCases((String)caseH,(ArrayList<Object>)lines);}
                                                                            }
                                                                        RESULT=ut;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesC",161, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // CasesC ::= CasesC2 CaseC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesC",161, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // SwitchCHeader ::= SWITCH PARENTHESIS_A ID PARENTHESIS_B 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.translateControlerTAC.createSwitchAsst(id);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("SwitchCHeader",158, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // ElseIfCHeader ::= ELSE IF PARENTHESIS_A OpBoolC PARENTHESIS_B 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT =op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseIfCHeader",157, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // ElseCHeader ::= ELSE 
            {
              Object RESULT =null;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseCHeader",156, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // ElseC ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseC",155, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // ElseC ::= ElseIfCHeader LEFT_CB MainCode RIGHT_CB ElseC 
            {
              Object RESULT =null;
		int ifBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int ifBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object ifBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int elseBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int elseBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object elseBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(ifBool!=null){
                                                                    BoolQuad bool=(BoolQuad)ifBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    if(elseBool!=null){bool.changeFatherNoBool((ArrayList<Object>)elseBool);}
                                                                                    RESULT =sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool);
                                                                                    
                                                                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseC",155, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // ElseC ::= ElseCHeader LEFT_CB MainCode RIGHT_CB 
            {
              Object RESULT =null;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT=lines;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseC",155, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // IfCHeader ::= IF PARENTHESIS_A OpBoolC PARENTHESIS_B 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT=op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IfCHeader",154, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // ConditionC ::= SwitchCHeader LEFT_CB CasesC RIGHT_CB 
            {
              Object RESULT =null;
		sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(sma.translateControlerTAC.getSwitchAsst().getFatherCases()));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionC",153, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // ConditionC ::= IfCHeader LEFT_CB MainCode RIGHT_CB ElseC 
            {
              Object RESULT =null;
		int ifBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int ifBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object ifBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int elseBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int elseBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object elseBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		BoolQuad bool=(BoolQuad)ifBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    if(elseBool!=null){bool.changeFatherNoBool((ArrayList<Object>)elseBool);}
                                                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool));
                                                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionC",153, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // AssignmentC ::= ID EQUAL Getch 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		Type type = sma.testManager.getTypeFromST(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                    if(type!=null){
                                        sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getch(id));}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentC",152, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // AssignmentC ::= ID Dimensions EQUAL NumberValueC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object dim = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(dim !=null&& val!=null){
                            SynthesizedOpAsst soa=sma.testManager.getArrayType(id,dim,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
                            boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,soa.getQuadruple().getResult());
                                                        sma.translateControlerTAC.acceptAllIdQuas();}}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentC",152, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // AssignmentC ::= ID EQUAL NumberValueC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                        sma.translateControlerTAC.acceptAllIdQuas();}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentC",152, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // AssiC ::= 
            {
              Object RESULT =null;
		System.out.println("ASSI VACIO");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssiC",151, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // AssiC ::= Dimensions 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssiC",151, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // AssiC ::= EQUAL NumberValueC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT =val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssiC",151, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // IdsC ::= ID AssiC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.insertPreTuple(id,null,val,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                        if(val!=null){ 
                                                            sma.translateControlerTAC.createTempIdQuadAssign(val,id);}
                                        sma.translateControlerTAC.nextIdQuad();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IdsC",150, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // IdsC ::= IdsC COMMA ID AssiC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.insertPreTuple(id,null,val,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        if(val!=null){ 
                                                            sma.translateControlerTAC.createTempIdQuadAssign(val,id);}
                                                       
                                                        sma.translateControlerTAC.nextIdQuad();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IdsC",150, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // DeclarationC ::= Type ID EQUAL Getch 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		if(!sma.testManager.checkExistence(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()))){
                                                      
                                                      sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getch(id));     
                        }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationC",148, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // DeclarationC ::= Type IdsC 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.testManager.insertPreTuplesToSymbolTable((Integer)type,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationC",148, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // InputJ ::= SCAN_F PARENTHESIS_A STRING COMMA AMPERSON ID PARENTHESIS_B 
            {
              Object RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		 String split= sma.testManager.testInput(id, string, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                        if(split!=null){
                                                                                sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.createInputQuads(string,id,split));
                                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InputJ",84, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // MainLineCode ::= error 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",147, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // MainLineCode ::= FuntionCall SEMICOLON 
            {
              Object RESULT =null;
		sma.translateControlerTAC.acceptAllIdQuas();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",147, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // MainLineCode ::= InputJ SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",147, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // MainLineCode ::= Getch SEMICOLON 
            {
              Object RESULT =null;
		sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getch(null));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",147, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // MainLineCode ::= OutputC SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",147, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // MainLineCode ::= CycleC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",147, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // MainLineCode ::= ConditionC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",147, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // MainLineCode ::= AssignmentC SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",147, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // MainLineCode ::= DeclarationC SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",147, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // MainCode1 ::= MainLineCode 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainCode1",136, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // MainCode1 ::= MainCode1 MainLineCode 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainCode1",136, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // MainCode ::= MainCode1 
            {
              Object RESULT =null;
		RESULT=sma.translateControlerTAC.getcurrentQuads();
                                                    sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainCode",146, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // MainHeader ::= VOID_J MAIN PARENTHESIS_A PARENTHESIS_B 
            {
              Object RESULT =null;
		sma.testManager.creatSonAmbit();
                                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                                        String name =sma.testManager.insertFunction("main", null, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                RESULT= name;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainHeader",135, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // Main ::= error 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Main",134, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // Main ::= MainHeader LEFT_CB MainCode RIGHT_CB 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		ArrayList<Object>quad=new ArrayList<>();
                                                                        if(name!=null){
                                                                        quad=sma.translateControlerTAC.tagFunction((String)name,(ArrayList<Object>) lines);
                                                                         
                                                                          }
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    sma.translateControlerTAC.addQuadsToCurrent(quad);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Main",134, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // FuntionIDs ::= ID POINT MULTIPLICATION 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		sma.testManager.include(id1,"*",((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FuntionIDs",180, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // FuntionIDs ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.include(id,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FuntionIDs",180, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // FuntionIDs ::= ID POINT ID 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.include(id1,id2,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FuntionIDs",180, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // Include ::= INCLUDE LESS_THAN FuntionIDs GREATER_THAN 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Include",145, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // Include ::= INCLUDE STRING 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.include(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Include",145, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // DeclarationGlobalC ::= Type ID 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationGlobalC",149, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // DeclarationGlobalC ::= Type ID Dimensions 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object dims = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(dims!=null&&!sma.testManager.checkExistence(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()))){

                        ArrayList<Object> dimensions=(ArrayList<Object>)dims;
                        sma.testManager.insertArray(id, (Integer) type, dimensions, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                        sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.createArrayQuads(id,dimensions));
                    }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationGlobalC",149, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // DeclarationGlobalC ::= Type ID EQUAL NumberValueC 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.insertPreTuple(id,null,val,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                        if(val!=null){ 
                                                            sma.translateControlerTAC.createTempIdQuadAssign(val,id);}
                                        sma.translateControlerTAC.nextIdQuad();
                                        sma.testManager.insertPreTuplesToSymbolTable((Integer)type,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
                                        
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationGlobalC",149, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // Globals ::= DeclarationGlobalC SEMICOLON 
            {
              Object RESULT =null;
		sma.translateControlerTAC.acceptAllIdQuas();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Globals",144, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // Globals ::= Globals DeclarationGlobalC SEMICOLON 
            {
              Object RESULT =null;
		sma.translateControlerTAC.acceptAllIdQuas();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Globals",144, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // Dimensions ::= LEFT_BRACKET NumberValueC RIGHT_BRACKET 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		ArrayList<Object> dim=new ArrayList<>();
                                                            if(val!=null){
                                                                SynthesizedOpAsst soa= (SynthesizedOpAsst)val;
                                                                if(sma.testManager.verifyIntegerValue(val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()))){
                                                                    dim.add(soa.getQuadruple().getResult());
                                                                RESULT =dim;}
                                                                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Dimensions",140, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // Dimensions ::= Dimensions LEFT_BRACKET NumberValueC RIGHT_BRACKET 
            {
              Object RESULT =null;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object dims = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		if(dims!=null){
                                                                            ArrayList<Object> dim=new ArrayList<>();
                                                                            ArrayList<Object> asst=(ArrayList<Object>) dims;
                                                                            dim.addAll(asst);
                                                                            if(val!=null){
                                                                        SynthesizedOpAsst soa= (SynthesizedOpAsst)val;
                                                                        if(sma.testManager.verifyIntegerValue(val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()))){
                                                                                dim.add(soa.getQuadruple().getResult());
                                                                            RESULT =dim;}
}}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Dimensions",140, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // Number3C ::= FuntionCall 
            {
              Object RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int funright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object fun = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT= fun;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3C",168, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // Number3C ::= ID Dimensions 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int dimensionsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int dimensionsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object dimensions = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(dimensions!=null){
                                            RESULT =sma.testManager.getArrayType(id,dimensions,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);

                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3C",168, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // Number3C ::= PARENTHESIS_A NumberValueC PARENTHESIS_B 
            {
              Object RESULT =null;
		int asstleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int asstright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object asst = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT=asst;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3C",168, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // Number3C ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type=sma.testManager.getTypeFromST(val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                            if(type!=null){
                                Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL,val,null,null);
                                RESULT=new SynthesizedOpAsst(quadruple,type);
                            }else{

                                RESULT=null;
                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3C",168, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // Number3C ::= CHAR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.CHAR_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL,val,null,null);
		                    RESULT=new SynthesizedOpAsst(quadruple,type);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3C",168, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // Number3C ::= DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.FLOAT_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL,val,null,null);
		                    RESULT=new SynthesizedOpAsst(quadruple,type);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3C",168, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // Number3C ::= NUMBER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		 Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.INTEGER_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL,val,null,null);
		                    RESULT=new SynthesizedOpAsst(quadruple,type);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3C",168, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // Number2C ::= Number3C 
            {
              Object RESULT =null;
		int asstleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int asstright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object asst = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=asst;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number2C",167, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // Number2C ::= Number2C MOD Number3C 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.MOD);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number2C",167, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // Number2C ::= Number2C DIVISION Number3C 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.DIVISION);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number2C",167, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // Number2C ::= Number2C MULTIPLICATION Number3C 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.MULTIPLICATION);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number2C",167, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // NumberValueC ::= Number2C 
            {
              Object RESULT =null;
		int asstleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int asstright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object asst = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=asst;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumberValueC",166, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // NumberValueC ::= NumberValueC MINUS Number2C 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.MINUS);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumberValueC",166, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // NumberValueC ::= NumberValueC PLUS Number2C 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.PLUS);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumberValueC",166, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // Constante ::= CONST Type ID EQUAL NumberValueC 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.insertPreTuple(id,null,val,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                        if(val!=null){ 
                                                       Quadruple quad=     sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                       quad.setConstante(true);
                                                       }
                                        sma.translateControlerTAC.nextIdQuad();
                                        sma.testManager.convertPreTuplesToConstante();
                                        sma.testManager.insertPreTuplesToSymbolTable((Integer)type,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
                                        
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Constante",139, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // Constantes ::= Constante SEMICOLON 
            {
              Object RESULT =null;
		sma.translateControlerTAC.acceptAllIdQuas();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Constantes",138, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // Constantes ::= Constantes Constante SEMICOLON 
            {
              Object RESULT =null;
		sma.translateControlerTAC.acceptAllIdQuas();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Constantes",138, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // Library ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Library",133, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // Library ::= Library Include 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Library",133, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // ProgramSeperator ::= PROGRAM_SEPERATOR 
            {
              Object RESULT =null;
		sma.testManager.creatSonAmbit();
                            sma.translateControlerTAC.createNewQuadrupleBlock();
                             
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ProgramSeperator",14, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // Program ::= ProgramSeperator Library Constantes Globals Main 
            {
              Object RESULT =null;
		
                                    sma.testManager.finishAmbit();
                                    sma.translateControlerTAC.acceptCurrentBlock();
                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getcurrentQuads());
                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Program",7, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // ElifHeader ::= ELIF OpBool COLON 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT =op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElifHeader",131, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // ElseHeaderPY ::= ELSE COLON 
            {
              Object RESULT =null;
		sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseHeaderPY",132, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // Elif ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Elif",130, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // Elif ::= ElseHeaderPY INDENT FunctionLinesPY DEDENT 
            {
              Object RESULT =null;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT=lines;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Elif",130, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // Elif ::= ElifHeader INDENT FunctionLinesPY DEDENT Elif 
            {
              Object RESULT =null;
		int ifBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int ifBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object ifBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int elseBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int elseBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object elseBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(ifBool!=null){
                                                                    BoolQuad bool=(BoolQuad)ifBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    if(elseBool!=null){bool.changeFatherNoBool((ArrayList<Object>)elseBool);}
                                                                                    RESULT =sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool);
                                                                                    
                                                                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Elif",130, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // IfPYHeader ::= IF OpBool COLON 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT=op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IfPYHeader",129, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // IfPY ::= IfPYHeader INDENT FunctionLinesPY DEDENT Elif 
            {
              Object RESULT =null;
		int ifBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int ifBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object ifBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int elseBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int elseBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object elseBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		BoolQuad bool=(BoolQuad)ifBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    if(elseBool!=null){bool.changeFatherNoBool((ArrayList<Object>)elseBool);}
                                                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool));
                                                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IfPY",128, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // ConditionPY ::= IfPY 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionPY",127, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // AssignmentPY ::= ID EQUAL Input 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type = sma.testManager.getTypeFromST(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                            if(type!=null&&in!=null){
                                                SyntaxInputAsst sia= (SyntaxInputAsst) in;
                                                
                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.createInputQuads(id,sia.getString()));
                                                
                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentPY",126, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // AssignmentPY ::= ID EQUAL NumberValue 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num!=null){
                                                                    if(!sma.testManager.checkExistence(id)){
                                                                    sma.testManager.insertTuple(id,TypeManager.VAR_TYPE,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                            }
                                                           sma.translateControlerTAC.createTempIdQuadAssign(num,id);
                                                        sma.translateControlerTAC.acceptAllIdQuas();}
                                                    

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentPY",126, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // WhilePYHeader ::= WHILE OpBool COLON 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT=op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("WhilePYHeader",125, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // WhilePY ::= WhilePYHeader INDENT FunctionLinesPY DEDENT 
            {
              Object RESULT =null;
		int whileBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int whileBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object whileBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		BoolQuad bool=(BoolQuad)whileBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.addGotoWhileTags(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool)));
                                                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("WhilePY",124, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // ForStartPy ::= FOR 
            {
              Object RESULT =null;
		sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForStartPy",121, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // ForPYHeader2 ::= ForStartPy ID IN RANGE PARENTHESIS_A NumberValue 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if (id!=null) {
                    if(!sma.testManager.checkExistence(id)){
                        sma.testManager.insertTuple(id,TypeManager.VAR_TYPE,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                       }
                       sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                       RESULT=new SemanticAsstIdQuad(id, sma.translateControlerTAC.getcurrentTempQuads());
                                                        
                    
                    }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForPYHeader2",123, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // ForPYHeader ::= ForPYHeader2 COMMA NumberValue PARENTHESIS_B 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		if (id!=null) {
                    SemanticAsstIdQuad saiq= (SemanticAsstIdQuad)id;
                    SynthesizedOpAsst s1= (SynthesizedOpAsst)num;
                    Quadruple quadruple=sma.translateControlerTAC.operateIdBoolQuadruple(saiq.getId(),s1.getQuadruple(),Operation.EQUAL_BOOL);
                    BoolQuad bool =sma.translateControlerTAC.getBoolQuadControl().convertQuadToBool(sma.translateControlerTAC.getcurrentTempQuads());
                     For f=sma.translateControlerTAC.createForAsst(saiq.getQuads(), "1", bool, saiq.getId());
                    RESULT=f;}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForPYHeader",122, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // ForPYHeader ::= ForPYHeader2 COMMA NumberValue COMMA CaseValue PARENTHESIS_B 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int stepleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int stepright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object step = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		if (id!=null) {
                    SemanticAsstIdQuad saiq= (SemanticAsstIdQuad)id;
                    SynthesizedOpAsst s1= (SynthesizedOpAsst)num;
                    Quadruple quadruple=sma.translateControlerTAC.operateIdBoolQuadruple(saiq.getId(),s1.getQuadruple(),Operation.EQUAL_BOOL);
                    BoolQuad bool =sma.translateControlerTAC.getBoolQuadControl().convertQuadToBool(sma.translateControlerTAC.getcurrentTempQuads());
                     For f=sma.translateControlerTAC.createForAsst(saiq.getQuads(), (String) step, bool, saiq.getId());
                    RESULT=f;}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForPYHeader",122, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // ForPY ::= ForPYHeader COLON INDENT FunctionLinesPY DEDENT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		if(f!=null){
                                                                For fo=(For)f;
                                                                fo.addCode((ArrayList<Object>)lines);
                                                                sma.translateControlerTAC.addQuadsToCurrent(fo.convertToQuad());
                                                                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForPY",120, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // CyclePY ::= WhilePY 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CyclePY",119, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // CyclePY ::= ForPY 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CyclePY",119, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // OutputValuesPY ::= ValueVb 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll((ArrayList<Object>)val);
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValuesPY",118, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // OutputValuesPY ::= OutputValuesPY COMMA ValueVb 
            {
              Object RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll((ArrayList<Object>)vals);
                                    printQuad.addAll((ArrayList<Object>)val);
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValuesPY",118, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // OutputPY ::= PRINT PARENTHESIS_A OutputValuesPY PARENTHESIS_B 
            {
              Object RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		 if(vals!=null){
                                                                                                sma.translateControlerTAC.addQuadsToCurrent((ArrayList<Object>)vals);
                                                                                                
                                                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputPY",117, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // LineCodePY ::= error 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodePY",116, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // LineCodePY ::= ConditionPY 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodePY",116, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // LineCodePY ::= AssignmentPY 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodePY",116, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // LineCodePY ::= CyclePY 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodePY",116, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // LineCodePY ::= OutputPY 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodePY",116, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // LineCodePY ::= Input 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(in!=null){
                                    SyntaxInputAsst sia= (SyntaxInputAsst)in;
                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.createInputQuads(null,sia.getString()));
                                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodePY",116, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // LinesPY ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LinesPY",115, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // LinesPY ::= LinesPY LineCodePY 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LinesPY",115, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // FunctionLinesPY1 ::= LinesPY RETURN NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionLinesPY1",110, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // FunctionLinesPY1 ::= LinesPY 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionLinesPY1",110, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // FunctionLinesPY ::= FunctionLinesPY1 
            {
              Object RESULT =null;
		RESULT=sma.translateControlerTAC.getcurrentQuads();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionLinesPY",114, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // IdsPY ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.getParameterControl().insertParameter(TypeManager.VAR_TYPE,id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IdsPY",113, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // IdsPY ::= IdsPY COMMA ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.getParameterControl().insertParameter(TypeManager.VAR_TYPE,id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IdsPY",113, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // ParametersPY ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParametersPY",112, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // ParametersPY ::= IdsPY 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParametersPY",112, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // FunctionPYHeader ::= DEF ID PARENTHESIS_A ParametersPY PARENTHESIS_B COLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		sma.testManager.creatSonAmbit();
                                                                                            sma.translateControlerTAC.createNewQuadrupleBlock();
                                                                                            String name =sma.testManager.insertFunction(id,TypeManager.VAR_TYPE, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                RESULT= name;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionPYHeader",111, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // FunctionPY ::= error 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionPY",109, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // FunctionPY ::= FunctionPYHeader INDENT FunctionLinesPY DEDENT 
            {
              Object RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int funright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object fun = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		ArrayList<Object>quad=new ArrayList<>();
                                                                        if(fun!=null){
                                                                        quad=sma.translateControlerTAC.tagFunction((String)fun,(ArrayList<Object>) ins);
                                                                         
                                                                          }
                                                                         sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    sma.translateControlerTAC.addQuadsToCurrent(quad);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionPY",109, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // PythonCode ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("PythonCode",6, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // PythonCode ::= PythonCode FunctionPY 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("PythonCode",6, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // PythonSeperator ::= PYTHON_SEPERATOR 
            {
              Object RESULT =null;
		sma.testManager.creatSonAmbit();
                            sma.translateControlerTAC.createNewQuadrupleBlock();
                             
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("PythonSeperator",9, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // Python ::= PythonSeperator PythonCode 
            {
              Object RESULT =null;
		sma.testManager.switchNextTypes();
                                            sma.testManager.finishAmbit();
                                    sma.translateControlerTAC.acceptCurrentBlock();
                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getcurrentQuads());
                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Python",3, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // BreakJ ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BreakJ",104, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // CaseJHeader ::= CASE ValJ 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=val;
                                            sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseJHeader",101, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // CaseJ ::= CaseJHeader COLON LineCodesJ BreakJ 
            {
              Object RESULT =null;
		int caseJleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int caseJright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object caseJ = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		UniquenessTable ut=sma.testManager.createNewUniquenessTable();
                                                                        if(caseJ!=null){
                                                                            
                                                                            boolean verified =ut.add(caseJ,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                            if(verified){
                                                                            
                                                                            sma.translateControlerTAC.getSwitchAsst().addCases((String)caseJ,(ArrayList<Object>)lines);}
                                                                            }
                                                                        RESULT=ut;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseJ",103, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // CasesJ2 ::= CaseJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesJ2",102, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // CasesJ2 ::= CasesJ2 CaseJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesJ2",102, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // CasesJ1 ::= CaseJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesJ1",100, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // CasesJ1 ::= CasesJ2 CaseElseCHeader COLON LineCodesJ BreakJ 
            {
              Object RESULT =null;
		int caseJleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int caseJright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object caseJ = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		UniquenessTable ut=sma.testManager.createNewUniquenessTable();
                                                                        if(caseJ!=null){
                                                                            
                                                                            boolean verified =ut.add(caseJ,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                            if(verified){
                                                                            
                                                                            sma.translateControlerTAC.getSwitchAsst().addCases((String)caseJ,(ArrayList<Object>)lines);}
                                                                            }
                                                                        RESULT=ut;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesJ1",100, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // CasesJ1 ::= CasesJ2 CaseJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesJ1",100, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // SwitchJHeader ::= SWITCH_J PARENTHESIS_A ID PARENTHESIS_B 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.translateControlerTAC.createSwitchAsst(id);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("SwitchJHeader",99, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // ElseIfJHeader ::= ELSE IF PARENTHESIS_A OpBool PARENTHESIS_B 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT =op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseIfJHeader",97, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // ElseJHeader ::= ELSE 
            {
              Object RESULT =null;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseJHeader",98, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // ElseJ ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseJ",96, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // ElseJ ::= ElseIfJHeader LEFT_CB LineCodeJ RIGHT_CB ElseJ 
            {
              Object RESULT =null;
		int ifBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int ifBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object ifBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int elseBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int elseBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object elseBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(ifBool!=null){
                                                                    BoolQuad bool=(BoolQuad)ifBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    if(elseBool!=null){bool.changeFatherNoBool((ArrayList<Object>)elseBool);}
                                                                                    RESULT =sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool);
                                                                                    
                                                                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseJ",96, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // ElseJ ::= ElseJHeader LEFT_CB LineCodesJ RIGHT_CB 
            {
              Object RESULT =null;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT=lines;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseJ",96, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // IfJHeader ::= IF PARENTHESIS_A OpBool PARENTHESIS_B 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT=op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IfJHeader",95, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // ConditionJ ::= SwitchJHeader LEFT_CB CasesJ1 RIGHT_CB 
            {
              Object RESULT =null;
		sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(sma.translateControlerTAC.getSwitchAsst().getFatherCases()));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionJ",93, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // ConditionJ ::= IfJHeader LEFT_CB LineCodesJ RIGHT_CB ElseJ 
            {
              Object RESULT =null;
		int ifBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int ifBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object ifBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int elseBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int elseBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object elseBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		BoolQuad bool=(BoolQuad)ifBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    if(elseBool!=null){bool.changeFatherNoBool((ArrayList<Object>)elseBool);}
                                                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool));
                                                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionJ",93, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // AssignmentJ ::= ID EQUAL Input 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type = sma.testManager.getTypeFromST(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                            if(type!=null&&in!=null){
                                                SyntaxInputAsst sia= (SyntaxInputAsst) in;
                                                if(sma.testManager.verifyType(type.getNumber(),sia.getType(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),id)){
                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.createInputQuads(id,sia.getString()));
                                                }
                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentJ",92, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // AssignmentJ ::= ID EQUAL NumberValue 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                        sma.translateControlerTAC.acceptAllIdQuas();}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentJ",92, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // DeclarationJ ::= Public Type ID EQUAL Input 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(in!=null&&!sma.testManager.checkExistence(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()))){
                                                        SyntaxInputAsst sia = (SyntaxInputAsst)in;

                                                      if(sma.testManager.verifyType((Integer)type,sia.getType(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),id)){
                                                          sma.testManager.insertTuple(id,(Integer)type,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.createInputQuads(id,sia.getString()));
                                                }       
                        }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationJ",91, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // DeclarationJ ::= Public Type IdsVb 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.testManager.insertPreTuplesToSymbolTable((Integer)type,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationJ",91, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // WhileJHeader ::= WHILE PARENTHESIS_A OpBool PARENTHESIS_B 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT=op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("WhileJHeader",90, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // ForJHeaderStarter ::= For PARENTHESIS_A ID EQUAL NumberValue SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		Type type=sma.testManager.getTypeFromST(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    if(type!=null){
                                                    if(sma.testManager.getTypeManager().isNumerico(type.getNumber())){
                                                        
                                                        boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                            RESULT=new SemanticAsstIdQuad(id, sma.translateControlerTAC.getcurrentTempQuads());
                                                        }
                                                    }else{
                                                        sma.testManager.callNumericError(id,type,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    }}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForJHeaderStarter",88, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // ForJHeaderStarter ::= For PARENTHESIS_A Type ID EQUAL NumberValue SEMICOLON 
            {
              Object RESULT =null;
		int type1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int type1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object type1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		 boolean boolExistence= sma.testManager.checkExistence(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                if(boolExistence){

                                                    if(sma.testManager.getTypeManager().isNumerico((Integer)type1)){
                                                        sma.testManager.insertTuple(id,(Integer)type1,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                            RESULT=new SemanticAsstIdQuad(id, sma.translateControlerTAC.getcurrentTempQuads());
                                                        }
                                                    }else{
                                                        sma.testManager.callNumericError(id,sma.testManager.getTypeManager().getType((Integer)type1),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    }
                                                }
                                                
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForJHeaderStarter",88, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // AssignmentStepJ ::= ID EQUAL NumberValue 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                        RESULT=sma.translateControlerTAC.getcurrentTempQuads();}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentStepJ",89, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // ForJHeader ::= ForJHeaderStarter OpBool SEMICOLON AssignmentStepJ PARENTHESIS_B 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int stepleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int stepright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object step = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		if (id!=null) {
                    BoolQuad boolQuad=(BoolQuad)op;
                    SemanticAsstIdQuad saiq= (SemanticAsstIdQuad)id;
                    
                    
                     For f=sma.translateControlerTAC.createForAsst(saiq.getQuads(),step,boolQuad );
                    RESULT=f;}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForJHeader",87, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // CycleJ ::= DO LEFT_CB LineCodesJ RIGHT_CB OpBool SEMICOLON 
            {
              Object RESULT =null;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		if(op!=null){
                                                                                sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.creatDoWhile((ArrayList<Object>)lines,(BoolQuad)op));
                                                                                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleJ",86, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // CycleJ ::= WhileJHeader LEFT_CB LineCodesJ RIGHT_CB 
            {
              Object RESULT =null;
		int whileBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int whileBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object whileBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		BoolQuad bool=(BoolQuad)whileBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.addGotoWhileTags(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool)));
                                                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleJ",86, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // CycleJ ::= ForJHeader LEFT_CB LineCodesJ RIGHT_CB 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		if(f!=null){
                                                                For fo=(For)f;
                                                                if(lines!=null){
                                                                    fo.addCode((ArrayList<Object>)lines);
                                                                }else{
                                                                    fo.addCode(new ArrayList<Object>());
                                                                }
                                                                
                                                                sma.translateControlerTAC.addQuadsToCurrent(fo.convertToQuad());
                                                                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleJ",86, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // OutputJ ::= SYSTEM_OUT_PRINTLN PARENTHESIS_A ValuesOutputJ PARENTHESIS_B 
            {
              Object RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		Quadruple lineBreak = sma.translateControlerTAC.createPrintQuad("\\n");
                                                                                            if(vals!=null){
                                                                                                ArrayList asst=(ArrayList<Object>)vals;
                                                                                                asst.add(lineBreak);
                                                                                                sma.translateControlerTAC.addQuadsToCurrent(asst);
                                                                                                
                                                                                                
                                                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputJ",83, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // OutputJ ::= SYSTEM_OUT_PRINT PARENTHESIS_A ValuesOutputJ PARENTHESIS_B 
            {
              Object RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		 if(vals!=null){
                                                                                                sma.translateControlerTAC.addQuadsToCurrent((ArrayList<Object>)vals);
                                                                                                
                                                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputJ",83, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // LineCodeJ ::= error 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",82, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // LineCodeJ ::= ConditionJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",82, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // LineCodeJ ::= AssignmentJ SEMICOLON 
            {
              Object RESULT =null;
		System.out.println("ASIGNACION");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",82, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // LineCodeJ ::= DeclarationJ SEMICOLON 
            {
              Object RESULT =null;
		System.out.println("DECLARACION");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",82, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // LineCodeJ ::= CycleJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",82, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // LineCodeJ ::= Input SEMICOLON 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		if(in!=null){
                                    SyntaxInputAsst sia= (SyntaxInputAsst)in;
                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.createInputQuads(null,sia.getString()));
                                }
                                
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",82, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // LineCodeJ ::= OutputJ SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",82, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // ValJ ::= STRING 
            {
              Object RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.add(sma.translateControlerTAC.createPrintQuad(string));
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValJ",81, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // ValJ ::= CHAR 
            {
              Object RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.add(sma.translateControlerTAC.createPrintQuad(ch));
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValJ",81, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // ValJ ::= DECIMAL 
            {
              Object RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.add(sma.translateControlerTAC.createPrintQuad(dec));
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValJ",81, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // ValJ ::= NUMBER 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.add(sma.translateControlerTAC.createPrintQuad(num));
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValJ",81, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // ValJ ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.add(sma.translateControlerTAC.createPrintQuad(id));
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValJ",81, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ValuesOutputJ ::= ValJ 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll((ArrayList<Object>)val);
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValuesOutputJ",80, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // ValuesOutputJ ::= ValuesOutputJ PLUS ValJ 
            {
              Object RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll((ArrayList<Object>)vals);
                                    printQuad.addAll((ArrayList<Object>)val);
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValuesOutputJ",80, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // LineCodeJ3 ::= LineCodeJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ3",77, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // LineCodeJ3 ::= LineCodeJ3 LineCodeJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ3",77, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // LineCodesJ2 ::= LineCodeJ3 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodesJ2",78, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // LineCodesJ2 ::= LineCodeJ3 RETURN_J NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodesJ2",78, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // LineCodesJ ::= 
            {
              Object RESULT =null;
		 
                                                    sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodesJ",76, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // LineCodesJ ::= LineCodesJ2 
            {
              Object RESULT =null;
		 RESULT=sma.translateControlerTAC.getcurrentQuads();
                                                    sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodesJ",76, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ParameterJ ::= Type ID 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.getParameterControl().insertParameter((Integer)type,id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParameterJ",69, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ParameterJ ::= ParametersJ COMMA Type ID 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.getParameterControl().insertParameter((Integer)type,id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParameterJ",69, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ParametersJ ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParametersJ",68, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ParametersJ ::= ParameterJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParametersJ",68, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ProcessJHeader ::= Public VOID_J ID PARENTHESIS_A ParametersJ PARENTHESIS_B 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		sma.testManager.creatSonAmbit();
                                                                                            sma.translateControlerTAC.createNewQuadrupleBlock();
                                                                                            String name =sma.testManager.insertFunction(id, null, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.testManager.getCurrentClass());
                RESULT= name;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ProcessJHeader",75, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ProcessJ ::= ProcessJHeader LEFT_CB LineCodesJ RIGHT_CB 
            {
              Object RESULT =null;
		int subleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int subright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object sub = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		ArrayList<Object>quad=new ArrayList<>();
                                                                        if(sub!=null){
                                                                        if(lines==null){
                                                                                quad=sma.translateControlerTAC.tagFunction((String)sub,null);
                                                                            }else{
                                                                                quad=sma.translateControlerTAC.tagFunction((String)sub,(ArrayList<Object>) lines);
                                                                            }
                                                                          }
                                                                         sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    sma.translateControlerTAC.addQuadsToCurrent(quad);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ProcessJ",74, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // FunctionJHeader ::= Public Type ID PARENTHESIS_A ParametersJ PARENTHESIS_B 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		sma.testManager.creatSonAmbit();
                                                                                            sma.translateControlerTAC.createNewQuadrupleBlock();
                                                                                            String name =sma.testManager.insertFunction(id, (Integer) type, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.testManager.getCurrentClass());
                RESULT= name;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionJHeader",73, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // FunctionJ ::= FunctionJHeader LEFT_CB LineCodesJ RIGHT_CB 
            {
              Object RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int funright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object fun = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		ArrayList<Object>quad=new ArrayList<>();
                                                                        if(fun!=null){
                                                                            if(ins==null){
                                                                                quad=sma.translateControlerTAC.tagFunction((String)fun,null);
                                                                            }else{
                                                                                quad=sma.translateControlerTAC.tagFunction((String)fun,(ArrayList<Object>) ins);
                                                                            }
                                                                        
                                                                         
                                                                          }
                                                                         sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    sma.translateControlerTAC.addQuadsToCurrent(quad);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionJ",72, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ConditionJHeader ::= Public ID PARENTHESIS_A ParametersJ PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionJHeader",67, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ConstructorJ ::= ConditionJHeader LEFT_CB LineCodesJ RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConstructorJ",108, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ClassCodeJ ::= error 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClassCodeJ",71, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ClassCodeJ ::= ConstructorJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClassCodeJ",71, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ClassCodeJ ::= DeclarationJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClassCodeJ",71, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ClassCodeJ ::= ProcessJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClassCodeJ",71, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ClassCodeJ ::= FunctionJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClassCodeJ",71, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // JavaClassCode1 ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("JavaClassCode1",85, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // JavaClassCode1 ::= JavaClassCode1 ClassCodeJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("JavaClassCode1",85, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // JavaClassCode ::= JavaClassCode1 
            {
              Object RESULT =null;
		RESULT=sma.translateControlerTAC.getcurrentQuads();
                                                    sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("JavaClassCode",70, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ClaseJHeader ::= Public CLASS_J ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.creatSonAmbit();
                                    sma.translateControlerTAC.createNewQuadrupleBlock();
                                    sma.testManager.setCurrentClass(sma.testManager.insertClass(id, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek())));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClaseJHeader",66, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ClaseJ ::= ClaseJHeader LEFT_CB JavaClassCode RIGHT_CB 
            {
              Object RESULT =null;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		ArrayList<Object>quad=new ArrayList<>();
                                                                        
                                                                            if(lines!=null){
                                                                                quad=(ArrayList<Object>) lines;
                                                                            }
                                                                        
                                                                         
                                                                        sma.testManager.setCurrentClass(null);
                                                                         sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    sma.translateControlerTAC.addQuadsToCurrent(quad);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClaseJ",65, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // JavaCode ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("JavaCode",5, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // JavaCode ::= JavaCode ClaseJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("JavaCode",5, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // JavaSeperator ::= JAVA_SEPERATOR 
            {
              Object RESULT =null;
		sma.testManager.creatSonAmbit();
                            sma.translateControlerTAC.createNewQuadrupleBlock();
                             
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("JavaSeperator",13, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Java ::= JavaSeperator JavaCode 
            {
              Object RESULT =null;
		sma.testManager.switchNextTypes();
                                    sma.testManager.finishAmbit();
                                    sma.translateControlerTAC.acceptCurrentBlock();
                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getcurrentQuads());
                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Java",2, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CaseValue ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type=sma.testManager.getTypeFromST(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                            if(type!=null){
                                RESULT=id;
                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseValue",64, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CaseValue ::= CHAR 
            {
              Object RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=ch;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseValue",64, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CaseValue ::= DECIMAL 
            {
              Object RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=dec;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseValue",64, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CaseValue ::= NUMBER 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=num;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseValue",64, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CasesVbHeader ::= CASE_VB ELSE 
            {
              Object RESULT =null;
		RESULT=Switch.ELSE;
                    sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesVbHeader",63, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CasesVbHeader ::= CASE_VB CaseValue 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=val;
                                            sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesVbHeader",63, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CasesVb ::= CasesVbHeader InstructionsFunctionVb 
            {
              Object RESULT =null;
		int caseHleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int caseHright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object caseH = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		UniquenessTable ut=sma.testManager.createNewUniquenessTable();
                                                                        if(caseH!=null){
                                                                            
                                                                            boolean verified =ut.add(caseH,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                            if(verified){
                                                                            
                                                                            sma.translateControlerTAC.getSwitchAsst().addCases((String)caseH,(ArrayList<Object>)lines);}
                                                                            }
                                                                        RESULT=ut;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesVb",62, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CasesVb ::= CasesVb CasesVbHeader InstructionsFunctionVb 
            {
              Object RESULT =null;
		int caseVbleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int caseVbright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object caseVb = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int caseHleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int caseHright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object caseH = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		UniquenessTable ut=(UniquenessTable)caseVb;
                                                                        if(caseH!=null){
                                                                            
                                                                            boolean verified =ut.add(caseH,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                            if(verified){
                                                                            
                                                                            sma.translateControlerTAC.getSwitchAsst().addCases((String)caseH,(ArrayList<Object>)lines);}
                                                                            }
                                                                        RESULT=ut;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesVb",62, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SwitchVbHeader ::= SELECT_VB CASE_VB ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.translateControlerTAC.createSwitchAsst(id);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("SwitchVbHeader",61, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SwitchVb ::= SwitchVbHeader CasesVb END_VB SELECT_VB 
            {
              Object RESULT =null;
		sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(sma.translateControlerTAC.getSwitchAsst().getFatherCases()));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("SwitchVb",60, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ThenVb ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ThenVb",59, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ThenVb ::= THEN_VB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ThenVb",59, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ElseIfHeader ::= ELSE_IF_VB OpBool ThenVb 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT =op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseIfHeader",58, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ElseHeader ::= ELSE 
            {
              Object RESULT =null;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseHeader",57, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ElseVb ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseVb",56, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ElseVb ::= ElseIfHeader InstructionsFunctionVb ElseVb 
            {
              Object RESULT =null;
		int ifBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int ifBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object ifBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int elseBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int elseBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object elseBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(ifBool!=null){
                                                                    BoolQuad bool=(BoolQuad)ifBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    if(elseBool!=null){bool.changeFatherNoBool((ArrayList<Object>)elseBool);}
                                                                                    RESULT =sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool);
                                                                                    
                                                                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseVb",56, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ElseVb ::= ElseHeader InstructionsFunctionVb 
            {
              Object RESULT =null;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=lines;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseVb",56, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // IfVbHeader ::= IF OpBool ThenVb 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT=op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IfVbHeader",55, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // IfVb ::= IfVbHeader InstructionsFunctionVb ElseVb END_VB IF 
            {
              Object RESULT =null;
		int ifBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int ifBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object ifBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int elseBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int elseBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object elseBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		BoolQuad bool=(BoolQuad)ifBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    if(elseBool!=null){bool.changeFatherNoBool((ArrayList<Object>)elseBool);}
                                                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool));
                                                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IfVb",54, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ConditionVb ::= SwitchVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionVb",53, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ConditionVb ::= IfVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionVb",53, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // AssignmentVb ::= ID EQUAL Input 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type = sma.testManager.getTypeFromST(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                            if(type!=null&&in!=null){
                                                SyntaxInputAsst sia= (SyntaxInputAsst) in;
                                                if(sma.testManager.verifyType(type.getNumber(),sia.getType(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),id)){
                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.createInputQuads(id,sia.getString()));
                                                }
                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentVb",52, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // AssignmentVb ::= ID EQUAL NumberValue 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                        sma.translateControlerTAC.acceptAllIdQuas();}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentVb",52, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // AssiVb ::= 
            {
              Object RESULT =null;
		System.out.println("ASSI VACIO");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssiVb",51, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // AssiVb ::= EQUAL NumberValue 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT = val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssiVb",51, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // IdsVb ::= ID AssiVb 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.insertPreTuple(id,null,val,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                        if(val!=null){ 
                                                            sma.translateControlerTAC.createTempIdQuadAssign(val,id);}
                                        sma.translateControlerTAC.nextIdQuad();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IdsVb",50, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // IdsVb ::= IdsVb COMMA ID AssiVb 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.insertPreTuple(id,null,val,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        if(val!=null){ 
                                                            sma.translateControlerTAC.createTempIdQuadAssign(val,id);}
                                                       
                                                        sma.translateControlerTAC.nextIdQuad();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IdsVb",50, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Type ::= CHAR_TYPE 
            {
              Object RESULT =null;
		RESULT=TypeManager.CHAR_TYPE;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Type",11, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Type ::= FLOAT_TYPE 
            {
              Object RESULT =null;
		RESULT=TypeManager.FLOAT_TYPE;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Type",11, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Type ::= INTEGER_TYPE 
            {
              Object RESULT =null;
		RESULT=TypeManager.INTEGER_TYPE;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Type",11, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DeTypeVb ::= ID AssiVb COMMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		
                                                        sma.testManager.insertPreTuple(id,null,val,0,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        if(val!=null){ 
                                                            sma.translateControlerTAC.createTempIdQuadAssign(val,id);}
                                                       
                                                        sma.translateControlerTAC.nextIdQuad();
                                                        

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeTypeVb",49, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DeTypeVb ::= DeTypeVb ID AssiVb COMMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		
                                                        sma.testManager.insertPreTuple(id,null,val,0,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        if(val!=null){ 
                                                            sma.translateControlerTAC.createTempIdQuadAssign(val,id);}
                                                       
                                                        sma.translateControlerTAC.nextIdQuad();
                                                        

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeTypeVb",49, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DeclarationVb ::= DIM_VB ID AS_VB Type EQUAL Input 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(in!=null&&!sma.testManager.checkExistence(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()))){
                                                        SyntaxInputAsst sia = (SyntaxInputAsst)in;

                                                      if(sma.testManager.verifyType((Integer)type,sia.getType(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),id)){
                                                          sma.testManager.insertTuple(id,(Integer)type,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.createInputQuads(id,sia.getString()));
                                                }       
                        }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationVb",48, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DeclarationVb ::= DIM_VB ID AS_VB Type AssiVb 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.insertPreTuple(id,null,val, 0,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(val!=null){ 
                                                            sma.translateControlerTAC.createTempIdQuadAssign(val,id);}
                                                       sma.translateControlerTAC.nextIdQuad();
                                                        
                                                                    sma.testManager.insertPreTuplesToSymbolTable((Integer)type,0,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationVb",48, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DeclarationVb ::= DIM_VB DeTypeVb ID AS_VB Type AssiVb 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.insertPreTuple(id,null,val, 0,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                    if(val!=null){ 
                                                            sma.translateControlerTAC.createTempIdQuadAssign(val,id);}
                                                       
                                                        sma.translateControlerTAC.nextIdQuad();
                                                                    sma.testManager.insertPreTuplesToSymbolTable((Integer)type,0,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationVb",48, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DoHeader ::= DO 
            {
              Object RESULT =null;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DoHeader",47, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DoWhileVb ::= DoHeader InstructionsFunctionVb LOOP_VB WHILE OpBool 
            {
              Object RESULT =null;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(op!=null){
                                                                                sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.creatDoWhile((ArrayList<Object>)lines,(BoolQuad)op));
                                                                                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DoWhileVb",46, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ExBoolVb ::= LESS_THAN_EQUAL 
            {
              Object RESULT =null;
		RESULT=Operation.LESS_THAN_EQUAL;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb",45, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ExBoolVb ::= GREATER_THAN_EQUAL 
            {
              Object RESULT =null;
		RESULT=Operation.GREATER_THAN_EQUAL;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb",45, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ExBoolVb ::= LESS_THAN 
            {
              Object RESULT =null;
		RESULT=Operation.LESS_THAN;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb",45, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ExBoolVb ::= GREATER_THAN 
            {
              Object RESULT =null;
		RESULT=Operation.GREATER_THAN;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb",45, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ExBoolVb ::= DIFERENT_VB 
            {
              Object RESULT =null;
		RESULT=Operation.DIFERENT;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb",45, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ExBoolVb ::= EQUAL 
            {
              Object RESULT =null;
		RESULT=Operation.EQUAL_BOOL;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb",45, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // BoolValueVb ::= PARENTHESIS_A OpBool PARENTHESIS_B 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT=val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueVb",44, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // BoolValueVb ::= NumberValue ExBoolVb Number3 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int exValleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int exValright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object exVal = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateBoolType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdBoolQuadruple(s1.getQuadruple(),s2.getQuadruple(),(Integer)exVal);
                                                                    RESULT=sma.translateControlerTAC.getcurrentTempQuads();
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueVb",44, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // BoolValueVb ::= FALSE 
            {
              Object RESULT =null;
		 Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.BOOL_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL_BOOL,0,1,null);
		                    RESULT=sma.translateControlerTAC.getcurrentTempQuads();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueVb",44, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // BoolValueVb ::= TRUE 
            {
              Object RESULT =null;
		 Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.BOOL_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL_BOOL,1,1,null);
		                    RESULT=sma.translateControlerTAC.getcurrentTempQuads();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueVb",44, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OpBool3 ::= BoolValueVb 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(val!=null){
                   RESULT = sma.translateControlerTAC.getBoolQuadControl().convertQuadToBool(((ArrayList<Object>)val)); 
        }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBool3",43, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OpBool3 ::= NOT BoolValueVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBool3",43, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OpBool2 ::= OpBool3 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBool2",42, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OpBool2 ::= OpBool2 AND OpBool3 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(val1!=null &&val2!=null){
                                            RESULT= sma.translateControlerTAC.getBoolQuadControl().operateBoolQuad(val1,val2,Operation.OP_AND);}
                                            
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBool2",42, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OpBool ::= OpBool2 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBool",41, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OpBool ::= OpBool OR OpBool2 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(val1!=null &&val2!=null){
                                            RESULT= sma.translateControlerTAC.getBoolQuadControl().operateBoolQuad(val1,val2,Operation.OP_OR);}
                                            
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBool",41, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // WhileVbHeader ::= WHILE OpBool 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT=op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("WhileVbHeader",40, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // WhileVb ::= WhileVbHeader InstructionsFunctionVb END_VB WHILE 
            {
              Object RESULT =null;
		int whileBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int whileBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object whileBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		BoolQuad bool=(BoolQuad)whileBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.addGotoWhileTags(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool)));
                                                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("WhileVb",39, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Number3 ::= PARENTHESIS_A NumberValue PARENTHESIS_B 
            {
              Object RESULT =null;
		int asstleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int asstright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object asst = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT=asst;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3",38, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Number3 ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type=sma.testManager.getTypeFromST(val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                            if(type!=null){
                                Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL,val,null,null);
                                RESULT=new SynthesizedOpAsst(quadruple,type);
                            }else{

                                RESULT=null;
                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3",38, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Number3 ::= CHAR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.CHAR_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL,val,null,null);
		                    RESULT=new SynthesizedOpAsst(quadruple,type);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3",38, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Number3 ::= DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.FLOAT_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL,val,null,null);
		                    RESULT=new SynthesizedOpAsst(quadruple,type);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3",38, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Number3 ::= NUMBER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		 Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.INTEGER_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL,val,null,null);
		                    RESULT=new SynthesizedOpAsst(quadruple,type);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3",38, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Number2 ::= Number3 
            {
              Object RESULT =null;
		int asstleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int asstright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object asst = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=asst;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number2",37, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Number2 ::= Number2 MOD Number3 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.MOD);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number2",37, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Number2 ::= Number2 DIVISION Number3 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.DIVISION);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number2",37, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Number2 ::= Number2 MULTIPLICATION Number3 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.MULTIPLICATION);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number2",37, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NumberValue ::= Number2 
            {
              Object RESULT =null;
		int asstleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int asstright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object asst = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=asst;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumberValue",36, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NumberValue ::= NumberValue MINUS Number2 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.MINUS);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumberValue",36, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NumberValue ::= NumberValue PLUS Number2 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.PLUS);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumberValue",36, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Step ::= 
            {
              Object RESULT =null;
		RESULT="1";
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Step",35, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Step ::= STEP_VB PLUS CaseValue 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=value;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Step",35, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Step ::= STEP_VB MINUS CaseValue 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT="-"+(String)value;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Step",35, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Step ::= STEP_VB CaseValue 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=value;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Step",35, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // For ::= FOR 
            {
              Object RESULT =null;
		sma.testManager.creatSonAmbit();
                                                        sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("For",34, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ForVbHeaderStart ::= For ID EQUAL NumberValue 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type=sma.testManager.getTypeFromST(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    if(type!=null){
                                                    if(sma.testManager.getTypeManager().isNumerico(type.getNumber())){
                                                        
                                                        boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                            RESULT=new SemanticAsstIdQuad(id, sma.translateControlerTAC.getcurrentTempQuads());
                                                        }
                                                    }else{
                                                        sma.testManager.callNumericError(id,type,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    }}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForVbHeaderStart",33, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ForVbHeaderStart ::= For ID AS_VB Type EQUAL NumberValue 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int type1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int type1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object type1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		 boolean boolExistence= sma.testManager.checkExistence(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                if(boolExistence){

                                                    if(sma.testManager.getTypeManager().isNumerico((Integer)type1)){
                                                        sma.testManager.insertTuple(id,(Integer)type1,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                            RESULT=new SemanticAsstIdQuad(id, sma.translateControlerTAC.getcurrentTempQuads());
                                                        }
                                                    }else{
                                                        sma.testManager.callNumericError(id,sma.testManager.getTypeManager().getType((Integer)type1),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    }
                                                }
                                                
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForVbHeaderStart",33, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ForVbHeader ::= ForVbHeaderStart TO_VB NumberValue Step 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int stepleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int stepright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object step = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if (id!=null) {
                    SemanticAsstIdQuad saiq= (SemanticAsstIdQuad)id;
                    SynthesizedOpAsst s1= (SynthesizedOpAsst)num;
                    Quadruple quadruple=sma.translateControlerTAC.operateIdBoolQuadruple(saiq.getId(),s1.getQuadruple(),Operation.EQUAL_BOOL);
                    BoolQuad bool =sma.translateControlerTAC.getBoolQuadControl().convertQuadToBool(sma.translateControlerTAC.getcurrentTempQuads());
                     For f=sma.translateControlerTAC.createForAsst(saiq.getQuads(), (String) step, bool, saiq.getId());
                    RESULT=f;}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForVbHeader",32, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ForVb ::= ForVbHeader InstructionsFunctionVb NEXT_VB 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		if(f!=null){
                                                                For fo=(For)f;
                                                                fo.addCode((ArrayList<Object>)lines);
                                                                sma.translateControlerTAC.addQuadsToCurrent(fo.convertToQuad());
                                                                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForVb",31, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CycleVb ::= DoWhileVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleVb",30, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CycleVb ::= WhileVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleVb",30, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CycleVb ::= ForVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleVb",30, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ValueVb ::= NumberValue 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll(sma.translateControlerTAC.getcurrentTempQuads());
                                    printQuad.add(sma.translateControlerTAC.createPrintQuad(val));
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValueVb",28, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ValueVb ::= STRING 
            {
              Object RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.add(sma.translateControlerTAC.createPrintQuad(string));
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValueVb",28, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ValuesVb ::= ValueVb 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll((ArrayList<Object>)val);
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValuesVb",27, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ValuesVb ::= ValuesVb AMPERSON ValueVb 
            {
              Object RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll((ArrayList<Object>)vals);
                                    printQuad.addAll((ArrayList<Object>)val);
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValuesVb",27, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OutputVb ::= CONSOLE_VB POINT WRITELN_VB PARENTHESIS_A ValuesVb PARENTHESIS_B 
            {
              Object RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		Quadruple lineBreak = sma.translateControlerTAC.createPrintQuad("\\n");
                                                                                            if(vals!=null){
                                                                                                ArrayList asst=(ArrayList<Object>)vals;
                                                                                                asst.add(lineBreak);
                                                                                                sma.translateControlerTAC.addQuadsToCurrent(asst);
                                                                                                
                                                                                                
                                                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputVb",26, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OutputVb ::= CONSOLE_VB POINT WRITE_VB PARENTHESIS_A ValuesVb PARENTHESIS_B 
            {
              Object RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		 if(vals!=null){
                                                                                                sma.translateControlerTAC.addQuadsToCurrent((ArrayList<Object>)vals);
                                                                                                
                                                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputVb",26, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Input ::= CHARINPUT PARENTHESIS_A STRING PARENTHESIS_B 
            {
              Object RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT= new SyntaxInputAsst(TypeManager.CHAR_TYPE,string);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Input",178, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Input ::= FLOATINPUT PARENTHESIS_A STRING PARENTHESIS_B 
            {
              Object RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT= new SyntaxInputAsst(TypeManager.FLOAT_TYPE,string);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Input",178, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Input ::= INTINPUT PARENTHESIS_A STRING PARENTHESIS_B 
            {
              Object RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT= new SyntaxInputAsst(TypeManager.INTEGER_TYPE,string);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Input",178, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LnInstructionsVb ::= error 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",24, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LnInstructionsVb ::= ConditionVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",24, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LnInstructionsVb ::= AssignmentVb 
            {
              Object RESULT =null;
		System.out.println("ASIGNACION");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",24, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LnInstructionsVb ::= DeclarationVb 
            {
              Object RESULT =null;
		System.out.println("DECLARACION");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",24, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LnInstructionsVb ::= CycleVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",24, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LnInstructionsVb ::= OutputVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",24, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LnInstructionsVb ::= Input 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(in!=null){
                                    SyntaxInputAsst sia= (SyntaxInputAsst)in;
                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.createInputQuads(null,sia.getString()));
                                }
                                
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",24, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Lines ::= LnInstructionsVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Lines",25, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Lines ::= Lines LnInstructionsVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Lines",25, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // InstructionsFunctionVb2 ::= RETURN_VB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb2",23, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // InstructionsFunctionVb2 ::= RETURN_VB ValuesVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb2",23, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // InstructionsFunctionVb2 ::= LnInstructionsVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb2",23, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // InstructionsFunctionVb2 ::= Lines RETURN_VB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb2",23, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // InstructionsFunctionVb2 ::= Lines RETURN_VB ValuesVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb2",23, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // InstructionsFunctionVb2 ::= Lines LnInstructionsVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb2",23, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // InstructionsFunctionVb ::= InstructionsFunctionVb2 
            {
              Object RESULT =null;
		 RESULT=sma.translateControlerTAC.getcurrentQuads();
                                                    sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb",22, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Parameter ::= ID AS_VB Type 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.getParameterControl().insertParameter((Integer)type,id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Parameter",21, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Parameter ::= Parameter COMMA ID AS_VB Type 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.getParameterControl().insertParameter((Integer)type,id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Parameter",21, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Parameters ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Parameters",20, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Parameters ::= Parameter 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Parameters",20, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Public ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Public",12, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Public ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Public",12, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SubVbHeader ::= Public SUB_VB ID PARENTHESIS_A Parameters PARENTHESIS_B 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		sma.testManager.creatSonAmbit();
                                                                                            sma.translateControlerTAC.createNewQuadrupleBlock();
                                                                                            String name =sma.testManager.insertFunction(id, null, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                RESULT= name;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("SubVbHeader",19, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SubVb ::= SubVbHeader InstructionsFunctionVb END_VB SUB_VB 
            {
              Object RESULT =null;
		int subleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int subright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object sub = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		ArrayList<Object>quad=new ArrayList<>();
                                                                        if(sub!=null){
                                                                        quad=sma.translateControlerTAC.tagFunction((String)sub,(ArrayList<Object>) lines);
                                                                         
                                                                          }
                                                                         sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    sma.translateControlerTAC.addQuadsToCurrent(quad);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("SubVb",18, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FunctionVbHeader ::= Public FUNCTION_VB ID PARENTHESIS_A Parameters PARENTHESIS_B AS_VB Type 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.creatSonAmbit();
                                                                                            sma.translateControlerTAC.createNewQuadrupleBlock();
                                                                                            String name =sma.testManager.insertFunction(id, (Integer) type, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                RESULT= name;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionVbHeader",16, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-7)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FunctionVB ::= FunctionVbHeader InstructionsFunctionVb END_VB FUNCTION_VB 
            {
              Object RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int funright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object fun = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		ArrayList<Object>quad=new ArrayList<>();
                                                                        if(fun!=null){
                                                                            if(ins==null){
                                                                                quad=sma.translateControlerTAC.tagFunction((String)fun,null);
                                                                            }else{
                                                                                quad=sma.translateControlerTAC.tagFunction((String)fun,(ArrayList<Object>) ins);
                                                                            }
                                                                        
                                                                         
                                                                          }
                                                                         sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    sma.translateControlerTAC.addQuadsToCurrent(quad);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionVB",15, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Funct ::= error 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Funct",17, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Funct ::= SubVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Funct",17, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Funct ::= FunctionVB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Funct",17, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VbCode ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("VbCode",4, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VbCode ::= VbCode Funct 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("VbCode",4, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VbSeperator ::= VB_SEPERATOR 
            {
              Object RESULT =null;
		sma.testManager.creatSonAmbit();
                            sma.translateControlerTAC.createNewQuadrupleBlock();
                             
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("VbSeperator",8, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // VB ::= VbSeperator VbCode 
            {
              Object RESULT =null;
		sma.testManager.switchNextTypes();
                                    sma.testManager.finishAmbit();
                                    sma.translateControlerTAC.acceptCurrentBlock();
                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getcurrentQuads());
                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("VB",1, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicio ::= VB Java Python Program 
            {
              Object RESULT =null;
		System.out.println("FIN Inicio");
                                        sma.translateControlerTAC.printQuads();
                                        sma.testManager.finishAmbit();
                                    sma.translateControlerTAC.acceptCurrentBlock();
                                        sma.translateControlerTAC.convertQuads(sma.translateControlerTAC.getcurrentQuads());
                                        
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT = start_val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SyntaxMlgAnalyzer$parser.done_parsing();
          return CUP$SyntaxMlgAnalyzer$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

