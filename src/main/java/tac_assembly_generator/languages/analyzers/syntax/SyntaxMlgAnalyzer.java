
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Oct 24 22:11:26 CST 2020
//----------------------------------------------------

package tac_assembly_generator.languages.analyzers.syntax;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import javax.swing.JTextPane;
import tac_assembly_generator.languages.semantic.verification.TestManager;
import tac_assembly_generator.TAC.TranslateControlerTAC;
import tac_assembly_generator.TAC.quadruple.Operation;
import tac_assembly_generator.TAC.quadruple.Quadruple;
import tac_assembly_generator.TAC.quadruple.BoolQuad;
import tac_assembly_generator.languages.semantic.type.Type;
import tac_assembly_generator.languages.semantic.type.TypeManager;
import tac_assembly_generator.TAC.asst.Switch;
import tac_assembly_generator.languages.semantic.UniquenessTable;
import tac_assembly_generator.TAC.asst.For;
import tac_assembly_generator.languages.semantic.SemanticAsstIdQuad;
import tac_assembly_generator.ui.backend.OutputErrors;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Oct 24 22:11:26 CST 2020
  */
public class SyntaxMlgAnalyzer extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SyntaxMlgAnalyzer() {super();}

  /** Constructor which sets the default scanner. */
  public SyntaxMlgAnalyzer(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SyntaxMlgAnalyzer(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u017e\000\002\002\004\000\002\002\006\000\002\003" +
    "\004\000\002\012\003\000\002\006\004\000\002\006\002" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\021\006\000\002\022\012\000\002\024\006\000\002" +
    "\025\010\000\002\016\003\000\002\016\002\000\002\026" +
    "\003\000\002\026\002\000\002\027\007\000\002\027\005" +
    "\000\002\030\003\000\002\031\004\000\002\031\005\000" +
    "\002\031\004\000\002\031\003\000\002\031\004\000\002" +
    "\031\003\000\002\033\004\000\002\033\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\262\006\000\002\262\006\000\002\262\006\000\002" +
    "\034\010\000\002\034\010\000\002\035\005\000\002\035" +
    "\003\000\002\036\003\000\002\036\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\041\005\000" +
    "\002\042\006\000\002\043\010\000\002\043\006\000\002" +
    "\044\003\000\002\045\004\000\002\045\005\000\002\045" +
    "\005\000\002\045\002\000\002\046\005\000\002\046\005" +
    "\000\002\046\003\000\002\047\005\000\002\047\005\000" +
    "\002\047\005\000\002\047\003\000\002\050\003\000\002" +
    "\050\003\000\002\050\003\000\002\050\003\000\002\050" +
    "\005\000\002\051\006\000\002\052\004\000\002\053\005" +
    "\000\002\053\003\000\002\054\005\000\002\054\003\000" +
    "\002\055\004\000\002\055\003\000\002\056\003\000\002" +
    "\056\003\000\002\056\005\000\002\056\005\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\060\007\000" +
    "\002\061\003\000\002\062\010\000\002\062\007\000\002" +
    "\062\010\000\002\063\006\000\002\063\005\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\064\006" +
    "\000\002\064\004\000\002\065\004\000\002\065\002\000" +
    "\002\066\005\000\002\066\005\000\002\067\003\000\002" +
    "\067\003\000\002\070\007\000\002\071\005\000\002\072" +
    "\004\000\002\072\005\000\002\072\002\000\002\073\003" +
    "\000\002\074\005\000\002\075\003\000\002\075\002\000" +
    "\002\076\006\000\002\077\005\000\002\100\005\000\002" +
    "\100\004\000\002\101\004\000\002\101\004\000\002\102" +
    "\003\000\002\102\003\000\002\102\003\000\002\102\003" +
    "\000\002\004\004\000\002\017\003\000\002\007\004\000" +
    "\002\007\002\000\002\103\006\000\002\104\005\000\002" +
    "\110\003\000\002\127\004\000\002\127\002\000\002\111" +
    "\003\000\002\111\003\000\002\111\003\000\002\111\003" +
    "\000\002\111\003\000\002\154\006\000\002\105\007\000" +
    "\002\112\006\000\002\113\010\000\002\114\006\000\002" +
    "\115\010\000\002\106\003\000\002\106\002\000\002\107" +
    "\006\000\002\107\004\000\002\116\003\000\002\116\002" +
    "\000\002\120\005\000\002\120\003\000\002\117\004\000" +
    "\002\117\003\000\002\122\005\000\002\122\003\000\002" +
    "\123\003\000\002\123\003\000\002\123\003\000\002\123" +
    "\003\000\002\123\003\000\002\124\004\000\002\124\004" +
    "\000\002\124\003\000\002\124\004\000\002\124\004\000" +
    "\002\124\003\000\002\124\003\000\002\125\006\000\002" +
    "\125\006\000\002\130\006\000\002\130\006\000\002\130" +
    "\010\000\002\131\007\000\002\133\005\000\002\132\011" +
    "\000\002\132\010\000\002\134\006\000\002\135\005\000" +
    "\002\135\007\000\002\136\005\000\002\136\005\000\002" +
    "\137\007\000\002\137\006\000\002\140\006\000\002\141" +
    "\006\000\002\141\007\000\002\141\002\000\002\143\003" +
    "\000\002\142\007\000\002\144\006\000\002\145\004\000" +
    "\002\145\007\000\002\145\003\000\002\147\004\000\002" +
    "\147\003\000\002\150\006\000\002\146\004\000\002\151" +
    "\004\000\002\005\004\000\002\013\003\000\002\010\004" +
    "\000\002\010\002\000\002\155\006\000\002\155\003\000" +
    "\002\157\010\000\002\160\003\000\002\160\002\000\002" +
    "\161\005\000\002\161\003\000\002\162\003\000\002\156" +
    "\003\000\002\156\005\000\002\163\004\000\002\163\002" +
    "\000\002\164\003\000\002\164\003\000\002\164\003\000" +
    "\002\164\003\000\002\164\003\000\002\164\003\000\002" +
    "\165\006\000\002\166\005\000\002\166\003\000\002\167" +
    "\003\000\002\167\003\000\002\170\007\000\002\172\010" +
    "\000\002\172\006\000\002\173\010\000\002\171\003\000" +
    "\002\174\006\000\002\175\005\000\002\176\005\000\002" +
    "\176\005\000\002\177\003\000\002\200\007\000\002\201" +
    "\005\000\002\202\007\000\002\202\006\000\002\202\002" +
    "\000\002\204\004\000\002\203\005\000\002\011\007\000" +
    "\002\020\003\000\002\205\004\000\002\205\002\000\002" +
    "\212\005\000\002\212\004\000\002\213\007\000\002\275" +
    "\005\000\002\275\005\000\002\275\003\000\002\276\005" +
    "\000\002\276\005\000\002\276\005\000\002\276\003\000" +
    "\002\277\003\000\002\277\003\000\002\277\003\000\002" +
    "\277\005\000\002\246\005\000\002\246\005\000\002\246" +
    "\003\000\002\247\005\000\002\247\005\000\002\247\005" +
    "\000\002\247\003\000\002\250\003\000\002\250\003\000" +
    "\002\250\003\000\002\250\003\000\002\250\005\000\002" +
    "\250\004\000\002\250\003\000\002\214\006\000\002\214" +
    "\005\000\002\220\005\000\002\220\004\000\002\225\006" +
    "\000\002\225\005\000\002\225\004\000\002\300\006\000" +
    "\002\300\005\000\002\301\005\000\002\301\005\000\002" +
    "\301\003\000\002\302\005\000\002\302\005\000\002\302" +
    "\005\000\002\302\003\000\002\303\003\000\002\303\003" +
    "\000\002\303\003\000\002\303\005\000\002\221\004\000" +
    "\002\221\006\000\002\264\005\000\002\264\003\000\002" +
    "\264\005\000\002\206\006\000\002\206\003\000\002\207" +
    "\006\000\002\222\003\000\002\210\004\000\002\210\003" +
    "\000\002\223\004\000\002\223\004\000\002\223\003\000" +
    "\002\223\003\000\002\223\004\000\002\223\004\000\002" +
    "\223\004\000\002\223\004\000\002\223\003\000\002\126" +
    "\011\000\002\224\006\000\002\224\005\000\002\224\006" +
    "\000\002\224\005\000\002\226\006\000\002\226\005\000" +
    "\002\227\004\000\002\227\002\000\002\230\005\000\002" +
    "\230\006\000\002\230\005\000\002\231\007\000\002\231" +
    "\006\000\002\232\006\000\002\233\006\000\002\233\007" +
    "\000\002\233\002\000\002\234\003\000\002\235\007\000" +
    "\002\236\006\000\002\241\004\000\002\241\010\000\002" +
    "\241\003\000\002\242\004\000\002\242\003\000\002\251" +
    "\007\000\002\240\004\000\002\237\003\000\002\243\003" +
    "\000\002\243\003\000\002\243\003\000\002\243\003\000" +
    "\002\243\003\000\002\252\006\000\002\252\006\000\002" +
    "\252\013\000\002\253\007\000\002\245\011\000\002\245" +
    "\010\000\002\254\006\000\002\244\005\000\002\256\006" +
    "\000\002\256\005\000\002\257\005\000\002\257\003\000" +
    "\002\260\003\000\002\260\003\000\002\261\005\000\002" +
    "\262\011\000\002\263\006\000\002\263\005\000\002\270" +
    "\005\000\002\270\003\000\002\265\005\000\002\265\003" +
    "\000\002\266\003\000\002\274\004\000\002\271\005\000" +
    "\002\271\003\000\002\272\005\000\002\272\003\000\002" +
    "\273\004\000\002\273\003\000\002\267\003\000\002\267" +
    "\003\000\002\267\005\000\002\267\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u031d\000\004\004\004\001\002\000\014\003\ufffe\032" +
    "\ufffe\060\ufffe\063\ufffe\065\ufffe\001\002\000\004\060\355" +
    "\001\002\000\014\003\ufffc\032\ufffc\060\ufffc\063\ufffc\065" +
    "\ufffc\001\002\000\004\002\010\001\002\000\004\002\001" +
    "\001\002\000\014\003\012\032\021\060\uffff\063\ufff3\065" +
    "\ufff3\001\002\000\014\003\ufff9\032\ufff9\060\ufff9\063\ufff9" +
    "\065\ufff9\001\002\000\014\003\ufffa\032\ufffa\060\ufffa\063" +
    "\ufffa\065\ufffa\001\002\000\014\003\ufffd\032\ufffd\060\ufffd" +
    "\063\ufffd\065\ufffd\001\002\000\036\003\077\027\070\030" +
    "\110\031\105\033\063\034\106\035\114\040\074\054\075" +
    "\061\112\066\062\067\072\101\113\135\071\001\002\000" +
    "\014\003\ufffb\032\ufffb\060\ufffb\063\ufffb\065\ufffb\001\002" +
    "\000\036\003\077\027\070\030\110\031\105\033\063\034" +
    "\106\035\114\040\074\054\075\061\112\066\062\067\072" +
    "\101\113\135\071\001\002\000\006\063\023\065\022\001" +
    "\002\000\022\021\ufff4\022\ufff4\023\ufff4\054\ufff4\063\ufff4" +
    "\065\ufff4\104\ufff4\105\ufff4\001\002\000\004\054\045\001" +
    "\002\000\004\054\024\001\002\000\004\007\025\001\002" +
    "\000\006\010\ufff1\054\026\001\002\000\004\062\043\001" +
    "\002\000\004\010\040\001\002\000\006\010\ufff2\020\031" +
    "\001\002\000\004\054\032\001\002\000\004\062\033\001" +
    "\002\000\010\021\036\022\037\023\035\001\002\000\006" +
    "\010\ufff0\020\ufff0\001\002\000\060\003\uffa2\006\uffa2\010" +
    "\uffa2\020\uffa2\027\uffa2\030\uffa2\031\uffa2\033\uffa2\034\uffa2" +
    "\035\uffa2\040\uffa2\041\uffa2\054\uffa2\061\uffa2\064\uffa2\066" +
    "\uffa2\067\uffa2\074\uffa2\076\uffa2\077\uffa2\101\uffa2\102\uffa2" +
    "\135\uffa2\001\002\000\060\003\uffa4\006\uffa4\010\uffa4\020" +
    "\uffa4\027\uffa4\030\uffa4\031\uffa4\033\uffa4\034\uffa4\035\uffa4" +
    "\040\uffa4\041\uffa4\054\uffa4\061\uffa4\064\uffa4\066\uffa4\067" +
    "\uffa4\074\uffa4\076\uffa4\077\uffa4\101\uffa4\102\uffa4\135\uffa4" +
    "\001\002\000\060\003\uffa3\006\uffa3\010\uffa3\020\uffa3\027" +
    "\uffa3\030\uffa3\031\uffa3\033\uffa3\034\uffa3\035\uffa3\040\uffa3" +
    "\041\uffa3\054\uffa3\061\uffa3\064\uffa3\066\uffa3\067\uffa3\074" +
    "\uffa3\076\uffa3\077\uffa3\101\uffa3\102\uffa3\135\uffa3\001\002" +
    "\000\004\062\041\001\002\000\010\021\036\022\037\023" +
    "\035\001\002\000\036\003\ufff7\027\ufff7\030\ufff7\031\ufff7" +
    "\033\ufff7\034\ufff7\035\ufff7\040\ufff7\054\ufff7\061\ufff7\066" +
    "\ufff7\067\ufff7\101\ufff7\135\ufff7\001\002\000\010\021\036" +
    "\022\037\023\035\001\002\000\006\010\uffef\020\uffef\001" +
    "\002\000\004\007\046\001\002\000\006\010\ufff1\054\026" +
    "\001\002\000\004\010\050\001\002\000\036\003\ufff5\027" +
    "\ufff5\030\ufff5\031\ufff5\033\ufff5\034\ufff5\035\ufff5\040\ufff5" +
    "\054\ufff5\061\ufff5\066\ufff5\067\ufff5\101\ufff5\135\ufff5\001" +
    "\002\000\052\003\uff9b\027\uff9b\030\uff9b\031\uff9b\033\uff9b" +
    "\034\uff9b\035\uff9b\040\uff9b\041\uff9b\054\uff9b\061\uff9b\064" +
    "\uff9b\066\uff9b\067\uff9b\074\uff9b\076\uff9b\077\uff9b\101\uff9b" +
    "\102\uff9b\135\uff9b\001\002\000\052\003\uffe3\027\uffe3\030" +
    "\uffe3\031\uffe3\033\uffe3\034\uffe3\035\uffe3\040\uffe3\041\uffe3" +
    "\054\uffe3\061\uffe3\064\uffe3\066\uffe3\067\uffe3\074\uffe3\076" +
    "\uffe3\077\uffe3\101\uffe3\102\uffe3\135\uffe3\001\002\000\052" +
    "\003\uffe2\027\uffe2\030\uffe2\031\uffe2\033\uffe2\034\uffe2\035" +
    "\uffe2\040\uffe2\041\uffe2\054\uffe2\061\uffe2\064\uffe2\066\uffe2" +
    "\067\uffe2\074\uffe2\076\uffe2\077\uffe2\101\uffe2\102\uffe2\135" +
    "\uffe2\001\002\000\052\003\uffd5\027\uffd5\030\uffd5\031\uffd5" +
    "\033\uffd5\034\uffd5\035\uffd5\040\uffd5\041\uffd5\054\uffd5\061" +
    "\uffd5\064\uffd5\066\uffd5\067\uffd5\074\uffd5\076\uffd5\077\uffd5" +
    "\101\uffd5\102\uffd5\135\uffd5\001\002\000\052\003\uffe0\027" +
    "\uffe0\030\uffe0\031\uffe0\033\uffe0\034\uffe0\035\uffe0\040\uffe0" +
    "\041\uffe0\054\uffe0\061\uffe0\064\uffe0\066\uffe0\067\uffe0\074" +
    "\uffe0\076\uffe0\077\uffe0\101\uffe0\102\uffe0\135\uffe0\001\002" +
    "\000\016\041\uffee\064\uffee\074\uffee\076\uffee\077\uffee\102" +
    "\uffee\001\002\000\036\003\077\027\070\030\110\031\105" +
    "\033\063\034\106\035\114\040\074\054\075\061\112\066" +
    "\062\067\072\101\113\135\071\001\002\000\036\003\077" +
    "\027\070\030\110\031\105\033\063\034\106\035\114\040" +
    "\074\054\075\061\112\066\062\067\072\101\113\135\071" +
    "\001\002\000\052\003\uffe4\027\uffe4\030\uffe4\031\uffe4\033" +
    "\uffe4\034\uffe4\035\uffe4\040\uffe4\041\uffe4\054\uffe4\061\uffe4" +
    "\064\uffe4\066\uffe4\067\uffe4\074\uffe4\076\uffe4\077\uffe4\101" +
    "\uffe4\102\uffe4\135\uffe4\001\002\000\032\007\132\041\uffe8" +
    "\053\271\054\130\055\137\056\133\057\136\064\uffe8\074" +
    "\uffe8\076\uffe8\077\uffe8\102\uffe8\001\002\000\006\007\uffce" +
    "\054\uffce\001\002\000\004\072\316\001\002\000\052\003" +
    "\uffd3\027\uffd3\030\uffd3\031\uffd3\033\uffd3\034\uffd3\035\uffd3" +
    "\040\uffd3\041\uffd3\054\uffd3\061\uffd3\064\uffd3\066\uffd3\067" +
    "\uffd3\074\uffd3\076\uffd3\077\uffd3\101\uffd3\102\uffd3\135\uffd3" +
    "\001\002\000\052\003\uffe6\027\uffe6\030\uffe6\031\uffe6\033" +
    "\uffe6\034\uffe6\035\uffe6\040\uffe6\041\uffea\054\uffe6\061\uffe6" +
    "\064\uffea\066\uffe6\067\uffe6\074\uffea\076\uffea\077\uffea\101" +
    "\uffe6\102\uffea\135\uffe6\001\002\000\036\003\077\027\070" +
    "\030\110\031\105\033\063\034\106\035\114\040\074\054" +
    "\075\061\112\066\313\067\072\101\113\135\071\001\002" +
    "\000\004\007\310\001\002\000\004\007\302\001\002\000" +
    "\004\016\264\001\002\000\052\003\uffe1\027\uffe1\030\uffe1" +
    "\031\uffe1\033\uffe1\034\uffe1\035\uffe1\040\uffe1\041\uffe1\054" +
    "\uffe1\061\uffe1\064\uffe1\066\uffe1\067\uffe1\074\uffe1\076\uffe1" +
    "\077\uffe1\101\uffe1\102\uffe1\135\uffe1\001\002\000\022\007" +
    "\175\026\177\036\173\037\174\054\130\055\137\056\133" +
    "\057\136\001\002\000\004\006\256\001\002\000\004\054" +
    "\247\001\002\000\052\003\uffdf\027\uffdf\030\uffdf\031\uffdf" +
    "\033\uffdf\034\uffdf\035\uffdf\040\uffdf\041\uffdf\054\uffdf\061" +
    "\uffdf\064\uffdf\066\uffdf\067\uffdf\074\uffdf\076\uffdf\077\uffdf" +
    "\101\uffdf\102\uffdf\135\uffdf\001\002\000\004\102\233\001" +
    "\002\000\004\064\227\001\002\000\052\003\uffd4\027\uffd4" +
    "\030\uffd4\031\uffd4\033\uffd4\034\uffd4\035\uffd4\040\uffd4\041" +
    "\uffd4\054\uffd4\061\uffd4\064\uffd4\066\uffd4\067\uffd4\074\uffd4" +
    "\076\uffd4\077\uffd4\101\uffd4\102\uffd4\135\uffd4\001\002\000" +
    "\052\003\uff9a\027\uff9a\030\uff9a\031\uff9a\033\uff9a\034\uff9a" +
    "\035\uff9a\040\uff9a\041\uff9a\054\uff9a\061\uff9a\064\uff9a\066" +
    "\uff9a\067\uff9a\074\uff9a\076\uff9a\077\uff9a\101\uff9a\102\uff9a" +
    "\135\uff9a\001\002\000\036\003\077\027\070\030\110\031" +
    "\105\033\063\034\106\035\114\040\074\054\075\061\112" +
    "\066\062\067\072\101\113\135\071\001\002\000\004\007" +
    "\222\001\002\000\022\007\175\026\177\036\173\037\174" +
    "\054\130\055\137\056\133\057\136\001\002\000\052\003" +
    "\uffe5\027\uffe5\030\uffe5\031\uffe5\033\uffe5\034\uffe5\035\uffe5" +
    "\040\uffe5\041\uffe5\054\uffe5\061\uffe5\064\uffe5\066\uffe5\067" +
    "\uffe5\074\uffe5\076\uffe5\077\uffe5\101\uffe5\102\uffe5\135\uffe5" +
    "\001\002\000\004\007\166\001\002\000\036\003\077\027" +
    "\070\030\110\031\105\033\063\034\106\035\114\040\074" +
    "\054\075\061\112\066\062\067\072\101\113\135\071\001" +
    "\002\000\004\054\117\001\002\000\004\102\115\001\002" +
    "\000\040\003\uffaa\027\uffaa\030\uffaa\031\uffaa\033\uffaa\034" +
    "\uffaa\035\uffaa\040\uffaa\054\uffaa\061\uffaa\066\uffaa\067\uffaa" +
    "\101\uffaa\114\uffaa\135\uffaa\001\002\000\004\054\116\001" +
    "\002\000\004\102\uff8f\001\002\000\010\006\122\020\uff9e" +
    "\062\154\001\002\000\004\054\121\001\002\000\010\006" +
    "\122\020\uff9e\062\123\001\002\000\014\007\132\054\130" +
    "\055\137\056\133\057\136\001\002\000\010\021\036\022" +
    "\037\023\035\001\002\000\004\020\125\001\002\000\004" +
    "\054\uffa6\001\002\000\054\003\uff9e\006\122\027\uff9e\030" +
    "\uff9e\031\uff9e\033\uff9e\034\uff9e\035\uff9e\040\uff9e\041\uff9e" +
    "\054\uff9e\061\uff9e\064\uff9e\066\uff9e\067\uff9e\074\uff9e\076" +
    "\uff9e\077\uff9e\101\uff9e\102\uff9e\135\uff9e\001\002\000\052" +
    "\003\uffa9\027\uffa9\030\uffa9\031\uffa9\033\uffa9\034\uffa9\035" +
    "\uffa9\040\uffa9\041\uffa9\054\uffa9\061\uffa9\064\uffa9\066\uffa9" +
    "\067\uffa9\074\uffa9\076\uffa9\077\uffa9\101\uffa9\102\uffa9\135" +
    "\uffa9\001\002\000\150\003\uffbf\006\uffbf\010\uffbf\011\uffbf" +
    "\012\uffbf\013\uffbf\014\uffbf\015\uffbf\017\uffbf\020\uffbf\021" +
    "\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\027\uffbf\030\uffbf" +
    "\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\040\uffbf\041" +
    "\uffbf\042\uffbf\043\uffbf\044\uffbf\050\uffbf\051\uffbf\052\uffbf" +
    "\054\uffbf\061\uffbf\064\uffbf\066\uffbf\067\uffbf\072\uffbf\073" +
    "\uffbf\074\uffbf\075\uffbf\076\uffbf\077\uffbf\100\uffbf\101\uffbf" +
    "\102\uffbf\105\uffbf\112\uffbf\113\uffbf\115\uffbf\116\uffbf\120" +
    "\uffbf\135\uffbf\001\002\000\076\003\uff9f\011\150\012\151" +
    "\020\uff9f\021\uff9f\022\uff9f\023\uff9f\027\uff9f\030\uff9f\031" +
    "\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f\040\uff9f\041\uff9f" +
    "\054\uff9f\061\uff9f\064\uff9f\066\uff9f\067\uff9f\074\uff9f\076" +
    "\uff9f\077\uff9f\101\uff9f\102\uff9f\105\uff9f\113\uff9f\115\uff9f" +
    "\135\uff9f\001\002\000\014\007\132\054\130\055\137\056" +
    "\133\057\136\001\002\000\150\003\uffc2\006\uffc2\010\uffc2" +
    "\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\017\uffc2\020" +
    "\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\027\uffc2" +
    "\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\040" +
    "\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\050\uffc2\051\uffc2" +
    "\052\uffc2\054\uffc2\061\uffc2\064\uffc2\066\uffc2\067\uffc2\072" +
    "\uffc2\073\uffc2\074\uffc2\075\uffc2\076\uffc2\077\uffc2\100\uffc2" +
    "\101\uffc2\102\uffc2\105\uffc2\112\uffc2\113\uffc2\115\uffc2\116" +
    "\uffc2\120\uffc2\135\uffc2\001\002\000\140\003\uffc3\006\uffc3" +
    "\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\017" +
    "\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\027\uffc3\030\uffc3" +
    "\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\040\uffc3\041" +
    "\uffc3\042\uffc3\043\uffc3\044\uffc3\050\uffc3\051\uffc3\052\uffc3" +
    "\054\uffc3\061\uffc3\064\uffc3\066\uffc3\067\uffc3\072\uffc3\073" +
    "\uffc3\074\uffc3\075\uffc3\076\uffc3\077\uffc3\101\uffc3\102\uffc3" +
    "\105\uffc3\112\uffc3\113\uffc3\115\uffc3\120\uffc3\135\uffc3\001" +
    "\002\000\140\003\uffc7\006\uffc7\010\uffc7\011\uffc7\012\uffc7" +
    "\013\141\014\142\015\140\017\uffc7\020\uffc7\021\uffc7\022" +
    "\uffc7\023\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7" +
    "\034\uffc7\035\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044" +
    "\uffc7\050\uffc7\051\uffc7\052\uffc7\054\uffc7\061\uffc7\064\uffc7" +
    "\066\uffc7\067\uffc7\072\uffc7\073\uffc7\074\uffc7\075\uffc7\076" +
    "\uffc7\077\uffc7\101\uffc7\102\uffc7\105\uffc7\112\uffc7\113\uffc7" +
    "\115\uffc7\120\uffc7\135\uffc7\001\002\000\150\003\uffc1\006" +
    "\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1" +
    "\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025" +
    "\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1" +
    "\035\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\050" +
    "\uffc1\051\uffc1\052\uffc1\054\uffc1\061\uffc1\064\uffc1\066\uffc1" +
    "\067\uffc1\072\uffc1\073\uffc1\074\uffc1\075\uffc1\076\uffc1\077" +
    "\uffc1\100\uffc1\101\uffc1\102\uffc1\105\uffc1\112\uffc1\113\uffc1" +
    "\115\uffc1\116\uffc1\120\uffc1\135\uffc1\001\002\000\150\003" +
    "\uffc0\006\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0" +
    "\015\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024" +
    "\uffc0\025\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0" +
    "\034\uffc0\035\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044" +
    "\uffc0\050\uffc0\051\uffc0\052\uffc0\054\uffc0\061\uffc0\064\uffc0" +
    "\066\uffc0\067\uffc0\072\uffc0\073\uffc0\074\uffc0\075\uffc0\076" +
    "\uffc0\077\uffc0\100\uffc0\101\uffc0\102\uffc0\105\uffc0\112\uffc0" +
    "\113\uffc0\115\uffc0\116\uffc0\120\uffc0\135\uffc0\001\002\000" +
    "\014\007\132\054\130\055\137\056\133\057\136\001\002" +
    "\000\014\007\132\054\130\055\137\056\133\057\136\001" +
    "\002\000\014\007\132\054\130\055\137\056\133\057\136" +
    "\001\002\000\140\003\uffc5\006\uffc5\010\uffc5\011\uffc5\012" +
    "\uffc5\013\uffc5\014\uffc5\015\uffc5\017\uffc5\020\uffc5\021\uffc5" +
    "\022\uffc5\023\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033" +
    "\uffc5\034\uffc5\035\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5" +
    "\044\uffc5\050\uffc5\051\uffc5\052\uffc5\054\uffc5\061\uffc5\064" +
    "\uffc5\066\uffc5\067\uffc5\072\uffc5\073\uffc5\074\uffc5\075\uffc5" +
    "\076\uffc5\077\uffc5\101\uffc5\102\uffc5\105\uffc5\112\uffc5\113" +
    "\uffc5\115\uffc5\120\uffc5\135\uffc5\001\002\000\140\003\uffc6" +
    "\006\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015" +
    "\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\027\uffc6" +
    "\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\040" +
    "\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\050\uffc6\051\uffc6" +
    "\052\uffc6\054\uffc6\061\uffc6\064\uffc6\066\uffc6\067\uffc6\072" +
    "\uffc6\073\uffc6\074\uffc6\075\uffc6\076\uffc6\077\uffc6\101\uffc6" +
    "\102\uffc6\105\uffc6\112\uffc6\113\uffc6\115\uffc6\120\uffc6\135" +
    "\uffc6\001\002\000\140\003\uffc4\006\uffc4\010\uffc4\011\uffc4" +
    "\012\uffc4\013\uffc4\014\uffc4\015\uffc4\017\uffc4\020\uffc4\021" +
    "\uffc4\022\uffc4\023\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4" +
    "\033\uffc4\034\uffc4\035\uffc4\040\uffc4\041\uffc4\042\uffc4\043" +
    "\uffc4\044\uffc4\050\uffc4\051\uffc4\052\uffc4\054\uffc4\061\uffc4" +
    "\064\uffc4\066\uffc4\067\uffc4\072\uffc4\073\uffc4\074\uffc4\075" +
    "\uffc4\076\uffc4\077\uffc4\101\uffc4\102\uffc4\105\uffc4\112\uffc4" +
    "\113\uffc4\115\uffc4\120\uffc4\135\uffc4\001\002\000\010\010" +
    "\147\011\150\012\151\001\002\000\150\003\uffbe\006\uffbe" +
    "\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\017" +
    "\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe" +
    "\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035" +
    "\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\050\uffbe" +
    "\051\uffbe\052\uffbe\054\uffbe\061\uffbe\064\uffbe\066\uffbe\067" +
    "\uffbe\072\uffbe\073\uffbe\074\uffbe\075\uffbe\076\uffbe\077\uffbe" +
    "\100\uffbe\101\uffbe\102\uffbe\105\uffbe\112\uffbe\113\uffbe\115" +
    "\uffbe\116\uffbe\120\uffbe\135\uffbe\001\002\000\014\007\132" +
    "\054\130\055\137\056\133\057\136\001\002\000\014\007" +
    "\132\054\130\055\137\056\133\057\136\001\002\000\140" +
    "\003\uffc8\006\uffc8\010\uffc8\011\uffc8\012\uffc8\013\141\014" +
    "\142\015\140\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8" +
    "\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035" +
    "\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\050\uffc8" +
    "\051\uffc8\052\uffc8\054\uffc8\061\uffc8\064\uffc8\066\uffc8\067" +
    "\uffc8\072\uffc8\073\uffc8\074\uffc8\075\uffc8\076\uffc8\077\uffc8" +
    "\101\uffc8\102\uffc8\105\uffc8\112\uffc8\113\uffc8\115\uffc8\120" +
    "\uffc8\135\uffc8\001\002\000\140\003\uffc9\006\uffc9\010\uffc9" +
    "\011\uffc9\012\uffc9\013\141\014\142\015\140\017\uffc9\020" +
    "\uffc9\021\uffc9\022\uffc9\023\uffc9\027\uffc9\030\uffc9\031\uffc9" +
    "\032\uffc9\033\uffc9\034\uffc9\035\uffc9\040\uffc9\041\uffc9\042" +
    "\uffc9\043\uffc9\044\uffc9\050\uffc9\051\uffc9\052\uffc9\054\uffc9" +
    "\061\uffc9\064\uffc9\066\uffc9\067\uffc9\072\uffc9\073\uffc9\074" +
    "\uffc9\075\uffc9\076\uffc9\077\uffc9\101\uffc9\102\uffc9\105\uffc9" +
    "\112\uffc9\113\uffc9\115\uffc9\120\uffc9\135\uffc9\001\002\000" +
    "\010\021\036\022\037\023\035\001\002\000\004\020\156" +
    "\001\002\000\004\054\uffa5\001\002\000\054\003\uff9e\006" +
    "\160\027\uff9e\030\uff9e\031\uff9e\033\uff9e\034\uff9e\035\uff9e" +
    "\040\uff9e\041\uff9e\054\uff9e\061\uff9e\064\uff9e\066\uff9e\067" +
    "\uff9e\074\uff9e\076\uff9e\077\uff9e\101\uff9e\102\uff9e\135\uff9e" +
    "\001\002\000\024\007\132\027\070\030\110\031\105\054" +
    "\130\055\137\056\133\057\136\135\071\001\002\000\052" +
    "\003\uffa8\027\uffa8\030\uffa8\031\uffa8\033\uffa8\034\uffa8\035" +
    "\uffa8\040\uffa8\041\uffa8\054\uffa8\061\uffa8\064\uffa8\066\uffa8" +
    "\067\uffa8\074\uffa8\076\uffa8\077\uffa8\101\uffa8\102\uffa8\135" +
    "\uffa8\001\002\000\052\003\uffa7\027\uffa7\030\uffa7\031\uffa7" +
    "\033\uffa7\034\uffa7\035\uffa7\040\uffa7\041\uffa7\054\uffa7\061" +
    "\uffa7\064\uffa7\066\uffa7\067\uffa7\074\uffa7\076\uffa7\077\uffa7" +
    "\101\uffa7\102\uffa7\135\uffa7\001\002\000\004\064\164\001" +
    "\002\000\004\034\165\001\002\000\052\003\uffbd\027\uffbd" +
    "\030\uffbd\031\uffbd\033\uffbd\034\uffbd\035\uffbd\040\uffbd\041" +
    "\uffbd\054\uffbd\061\uffbd\064\uffbd\066\uffbd\067\uffbd\074\uffbd" +
    "\076\uffbd\077\uffbd\101\uffbd\102\uffbd\135\uffbd\001\002\000" +
    "\004\053\167\001\002\000\004\010\170\001\002\000\076" +
    "\003\uffdc\021\uffdc\022\uffdc\023\uffdc\027\uffdc\030\uffdc\031" +
    "\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\040\uffdc\041\uffdc" +
    "\043\uffdc\044\uffdc\054\uffdc\061\uffdc\064\uffdc\066\uffdc\067" +
    "\uffdc\074\uffdc\076\uffdc\077\uffdc\101\uffdc\102\uffdc\105\uffdc" +
    "\113\uffdc\115\uffdc\120\uffdc\135\uffdc\001\002\000\066\003" +
    "\uffb6\010\uffb6\024\uffb6\025\uffb6\027\uffb6\030\uffb6\031\uffb6" +
    "\033\uffb6\034\uffb6\035\uffb6\040\uffb6\041\uffb6\054\uffb6\061" +
    "\uffb6\064\uffb6\066\uffb6\067\uffb6\074\uffb6\076\uffb6\077\uffb6" +
    "\100\uffb6\101\uffb6\102\uffb6\113\uffb6\116\uffb6\135\uffb6\001" +
    "\002\000\040\003\uffbc\024\220\027\uffbc\030\uffbc\031\uffbc" +
    "\033\uffbc\034\uffbc\035\uffbc\040\uffbc\054\uffbc\061\uffbc\066" +
    "\uffbc\067\uffbc\101\uffbc\135\uffbc\001\002\000\066\003\uffb5" +
    "\010\uffb5\024\uffb5\025\uffb5\027\uffb5\030\uffb5\031\uffb5\033" +
    "\uffb5\034\uffb5\035\uffb5\040\uffb5\041\uffb5\054\uffb5\061\uffb5" +
    "\064\uffb5\066\uffb5\067\uffb5\074\uffb5\076\uffb5\077\uffb5\100" +
    "\uffb5\101\uffb5\102\uffb5\113\uffb5\116\uffb5\135\uffb5\001\002" +
    "\000\066\003\uffb4\010\uffb4\024\uffb4\025\uffb4\027\uffb4\030" +
    "\uffb4\031\uffb4\033\uffb4\034\uffb4\035\uffb4\040\uffb4\041\uffb4" +
    "\054\uffb4\061\uffb4\064\uffb4\066\uffb4\067\uffb4\074\uffb4\076" +
    "\uffb4\077\uffb4\100\uffb4\101\uffb4\102\uffb4\113\uffb4\116\uffb4" +
    "\135\uffb4\001\002\000\022\007\175\026\177\036\173\037" +
    "\174\054\130\055\137\056\133\057\136\001\002\000\022" +
    "\006\206\011\150\012\151\042\212\050\207\051\211\052" +
    "\205\075\213\001\002\000\020\007\175\036\173\037\174" +
    "\054\130\055\137\056\133\057\136\001\002\000\066\003" +
    "\uffb8\010\uffb8\024\uffb8\025\uffb8\027\uffb8\030\uffb8\031\uffb8" +
    "\033\uffb8\034\uffb8\035\uffb8\040\uffb8\041\uffb8\054\uffb8\061" +
    "\uffb8\064\uffb8\066\uffb8\067\uffb8\074\uffb8\076\uffb8\077\uffb8" +
    "\100\uffb8\101\uffb8\102\uffb8\113\uffb8\116\uffb8\135\uffb8\001" +
    "\002\000\066\003\uffba\010\uffba\024\uffba\025\202\027\uffba" +
    "\030\uffba\031\uffba\033\uffba\034\uffba\035\uffba\040\uffba\041" +
    "\uffba\054\uffba\061\uffba\064\uffba\066\uffba\067\uffba\074\uffba" +
    "\076\uffba\077\uffba\100\uffba\101\uffba\102\uffba\113\uffba\116" +
    "\uffba\135\uffba\001\002\000\022\007\175\026\177\036\173" +
    "\037\174\054\130\055\137\056\133\057\136\001\002\000" +
    "\066\003\uffb9\010\uffb9\024\uffb9\025\uffb9\027\uffb9\030\uffb9" +
    "\031\uffb9\033\uffb9\034\uffb9\035\uffb9\040\uffb9\041\uffb9\054" +
    "\uffb9\061\uffb9\064\uffb9\066\uffb9\067\uffb9\074\uffb9\076\uffb9" +
    "\077\uffb9\100\uffb9\101\uffb9\102\uffb9\113\uffb9\116\uffb9\135" +
    "\uffb9\001\002\000\066\003\uffb7\010\uffb7\024\uffb7\025\uffb7" +
    "\027\uffb7\030\uffb7\031\uffb7\033\uffb7\034\uffb7\035\uffb7\040" +
    "\uffb7\041\uffb7\054\uffb7\061\uffb7\064\uffb7\066\uffb7\067\uffb7" +
    "\074\uffb7\076\uffb7\077\uffb7\100\uffb7\101\uffb7\102\uffb7\113" +
    "\uffb7\116\uffb7\135\uffb7\001\002\000\014\007\uffac\054\uffac" +
    "\055\uffac\056\uffac\057\uffac\001\002\000\014\007\uffb1\054" +
    "\uffb1\055\uffb1\056\uffb1\057\uffb1\001\002\000\014\007\uffae" +
    "\054\uffae\055\uffae\056\uffae\057\uffae\001\002\000\014\007" +
    "\132\054\130\055\137\056\133\057\136\001\002\000\014" +
    "\007\uffad\054\uffad\055\uffad\056\uffad\057\uffad\001\002\000" +
    "\014\007\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf\001\002" +
    "\000\014\007\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\001" +
    "\002\000\066\003\uffb3\010\uffb3\024\uffb3\025\uffb3\027\uffb3" +
    "\030\uffb3\031\uffb3\033\uffb3\034\uffb3\035\uffb3\040\uffb3\041" +
    "\uffb3\054\uffb3\061\uffb3\064\uffb3\066\uffb3\067\uffb3\074\uffb3" +
    "\076\uffb3\077\uffb3\100\uffb3\101\uffb3\102\uffb3\113\uffb3\116" +
    "\uffb3\135\uffb3\001\002\000\006\010\217\024\220\001\002" +
    "\000\024\006\206\010\147\011\150\012\151\042\212\050" +
    "\207\051\211\052\205\075\213\001\002\000\066\003\uffb2" +
    "\010\uffb2\024\uffb2\025\uffb2\027\uffb2\030\uffb2\031\uffb2\033" +
    "\uffb2\034\uffb2\035\uffb2\040\uffb2\041\uffb2\054\uffb2\061\uffb2" +
    "\064\uffb2\066\uffb2\067\uffb2\074\uffb2\076\uffb2\077\uffb2\100" +
    "\uffb2\101\uffb2\102\uffb2\113\uffb2\116\uffb2\135\uffb2\001\002" +
    "\000\022\007\175\026\177\036\173\037\174\054\130\055" +
    "\137\056\133\057\136\001\002\000\066\003\uffbb\010\uffbb" +
    "\024\uffbb\025\202\027\uffbb\030\uffbb\031\uffbb\033\uffbb\034" +
    "\uffbb\035\uffbb\040\uffbb\041\uffbb\054\uffbb\061\uffbb\064\uffbb" +
    "\066\uffbb\067\uffbb\074\uffbb\076\uffbb\077\uffbb\100\uffbb\101" +
    "\uffbb\102\uffbb\113\uffbb\116\uffbb\135\uffbb\001\002\000\004" +
    "\053\223\001\002\000\004\010\224\001\002\000\076\003" +
    "\uffdd\021\uffdd\022\uffdd\023\uffdd\027\uffdd\030\uffdd\031\uffdd" +
    "\032\uffdd\033\uffdd\034\uffdd\035\uffdd\040\uffdd\041\uffdd\043" +
    "\uffdd\044\uffdd\054\uffdd\061\uffdd\064\uffdd\066\uffdd\067\uffdd" +
    "\074\uffdd\076\uffdd\077\uffdd\101\uffdd\102\uffdd\105\uffdd\113" +
    "\uffdd\115\uffdd\120\uffdd\135\uffdd\001\002\000\004\074\226" +
    "\001\002\000\052\003\uffd2\027\uffd2\030\uffd2\031\uffd2\033" +
    "\uffd2\034\uffd2\035\uffd2\040\uffd2\041\uffd2\054\uffd2\061\uffd2" +
    "\064\uffd2\066\uffd2\067\uffd2\074\uffd2\076\uffd2\077\uffd2\101" +
    "\uffd2\102\uffd2\135\uffd2\001\002\000\004\063\230\001\002" +
    "\000\014\003\ufff8\032\ufff8\060\ufff8\063\ufff8\065\ufff8\001" +
    "\002\000\036\003\077\027\070\030\110\031\105\033\063" +
    "\034\106\035\114\040\074\054\075\061\112\066\062\067" +
    "\072\101\113\135\071\001\002\000\006\064\243\102\233" +
    "\001\002\000\014\041\235\054\234\055\240\056\237\057" +
    "\241\001\002\000\040\003\uff87\010\uff87\027\uff87\030\uff87" +
    "\031\uff87\033\uff87\034\uff87\035\uff87\040\uff87\054\uff87\061" +
    "\uff87\066\uff87\067\uff87\101\uff87\135\uff87\001\002\000\036" +
    "\003\uff8b\027\uff8b\030\uff8b\031\uff8b\033\uff8b\034\uff8b\035" +
    "\uff8b\040\uff8b\054\uff8b\061\uff8b\066\uff8b\067\uff8b\101\uff8b" +
    "\135\uff8b\001\002\000\036\003\uff8c\027\uff8c\030\uff8c\031" +
    "\uff8c\033\uff8c\034\uff8c\035\uff8c\040\uff8c\054\uff8c\061\uff8c" +
    "\066\uff8c\067\uff8c\101\uff8c\135\uff8c\001\002\000\040\003" +
    "\uff8a\010\uff8a\027\uff8a\030\uff8a\031\uff8a\033\uff8a\034\uff8a" +
    "\035\uff8a\040\uff8a\054\uff8a\061\uff8a\066\uff8a\067\uff8a\101" +
    "\uff8a\135\uff8a\001\002\000\040\003\uff88\010\uff88\027\uff88" +
    "\030\uff88\031\uff88\033\uff88\034\uff88\035\uff88\040\uff88\054" +
    "\uff88\061\uff88\066\uff88\067\uff88\101\uff88\135\uff88\001\002" +
    "\000\040\003\uff89\010\uff89\027\uff89\030\uff89\031\uff89\033" +
    "\uff89\034\uff89\035\uff89\040\uff89\054\uff89\061\uff89\066\uff89" +
    "\067\uff89\101\uff89\135\uff89\001\002\000\036\003\077\027" +
    "\070\030\110\031\105\033\063\034\106\035\114\040\074" +
    "\054\075\061\112\066\062\067\072\101\113\135\071\001" +
    "\002\000\004\101\244\001\002\000\052\003\uff90\027\uff90" +
    "\030\uff90\031\uff90\033\uff90\034\uff90\035\uff90\040\uff90\041" +
    "\uff90\054\uff90\061\uff90\064\uff90\066\uff90\067\uff90\074\uff90" +
    "\076\uff90\077\uff90\101\uff90\102\uff90\135\uff90\001\002\000" +
    "\006\064\uff8e\102\uff8e\001\002\000\006\064\uff8d\102\uff8d" +
    "\001\002\000\006\006\250\062\251\001\002\000\014\007" +
    "\132\054\130\055\137\056\133\057\136\001\002\000\010" +
    "\021\036\022\037\023\035\001\002\000\004\006\253\001" +
    "\002\000\014\007\132\054\130\055\137\056\133\057\136" +
    "\001\002\000\010\011\150\012\151\072\uffd0\001\002\000" +
    "\010\011\150\012\151\072\uffcf\001\002\000\024\007\132" +
    "\027\070\030\110\031\105\054\130\055\137\056\133\057" +
    "\136\135\071\001\002\000\052\003\uff9c\027\uff9c\030\uff9c" +
    "\031\uff9c\033\uff9c\034\uff9c\035\uff9c\040\uff9c\041\uff9c\054" +
    "\uff9c\061\uff9c\064\uff9c\066\uff9c\067\uff9c\074\uff9c\076\uff9c" +
    "\077\uff9c\101\uff9c\102\uff9c\135\uff9c\001\002\000\056\003" +
    "\uff9d\011\150\012\151\027\uff9d\030\uff9d\031\uff9d\033\uff9d" +
    "\034\uff9d\035\uff9d\040\uff9d\041\uff9d\054\uff9d\061\uff9d\064" +
    "\uff9d\066\uff9d\067\uff9d\074\uff9d\076\uff9d\077\uff9d\101\uff9d" +
    "\102\uff9d\135\uff9d\001\002\000\042\003\uff91\024\220\027" +
    "\uff91\030\uff91\031\uff91\033\uff91\034\uff91\035\uff91\040\uff91" +
    "\054\uff91\061\uff91\066\uff91\067\uff91\100\263\101\uff91\135" +
    "\uff91\001\002\000\036\003\uff98\027\uff98\030\uff98\031\uff98" +
    "\033\uff98\034\uff98\035\uff98\040\uff98\054\uff98\061\uff98\066" +
    "\uff98\067\uff98\101\uff98\135\uff98\001\002\000\036\003\uff92" +
    "\027\uff92\030\uff92\031\uff92\033\uff92\034\uff92\035\uff92\040" +
    "\uff92\054\uff92\061\uff92\066\uff92\067\uff92\101\uff92\135\uff92" +
    "\001\002\000\006\070\266\071\265\001\002\000\004\007" +
    "\277\001\002\000\004\007\267\001\002\000\016\007\132" +
    "\053\271\054\130\055\137\056\133\057\136\001\002\000" +
    "\022\010\uffd8\017\uffd8\041\uffd8\064\uffd8\074\uffd8\076\uffd8" +
    "\077\uffd8\102\uffd8\001\002\000\024\010\uffd7\017\uffd7\020" +
    "\uffd7\041\uffd7\064\uffd7\074\uffd7\076\uffd7\077\uffd7\102\uffd7" +
    "\001\002\000\006\010\274\017\275\001\002\000\030\010" +
    "\uffd6\011\150\012\151\017\uffd6\020\uffd6\041\uffd6\064\uffd6" +
    "\074\uffd6\076\uffd6\077\uffd6\102\uffd6\001\002\000\052\003" +
    "\uffdb\027\uffdb\030\uffdb\031\uffdb\033\uffdb\034\uffdb\035\uffdb" +
    "\040\uffdb\041\uffdb\054\uffdb\061\uffdb\064\uffdb\066\uffdb\067" +
    "\uffdb\074\uffdb\076\uffdb\077\uffdb\101\uffdb\102\uffdb\135\uffdb" +
    "\001\002\000\016\007\132\053\271\054\130\055\137\056" +
    "\133\057\136\001\002\000\022\010\uffd9\017\uffd9\041\uffd9" +
    "\064\uffd9\074\uffd9\076\uffd9\077\uffd9\102\uffd9\001\002\000" +
    "\016\007\132\053\271\054\130\055\137\056\133\057\136" +
    "\001\002\000\006\010\301\017\275\001\002\000\052\003" +
    "\uffda\027\uffda\030\uffda\031\uffda\033\uffda\034\uffda\035\uffda" +
    "\040\uffda\041\uffda\054\uffda\061\uffda\064\uffda\066\uffda\067" +
    "\uffda\074\uffda\076\uffda\077\uffda\101\uffda\102\uffda\135\uffda" +
    "\001\002\000\004\053\303\001\002\000\004\020\304\001" +
    "\002\000\004\017\305\001\002\000\004\054\306\001\002" +
    "\000\004\010\307\001\002\000\076\003\ufe96\021\ufe96\022" +
    "\ufe96\023\ufe96\027\ufe96\030\ufe96\031\ufe96\032\ufe96\033\ufe96" +
    "\034\ufe96\035\ufe96\040\ufe96\041\ufe96\043\ufe96\044\ufe96\054" +
    "\ufe96\061\ufe96\064\ufe96\066\ufe96\067\ufe96\074\ufe96\076\ufe96" +
    "\077\ufe96\101\ufe96\102\ufe96\105\ufe96\113\ufe96\115\ufe96\120" +
    "\ufe96\135\ufe96\001\002\000\004\053\311\001\002\000\004" +
    "\010\312\001\002\000\076\003\uffde\021\uffde\022\uffde\023" +
    "\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde" +
    "\035\uffde\040\uffde\041\uffde\043\uffde\044\uffde\054\uffde\061" +
    "\uffde\064\uffde\066\uffde\067\uffde\074\uffde\076\uffde\077\uffde" +
    "\101\uffde\102\uffde\105\uffde\113\uffde\115\uffde\120\uffde\135" +
    "\uffde\001\002\000\032\007\132\041\uffeb\053\271\054\130" +
    "\055\137\056\133\057\136\064\uffeb\074\uffeb\076\uffeb\077" +
    "\uffeb\102\uffeb\001\002\000\052\003\uffe7\027\uffe7\030\uffe7" +
    "\031\uffe7\033\uffe7\034\uffe7\035\uffe7\040\uffe7\041\uffed\054" +
    "\uffe7\061\uffe7\064\uffed\066\uffe7\067\uffe7\074\uffed\076\uffed" +
    "\077\uffed\101\uffe7\102\uffed\135\uffe7\001\002\000\020\017" +
    "\275\041\uffec\064\uffec\074\uffec\076\uffec\077\uffec\102\uffec" +
    "\001\002\000\014\007\132\054\130\055\137\056\133\057" +
    "\136\001\002\000\044\003\uffca\011\150\012\151\027\uffca" +
    "\030\uffca\031\uffca\033\uffca\034\uffca\035\uffca\040\uffca\054" +
    "\uffca\061\uffca\066\uffca\067\uffca\073\321\101\uffca\135\uffca" +
    "\001\002\000\036\003\uffd1\027\uffd1\030\uffd1\031\uffd1\033" +
    "\uffd1\034\uffd1\035\uffd1\040\uffd1\054\uffd1\061\uffd1\066\uffd1" +
    "\067\uffd1\101\uffd1\135\uffd1\001\002\000\016\011\323\012" +
    "\324\054\234\055\240\056\237\057\241\001\002\000\036" +
    "\003\uffcd\027\uffcd\030\uffcd\031\uffcd\033\uffcd\034\uffcd\035" +
    "\uffcd\040\uffcd\054\uffcd\061\uffcd\066\uffcd\067\uffcd\101\uffcd" +
    "\135\uffcd\001\002\000\012\054\234\055\240\056\237\057" +
    "\241\001\002\000\012\054\234\055\240\056\237\057\241" +
    "\001\002\000\036\003\uffcc\027\uffcc\030\uffcc\031\uffcc\033" +
    "\uffcc\034\uffcc\035\uffcc\040\uffcc\054\uffcc\061\uffcc\066\uffcc" +
    "\067\uffcc\101\uffcc\135\uffcc\001\002\000\036\003\uffcb\027" +
    "\uffcb\030\uffcb\031\uffcb\033\uffcb\034\uffcb\035\uffcb\040\uffcb" +
    "\054\uffcb\061\uffcb\066\uffcb\067\uffcb\101\uffcb\135\uffcb\001" +
    "\002\000\020\017\275\041\uffe9\064\uffe9\074\uffe9\076\uffe9" +
    "\077\uffe9\102\uffe9\001\002\000\004\076\331\001\002\000" +
    "\004\034\332\001\002\000\022\007\175\026\177\036\173" +
    "\037\174\054\130\055\137\056\133\057\136\001\002\000" +
    "\054\003\uffab\024\220\027\uffab\030\uffab\031\uffab\033\uffab" +
    "\034\uffab\035\uffab\040\uffab\041\uffab\054\uffab\061\uffab\064" +
    "\uffab\066\uffab\067\uffab\074\uffab\076\uffab\077\uffab\101\uffab" +
    "\102\uffab\135\uffab\001\002\000\010\041\340\064\uff95\077" +
    "\341\001\002\000\036\003\077\027\070\030\110\031\105" +
    "\033\063\034\106\035\114\040\074\054\075\061\112\066" +
    "\062\067\072\101\113\135\071\001\002\000\004\064\346" +
    "\001\002\000\036\003\077\027\070\030\110\031\105\033" +
    "\063\034\106\035\114\040\074\054\075\061\112\066\062" +
    "\067\072\101\113\135\071\001\002\000\036\003\uff94\027" +
    "\uff94\030\uff94\031\uff94\033\uff94\034\uff94\035\uff94\040\uff94" +
    "\054\uff94\061\uff94\066\uff94\067\uff94\101\uff94\135\uff94\001" +
    "\002\000\022\007\175\026\177\036\173\037\174\054\130" +
    "\055\137\056\133\057\136\001\002\000\042\003\uff91\024" +
    "\220\027\uff91\030\uff91\031\uff91\033\uff91\034\uff91\035\uff91" +
    "\040\uff91\054\uff91\061\uff91\066\uff91\067\uff91\100\263\101" +
    "\uff91\135\uff91\001\002\000\036\003\uff93\027\uff93\030\uff93" +
    "\031\uff93\033\uff93\034\uff93\035\uff93\040\uff93\054\uff93\061" +
    "\uff93\066\uff93\067\uff93\101\uff93\135\uff93\001\002\000\010" +
    "\041\340\064\uff95\077\341\001\002\000\004\064\uff96\001" +
    "\002\000\004\040\347\001\002\000\052\003\uff99\027\uff99" +
    "\030\uff99\031\uff99\033\uff99\034\uff99\035\uff99\040\uff99\041" +
    "\uff99\054\uff99\061\uff99\064\uff99\066\uff99\067\uff99\074\uff99" +
    "\076\uff99\077\uff99\101\uff99\102\uff99\135\uff99\001\002\000" +
    "\004\064\uff97\001\002\000\004\064\352\001\002\000\004" +
    "\065\353\001\002\000\014\003\ufff6\032\ufff6\060\ufff6\063" +
    "\ufff6\065\ufff6\001\002\000\004\103\u01a5\001\002\000\010" +
    "\032\uff85\103\uff85\104\uff85\001\002\000\010\032\uff83\103" +
    "\uff83\104\uff83\001\002\000\010\032\021\103\uff86\104\ufff3" +
    "\001\002\000\004\114\365\001\002\000\010\032\uff84\103" +
    "\uff84\104\uff84\001\002\000\004\104\363\001\002\000\004" +
    "\054\364\001\002\000\004\114\uff81\001\002\000\022\003" +
    "\uff7e\021\uff7e\022\uff7e\023\uff7e\032\uff7e\054\uff7e\105\uff7e" +
    "\115\uff7e\001\002\000\004\115\u01a2\001\002\000\022\003" +
    "\377\021\ufff3\022\ufff3\023\ufff3\032\021\054\ufff3\105\ufff3" +
    "\115\uff80\001\002\000\022\003\uff7f\021\uff7f\022\uff7f\023" +
    "\uff7f\032\uff7f\054\uff7f\105\uff7f\115\uff7f\001\002\000\022" +
    "\003\uff7c\021\uff7c\022\uff7c\023\uff7c\032\uff7c\054\uff7c\105" +
    "\uff7c\115\uff7c\001\002\000\022\003\uff7d\021\uff7d\022\uff7d" +
    "\023\uff7d\032\uff7d\054\uff7d\105\uff7d\115\uff7d\001\002\000" +
    "\022\003\uff7b\021\uff7b\022\uff7b\023\uff7b\032\uff7b\054\uff7b" +
    "\105\uff7b\115\uff7b\001\002\000\014\021\036\022\037\023" +
    "\035\054\u018e\105\u0190\001\002\000\004\114\u018b\001\002" +
    "\000\022\003\uff7a\021\uff7a\022\uff7a\023\uff7a\032\uff7a\054" +
    "\uff7a\105\uff7a\115\uff7a\001\002\000\022\003\uff79\021\uff79" +
    "\022\uff79\023\uff79\032\uff79\054\uff79\105\uff79\115\uff79\001" +
    "\002\000\004\114\u0188\001\002\000\004\114\u0102\001\002" +
    "\000\046\003\u0115\021\ufff3\022\ufff3\023\ufff3\027\070\030" +
    "\110\031\105\032\021\033\063\034\u0107\035\u0110\040\u010d" +
    "\054\u010e\107\u0104\110\u010c\111\u0103\115\uff6d\135\071\001" +
    "\002\000\004\007\u0185\001\002\000\004\007\u0182\001\002" +
    "\000\004\007\u0178\001\002\000\004\113\u0177\001\002\000" +
    "\004\007\u0174\001\002\000\004\113\u0173\001\002\000\052" +
    "\003\uff69\021\uff69\022\uff69\023\uff69\027\uff69\030\uff69\031" +
    "\uff69\032\uff69\033\uff69\034\uff69\035\uff69\040\uff69\054\uff69" +
    "\106\uff69\107\uff69\110\uff69\111\uff69\112\uff69\115\uff69\135" +
    "\uff69\001\002\000\004\114\u0160\001\002\000\004\114\u015d" +
    "\001\002\000\004\007\u0152\001\002\000\004\007\u014f\001" +
    "\002\000\004\006\u014c\001\002\000\052\003\u0115\021\ufff3" +
    "\022\ufff3\023\ufff3\027\070\030\110\031\105\032\021\033" +
    "\063\034\u0107\035\u0110\040\u010d\054\u010e\106\u014a\107\u0104" +
    "\110\u010c\111\u0103\112\uff6b\115\uff6b\135\071\001\002\000" +
    "\004\114\u0144\001\002\000\006\112\uff6e\115\uff6e\001\002" +
    "\000\052\003\uff5f\021\uff5f\022\uff5f\023\uff5f\027\uff5f\030" +
    "\uff5f\031\uff5f\032\uff5f\033\uff5f\034\uff5f\035\uff5f\040\uff5f" +
    "\054\uff5f\106\uff5f\107\uff5f\110\uff5f\111\uff5f\112\uff5f\115" +
    "\uff5f\135\uff5f\001\002\000\052\003\uff5c\021\uff5c\022\uff5c" +
    "\023\uff5c\027\uff5c\030\uff5c\031\uff5c\032\uff5c\033\uff5c\034" +
    "\uff5c\035\uff5c\040\uff5c\054\uff5c\106\uff5c\107\uff5c\110\uff5c" +
    "\111\uff5c\112\uff5c\115\uff5c\135\uff5c\001\002\000\004\113" +
    "\u0143\001\002\000\052\003\uff5b\021\uff5b\022\uff5b\023\uff5b" +
    "\027\uff5b\030\uff5b\031\uff5b\032\uff5b\033\uff5b\034\uff5b\035" +
    "\uff5b\040\uff5b\054\uff5b\106\uff5b\107\uff5b\110\uff5b\111\uff5b" +
    "\112\uff5b\115\uff5b\135\uff5b\001\002\000\004\113\u0142\001" +
    "\002\000\022\007\175\026\177\036\173\037\174\054\130" +
    "\055\137\056\133\057\136\001\002\000\010\021\036\022" +
    "\037\023\035\001\002\000\004\115\u0131\001\002\000\004" +
    "\114\u012e\001\002\000\004\114\u011c\001\002\000\046\003" +
    "\u0115\021\ufff3\022\ufff3\023\ufff3\027\070\030\110\031\105" +
    "\032\021\033\063\034\u0107\035\u0110\040\u010d\054\u010e\107" +
    "\u0104\110\u010c\111\u0103\115\uff6d\135\071\001\002\000\004" +
    "\115\u011e\001\002\000\054\003\uff47\021\uff47\022\uff47\023" +
    "\uff47\027\uff47\030\uff47\031\uff47\032\uff47\033\uff47\034\uff47" +
    "\035\uff47\040\uff47\041\u0120\054\uff47\106\uff47\107\uff47\110" +
    "\uff47\111\uff47\112\uff47\115\uff47\135\uff47\001\002\000\004" +
    "\114\u012b\001\002\000\006\040\u0127\114\uff46\001\002\000" +
    "\004\114\u0123\001\002\000\052\003\uff4c\021\uff4c\022\uff4c" +
    "\023\uff4c\027\uff4c\030\uff4c\031\uff4c\032\uff4c\033\uff4c\034" +
    "\uff4c\035\uff4c\040\uff4c\054\uff4c\106\uff4c\107\uff4c\110\uff4c" +
    "\111\uff4c\112\uff4c\115\uff4c\135\uff4c\001\002\000\044\003" +
    "\u0115\021\ufff3\022\ufff3\023\ufff3\027\070\030\110\031\105" +
    "\032\021\033\063\034\u0107\035\u0110\040\u010d\054\u010e\107" +
    "\u0104\110\u010c\111\u0103\135\071\001\002\000\004\115\u0125" +
    "\001\002\000\054\003\uff47\021\uff47\022\uff47\023\uff47\027" +
    "\uff47\030\uff47\031\uff47\032\uff47\033\uff47\034\uff47\035\uff47" +
    "\040\uff47\041\u0120\054\uff47\106\uff47\107\uff47\110\uff47\111" +
    "\uff47\112\uff47\115\uff47\135\uff47\001\002\000\052\003\uff48" +
    "\021\uff48\022\uff48\023\uff48\027\uff48\030\uff48\031\uff48\032" +
    "\uff48\033\uff48\034\uff48\035\uff48\040\uff48\054\uff48\106\uff48" +
    "\107\uff48\110\uff48\111\uff48\112\uff48\115\uff48\135\uff48\001" +
    "\002\000\004\007\u0128\001\002\000\022\007\175\026\177" +
    "\036\173\037\174\054\130\055\137\056\133\057\136\001" +
    "\002\000\006\010\u012a\024\220\001\002\000\004\114\uff45" +
    "\001\002\000\046\003\u0115\021\ufff3\022\ufff3\023\ufff3\027" +
    "\070\030\110\031\105\032\021\033\063\034\u0107\035\u0110" +
    "\040\u010d\054\u010e\107\u0104\110\u010c\111\u0103\115\uff6d\135" +
    "\071\001\002\000\004\115\u012d\001\002\000\052\003\uff49" +
    "\021\uff49\022\uff49\023\uff49\027\uff49\030\uff49\031\uff49\032" +
    "\uff49\033\uff49\034\uff49\035\uff49\040\uff49\054\uff49\106\uff49" +
    "\107\uff49\110\uff49\111\uff49\112\uff49\115\uff49\135\uff49\001" +
    "\002\000\046\003\u0115\021\ufff3\022\ufff3\023\ufff3\027\070" +
    "\030\110\031\105\032\021\033\063\034\u0107\035\u0110\040" +
    "\u010d\054\u010e\107\u0104\110\u010c\111\u0103\115\uff6d\135\071" +
    "\001\002\000\004\115\u0130\001\002\000\052\003\uff58\021" +
    "\uff58\022\uff58\023\uff58\027\uff58\030\uff58\031\uff58\032\uff58" +
    "\033\uff58\034\uff58\035\uff58\040\uff58\054\uff58\106\uff58\107" +
    "\uff58\110\uff58\111\uff58\112\uff58\115\uff58\135\uff58\001\002" +
    "\000\022\003\uff74\021\uff74\022\uff74\023\uff74\032\uff74\054" +
    "\uff74\105\uff74\115\uff74\001\002\000\004\054\u0133\001\002" +
    "\000\010\006\u0138\020\uff9e\113\uff9e\001\002\000\026\003" +
    "\uff50\020\u0135\021\uff50\022\uff50\023\uff50\032\uff50\054\uff50" +
    "\105\uff50\113\uff50\115\uff50\001\002\000\004\054\u0136\001" +
    "\002\000\030\003\uff9e\006\122\020\uff9e\021\uff9e\022\uff9e" +
    "\023\uff9e\032\uff9e\054\uff9e\105\uff9e\113\uff9e\115\uff9e\001" +
    "\002\000\026\003\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1" +
    "\032\uffa1\054\uffa1\105\uffa1\113\uffa1\115\uffa1\001\002\000" +
    "\024\007\132\027\070\030\110\031\105\054\130\055\137" +
    "\056\133\057\136\135\071\001\002\000\026\003\uffa0\020" +
    "\uffa0\021\uffa0\022\uffa0\023\uffa0\032\uffa0\054\uffa0\105\uffa0" +
    "\113\uffa0\115\uffa0\001\002\000\024\003\uff4f\021\uff4f\022" +
    "\uff4f\023\uff4f\032\uff4f\054\uff4f\105\uff4f\113\uff4f\115\uff4f" +
    "\001\002\000\006\024\220\113\u013c\001\002\000\004\054" +
    "\u013e\001\002\000\004\010\u0141\001\002\000\004\006\u013f" +
    "\001\002\000\014\007\132\054\130\055\137\056\133\057" +
    "\136\001\002\000\010\010\uff54\011\150\012\151\001\002" +
    "\000\004\114\uff55\001\002\000\052\003\uff60\021\uff60\022" +
    "\uff60\023\uff60\027\uff60\030\uff60\031\uff60\032\uff60\033\uff60" +
    "\034\uff60\035\uff60\040\uff60\054\uff60\106\uff60\107\uff60\110" +
    "\uff60\111\uff60\112\uff60\115\uff60\135\uff60\001\002\000\052" +
    "\003\uff61\021\uff61\022\uff61\023\uff61\027\uff61\030\uff61\031" +
    "\uff61\032\uff61\033\uff61\034\uff61\035\uff61\040\uff61\054\uff61" +
    "\106\uff61\107\uff61\110\uff61\111\uff61\112\uff61\115\uff61\135" +
    "\uff61\001\002\000\046\003\u0115\021\ufff3\022\ufff3\023\ufff3" +
    "\027\070\030\110\031\105\032\021\033\063\034\u0107\035" +
    "\u0110\040\u010d\054\u010e\107\u0104\110\u010c\111\u0103\115\uff6d" +
    "\135\071\001\002\000\004\115\u0146\001\002\000\022\007" +
    "\175\026\177\036\173\037\174\054\130\055\137\056\133" +
    "\057\136\001\002\000\006\024\220\113\u0148\001\002\000" +
    "\052\003\uff56\021\uff56\022\uff56\023\uff56\027\uff56\030\uff56" +
    "\031\uff56\032\uff56\033\uff56\034\uff56\035\uff56\040\uff56\054" +
    "\uff56\106\uff56\107\uff56\110\uff56\111\uff56\112\uff56\115\uff56" +
    "\135\uff56\001\002\000\052\003\uff6a\021\uff6a\022\uff6a\023" +
    "\uff6a\027\uff6a\030\uff6a\031\uff6a\032\uff6a\033\uff6a\034\uff6a" +
    "\035\uff6a\040\uff6a\054\uff6a\106\uff6a\107\uff6a\110\uff6a\111" +
    "\uff6a\112\uff6a\115\uff6a\135\uff6a\001\002\000\014\007\132" +
    "\054\130\055\137\056\133\057\136\001\002\000\012\011" +
    "\150\012\151\112\uff6c\115\uff6c\001\002\000\024\007\132" +
    "\027\070\030\110\031\105\054\130\055\137\056\133\057" +
    "\136\135\071\001\002\000\004\113\uff4d\001\002\000\010" +
    "\011\150\012\151\113\uff4e\001\002\000\022\007\175\026" +
    "\177\036\173\037\174\054\130\055\137\056\133\057\136" +
    "\001\002\000\006\010\u0151\024\220\001\002\000\004\114" +
    "\uff4a\001\002\000\014\053\u0155\054\u0153\055\u0159\056\u0157" +
    "\057\u0158\001\002\000\010\010\uff66\011\uff66\116\uff66\001" +
    "\002\000\006\010\uff67\011\uff67\001\002\000\010\010\uff62" +
    "\011\uff62\116\uff62\001\002\000\006\010\u015a\011\u015b\001" +
    "\002\000\010\010\uff65\011\uff65\116\uff65\001\002\000\010" +
    "\010\uff64\011\uff64\116\uff64\001\002\000\010\010\uff63\011" +
    "\uff63\116\uff63\001\002\000\004\113\uff5a\001\002\000\014" +
    "\053\u0155\054\u0153\055\u0159\056\u0157\057\u0158\001\002\000" +
    "\006\010\uff68\011\uff68\001\002\000\046\003\u0115\021\ufff3" +
    "\022\ufff3\023\ufff3\027\070\030\110\031\105\032\021\033" +
    "\063\034\u0107\035\u0110\040\u010d\054\u010e\107\u0104\110\u010c" +
    "\111\u0103\115\uff6d\135\071\001\002\000\004\115\u015f\001" +
    "\002\000\052\003\uff57\021\uff57\022\uff57\023\uff57\027\uff57" +
    "\030\uff57\031\uff57\032\uff57\033\uff57\034\uff57\035\uff57\040" +
    "\uff57\054\uff57\106\uff57\107\uff57\110\uff57\111\uff57\112\uff57" +
    "\115\uff57\135\uff57\001\002\000\004\047\u0162\001\002\000" +
    "\004\116\u0170\001\002\000\014\053\u0155\054\u0153\055\u0159" +
    "\056\u0157\057\u0158\001\002\000\006\046\u0167\047\u0162\001" +
    "\002\000\010\046\uff3f\047\uff3f\115\uff41\001\002\000\004" +
    "\115\u0166\001\002\000\052\003\uff4b\021\uff4b\022\uff4b\023" +
    "\uff4b\027\uff4b\030\uff4b\031\uff4b\032\uff4b\033\uff4b\034\uff4b" +
    "\035\uff4b\040\uff4b\054\uff4b\106\uff4b\107\uff4b\110\uff4b\111" +
    "\uff4b\112\uff4b\115\uff4b\135\uff4b\001\002\000\004\116\ufeab" +
    "\001\002\000\004\116\u016a\001\002\000\010\046\uff40\047" +
    "\uff40\115\uff43\001\002\000\046\003\u0115\021\ufff3\022\ufff3" +
    "\023\ufff3\027\070\030\110\031\105\032\021\033\063\034" +
    "\u0107\035\u0110\040\u010d\054\u010e\107\u0104\110\u010c\111\u0103" +
    "\112\uff6d\135\071\001\002\000\004\112\u016d\001\002\000" +
    "\004\115\uff42\001\002\000\004\113\u016e\001\002\000\010" +
    "\046\uff3c\047\uff3c\115\uff3c\001\002\000\004\116\uff3d\001" +
    "\002\000\046\003\u0115\021\ufff3\022\ufff3\023\ufff3\027\070" +
    "\030\110\031\105\032\021\033\063\034\u0107\035\u0110\040" +
    "\u010d\054\u010e\107\u0104\110\u010c\111\u0103\112\uff6d\135\071" +
    "\001\002\000\004\112\u016d\001\002\000\010\046\uff3e\047" +
    "\uff3e\115\uff3e\001\002\000\052\003\uff5e\021\uff5e\022\uff5e" +
    "\023\uff5e\027\uff5e\030\uff5e\031\uff5e\032\uff5e\033\uff5e\034" +
    "\uff5e\035\uff5e\040\uff5e\054\uff5e\106\uff5e\107\uff5e\110\uff5e" +
    "\111\uff5e\112\uff5e\115\uff5e\135\uff5e\001\002\000\022\007" +
    "\175\026\177\036\173\037\174\054\130\055\137\056\133" +
    "\057\136\001\002\000\006\010\u0176\024\220\001\002\000" +
    "\004\114\uff51\001\002\000\052\003\uff5d\021\uff5d\022\uff5d" +
    "\023\uff5d\027\uff5d\030\uff5d\031\uff5d\032\uff5d\033\uff5d\034" +
    "\uff5d\035\uff5d\040\uff5d\054\uff5d\106\uff5d\107\uff5d\110\uff5d" +
    "\111\uff5d\112\uff5d\115\uff5d\135\uff5d\001\002\000\012\021" +
    "\036\022\037\023\035\054\u0179\001\002\000\004\006\u017f" +
    "\001\002\000\004\054\u017b\001\002\000\004\006\u017c\001" +
    "\002\000\014\007\132\054\130\055\137\056\133\057\136" +
    "\001\002\000\010\011\150\012\151\113\u017e\001\002\000" +
    "\022\007\uff53\026\uff53\036\uff53\037\uff53\054\uff53\055\uff53" +
    "\056\uff53\057\uff53\001\002\000\014\007\132\054\130\055" +
    "\137\056\133\057\136\001\002\000\010\011\150\012\151" +
    "\113\u0181\001\002\000\022\007\uff52\026\uff52\036\uff52\037" +
    "\uff52\054\uff52\055\uff52\056\uff52\057\uff52\001\002\000\014" +
    "\053\u0155\054\u0153\055\u0159\056\u0157\057\u0158\001\002\000" +
    "\006\010\u0184\011\u015b\001\002\000\004\113\uff59\001\002" +
    "\000\004\054\u0186\001\002\000\004\010\u0187\001\002\000" +
    "\004\114\uff44\001\002\000\046\003\u0115\021\ufff3\022\ufff3" +
    "\023\ufff3\027\070\030\110\031\105\032\021\033\063\034" +
    "\u0107\035\u0110\040\u010d\054\u010e\107\u0104\110\u010c\111\u0103" +
    "\115\uff6d\135\071\001\002\000\004\115\u018a\001\002\000" +
    "\022\003\uff78\021\uff78\022\uff78\023\uff78\032\uff78\054\uff78" +
    "\105\uff78\115\uff78\001\002\000\046\003\u0115\021\ufff3\022" +
    "\ufff3\023\ufff3\027\070\030\110\031\105\032\021\033\063" +
    "\034\u0107\035\u0110\040\u010d\054\u010e\107\u0104\110\u010c\111" +
    "\u0103\115\uff6d\135\071\001\002\000\004\115\u018d\001\002" +
    "\000\022\003\uff76\021\uff76\022\uff76\023\uff76\032\uff76\054" +
    "\uff76\105\uff76\115\uff76\001\002\000\004\007\u019f\001\002" +
    "\000\004\054\u019b\001\002\000\004\054\u0191\001\002\000" +
    "\004\007\u0192\001\002\000\014\010\uff71\020\uff71\021\036" +
    "\022\037\023\035\001\002\000\004\054\u019a\001\002\000" +
    "\006\010\u0197\020\u0196\001\002\000\006\010\uff72\020\uff72" +
    "\001\002\000\010\021\036\022\037\023\035\001\002\000" +
    "\004\114\uff73\001\002\000\004\054\u0199\001\002\000\006" +
    "\010\uff70\020\uff70\001\002\000\006\010\uff6f\020\uff6f\001" +
    "\002\000\030\003\uff9e\006\u0138\007\u019c\020\uff9e\021\uff9e" +
    "\022\uff9e\023\uff9e\032\uff9e\054\uff9e\105\uff9e\115\uff9e\001" +
    "\002\000\014\010\uff71\020\uff71\021\036\022\037\023\035" +
    "\001\002\000\006\010\u019e\020\u0196\001\002\000\004\114" +
    "\uff75\001\002\000\014\010\uff71\020\uff71\021\036\022\037" +
    "\023\035\001\002\000\006\010\u01a1\020\u0196\001\002\000" +
    "\004\114\uff77\001\002\000\010\032\uff82\103\uff82\104\uff82" +
    "\001\002\000\004\117\u0201\001\002\000\010\003\uff38\117" +
    "\uff38\122\uff38\001\002\000\010\003\uff3a\117\uff3a\122\uff3a" +
    "\001\002\000\010\003\u01a7\117\uff3b\122\u01a8\001\002\000" +
    "\010\003\uff36\117\uff36\122\uff36\001\002\000\004\054\u01f7" +
    "\001\002\000\010\003\uff39\117\uff39\122\uff39\001\002\000" +
    "\004\121\u01ab\001\002\000\032\003\uff2c\027\uff2c\030\uff2c" +
    "\031\uff2c\033\uff2c\034\uff2c\040\uff2c\043\uff2c\044\uff2c\054" +
    "\uff2c\120\uff2c\135\uff2c\001\002\000\032\003\u01bf\027\070" +
    "\030\110\031\105\033\u01c2\034\u01b4\040\u01b8\043\u01b6\044" +
    "\u01be\054\u01b9\120\uff2f\135\071\001\002\000\004\120\uff30" +
    "\001\002\000\004\120\u01af\001\002\000\010\003\uff37\117" +
    "\uff37\122\uff37\001\002\000\004\020\u01f1\001\002\000\032" +
    "\003\uff22\027\uff22\030\uff22\031\uff22\033\uff22\034\uff22\040" +
    "\uff22\043\uff22\044\uff22\054\uff22\120\uff22\135\uff22\001\002" +
    "\000\004\121\u01ee\001\002\000\032\003\uff2a\027\uff2a\030" +
    "\uff2a\031\uff2a\033\uff2a\034\uff2a\040\uff2a\043\uff2a\044\uff2a" +
    "\054\uff2a\120\uff2a\135\uff2a\001\002\000\022\007\175\026" +
    "\177\036\173\037\174\054\130\055\137\056\133\057\136" +
    "\001\002\000\032\003\uff21\027\uff21\030\uff21\031\uff21\033" +
    "\uff21\034\uff21\040\uff21\043\uff21\044\uff21\054\uff21\120\uff21" +
    "\135\uff21\001\002\000\014\007\132\054\130\055\137\056" +
    "\133\057\136\001\002\000\004\121\u01d9\001\002\000\022" +
    "\007\175\026\177\036\173\037\174\054\130\055\137\056" +
    "\133\057\136\001\002\000\004\006\u01d4\001\002\000\004" +
    "\116\u01d0\001\002\000\004\054\u01cb\001\002\000\032\003" +
    "\uff2d\027\uff2d\030\uff2d\031\uff2d\033\uff2d\034\uff2d\040\uff2d" +
    "\043\uff2d\044\uff2d\054\uff2d\120\uff2d\135\uff2d\001\002\000" +
    "\032\003\uff17\027\uff17\030\uff17\031\uff17\033\uff17\034\uff17" +
    "\040\uff17\043\uff17\044\uff17\054\uff17\120\uff17\135\uff17\001" +
    "\002\000\004\007\u01c5\001\002\000\032\003\uff26\027\uff26" +
    "\030\uff26\031\uff26\033\uff26\034\uff26\040\uff26\043\uff26\044" +
    "\uff26\054\uff26\120\uff26\135\uff26\001\002\000\032\003\uff2b" +
    "\027\uff2b\030\uff2b\031\uff2b\033\uff2b\034\uff2b\040\uff2b\043" +
    "\uff2b\044\uff2b\054\uff2b\120\uff2b\135\uff2b\001\002\000\032" +
    "\003\uff28\027\uff28\030\uff28\031\uff28\033\uff28\034\uff28\040" +
    "\uff28\043\uff28\044\uff28\054\uff28\120\uff28\135\uff28\001\002" +
    "\000\004\054\uff1c\001\002\000\032\003\uff29\027\uff29\030" +
    "\uff29\031\uff29\033\uff29\034\uff29\040\uff29\043\uff29\044\uff29" +
    "\054\uff29\120\uff29\135\uff29\001\002\000\032\003\uff27\027" +
    "\uff27\030\uff27\031\uff27\033\uff27\034\uff27\040\uff27\043\uff27" +
    "\044\uff27\054\uff27\120\uff27\135\uff27\001\002\000\016\007" +
    "\132\053\271\054\130\055\137\056\133\057\136\001\002" +
    "\000\006\010\uff23\020\uff23\001\002\000\006\010\u01c9\020" +
    "\u01c8\001\002\000\016\007\132\053\271\054\130\055\137" +
    "\056\133\057\136\001\002\000\032\003\uff25\027\uff25\030" +
    "\uff25\031\uff25\033\uff25\034\uff25\040\uff25\043\uff25\044\uff25" +
    "\054\uff25\120\uff25\135\uff25\001\002\000\006\010\uff24\020" +
    "\uff24\001\002\000\004\123\u01cc\001\002\000\004\124\u01cd" +
    "\001\002\000\004\007\u01ce\001\002\000\014\007\132\054" +
    "\130\055\137\056\133\057\136\001\002\000\010\011\150" +
    "\012\151\020\uff1d\001\002\000\004\121\u01d1\001\002\000" +
    "\032\003\uff2c\027\uff2c\030\uff2c\031\uff2c\033\uff2c\034\uff2c" +
    "\040\uff2c\043\uff2c\044\uff2c\054\uff2c\120\uff2c\135\uff2c\001" +
    "\002\000\004\120\u01d3\001\002\000\032\003\uff20\027\uff20" +
    "\030\uff20\031\uff20\033\uff20\034\uff20\040\uff20\043\uff20\044" +
    "\uff20\054\uff20\120\uff20\135\uff20\001\002\000\024\007\132" +
    "\027\070\030\110\031\105\054\130\055\137\056\133\057" +
    "\136\135\071\001\002\000\032\003\uff18\027\uff18\030\uff18" +
    "\031\uff18\033\uff18\034\uff18\040\uff18\043\uff18\044\uff18\054" +
    "\uff18\120\uff18\135\uff18\001\002\000\036\003\uff19\011\150" +
    "\012\151\027\uff19\030\uff19\031\uff19\033\uff19\034\uff19\040" +
    "\uff19\043\uff19\044\uff19\054\uff19\120\uff19\135\uff19\001\002" +
    "\000\006\024\220\116\u01d8\001\002\000\004\121\uff15\001" +
    "\002\000\032\003\uff2c\027\uff2c\030\uff2c\031\uff2c\033\uff2c" +
    "\034\uff2c\040\uff2c\043\uff2c\044\uff2c\054\uff2c\120\uff2c\135" +
    "\uff2c\001\002\000\004\120\u01db\001\002\000\036\003\uff12" +
    "\027\uff12\030\uff12\031\uff12\033\uff12\034\uff12\040\uff12\041" +
    "\u01dc\043\uff12\044\uff12\054\uff12\120\uff12\125\u01dd\135\uff12" +
    "\001\002\000\004\116\u01ea\001\002\000\022\007\175\026" +
    "\177\036\173\037\174\054\130\055\137\056\133\057\136" +
    "\001\002\000\004\121\u01e5\001\002\000\032\003\uff16\027" +
    "\uff16\030\uff16\031\uff16\033\uff16\034\uff16\040\uff16\043\uff16" +
    "\044\uff16\054\uff16\120\uff16\135\uff16\001\002\000\004\121" +
    "\u01e1\001\002\000\032\003\uff2c\027\uff2c\030\uff2c\031\uff2c" +
    "\033\uff2c\034\uff2c\040\uff2c\043\uff2c\044\uff2c\054\uff2c\120" +
    "\uff2c\135\uff2c\001\002\000\004\120\u01e3\001\002\000\036" +
    "\003\uff12\027\uff12\030\uff12\031\uff12\033\uff12\034\uff12\040" +
    "\uff12\041\u01dc\043\uff12\044\uff12\054\uff12\120\uff12\125\u01dd" +
    "\135\uff12\001\002\000\032\003\uff14\027\uff14\030\uff14\031" +
    "\uff14\033\uff14\034\uff14\040\uff14\043\uff14\044\uff14\054\uff14" +
    "\120\uff14\135\uff14\001\002\000\032\003\uff2c\027\uff2c\030" +
    "\uff2c\031\uff2c\033\uff2c\034\uff2c\040\uff2c\043\uff2c\044\uff2c" +
    "\054\uff2c\120\uff2c\135\uff2c\001\002\000\004\120\u01e7\001" +
    "\002\000\032\003\uff13\027\uff13\030\uff13\031\uff13\033\uff13" +
    "\034\uff13\040\uff13\043\uff13\044\uff13\054\uff13\120\uff13\135" +
    "\uff13\001\002\000\006\024\220\116\u01e9\001\002\000\004" +
    "\121\uff10\001\002\000\004\121\uff11\001\002\000\010\011" +
    "\150\012\151\120\uff2e\001\002\000\006\024\220\116\u01ed" +
    "\001\002\000\004\121\uff1a\001\002\000\032\003\uff2c\027" +
    "\uff2c\030\uff2c\031\uff2c\033\uff2c\034\uff2c\040\uff2c\043\uff2c" +
    "\044\uff2c\054\uff2c\120\uff2c\135\uff2c\001\002\000\004\120" +
    "\u01f0\001\002\000\032\003\uff1b\027\uff1b\030\uff1b\031\uff1b" +
    "\033\uff1b\034\uff1b\040\uff1b\043\uff1b\044\uff1b\054\uff1b\120" +
    "\uff1b\135\uff1b\001\002\000\014\007\132\054\130\055\137" +
    "\056\133\057\136\001\002\000\012\010\u01f4\011\150\012" +
    "\151\020\u01f3\001\002\000\012\054\234\055\240\056\237" +
    "\057\241\001\002\000\004\116\uff1e\001\002\000\004\010" +
    "\u01f6\001\002\000\004\116\uff1f\001\002\000\004\007\u01f8" +
    "\001\002\000\006\010\uff33\054\u01f9\001\002\000\006\010" +
    "\uff31\020\uff31\001\002\000\006\010\uff34\020\u01fe\001\002" +
    "\000\004\010\u01fc\001\002\000\004\116\u01fd\001\002\000" +
    "\004\121\uff35\001\002\000\004\054\u01ff\001\002\000\006" +
    "\010\uff32\020\uff32\001\002\000\004\002\000\001\002\000" +
    "\006\126\uff0e\131\uff0e\001\002\000\006\126\uff0c\131\uff0c" +
    "\001\002\000\006\126\u0204\131\u0207\001\002\000\010\021" +
    "\036\022\037\023\035\001\002\000\012\021\036\022\037" +
    "\023\035\126\u0204\001\002\000\004\113\u0211\001\002\000" +
    "\006\050\u020a\053\u0209\001\002\000\006\126\uff0d\131\uff0d" +
    "\001\002\000\006\126\ufedb\131\ufedb\001\002\000\004\054" +
    "\u020b\001\002\000\006\016\u020e\042\ufed8\001\002\000\004" +
    "\042\u020d\001\002\000\006\126\ufeda\131\ufeda\001\002\000" +
    "\006\013\u0210\054\u020f\001\002\000\004\042\ufed9\001\002" +
    "\000\004\042\ufed7\001\002\000\012\021\uff0a\022\uff0a\023" +
    "\uff0a\126\uff0a\001\002\000\004\113\u0309\001\002\000\014" +
    "\003\u0265\021\036\022\037\023\035\105\u0263\001\002\000" +
    "\004\054\u0217\001\002\000\004\113\u0216\001\002\000\012" +
    "\021\uff0b\022\uff0b\023\uff0b\126\uff0b\001\002\000\012\006" +
    "\u0245\020\ufebf\113\ufebf\127\u0244\001\002\000\004\054\u0219" +
    "\001\002\000\010\006\u021b\020\ufebf\113\ufebf\001\002\000" +
    "\006\020\u0242\113\ufec6\001\002\000\014\007\u0223\054\u0224" +
    "\055\u0225\056\u021e\057\u021c\001\002\000\044\006\ufef5\010" +
    "\ufef5\011\ufef5\012\ufef5\013\ufef5\014\ufef5\015\ufef5\020\ufef5" +
    "\024\ufef5\025\ufef5\042\ufef5\050\ufef5\051\ufef5\052\ufef5\075" +
    "\ufef5\113\ufef5\130\ufef5\001\002\000\044\006\ufef7\010\ufef7" +
    "\011\ufef7\012\ufef7\013\ufef7\014\ufef7\015\ufef7\020\ufef7\024" +
    "\ufef7\025\ufef7\042\ufef7\050\ufef7\051\ufef7\052\ufef7\075\ufef7" +
    "\113\ufef7\130\ufef7\001\002\000\044\006\ufef6\010\ufef6\011" +
    "\ufef6\012\ufef6\013\ufef6\014\ufef6\015\ufef6\020\ufef6\024\ufef6" +
    "\025\ufef6\042\ufef6\050\ufef6\051\ufef6\052\ufef6\075\ufef6\113" +
    "\ufef6\130\ufef6\001\002\000\044\006\ufef0\010\ufef0\011\ufef0" +
    "\012\ufef0\013\ufef0\014\ufef0\015\ufef0\020\ufef0\024\ufef0\025" +
    "\ufef0\042\ufef0\050\ufef0\051\ufef0\052\ufef0\075\ufef0\113\ufef0" +
    "\130\ufef0\001\002\000\012\011\u022b\012\u022c\020\ufec0\113" +
    "\ufec0\001\002\000\004\007\u023b\001\002\000\044\006\ufefb" +
    "\010\ufefb\011\ufefb\012\ufefb\013\u022f\014\u0230\015\u022e\020" +
    "\ufefb\024\ufefb\025\ufefb\042\ufefb\050\ufefb\051\ufefb\052\ufefb" +
    "\075\ufefb\113\ufefb\130\ufefb\001\002\000\014\007\u0223\054" +
    "\u0224\055\u0225\056\u021e\057\u021c\001\002\000\052\006\ufef3" +
    "\007\ufe92\010\ufef3\011\ufef3\012\ufef3\013\ufef3\014\ufef3\015" +
    "\ufef3\016\u0226\020\ufef3\024\ufef3\025\ufef3\042\ufef3\050\ufef3" +
    "\051\ufef3\052\ufef3\075\ufef3\113\ufef3\127\u0228\130\ufef3\001" +
    "\002\000\044\006\ufef4\010\ufef4\011\ufef4\012\ufef4\013\ufef4" +
    "\014\ufef4\015\ufef4\020\ufef4\024\ufef4\025\ufef4\042\ufef4\050" +
    "\ufef4\051\ufef4\052\ufef4\075\ufef4\113\ufef4\130\ufef4\001\002" +
    "\000\004\054\u0238\001\002\000\046\006\ufef1\010\ufef1\011" +
    "\ufef1\012\ufef1\013\ufef1\014\ufef1\015\ufef1\020\ufef1\024\ufef1" +
    "\025\ufef1\042\ufef1\050\ufef1\051\ufef1\052\ufef1\075\ufef1\113" +
    "\ufef1\127\u0235\130\ufef1\001\002\000\014\007\u0223\054\u0224" +
    "\055\u0225\056\u021e\057\u021c\001\002\000\010\011\u022b\012" +
    "\u022c\130\u022a\001\002\000\050\006\ufeee\010\ufeee\011\ufeee" +
    "\012\ufeee\013\ufeee\014\ufeee\015\ufeee\020\ufeee\024\ufeee\025" +
    "\ufeee\042\ufeee\050\ufeee\051\ufeee\052\ufeee\075\ufeee\113\ufeee" +
    "\116\ufeee\127\ufeee\130\ufeee\001\002\000\014\007\u0223\054" +
    "\u0224\055\u0225\056\u021e\057\u021c\001\002\000\014\007\u0223" +
    "\054\u0224\055\u0225\056\u021e\057\u021c\001\002\000\044\006" +
    "\ufefc\010\ufefc\011\ufefc\012\ufefc\013\u022f\014\u0230\015\u022e" +
    "\020\ufefc\024\ufefc\025\ufefc\042\ufefc\050\ufefc\051\ufefc\052" +
    "\ufefc\075\ufefc\113\ufefc\130\ufefc\001\002\000\014\007\u0223" +
    "\054\u0224\055\u0225\056\u021e\057\u021c\001\002\000\014\007" +
    "\u0223\054\u0224\055\u0225\056\u021e\057\u021c\001\002\000\014" +
    "\007\u0223\054\u0224\055\u0225\056\u021e\057\u021c\001\002\000" +
    "\044\006\ufef9\010\ufef9\011\ufef9\012\ufef9\013\ufef9\014\ufef9" +
    "\015\ufef9\020\ufef9\024\ufef9\025\ufef9\042\ufef9\050\ufef9\051" +
    "\ufef9\052\ufef9\075\ufef9\113\ufef9\130\ufef9\001\002\000\044" +
    "\006\ufefa\010\ufefa\011\ufefa\012\ufefa\013\ufefa\014\ufefa\015" +
    "\ufefa\020\ufefa\024\ufefa\025\ufefa\042\ufefa\050\ufefa\051\ufefa" +
    "\052\ufefa\075\ufefa\113\ufefa\130\ufefa\001\002\000\044\006" +
    "\ufef8\010\ufef8\011\ufef8\012\ufef8\013\ufef8\014\ufef8\015\ufef8" +
    "\020\ufef8\024\ufef8\025\ufef8\042\ufef8\050\ufef8\051\ufef8\052" +
    "\ufef8\075\ufef8\113\ufef8\130\ufef8\001\002\000\044\006\ufefd" +
    "\010\ufefd\011\ufefd\012\ufefd\013\u022f\014\u0230\015\u022e\020" +
    "\ufefd\024\ufefd\025\ufefd\042\ufefd\050\ufefd\051\ufefd\052\ufefd" +
    "\075\ufefd\113\ufefd\130\ufefd\001\002\000\014\007\u0223\054" +
    "\u0224\055\u0225\056\u021e\057\u021c\001\002\000\010\011\u022b" +
    "\012\u022c\130\u0237\001\002\000\050\006\ufeef\010\ufeef\011" +
    "\ufeef\012\ufeef\013\ufeef\014\ufeef\015\ufeef\020\ufeef\024\ufeef" +
    "\025\ufeef\042\ufeef\050\ufeef\051\ufeef\052\ufeef\075\ufeef\113" +
    "\ufeef\116\ufeef\127\ufeef\130\ufeef\001\002\000\004\007\ufe93" +
    "\001\002\000\010\010\u023a\011\u022b\012\u022c\001\002\000" +
    "\044\006\ufef2\010\ufef2\011\ufef2\012\ufef2\013\ufef2\014\ufef2" +
    "\015\ufef2\020\ufef2\024\ufef2\025\ufef2\042\ufef2\050\ufef2\051" +
    "\ufef2\052\ufef2\075\ufef2\113\ufef2\130\ufef2\001\002\000\016" +
    "\007\u0223\010\u023e\054\u0224\055\u0225\056\u021e\057\u021c\001" +
    "\002\000\006\010\u0240\020\u023f\001\002\000\012\010\ufe90" +
    "\011\u022b\012\u022c\020\ufe90\001\002\000\044\006\ufe94\010" +
    "\ufe94\011\ufe94\012\ufe94\013\ufe94\014\ufe94\015\ufe94\020\ufe94" +
    "\024\ufe94\025\ufe94\042\ufe94\050\ufe94\051\ufe94\052\ufe94\075" +
    "\ufe94\113\ufe94\130\ufe94\001\002\000\014\007\u0223\054\u0224" +
    "\055\u0225\056\u021e\057\u021c\001\002\000\044\006\ufe95\010" +
    "\ufe95\011\ufe95\012\ufe95\013\ufe95\014\ufe95\015\ufe95\020\ufe95" +
    "\024\ufe95\025\ufe95\042\ufe95\050\ufe95\051\ufe95\052\ufe95\075" +
    "\ufe95\113\ufe95\130\ufe95\001\002\000\012\010\ufe91\011\u022b" +
    "\012\u022c\020\ufe91\001\002\000\004\054\ufec2\001\002\000" +
    "\006\020\u0262\113\ufec5\001\002\000\012\007\u0249\054\u0248" +
    "\055\u024d\056\u024a\001\002\000\016\007\u0223\054\u0224\055" +
    "\u0225\056\u021e\057\u021c\134\u025c\001\002\000\006\113\ufec3" +
    "\127\u0247\001\002\000\012\007\u0249\054\u0248\055\u024d\056" +
    "\u024a\001\002\000\016\011\ufedd\012\ufedd\013\ufedd\014\ufedd" +
    "\015\ufedd\130\ufedd\001\002\000\014\007\132\054\130\055" +
    "\137\056\133\057\136\001\002\000\016\011\ufedf\012\ufedf" +
    "\013\ufedf\014\ufedf\015\ufedf\130\ufedf\001\002\000\010\011" +
    "\u0256\012\u0257\130\u0255\001\002\000\016\011\ufee0\012\ufee0" +
    "\013\ufee0\014\ufee0\015\ufee0\130\ufee0\001\002\000\016\011" +
    "\ufede\012\ufede\013\ufede\014\ufede\015\ufede\130\ufede\001\002" +
    "\000\016\011\ufee4\012\ufee4\013\u0250\014\u0251\015\u024f\130" +
    "\ufee4\001\002\000\012\007\u0249\054\u0248\055\u024d\056\u024a" +
    "\001\002\000\012\007\u0249\054\u0248\055\u024d\056\u024a\001" +
    "\002\000\012\007\u0249\054\u0248\055\u024d\056\u024a\001\002" +
    "\000\016\011\ufee2\012\ufee2\013\ufee2\014\ufee2\015\ufee2\130" +
    "\ufee2\001\002\000\016\011\ufee3\012\ufee3\013\ufee3\014\ufee3" +
    "\015\ufee3\130\ufee3\001\002\000\016\011\ufee1\012\ufee1\013" +
    "\ufee1\014\ufee1\015\ufee1\130\ufee1\001\002\000\006\113\ufee8" +
    "\127\ufee8\001\002\000\012\007\u0249\054\u0248\055\u024d\056" +
    "\u024a\001\002\000\012\007\u0249\054\u0248\055\u024d\056\u024a" +
    "\001\002\000\016\011\ufee5\012\ufee5\013\u0250\014\u0251\015" +
    "\u024f\130\ufee5\001\002\000\016\011\ufee6\012\ufee6\013\u0250" +
    "\014\u0251\015\u024f\130\ufee6\001\002\000\010\010\u025b\011" +
    "\150\012\151\001\002\000\016\011\ufedc\012\ufedc\013\ufedc" +
    "\014\ufedc\015\ufedc\130\ufedc\001\002\000\004\007\u025e\001" +
    "\002\000\004\113\ufec4\001\002\000\004\010\u025f\001\002" +
    "\000\004\113\ufe97\001\002\000\010\011\u0256\012\u0257\130" +
    "\u0261\001\002\000\006\113\ufee7\127\ufee7\001\002\000\004" +
    "\054\ufec1\001\002\000\004\136\u0306\001\002\000\004\002" +
    "\uff0f\001\002\000\004\002\ufed5\001\002\000\004\113\u0305" +
    "\001\002\000\004\114\u0268\001\002\000\036\003\u027d\021" +
    "\036\022\037\023\035\033\063\034\u026d\035\114\040\u0276" +
    "\045\u0274\054\u0278\132\u0277\133\u027b\134\u025c\135\u0269\001" +
    "\002\000\004\007\u02ff\001\002\000\004\007\u02f5\001\002" +
    "\000\004\114\u02dd\001\002\000\004\115\u02dc\001\002\000" +
    "\004\007\u02d9\001\002\000\042\003\u027d\021\036\022\037" +
    "\023\035\033\063\034\u026d\035\114\040\u0276\045\u0274\054" +
    "\u0278\112\ufed3\115\ufed3\132\u0277\133\u027b\134\u025c\135\u0269" +
    "\001\002\000\004\113\u02d7\001\002\000\042\003\ufed1\021" +
    "\ufed1\022\ufed1\023\ufed1\033\ufed1\034\ufed1\035\ufed1\040\ufed1" +
    "\045\ufed1\054\ufed1\112\ufed1\115\ufed1\132\ufed1\133\ufed1\134" +
    "\ufed1\135\ufed1\001\002\000\004\114\u02d4\001\002\000\022" +
    "\007\u028e\026\u028f\036\u028b\037\u028d\054\u0224\055\u0225\056" +
    "\u021e\057\u021c\001\002\000\004\113\u02cc\001\002\000\004" +
    "\007\u02c9\001\002\000\004\113\u02c8\001\002\000\004\007" +
    "\u02c5\001\002\000\004\007\u02bd\001\002\000\012\006\u02b8" +
    "\007\ufe92\016\u0226\127\u0228\001\002\000\004\114\u02a5\001" +
    "\002\000\004\113\u02a4\001\002\000\004\007\u02a2\001\002" +
    "\000\042\003\ufecd\021\ufecd\022\ufecd\023\ufecd\033\ufecd\034" +
    "\ufecd\035\ufecd\040\ufecd\045\ufecd\054\ufecd\112\ufecd\115\ufecd" +
    "\132\ufecd\133\ufecd\134\ufecd\135\ufecd\001\002\000\042\003" +
    "\ufec8\021\ufec8\022\ufec8\023\ufec8\033\ufec8\034\ufec8\035\ufec8" +
    "\040\ufec8\045\ufec8\054\ufec8\112\ufec8\115\ufec8\132\ufec8\133" +
    "\ufec8\134\ufec8\135\ufec8\001\002\000\042\003\ufece\021\ufece" +
    "\022\ufece\023\ufece\033\ufece\034\ufece\035\ufece\040\ufece\045" +
    "\ufece\054\ufece\112\ufece\115\ufece\132\ufece\133\ufece\134\ufece" +
    "\135\ufece\001\002\000\004\113\u02a1\001\002\000\004\114" +
    "\u029e\001\002\000\004\113\u029d\001\002\000\004\114\u0283" +
    "\001\002\000\036\003\u027d\021\036\022\037\023\035\033" +
    "\063\034\u026d\035\114\040\u0276\045\u0274\054\u0278\132\u0277" +
    "\133\u027b\134\u025c\135\u0269\001\002\000\004\115\u0285\001" +
    "\002\000\004\034\u0286\001\002\000\004\007\u0287\001\002" +
    "\000\022\007\u028e\026\u028f\036\u028b\037\u028d\054\u0224\055" +
    "\u0225\056\u021e\057\u021c\001\002\000\012\010\ufe8a\024\ufe8a" +
    "\025\ufe8a\113\ufe8a\001\002\000\012\010\ufe8c\024\ufe8c\025" +
    "\u0299\113\ufe8c\001\002\000\006\010\u029b\024\u0297\001\002" +
    "\000\012\010\ufe87\024\ufe87\025\ufe87\113\ufe87\001\002\000" +
    "\022\006\206\011\u022b\012\u022c\042\212\050\207\051\211" +
    "\052\205\075\213\001\002\000\012\010\ufe86\024\ufe86\025" +
    "\ufe86\113\ufe86\001\002\000\022\007\u028e\026\u028f\036\u028b" +
    "\037\u028d\054\u0224\055\u0225\056\u021e\057\u021c\001\002\000" +
    "\020\007\u028e\036\u028b\037\u028d\054\u0224\055\u0225\056\u021e" +
    "\057\u021c\001\002\000\012\010\ufe88\024\ufe88\025\ufe88\113" +
    "\ufe88\001\002\000\012\010\ufe89\024\ufe89\025\ufe89\113\ufe89" +
    "\001\002\000\006\010\u0296\024\u0297\001\002\000\024\006" +
    "\206\010\u023a\011\u022b\012\u022c\042\212\050\207\051\211" +
    "\052\205\075\213\001\002\000\014\007\u0223\054\u0224\055" +
    "\u0225\056\u021e\057\u021c\001\002\000\016\010\ufe85\011\u022b" +
    "\012\u022c\024\ufe85\025\ufe85\113\ufe85\001\002\000\012\010" +
    "\ufe84\024\ufe84\025\ufe84\113\ufe84\001\002\000\022\007\u028e" +
    "\026\u028f\036\u028b\037\u028d\054\u0224\055\u0225\056\u021e\057" +
    "\u021c\001\002\000\012\010\ufe8d\024\ufe8d\025\u0299\113\ufe8d" +
    "\001\002\000\022\007\u028e\026\u028f\036\u028b\037\u028d\054" +
    "\u0224\055\u0225\056\u021e\057\u021c\001\002\000\012\010\ufe8b" +
    "\024\ufe8b\025\ufe8b\113\ufe8b\001\002\000\004\113\u029c\001" +
    "\002\000\042\003\ufea3\021\ufea3\022\ufea3\023\ufea3\033\ufea3" +
    "\034\ufea3\035\ufea3\040\ufea3\045\ufea3\054\ufea3\112\ufea3\115" +
    "\ufea3\132\ufea3\133\ufea3\134\ufea3\135\ufea3\001\002\000\042" +
    "\003\ufeca\021\ufeca\022\ufeca\023\ufeca\033\ufeca\034\ufeca\035" +
    "\ufeca\040\ufeca\045\ufeca\054\ufeca\112\ufeca\115\ufeca\132\ufeca" +
    "\133\ufeca\134\ufeca\135\ufeca\001\002\000\036\003\u027d\021" +
    "\036\022\037\023\035\033\063\034\u026d\035\114\040\u0276" +
    "\045\u0274\054\u0278\132\u0277\133\u027b\134\u025c\135\u0269\001" +
    "\002\000\004\115\u02a0\001\002\000\042\003\ufea5\021\ufea5" +
    "\022\ufea5\023\ufea5\033\ufea5\034\ufea5\035\ufea5\040\ufea5\045" +
    "\ufea5\054\ufea5\112\ufea5\115\ufea5\132\ufea5\133\ufea5\134\ufea5" +
    "\135\ufea5\001\002\000\042\003\ufecc\021\ufecc\022\ufecc\023" +
    "\ufecc\033\ufecc\034\ufecc\035\ufecc\040\ufecc\045\ufecc\054\ufecc" +
    "\112\ufecc\115\ufecc\132\ufecc\133\ufecc\134\ufecc\135\ufecc\001" +
    "\002\000\004\010\u02a3\001\002\000\004\113\ufe9c\001\002" +
    "\000\042\003\ufecb\021\ufecb\022\ufecb\023\ufecb\033\ufecb\034" +
    "\ufecb\035\ufecb\040\ufecb\045\ufecb\054\ufecb\112\ufecb\115\ufecb" +
    "\132\ufecb\133\ufecb\134\ufecb\135\ufecb\001\002\000\036\003" +
    "\u027d\021\036\022\037\023\035\033\063\034\u026d\035\114" +
    "\040\u0276\045\u0274\054\u0278\132\u0277\133\u027b\134\u025c\135" +
    "\u0269\001\002\000\004\115\u02a7\001\002\000\044\003\ufeb6" +
    "\021\ufeb6\022\ufeb6\023\ufeb6\033\ufeb6\034\ufeb6\035\ufeb6\040" +
    "\ufeb6\041\u02a9\045\ufeb6\054\ufeb6\112\ufeb6\115\ufeb6\132\ufeb6" +
    "\133\ufeb6\134\ufeb6\135\ufeb6\001\002\000\004\114\u02b4\001" +
    "\002\000\006\040\u02b0\114\ufeb5\001\002\000\042\003\ufebb" +
    "\021\ufebb\022\ufebb\023\ufebb\033\ufebb\034\ufebb\035\ufebb\040" +
    "\ufebb\045\ufebb\054\ufebb\112\ufebb\115\ufebb\132\ufebb\133\ufebb" +
    "\134\ufebb\135\ufebb\001\002\000\004\114\u02ac\001\002\000" +
    "\036\003\u027d\021\036\022\037\023\035\033\063\034\u026d" +
    "\035\114\040\u0276\045\u0274\054\u0278\132\u0277\133\u027b\134" +
    "\u025c\135\u0269\001\002\000\004\115\u02ae\001\002\000\044" +
    "\003\ufeb6\021\ufeb6\022\ufeb6\023\ufeb6\033\ufeb6\034\ufeb6\035" +
    "\ufeb6\040\ufeb6\041\u02a9\045\ufeb6\054\ufeb6\112\ufeb6\115\ufeb6" +
    "\132\ufeb6\133\ufeb6\134\ufeb6\135\ufeb6\001\002\000\042\003" +
    "\ufeb7\021\ufeb7\022\ufeb7\023\ufeb7\033\ufeb7\034\ufeb7\035\ufeb7" +
    "\040\ufeb7\045\ufeb7\054\ufeb7\112\ufeb7\115\ufeb7\132\ufeb7\133" +
    "\ufeb7\134\ufeb7\135\ufeb7\001\002\000\004\007\u02b1\001\002" +
    "\000\022\007\u028e\026\u028f\036\u028b\037\u028d\054\u0224\055" +
    "\u0225\056\u021e\057\u021c\001\002\000\006\010\u02b3\024\u0297" +
    "\001\002\000\004\114\ufeb4\001\002\000\036\003\u027d\021" +
    "\036\022\037\023\035\033\063\034\u026d\035\114\040\u0276" +
    "\045\u0274\054\u0278\132\u0277\133\u027b\134\u025c\135\u0269\001" +
    "\002\000\004\115\u02b6\001\002\000\042\003\ufeb8\021\ufeb8" +
    "\022\ufeb8\023\ufeb8\033\ufeb8\034\ufeb8\035\ufeb8\040\ufeb8\045" +
    "\ufeb8\054\ufeb8\112\ufeb8\115\ufeb8\132\ufeb8\133\ufeb8\134\ufeb8" +
    "\135\ufeb8\001\002\000\006\006\u02bb\127\u0235\001\002\000" +
    "\016\007\u0223\054\u0224\055\u0225\056\u021e\057\u021c\134\u025c" +
    "\001\002\000\010\011\u022b\012\u022c\113\ufebe\001\002\000" +
    "\004\113\ufebc\001\002\000\014\007\u0223\054\u0224\055\u0225" +
    "\056\u021e\057\u021c\001\002\000\010\011\u022b\012\u022c\113" +
    "\ufebd\001\002\000\016\007\u0223\053\u02bf\054\u0224\055\u0225" +
    "\056\u021e\057\u021c\001\002\000\012\010\ufe99\011\u022b\012" +
    "\u022c\020\ufe99\001\002\000\006\010\ufe98\020\ufe98\001\002" +
    "\000\006\010\u02c3\020\u02c2\001\002\000\006\010\ufe9a\020" +
    "\ufe9a\001\002\000\016\007\u0223\053\u02bf\054\u0224\055\u0225" +
    "\056\u021e\057\u021c\001\002\000\004\113\ufe9d\001\002\000" +
    "\006\010\ufe9b\020\ufe9b\001\002\000\022\007\u028e\026\u028f" +
    "\036\u028b\037\u028d\054\u0224\055\u0225\056\u021e\057\u021c\001" +
    "\002\000\006\010\u02c7\024\u0297\001\002\000\004\114\ufeb9" +
    "\001\002\000\042\003\ufed0\021\ufed0\022\ufed0\023\ufed0\033" +
    "\ufed0\034\ufed0\035\ufed0\040\ufed0\045\ufed0\054\ufed0\112\ufed0" +
    "\115\ufed0\132\ufed0\133\ufed0\134\ufed0\135\ufed0\001\002\000" +
    "\004\054\u02ca\001\002\000\004\010\u02cb\001\002\000\004" +
    "\114\ufeb3\001\002\000\042\003\ufec9\021\ufec9\022\ufec9\023" +
    "\ufec9\033\ufec9\034\ufec9\035\ufec9\040\ufec9\045\ufec9\054\ufec9" +
    "\112\ufec9\115\ufec9\132\ufec9\133\ufec9\134\ufec9\135\ufec9\001" +
    "\002\000\006\024\u0297\113\u02ce\001\002\000\004\054\u02cf" +
    "\001\002\000\004\006\u02d2\001\002\000\004\010\u02d1\001" +
    "\002\000\004\114\ufea2\001\002\000\014\007\u0223\054\u0224" +
    "\055\u0225\056\u021e\057\u021c\001\002\000\010\010\ufe9e\011" +
    "\u022b\012\u022c\001\002\000\036\003\u027d\021\036\022\037" +
    "\023\035\033\063\034\u026d\035\114\040\u0276\045\u0274\054" +
    "\u0278\132\u0277\133\u027b\134\u025c\135\u0269\001\002\000\004" +
    "\115\u02d6\001\002\000\042\003\ufea4\021\ufea4\022\ufea4\023" +
    "\ufea4\033\ufea4\034\ufea4\035\ufea4\040\ufea4\045\ufea4\054\ufea4" +
    "\112\ufea4\115\ufea4\132\ufea4\133\ufea4\134\ufea4\135\ufea4\001" +
    "\002\000\042\003\ufecf\021\ufecf\022\ufecf\023\ufecf\033\ufecf" +
    "\034\ufecf\035\ufecf\040\ufecf\045\ufecf\054\ufecf\112\ufecf\115" +
    "\ufecf\132\ufecf\133\ufecf\134\ufecf\135\ufecf\001\002\000\042" +
    "\003\ufed2\021\ufed2\022\ufed2\023\ufed2\033\ufed2\034\ufed2\035" +
    "\ufed2\040\ufed2\045\ufed2\054\ufed2\112\ufed2\115\ufed2\132\ufed2" +
    "\133\ufed2\134\ufed2\135\ufed2\001\002\000\022\007\u028e\026" +
    "\u028f\036\u028b\037\u028d\054\u0224\055\u0225\056\u021e\057\u021c" +
    "\001\002\000\006\010\u02db\024\u0297\001\002\000\004\114" +
    "\ufe9f\001\002\000\004\002\ufed6\001\002\000\004\047\u02e2" +
    "\001\002\000\004\115\u02f4\001\002\000\010\046\ufeae\047" +
    "\ufeae\115\ufeb0\001\002\000\006\046\u0167\047\u02e2\001\002" +
    "\000\004\116\u02ea\001\002\000\012\054\u02e3\055\u02e8\056" +
    "\u02e6\057\u02e7\001\002\000\006\116\ufea7\127\u0228\001\002" +
    "\000\004\116\ufea6\001\002\000\004\116\ufeac\001\002\000" +
    "\004\116\ufeaa\001\002\000\004\116\ufea9\001\002\000\004" +
    "\116\ufea8\001\002\000\006\116\ufe8e\127\u0235\001\002\000" +
    "\036\003\u027d\021\036\022\037\023\035\033\063\034\u026d" +
    "\035\114\040\u0276\045\u0274\054\u0278\132\u0277\133\u027b\134" +
    "\u025c\135\u0269\001\002\000\004\112\u02ec\001\002\000\004" +
    "\113\u02ed\001\002\000\010\046\ufead\047\ufead\115\ufead\001" +
    "\002\000\004\116\u02f0\001\002\000\010\046\ufeaf\047\ufeaf" +
    "\115\ufeb2\001\002\000\036\003\u027d\021\036\022\037\023" +
    "\035\033\063\034\u026d\035\114\040\u0276\045\u0274\054\u0278" +
    "\132\u0277\133\u027b\134\u025c\135\u0269\001\002\000\004\112" +
    "\u02f2\001\002\000\004\113\u02f3\001\002\000\004\115\ufeb1" +
    "\001\002\000\042\003\ufeba\021\ufeba\022\ufeba\023\ufeba\033" +
    "\ufeba\034\ufeba\035\ufeba\040\ufeba\045\ufeba\054\ufeba\112\ufeba" +
    "\115\ufeba\132\ufeba\133\ufeba\134\ufeba\135\ufeba\001\002\000" +
    "\012\021\036\022\037\023\035\054\u02f6\001\002\000\004" +
    "\006\u02fc\001\002\000\004\054\u02f8\001\002\000\004\006" +
    "\u02f9\001\002\000\014\007\u0223\054\u0224\055\u0225\056\u021e" +
    "\057\u021c\001\002\000\010\011\u022b\012\u022c\113\u02fb\001" +
    "\002\000\022\007\ufea1\026\ufea1\036\ufea1\037\ufea1\054\ufea1" +
    "\055\ufea1\056\ufea1\057\ufea1\001\002\000\014\007\u0223\054" +
    "\u0224\055\u0225\056\u021e\057\u021c\001\002\000\010\011\u022b" +
    "\012\u022c\113\u02fe\001\002\000\022\007\ufea0\026\ufea0\036" +
    "\ufea0\037\ufea0\054\ufea0\055\ufea0\056\ufea0\057\ufea0\001\002" +
    "\000\004\053\u0300\001\002\000\004\020\u0301\001\002\000" +
    "\004\017\u0302\001\002\000\004\054\u0303\001\002\000\004" +
    "\010\u0304\001\002\000\004\113\ufec7\001\002\000\014\003" +
    "\ufeed\021\ufeed\022\ufeed\023\ufeed\105\ufeed\001\002\000\004" +
    "\007\u0307\001\002\000\004\010\u0308\001\002\000\004\114" +
    "\ufed4\001\002\000\014\003\ufeec\021\ufeec\022\ufeec\023\ufeec" +
    "\105\ufeec\001\002\000\004\054\u030b\001\002\000\004\006" +
    "\u030c\001\002\000\012\007\u030d\055\u0311\056\u0310\057\u0312" +
    "\001\002\000\014\007\132\054\130\055\137\056\133\057" +
    "\136\001\002\000\016\011\uff02\012\uff02\013\uff02\014\uff02" +
    "\015\uff02\113\uff02\001\002\000\016\011\uff06\012\uff06\013" +
    "\u0318\014\u0319\015\u0317\113\uff06\001\002\000\016\011\uff01" +
    "\012\uff01\013\uff01\014\uff01\015\uff01\113\uff01\001\002\000" +
    "\016\011\uff00\012\uff00\013\uff00\014\uff00\015\uff00\113\uff00" +
    "\001\002\000\016\011\ufeff\012\ufeff\013\ufeff\014\ufeff\015" +
    "\ufeff\113\ufeff\001\002\000\010\011\u0314\012\u0315\113\uff09" +
    "\001\002\000\012\007\u030d\055\u0311\056\u0310\057\u0312\001" +
    "\002\000\012\007\u030d\055\u0311\056\u0310\057\u0312\001\002" +
    "\000\016\011\uff07\012\uff07\013\u0318\014\u0319\015\u0317\113" +
    "\uff07\001\002\000\012\007\u030d\055\u0311\056\u0310\057\u0312" +
    "\001\002\000\012\007\u030d\055\u0311\056\u0310\057\u0312\001" +
    "\002\000\012\007\u030d\055\u0311\056\u0310\057\u0312\001\002" +
    "\000\016\011\uff04\012\uff04\013\uff04\014\uff04\015\uff04\113" +
    "\uff04\001\002\000\016\011\uff05\012\uff05\013\uff05\014\uff05" +
    "\015\uff05\113\uff05\001\002\000\016\011\uff03\012\uff03\013" +
    "\uff03\014\uff03\015\uff03\113\uff03\001\002\000\016\011\uff08" +
    "\012\uff08\013\u0318\014\u0319\015\u0317\113\uff08\001\002\000" +
    "\010\010\u031f\011\150\012\151\001\002\000\016\011\ufefe" +
    "\012\ufefe\013\ufefe\014\ufefe\015\ufefe\113\ufefe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u031d\000\010\002\006\003\004\012\005\001\001\000" +
    "\002\001\001\000\006\004\353\017\355\001\001\000\004" +
    "\006\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\016\017\021\015\022\016\023\013\024\012\025\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\030\350\031\055\032\065\033\066\034\060" +
    "\040\051\041\053\042\103\043\063\044\075\051\101\052" +
    "\110\060\064\061\057\062\052\066\072\067\054\070\050" +
    "\071\056\076\102\077\077\262\106\001\001\000\002\001" +
    "\001\000\056\030\100\031\055\032\065\033\066\034\060" +
    "\040\051\041\053\042\103\043\063\044\075\051\101\052" +
    "\110\060\064\061\057\062\052\066\072\067\054\070\050" +
    "\071\056\076\102\077\077\262\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\026\026\027\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\041\001\001\000" +
    "\002\001\001\000\004\015\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\026\046\027\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\030\333\031\055\032\065" +
    "\033\066\034\060\040\051\041\053\042\103\043\063\044" +
    "\075\051\101\052\110\060\064\061\057\062\052\066\072" +
    "\067\054\070\050\071\056\076\102\077\077\262\106\001" +
    "\001\000\056\030\327\031\055\032\065\033\066\034\060" +
    "\040\051\041\053\042\103\043\063\044\075\051\101\052" +
    "\110\060\064\061\057\062\052\066\072\067\054\070\050" +
    "\071\056\076\102\077\077\262\106\001\001\000\002\001" +
    "\001\000\014\035\326\036\267\046\272\047\134\050\133" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\032\313\034\060\040\051" +
    "\041\053\042\103\043\063\044\075\051\101\052\110\060" +
    "\064\061\057\062\052\066\072\067\054\070\050\071\056" +
    "\076\102\077\077\262\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\046\175\047\134\050\133\053\260\054\200\055\177\056" +
    "\170\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\100\231\101\230\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\030\224" +
    "\031\055\032\065\033\066\034\060\040\051\041\053\042" +
    "\103\043\063\044\075\051\101\052\110\060\064\061\057" +
    "\062\052\066\072\067\054\070\050\071\056\076\102\077" +
    "\077\262\106\001\001\000\002\001\001\000\020\046\175" +
    "\047\134\050\133\053\171\054\200\055\177\056\170\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\030\162" +
    "\031\055\032\065\033\066\034\060\040\051\041\053\042" +
    "\103\043\063\044\075\051\101\052\110\060\064\061\057" +
    "\062\052\066\072\067\054\070\050\071\056\076\102\077" +
    "\077\262\106\001\001\000\004\063\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\065\154\001\001\000\002\001\001\000\004" +
    "\065\123\001\001\000\010\046\130\047\134\050\133\001" +
    "\001\000\004\015\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\065\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\046\145\047\134" +
    "\050\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\050\144\001\001\000\004\050\143\001\001\000\004\050" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\047" +
    "\152\050\133\001\001\000\006\047\151\050\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\065\160" +
    "\001\001\000\012\046\130\047\134\050\133\262\161\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\046" +
    "\215\047\134\050\133\053\214\054\200\055\177\056\170" +
    "\001\001\000\004\057\207\001\001\000\012\046\175\047" +
    "\134\050\133\056\203\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\046\175\047\134\050\133\055\202\056" +
    "\170\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\050" +
    "\213\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\057" +
    "\207\001\001\000\002\001\001\000\016\046\175\047\134" +
    "\050\133\054\220\055\177\056\170\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\030\245\031\055\032\065\033\066" +
    "\034\060\040\051\041\053\042\103\043\063\044\075\051" +
    "\101\052\110\060\064\061\057\062\052\066\072\067\054" +
    "\070\050\071\056\076\102\077\077\262\106\001\001\000" +
    "\004\101\241\001\001\000\004\102\235\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\030\244" +
    "\031\055\032\065\033\066\034\060\040\051\041\053\042" +
    "\103\043\063\044\075\051\101\052\110\060\064\061\057" +
    "\062\052\066\072\067\054\070\050\071\056\076\102\077" +
    "\077\262\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\046\254\047\134\050\133\001\001\000\004\015\251" +
    "\001\001\000\002\001\001\000\010\046\253\047\134\050" +
    "\133\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\046\257\047\134\050\133\262\256\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\075\261\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\035\271\036\267\046\272" +
    "\047\134\050\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\036\275\046\272\047\134\050\133\001\001\000" +
    "\002\001\001\000\014\035\277\036\267\046\272\047\134" +
    "\050\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\035\314" +
    "\036\267\046\272\047\134\050\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\046\316\047\134\050\133" +
    "\001\001\000\004\045\317\001\001\000\002\001\001\000" +
    "\004\102\321\001\001\000\002\001\001\000\004\102\325" +
    "\001\001\000\004\102\324\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\046\175\047\134\050\133\053\332\054" +
    "\200\055\177\056\170\001\001\000\002\001\001\000\010" +
    "\072\335\073\334\074\336\001\001\000\056\030\347\031" +
    "\055\032\065\033\066\034\060\040\051\041\053\042\103" +
    "\043\063\044\075\051\101\052\110\060\064\061\057\062" +
    "\052\066\072\067\054\070\050\071\056\076\102\077\077" +
    "\262\106\001\001\000\002\001\001\000\056\030\343\031" +
    "\055\032\065\033\066\034\060\040\051\041\053\042\103" +
    "\043\063\044\075\051\101\052\110\060\064\061\057\062" +
    "\052\066\072\067\054\070\050\071\056\076\102\077\077" +
    "\262\106\001\001\000\002\001\001\000\020\046\175\047" +
    "\134\050\133\053\341\054\200\055\177\056\170\001\001" +
    "\000\004\075\342\001\001\000\002\001\001\000\010\072" +
    "\344\073\334\074\336\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\u01a2" +
    "\013\u01a3\001\001\000\002\001\001\000\004\007\356\001" +
    "\001\000\010\016\361\103\360\104\357\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\110\365\127\366\001\001" +
    "\000\002\001\001\000\024\016\373\105\377\111\367\112" +
    "\371\113\374\114\370\115\u0100\135\372\154\375\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\u018e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\016\u0117\044\u0104\116\u0118\117\u010e" +
    "\120\u0110\124\u0108\125\u0113\130\u0111\131\u0119\132\u0116\134" +
    "\u010a\135\u0107\136\u0105\137\u0112\140\u011a\144\u0109\262\u0115" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\016\u0117\044\u0104\124\u0148\125\u0113\130\u0111\131\u0119\132" +
    "\u0116\134\u010a\135\u0107\136\u0105\137\u0112\140\u011a\144\u0109" +
    "\262\u0115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\046\175\047\134\050" +
    "\133\053\u013a\054\200\055\177\056\170\001\001\000\004" +
    "\015\u0131\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\016\u0117\044\u0104\116\u011c\117\u010e" +
    "\120\u0110\124\u0108\125\u0113\130\u0111\131\u0119\132\u0116\134" +
    "\u010a\135\u0107\136\u0105\137\u0112\140\u011a\144\u0109\262\u0115" +
    "\001\001\000\002\001\001\000\010\141\u0121\142\u0120\143" +
    "\u011e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\016\u0117\044\u0104\124" +
    "\u0123\125\u0113\130\u0111\131\u0119\132\u0116\134\u010a\135\u0107" +
    "\136\u0105\137\u0112\140\u011a\144\u0109\262\u0115\001\001\000" +
    "\002\001\001\000\010\141\u0125\142\u0120\143\u011e\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\046\175\047" +
    "\134\050\133\053\u0128\054\200\055\177\056\170\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\016\u0117\044" +
    "\u0104\116\u012b\117\u010e\120\u0110\124\u0108\125\u0113\130\u0111" +
    "\131\u0119\132\u0116\134\u010a\135\u0107\136\u0105\137\u0112\140" +
    "\u011a\144\u0109\262\u0115\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\016\u0117\044\u0104\116\u012e\117\u010e\120" +
    "\u0110\124\u0108\125\u0113\130\u0111\131\u0119\132\u0116\134\u010a" +
    "\135\u0107\136\u0105\137\u0112\140\u011a\144\u0109\262\u0115\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\064\u0133\001\001\000\004\065\u0138\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\065\u0136\001\001" +
    "\000\002\001\001\000\012\046\130\047\134\050\133\262" +
    "\u0139\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\133\u013c\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\046\u013f\047\134\050\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\016\u0117\044\u0104\116\u0144\117\u010e" +
    "\120\u0110\124\u0108\125\u0113\130\u0111\131\u0119\132\u0116\134" +
    "\u010a\135\u0107\136\u0105\137\u0112\140\u011a\144\u0109\262\u0115" +
    "\001\001\000\002\001\001\000\020\046\175\047\134\050" +
    "\133\053\u0146\054\200\055\177\056\170\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\046" +
    "\u014a\047\134\050\133\001\001\000\002\001\001\000\012" +
    "\046\u014d\047\134\050\133\262\u014c\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\046\175\047\134\050\133" +
    "\053\u014f\054\200\055\177\056\170\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\122\u0155\123\u0153\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\123\u015b\001\001\000" +
    "\002\001\001\000\044\016\u0117\044\u0104\116\u015d\117\u010e" +
    "\120\u0110\124\u0108\125\u0113\130\u0111\131\u0119\132\u0116\134" +
    "\u010a\135\u0107\136\u0105\137\u0112\140\u011a\144\u0109\262\u0115" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\145" +
    "\u0164\146\u0160\147\u0162\150\u0163\001\001\000\002\001\001" +
    "\000\004\123\u016e\001\001\000\010\146\u0160\150\u0168\237" +
    "\u0167\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\016\u0117\044\u0104\116\u016a\117\u010e\120\u0110" +
    "\124\u0108\125\u0113\130\u0111\131\u0119\132\u0116\134\u010a\135" +
    "\u0107\136\u0105\137\u0112\140\u011a\144\u0109\262\u0115\001\001" +
    "\000\004\151\u016b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\016\u0117" +
    "\044\u0104\116\u0170\117\u010e\120\u0110\124\u0108\125\u0113\130" +
    "\u0111\131\u0119\132\u0116\134\u010a\135\u0107\136\u0105\137\u0112" +
    "\140\u011a\144\u0109\262\u0115\001\001\000\004\151\u0171\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\046\175" +
    "\047\134\050\133\053\u0174\054\200\055\177\056\170\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\u0179\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\046\u017c\047\134\050\133" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\046" +
    "\u017f\047\134\050\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\122\u0182\123\u0153\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\016\u0117\044\u0104\116\u0188\117" +
    "\u010e\120\u0110\124\u0108\125\u0113\130\u0111\131\u0119\132\u0116" +
    "\134\u010a\135\u0107\136\u0105\137\u0112\140\u011a\144\u0109\262" +
    "\u0115\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\016\u0117\044\u0104\116\u018b\117\u010e\120\u0110\124\u0108\125" +
    "\u0113\130\u0111\131\u0119\132\u0116\134\u010a\135\u0107\136\u0105" +
    "\137\u0112\140\u011a\144\u0109\262\u0115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\064\u0133" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\u0192\106\u0193\107\u0194\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\u0197\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\065\u0138\001\001\000\010\015\u0192\106" +
    "\u019c\107\u0194\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\015\u0192\106\u019f\107\u0194\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\u01ff" +
    "\020\u0201\001\001\000\004\010\u01a5\001\001\000\002\001" +
    "\001\000\006\155\u01a8\157\u01a9\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\156\u01ac\162\u01ad\163\u01ab\001\001\000\036\164\u01bb" +
    "\165\u01b2\167\u01c2\170\u01b0\171\u01ba\172\u01b9\173\u01af\174" +
    "\u01b4\175\u01b1\176\u01c0\177\u01c3\200\u01bc\201\u01b6\262\u01bf" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\046\175\047\134\050\133\053" +
    "\u01eb\054\200\055\177\056\170\001\001\000\002\001\001" +
    "\000\010\046\u01ea\047\134\050\133\001\001\000\002\001" +
    "\001\000\020\046\175\047\134\050\133\053\u01d6\054\200" +
    "\055\177\056\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\036\u01c5\046\272\047\134\050\133\166" +
    "\u01c6\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\036\u01c9\046\272\047\134\050\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\046\u01ce\047\134\050\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\156\u01ac" +
    "\162\u01d1\163\u01ab\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\046\u01d5\047\134\050\133\262\u01d4\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\156\u01ac\162\u01d9\163\u01ab\001\001" +
    "\000\002\001\001\000\010\202\u01de\203\u01df\204\u01dd\001" +
    "\001\000\002\001\001\000\020\046\175\047\134\050\133" +
    "\053\u01e7\054\200\055\177\056\170\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\156\u01ac" +
    "\162\u01e1\163\u01ab\001\001\000\002\001\001\000\010\202" +
    "\u01e3\203\u01df\204\u01dd\001\001\000\002\001\001\000\010" +
    "\156\u01ac\162\u01e5\163\u01ab\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\156\u01ac\162\u01ee\163\u01ab\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\046\u01f1\047\134\050" +
    "\133\001\001\000\002\001\001\000\004\102\u01f4\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\160\u01fa\161\u01f9\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\205\u0202\001" +
    "\001\000\010\212\u0204\213\u0205\221\u0207\001\001\000\004" +
    "\015\u0309\001\001\000\012\015\u0213\213\u0214\220\u0212\224" +
    "\u0211\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\264\u020b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\015\u0213\206\u0263\207\u0266" +
    "\224\u0265\001\001\000\004\226\u0217\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\227\u0242\300\u0245\001\001" +
    "\000\002\001\001\000\004\227\u0219\001\001\000\002\001" +
    "\001\000\014\246\u021f\247\u0221\250\u021c\263\u021e\270\u0220" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\246\u0238\247\u0221\250\u021c\263" +
    "\u021e\270\u0220\001\001\000\004\214\u0226\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\246" +
    "\u0228\247\u0221\250\u021c\263\u021e\270\u0220\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\247\u0233\250\u021c\263" +
    "\u021e\270\u0220\001\001\000\012\247\u022c\250\u021c\263\u021e" +
    "\270\u0220\001\001\000\002\001\001\000\010\250\u0232\263" +
    "\u021e\270\u0220\001\001\000\010\250\u0231\263\u021e\270\u0220" +
    "\001\001\000\010\250\u0230\263\u021e\270\u0220\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\246\u0235\247\u0221\250\u021c\263\u021e\270" +
    "\u0220\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\246" +
    "\u023c\247\u0221\250\u021c\263\u021e\265\u023b\270\u0220\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\246\u0240\247\u0221\250\u021c\263\u021e\270\u0220\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\301\u025f\302\u024d\303\u024b\001\001" +
    "\000\016\246\u021f\247\u0221\250\u021c\261\u025c\263\u021e\270" +
    "\u0220\001\001\000\002\001\001\000\010\301\u024a\302\u024d" +
    "\303\u024b\001\001\000\002\001\001\000\010\046\u0259\047" +
    "\134\050\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\303\u0253\001\001\000\004\303\u0252\001\001\000\004" +
    "\303\u0251\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\302\u0258\303\u024b" +
    "\001\001\000\006\302\u0257\303\u024b\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\015\u0213" +
    "\044\u0269\061\u0281\126\u0280\210\u026d\222\u026b\223\u026f\224" +
    "\u0274\230\u026e\231\u027d\232\u0278\236\u026a\245\u0271\252\u027b" +
    "\253\u027f\254\u0270\256\u027e\261\u0279\263\u0272\270\u0220\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\015\u0213\044" +
    "\u0269\061\u0281\126\u0280\223\u02d7\224\u0274\230\u026e\231\u027d" +
    "\232\u0278\236\u026a\245\u0271\252\u027b\253\u027f\254\u0270\256" +
    "\u027e\261\u0279\263\u0272\270\u0220\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\246\u028b\247" +
    "\u0221\250\u021c\263\u021e\267\u028f\270\u0220\271\u02cc\272\u0288" +
    "\273\u0287\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\214\u02b6\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\015\u0213\044\u0269\061\u0281" +
    "\126\u0280\210\u026d\222\u0283\223\u026f\224\u0274\230\u026e\231" +
    "\u027d\232\u0278\236\u026a\245\u0271\252\u027b\253\u027f\254\u0270" +
    "\256\u027e\261\u0279\263\u0272\270\u0220\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\246\u028b" +
    "\247\u0221\250\u021c\263\u021e\267\u028f\270\u0220\271\u0289\272" +
    "\u0288\273\u0287\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\057\u0293\001" +
    "\001\000\002\001\001\000\024\246\u0292\247\u0221\250\u021c" +
    "\263\u021e\267\u028f\270\u0220\271\u0291\272\u0288\273\u0287\001" +
    "\001\000\016\246\u028b\247\u0221\250\u021c\263\u021e\267\u0290" +
    "\270\u0220\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\057\u0293\001\001\000\014\246\u0294" +
    "\247\u0221\250\u021c\263\u021e\270\u0220\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\246\u028b\247\u0221\250\u021c" +
    "\263\u021e\267\u028f\270\u0220\272\u0297\273\u0287\001\001\000" +
    "\002\001\001\000\020\246\u028b\247\u0221\250\u021c\263\u021e" +
    "\267\u028f\270\u0220\273\u0299\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\015\u0213\044\u0269\061\u0281\126\u0280\210\u026d\222\u029e\223" +
    "\u026f\224\u0274\230\u026e\231\u027d\232\u0278\236\u026a\245\u0271" +
    "\252\u027b\253\u027f\254\u0270\256\u027e\261\u0279\263\u0272\270" +
    "\u0220\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\015\u0213\044\u0269\061\u0281\126\u0280\210\u026d" +
    "\222\u02a5\223\u026f\224\u0274\230\u026e\231\u027d\232\u0278\236" +
    "\u026a\245\u0271\252\u027b\253\u027f\254\u0270\256\u027e\261\u0279" +
    "\263\u0272\270\u0220\001\001\000\002\001\001\000\010\233" +
    "\u02a9\234\u02a7\235\u02aa\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\015" +
    "\u0213\044\u0269\061\u0281\126\u0280\210\u026d\222\u02ac\223\u026f" +
    "\224\u0274\230\u026e\231\u027d\232\u0278\236\u026a\245\u0271\252" +
    "\u027b\253\u027f\254\u0270\256\u027e\261\u0279\263\u0272\270\u0220" +
    "\001\001\000\002\001\001\000\010\233\u02ae\234\u02a7\235" +
    "\u02aa\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\246\u028b\247\u0221\250\u021c\263\u021e\267\u028f\270\u0220\271" +
    "\u02b1\272\u0288\273\u0287\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\015\u0213\044\u0269\061\u0281\126\u0280\210" +
    "\u026d\222\u02b4\223\u026f\224\u0274\230\u026e\231\u027d\232\u0278" +
    "\236\u026a\245\u0271\252\u027b\253\u027f\254\u0270\256\u027e\261" +
    "\u0279\263\u0272\270\u0220\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\246\u02b8\247\u0221\250" +
    "\u021c\261\u02b9\263\u021e\270\u0220\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\246\u02bb\247\u0221\250\u021c\263" +
    "\u021e\270\u0220\001\001\000\002\001\001\000\020\246\u02bd" +
    "\247\u0221\250\u021c\257\u02bf\260\u02c0\263\u021e\270\u0220\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\246\u02bd\247\u0221\250\u021c\260" +
    "\u02c3\263\u021e\270\u0220\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\246\u028b\247\u0221\250\u021c\263\u021e\267" +
    "\u028f\270\u0220\271\u02c5\272\u0288\273\u0287\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\244\u02cf\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\246\u02d2" +
    "\247\u0221\250\u021c\263\u021e\270\u0220\001\001\000\002\001" +
    "\001\000\052\015\u0213\044\u0269\061\u0281\126\u0280\210\u026d" +
    "\222\u02d4\223\u026f\224\u0274\230\u026e\231\u027d\232\u0278\236" +
    "\u026a\245\u0271\252\u027b\253\u027f\254\u0270\256\u027e\261\u0279" +
    "\263\u0272\270\u0220\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\246\u028b" +
    "\247\u0221\250\u021c\263\u021e\267\u028f\270\u0220\271\u02d9\272" +
    "\u0288\273\u0287\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\240\u02e0\241\u02dd\242\u02df\251" +
    "\u02de\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\237\u02ed\240\u02e0\251\u02ee\001\001\000\002\001\001\000" +
    "\006\243\u02e4\274\u02e3\001\001\000\004\214\u02e8\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\015\u0213\044\u0269\061\u0281\126\u0280\210\u026d\222\u02ea\223" +
    "\u026f\224\u0274\230\u026e\231\u027d\232\u0278\236\u026a\245\u0271" +
    "\252\u027b\253\u027f\254\u0270\256\u027e\261\u0279\263\u0272\270" +
    "\u0220\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\015" +
    "\u0213\044\u0269\061\u0281\126\u0280\210\u026d\222\u02f0\223\u026f" +
    "\224\u0274\230\u026e\231\u027d\232\u0278\236\u026a\245\u0271\252" +
    "\u027b\253\u027f\254\u0270\256\u027e\261\u0279\263\u0272\270\u0220" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\u02f6\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\246" +
    "\u02f9\247\u0221\250\u021c\263\u021e\270\u0220\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\246\u02fc\247\u0221\250" +
    "\u021c\263\u021e\270\u0220\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\275\u0312\276\u030e\277\u030d\001\001\000" +
    "\010\046\u031d\047\134\050\133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\276\u031c\277\u030d" +
    "\001\001\000\006\276\u0315\277\u030d\001\001\000\002\001" +
    "\001\000\004\277\u031b\001\001\000\004\277\u031a\001\001" +
    "\000\004\277\u0319\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SyntaxMlgAnalyzer$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SyntaxMlgAnalyzer$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SyntaxMlgAnalyzer$do_action(act_num, parser, stack, top,this);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    

public boolean SyntaxError;
    public boolean SyntaxRecoverableError;
    public TestManager testManager;
    public TranslateControlerTAC translateControlerTAC;

    public void setTestManager(TestManager testManager) {
        this.testManager = testManager;
        testManager.creatFatherAmbit();
    }

public void setTranslateControlerTAC(TranslateControlerTAC translateControlerTAC) {
        this.translateControlerTAC = translateControlerTAC;
                            
    }

     public void syntax_error(Symbol s){
        try {
            String lexema = s.value.toString();
            int fila = s.right;
            int columna = s.left;
            OutputErrors.syntacticRecovered(testManager.getMainFrame().getOutputPannel(), lexema, columna, fila, s);
        } catch (Exception e) {
            System.out.println("error");
            int fila = s.right;
            int columna = s.left;
            System.out.println("\t \tFila: " + fila + "\n");
            System.out.println("\t \tColumna: " + columna + "\n");
        }

    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        try{
            String lexema = s.value.toString();
            int fila = s.right;
            int columna = s.left;
        OutputErrors.syntacticNotRecovered(testManager.getMainFrame().getOutputPannel(), lexema, columna, fila, s);

        } catch (Exception ex) {
            
         }
    }

    public void syntaxerrorhelp(){


    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SyntaxMlgAnalyzer$actions {


     protected void mostrarErrores(int numero, Symbol s,SyntaxMlgAnalyzer sma) {
         JTextPane text= sma.testManager.getMainFrame().getOutputPannel();
    switch (numero) {
                case 1:
                    OutputErrors.syntaxFunctionVB(text,s);
                    break;
                case 2:
                    
                    break;
                 case 3:
                    
                    break;
                case 4:
                    break;
                default:
                    throw new AssertionError();
            }
        

    }

  private final SyntaxMlgAnalyzer parser;

  /** Constructor */
  CUP$SyntaxMlgAnalyzer$actions(SyntaxMlgAnalyzer parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SyntaxMlgAnalyzer$do_action(
    int                        CUP$SyntaxMlgAnalyzer$act_num,
    java_cup.runtime.lr_parser CUP$SyntaxMlgAnalyzer$parser,
    java.util.Stack            CUP$SyntaxMlgAnalyzer$stack,
    int                        CUP$SyntaxMlgAnalyzer$top,SyntaxMlgAnalyzer sma)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SyntaxMlgAnalyzer$result;

      /* select the action based on the action number */
      switch (CUP$SyntaxMlgAnalyzer$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // BoolValueC ::= PARENTHESIS_A OpBoolC PARENTHESIS_B 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT=val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueC",181, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // BoolValueC ::= NumberValueC ExBoolVb NumberValueC 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int exValleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int exValright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object exVal = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateBoolType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdBoolQuadruple(s1.getQuadruple(),s2.getQuadruple(),(Integer)exVal);
                                                                    RESULT=sma.translateControlerTAC.getcurrentTempQuads();
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueC",181, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // BoolValueC ::= FALSE 
            {
              Object RESULT =null;
		 Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.BOOL_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL_BOOL,0,1,null);
		                    RESULT=sma.translateControlerTAC.getcurrentTempQuads();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueC",181, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // BoolValueC ::= TRUE 
            {
              Object RESULT =null;
		 Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.BOOL_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL_BOOL,1,1,null);
		                    RESULT=sma.translateControlerTAC.getcurrentTempQuads();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueC",181, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // OpBoolC3 ::= BoolValueC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(val!=null){
                   RESULT = sma.translateControlerTAC.getBoolQuadControl().convertQuadToBool(((ArrayList<Object>)val)); 
        }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBoolC3",185, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // OpBoolC3 ::= NOT BoolValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBoolC3",185, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // OpBoolC2 ::= OpBoolC3 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBoolC2",184, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // OpBoolC2 ::= OpBoolC2 AND OpBoolC3 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(val1!=null &&val2!=null){
                                            RESULT= sma.translateControlerTAC.getBoolQuadControl().operateBoolQuad(val1,val2,Operation.OP_AND);}
                                            
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBoolC2",184, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // OpBoolC ::= OpBoolC2 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBoolC",183, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // OpBoolC ::= OpBoolC OR OpBoolC2 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(val1!=null &&val2!=null){
                                            RESULT= sma.translateControlerTAC.getBoolQuadControl().operateBoolQuad(val1,val2,Operation.OP_OR);}
                                            
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBoolC",183, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // ArrayVal ::= ID Dimensions 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ArrayVal",186, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // ValueC ::= NumberValueC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValueC",180, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // ParametersC ::= NumberValueC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> params=new ArrayList<Object>();
                            if(val!=null){
                                SynthesizedOpAsst soa=(SynthesizedOpAsst)val;
                                //sma.translateControlerTAC.creatTempIdQuad(Operation.PARAMS,null,null,soa.getQuadruple().getResult());
                                params.add(soa.getQuadruple().getResult());
                            }
                            RESULT=params;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParametersC",179, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // ParametersC ::= ParametersC COMMA NumberValueC 
            {
              Object RESULT =null;
		int paramsCleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int paramsCright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object paramsC = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> params=new ArrayList<Object>();
                            if(paramsC!=null){params.addAll((ArrayList<Object>)paramsC);}
                                                        if(val!=null){
                                SynthesizedOpAsst soa=(SynthesizedOpAsst)val;
                                //sma.translateControlerTAC.creatTempIdQuad(Operation.PARAMS,null,null,soa.getQuadruple().getResult());
                                params.add(soa.getQuadruple().getResult());
                            }
                            RESULT=params;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParametersC",179, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // FuntionIDsCall ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT = id;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FuntionIDsCall",182, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // FuntionIDsCall ::= ID POINT ID 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=id1+"."+id2;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FuntionIDsCall",182, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // FuntionCall ::= FuntionIDsCall PARENTHESIS_A PARENTHESIS_B 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		
                                                                            SynthesizedOpAsst sao=sma.testManager.verifyFunction((String)ids,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
                                                                            if(sao!=null){
                                                                                RESULT =sao;
                                                                            }else{
                                                                                sma.translateControlerTAC.removeIdQuads();
                                                                            }
                                                                        
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FuntionCall",177, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // FuntionCall ::= FuntionIDsCall PARENTHESIS_A ParametersC PARENTHESIS_B 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int paraleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object para = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		if(para!=null){
                                                                            SynthesizedOpAsst sao=sma.testManager.verifyFunction((String)ids,(ArrayList<Object>)para,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
                                                                            if(sao!=null){
                                                                                RESULT= sao;
                                                                            }else{
                                                                                sma.translateControlerTAC.removeIdQuads();
                                                                            }
                                                                        }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FuntionCall",177, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // Input ::= SCAN_F PARENTHESIS_A STRING COMMA AMPERSON ID PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Input",176, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // Getch ::= GETCH PARENTHESIS_A PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Getch",175, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // OutputValueC ::= STRING 
            {
              Object RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.add(sma.translateControlerTAC.createPrintQuad(string));
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValueC",174, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // OutputValueC ::= NumberValueC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll(sma.translateControlerTAC.getcurrentTempQuads());
                                    printQuad.add(sma.translateControlerTAC.createPrintQuad(val));
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValueC",174, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // OutputValuesC ::= OutputValueC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll((ArrayList<Object>)val);
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValuesC",173, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // OutputValuesC ::= OutputValuesC COMMA OutputValueC 
            {
              Object RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll((ArrayList<Object>)vals);
                                    printQuad.addAll((ArrayList<Object>)val);
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValuesC",173, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // OutputC ::= CLRSCR PARENTHESIS_A PARENTHESIS_B 
            {
              Object RESULT =null;
		sma.translateControlerTAC.addClrScrToCurrent();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputC",172, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // OutputC ::= PRINTF PARENTHESIS_A OutputValuesC PARENTHESIS_B 
            {
              Object RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		 if(vals!=null){
                                                                                                sma.translateControlerTAC.addQuadsToCurrent((ArrayList<Object>)vals);
                                                                                                
                                                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputC",172, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // AssignmentStepC ::= ID EQUAL NumberValueC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                        RESULT=sma.translateControlerTAC.getcurrentTempQuads();}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentStepC",162, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // WhileCHeader ::= WHILE PARENTHESIS_A OpBoolC PARENTHESIS_B 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT=op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("WhileCHeader",170, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // ForCHeaderStart ::= For PARENTHESIS_A ID EQUAL NumberValueC SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		Type type=sma.testManager.getTypeFromST(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    if(type!=null){
                                                    if(sma.testManager.getTypeManager().isNumerico(type.getNumber())){
                                                        
                                                        boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                            RESULT=new SemanticAsstIdQuad(id, sma.translateControlerTAC.getcurrentTempQuads());
                                                        }
                                                    }else{
                                                        sma.testManager.callNumericError(id,type,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    }}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForCHeaderStart",163, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // ForCHeaderStart ::= For PARENTHESIS_A Type ID EQUAL NumberValueC SEMICOLON 
            {
              Object RESULT =null;
		int type1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int type1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object type1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		 boolean boolExistence= sma.testManager.checkExistence(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                if(boolExistence){

                                                    if(sma.testManager.getTypeManager().isNumerico((Integer)type1)){
                                                        sma.testManager.insertTuple(id,(Integer)type1,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                            RESULT=new SemanticAsstIdQuad(id, sma.translateControlerTAC.getcurrentTempQuads());
                                                        }
                                                    }else{
                                                        sma.testManager.callNumericError(id,sma.testManager.getTypeManager().getType((Integer)type1),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    }
                                                }
                                                
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForCHeaderStart",163, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // ForCHeader ::= ForCHeaderStart OpBoolC SEMICOLON AssignmentStepC PARENTHESIS_B 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int stepleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int stepright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object step = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		if (id!=null) {
                    BoolQuad boolQuad=(BoolQuad)op;
                    SemanticAsstIdQuad saiq= (SemanticAsstIdQuad)id;
                    
                    
                     For f=sma.translateControlerTAC.createForAsst(saiq.getQuads(),step,boolQuad );
                    RESULT=f;}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForCHeader",169, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // CycleC ::= DoHeader LEFT_CB MainCode RIGHT_CB WHILE PARENTHESIS_A OpBoolC PARENTHESIS_B SEMICOLON 
            {
              Object RESULT =null;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-6)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-6)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-6)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		if(op!=null){
                                                                                sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.creatDoWhile((ArrayList<Object>)lines,(BoolQuad)op));
                                                                                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleC",168, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-8)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // CycleC ::= WhileCHeader LEFT_CB MainCode RIGHT_CB 
            {
              Object RESULT =null;
		int whileBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int whileBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object whileBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		BoolQuad bool=(BoolQuad)whileBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.addGotoWhileTags(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool)));
                                                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleC",168, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // CycleC ::= ForCHeader LEFT_CB MainCode RIGHT_CB 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		if(f!=null){
                                                                For fo=(For)f;
                                                                fo.addCode((ArrayList<Object>)lines);
                                                                sma.translateControlerTAC.addQuadsToCurrent(fo.convertToQuad());
                                                                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleC",168, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // CaseValueC ::= ArrayVal 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseValueC",161, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // CaseValueC ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type=sma.testManager.getTypeFromST(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                            if(type!=null){
                                RESULT=id;
                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseValueC",161, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // CaseValueC ::= CHAR 
            {
              Object RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=ch;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseValueC",161, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // CaseValueC ::= DECIMAL 
            {
              Object RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=dec;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseValueC",161, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // CaseValueC ::= NUMBER 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=num;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseValueC",161, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // CaseElseCHeader ::= DEFAULT 
            {
              Object RESULT =null;
		RESULT=Switch.ELSE;
                    sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseElseCHeader",157, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // CaseCHeader ::= CASE CaseValueC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=val;
                                            sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseCHeader",158, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // CaseC ::= CaseCHeader COLON MainCode BREAK SEMICOLON 
            {
              Object RESULT =null;
		int caseHleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int caseHright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object caseH = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		UniquenessTable ut=sma.testManager.createNewUniquenessTable();
                                                                        if(caseH!=null){
                                                                            
                                                                            boolean verified =ut.add(caseH,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                            if(verified){
                                                                            
                                                                            sma.translateControlerTAC.getSwitchAsst().addCases((String)caseH,(ArrayList<Object>)lines);}
                                                                            }
                                                                        RESULT=ut;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseC",167, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // CasesC2 ::= CaseC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesC2",160, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // CasesC2 ::= CasesC2 CaseC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesC2",160, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // CasesC ::= CaseC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesC",159, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // CasesC ::= CasesC2 CaseElseCHeader COLON MainCode BREAK SEMICOLON 
            {
              Object RESULT =null;
		int caseHleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int caseHright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object caseH = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		UniquenessTable ut=sma.testManager.createNewUniquenessTable();
                                                                        if(caseH!=null){
                                                                            
                                                                            boolean verified =ut.add(caseH,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                            if(verified){
                                                                            
                                                                            sma.translateControlerTAC.getSwitchAsst().addCases((String)caseH,(ArrayList<Object>)lines);}
                                                                            }
                                                                        RESULT=ut;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesC",159, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // CasesC ::= CasesC2 CaseC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesC",159, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // SwitchCHeader ::= SWITCH PARENTHESIS_A ID PARENTHESIS_B 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.translateControlerTAC.createSwitchAsst(id);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("SwitchCHeader",156, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // ElseIfCHeader ::= ELSE IF PARENTHESIS_A OpBoolC PARENTHESIS_B 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT =op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseIfCHeader",155, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // ElseCHeader ::= ELSE 
            {
              Object RESULT =null;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseCHeader",154, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // ElseC ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseC",153, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // ElseC ::= ElseIfCHeader LEFT_CB MainCode RIGHT_CB ElseC 
            {
              Object RESULT =null;
		int ifBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int ifBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object ifBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int elseBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int elseBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object elseBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(ifBool!=null){
                                                                    BoolQuad bool=(BoolQuad)ifBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    if(elseBool!=null){bool.changeFatherNoBool((ArrayList<Object>)elseBool);}
                                                                                    RESULT =sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool);
                                                                                    
                                                                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseC",153, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // ElseC ::= ElseCHeader LEFT_CB MainCode RIGHT_CB 
            {
              Object RESULT =null;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT=lines;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseC",153, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // IfCHeader ::= IF PARENTHESIS_A OpBoolC PARENTHESIS_B 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT=op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IfCHeader",152, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // ConditionC ::= SwitchCHeader LEFT_CB CasesC RIGHT_CB 
            {
              Object RESULT =null;
		sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(sma.translateControlerTAC.getSwitchAsst().getFatherCases()));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionC",151, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // ConditionC ::= IfCHeader LEFT_CB MainCode RIGHT_CB ElseC 
            {
              Object RESULT =null;
		int ifBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int ifBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object ifBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int elseBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int elseBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object elseBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		BoolQuad bool=(BoolQuad)ifBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    if(elseBool!=null){bool.changeFatherNoBool((ArrayList<Object>)elseBool);}
                                                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool));
                                                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionC",151, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // AssignmentC ::= ID EQUAL Getch 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		Type type = sma.testManager.getTypeFromST(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                    if(type!=null){
                                        sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getch(id));}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentC",150, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // AssignmentC ::= ID Dimensions EQUAL NumberValueC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int dimleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int dimright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object dim = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(dim !=null&& val!=null){
                            SynthesizedOpAsst soa=sma.testManager.getArrayType(id,dim,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
                            boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,soa.getQuadruple().getResult());
                                                        sma.translateControlerTAC.acceptAllIdQuas();}}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentC",150, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // AssignmentC ::= ID EQUAL NumberValueC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                        sma.translateControlerTAC.acceptAllIdQuas();}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentC",150, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // AssiC ::= 
            {
              Object RESULT =null;
		System.out.println("ASSI VACIO");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssiC",149, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // AssiC ::= EQUAL NumberValueC 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT =val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssiC",149, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // IdsC ::= ID AssiC COMMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.testManager.insertPreTuple(id,null,val,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        //if(val!=null){ 
                                                          //  sma.translateControlerTAC.createTempIdQuadAssign(val,id);}
                                                       
                                                        sma.translateControlerTAC.nextIdQuad();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IdsC",148, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // IdsC ::= IdsC ID AssiC COMMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.testManager.insertPreTuple(id,null,val,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        //if(val!=null){ 
                                                          //  sma.translateControlerTAC.createTempIdQuadAssign(val,id);}
                                                       
                                                        sma.translateControlerTAC.nextIdQuad();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IdsC",148, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // DeclarationC ::= Type ID DimensionsDec 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object dims = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(dims!=null&&!sma.testManager.checkExistence(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()))){

                        ArrayList<Object> dimensions=(ArrayList<Object>)dims;
                        sma.testManager.insertArray(id, (Integer) type, dimensions, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                        sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.createArrayQuads(id,dimensions));
                    }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationC",146, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // DeclarationC ::= Type ID EQUAL Getch 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		if(!sma.testManager.checkExistence(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()))){
                                                      
                                                      sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getch(id));     
                        }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationC",146, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // DeclarationC ::= Type ID AssiC 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		 sma.testManager.insertPreTuple(id,null,val, 0,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                    sma.testManager.insertPreTuplesToSymbolTable((Integer)type,0,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
                                   sma.translateControlerTAC.nextIdQuad(); 
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationC",146, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // DeclarationC ::= Type IdsC ID AssiC 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		 sma.testManager.insertPreTuple(id,null,val, 0,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                    sma.testManager.insertPreTuplesToSymbolTable((Integer)type,0,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
                                   sma.translateControlerTAC.nextIdQuad(); 
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationC",146, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // InputJ ::= SCAN_F PARENTHESIS_A STRING COMMA AMPERSON ID PARENTHESIS_B 
            {
              Object RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		 String split= sma.testManager.testInput(id, string, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                        if(split!=null){
                                                                                sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.createInputQuads(string,id,split));
                                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InputJ",84, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // MainLineCode ::= error 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",145, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // MainLineCode ::= FuntionCall SEMICOLON 
            {
              Object RESULT =null;
		sma.translateControlerTAC.acceptAllIdQuas();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",145, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // MainLineCode ::= InputJ SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",145, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // MainLineCode ::= Getch SEMICOLON 
            {
              Object RESULT =null;
		sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getch(null));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",145, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // MainLineCode ::= OutputC SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",145, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // MainLineCode ::= CycleC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",145, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // MainLineCode ::= ConditionC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",145, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // MainLineCode ::= AssignmentC SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",145, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // MainLineCode ::= DeclarationC SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",145, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // MainCode1 ::= MainLineCode 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainCode1",134, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // MainCode1 ::= MainCode1 MainLineCode 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainCode1",134, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // MainCode ::= MainCode1 
            {
              Object RESULT =null;
		RESULT=sma.translateControlerTAC.getcurrentQuads();
                                                    sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainCode",144, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // MainHeader ::= VOID_J MAIN PARENTHESIS_A PARENTHESIS_B 
            {
              Object RESULT =null;
		sma.testManager.creatSonAmbit();
                                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                                        String name =sma.testManager.insertFunction("main", null, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                RESULT= name;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainHeader",133, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // Main ::= error 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Main",132, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // Main ::= MainHeader LEFT_CB MainCode RIGHT_CB 
            {
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		ArrayList<Object>quad=new ArrayList<>();
                                                                        if(name!=null){
                                                                        quad=sma.translateControlerTAC.tagFunction((String)name,(ArrayList<Object>) lines);
                                                                         
                                                                          }
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    sma.translateControlerTAC.addQuadsToCurrent(quad);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Main",132, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // FuntionIDs ::= ID POINT MULTIPLICATION 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		sma.testManager.include(id1,"*",((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FuntionIDs",178, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // FuntionIDs ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.include(id,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FuntionIDs",178, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // FuntionIDs ::= ID POINT ID 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.include(id1,id2,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FuntionIDs",178, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // Include ::= INCLUDE LESS_THAN FuntionIDs GREATER_THAN 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Include",143, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // Include ::= INCLUDE STRING 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.include(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Include",143, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // NumDecC3 ::= PARENTHESIS_A NumberValue PARENTHESIS_B 
            {
              Object RESULT =null;
		int asstleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int asstright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object asst = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT=asst;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumDecC3",193, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // NumDecC3 ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=sma.testManager.getConstValue(val, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumDecC3",193, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // NumDecC3 ::= CHAR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		char charVal=val.charAt(1);
                 RESULT=(int)charVal;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumDecC3",193, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // NumDecC3 ::= NUMBER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		 RESULT=Integer.valueOf(val);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumDecC3",193, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // NumDecC2 ::= NumDecC3 
            {
              Object RESULT =null;
		int asstleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int asstright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object asst = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=asst;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumDecC2",192, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // NumDecC2 ::= NumDecC2 MOD NumDecC3 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                                    RESULT=(Integer)num1%(Integer)num2;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumDecC2",192, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // NumDecC2 ::= NumDecC2 DIVISION NumDecC3 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){
                                                            RESULT=(Integer)num1/(Integer)num2;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumDecC2",192, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // NumDecC2 ::= NumDecC2 MULTIPLICATION NumDecC3 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){
                                                                RESULT=(Integer)num1*(Integer)num2;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumDecC2",192, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // NumDecC ::= NumDecC2 
            {
              Object RESULT =null;
		int asstleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int asstright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object asst = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=asst;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumDecC",191, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // NumDecC ::= NumDecC MINUS NumDecC2 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){
                                                                RESULT=(Integer)num1-(Integer)num2;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumDecC",191, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // NumDecC ::= NumDecC PLUS NumDecC2 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               RESULT=(Integer)num1+(Integer)num2;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumDecC",191, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // DimensionsDec ::= LEFT_BRACKET NumDecC RIGHT_BRACKET 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		ArrayList<Object> dim=new ArrayList<>();
                                                            if(val!=null){
                                                                    dim.add(val);
                                                                RESULT =dim;}
                                                                
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DimensionsDec",190, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // DimensionsDec ::= DimensionsDec LEFT_BRACKET NumDecC RIGHT_BRACKET 
            {
              Object RESULT =null;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object dims = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		if(dims!=null){
                                                                            ArrayList<Object> dim=new ArrayList<>();
                                                                            ArrayList<Object> asst=(ArrayList<Object>) dims;
                                                                            dim.addAll(asst);
                                                                            if(val!=null){
                                                                                dim.add(val);
                                                                            }RESULT=dim;
                                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DimensionsDec",190, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // DeclarationGlobalC ::= Type ID 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationGlobalC",147, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // DeclarationGlobalC ::= Type ID DimensionsDec 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object dims = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(dims!=null&&!sma.testManager.checkExistence(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()))){

                        ArrayList<Object> dimensions=(ArrayList<Object>)dims;
                        sma.testManager.insertArray(id, (Integer) type, dimensions, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                        sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.createArrayQuads(id,dimensions));
                    }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationGlobalC",147, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // DeclarationGlobalC ::= Type ID EQUAL NumberValueC 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.insertPreTuple(id,null,val,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                        if(val!=null){ 
                                                            sma.translateControlerTAC.createTempIdQuadAssign(val,id);}
                                        sma.translateControlerTAC.nextIdQuad();
                                        sma.testManager.insertPreTuplesToSymbolTable((Integer)type,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
                                        
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationGlobalC",147, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // Globals ::= DeclarationC SEMICOLON 
            {
              Object RESULT =null;
		
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Globals",142, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // Globals ::= Globals DeclarationC SEMICOLON 
            {
              Object RESULT =null;
		
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Globals",142, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // Dimensions ::= LEFT_BRACKET NumberValueC RIGHT_BRACKET 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		ArrayList<Object> dim=new ArrayList<>();
                                                            if(val!=null){
                                                                SynthesizedOpAsst soa= (SynthesizedOpAsst)val;
                                                                if(sma.testManager.verifyIntegerValue(val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()))){
                                                                    dim.add(soa.getQuadruple().getResult());
                                                                RESULT =dim;}
                                                                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Dimensions",138, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // Dimensions ::= Dimensions LEFT_BRACKET NumberValueC RIGHT_BRACKET 
            {
              Object RESULT =null;
		int dimsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int dimsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object dims = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		if(dims!=null){
                                                                            ArrayList<Object> dim=new ArrayList<>();
                                                                            ArrayList<Object> asst=(ArrayList<Object>) dims;
                                                                            dim.addAll(asst);
                                                                            if(val!=null){
                                                                        SynthesizedOpAsst soa= (SynthesizedOpAsst)val;
                                                                        if(sma.testManager.verifyIntegerValue(val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()))){
                                                                                dim.add(soa.getQuadruple().getResult());
                                                                            RESULT =dim;}
}}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Dimensions",138, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // Number3C ::= FuntionCall 
            {
              Object RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int funright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object fun = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT= fun;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3C",166, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // Number3C ::= ID Dimensions 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int dimensionsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int dimensionsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object dimensions = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(dimensions!=null){
                                            RESULT =sma.testManager.getArrayType(id,dimensions,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);

                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3C",166, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // Number3C ::= PARENTHESIS_A NumberValueC PARENTHESIS_B 
            {
              Object RESULT =null;
		int asstleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int asstright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object asst = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT=asst;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3C",166, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // Number3C ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type=sma.testManager.getTypeFromST(val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                            if(type!=null){
                                Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL,sma.translateControlerTAC.getIdForStack(val),null,null);
                                RESULT=new SynthesizedOpAsst(quadruple,type);
                            }else{

                                RESULT=null;
                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3C",166, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // Number3C ::= CHAR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.CHAR_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL,val,null,null);
		                    RESULT=new SynthesizedOpAsst(quadruple,type);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3C",166, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // Number3C ::= DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.FLOAT_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL,val,null,null);
		                    RESULT=new SynthesizedOpAsst(quadruple,type);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3C",166, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // Number3C ::= NUMBER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		 Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.INTEGER_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL,val,null,null);
		                    RESULT=new SynthesizedOpAsst(quadruple,type);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3C",166, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // Number2C ::= Number3C 
            {
              Object RESULT =null;
		int asstleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int asstright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object asst = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=asst;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number2C",165, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // Number2C ::= Number2C MOD Number3C 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.MOD);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number2C",165, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // Number2C ::= Number2C DIVISION Number3C 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.DIVISION);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number2C",165, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // Number2C ::= Number2C MULTIPLICATION Number3C 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.MULTIPLICATION);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number2C",165, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // NumberValueC ::= Number2C 
            {
              Object RESULT =null;
		int asstleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int asstright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object asst = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=asst;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumberValueC",164, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // NumberValueC ::= NumberValueC MINUS Number2C 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.MINUS);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumberValueC",164, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // NumberValueC ::= NumberValueC PLUS Number2C 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.PLUS);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumberValueC",164, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // NumConst3 ::= PARENTHESIS_A NumberValue PARENTHESIS_B 
            {
              Object RESULT =null;
		int asstleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int asstright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object asst = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT=asst;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumConst3",189, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // NumConst3 ::= DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=new SyntaxConstAsst(Float.valueOf(val),TypeManager.FLOAT_TYPE);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumConst3",189, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // NumConst3 ::= CHAR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=new SyntaxConstAsst(val,TypeManager.CHAR_TYPE);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumConst3",189, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // NumConst3 ::= NUMBER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		 RESULT=new SyntaxConstAsst(Integer.valueOf(val),TypeManager.INTEGER_TYPE);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumConst3",189, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // NumConst2 ::= NumConst3 
            {
              Object RESULT =null;
		int asstleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int asstright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object asst = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=asst;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumConst2",188, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // NumConst2 ::= NumConst2 MOD NumConst3 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                                    RESULT=sma.testManager.operateConstAsst(num1,num2,Operation.MOD,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumConst2",188, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // NumConst2 ::= NumConst2 DIVISION NumConst3 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){
                                                            RESULT=sma.testManager.operateConstAsst(num1,num2,Operation.DIVISION,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumConst2",188, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // NumConst2 ::= NumConst2 MULTIPLICATION NumConst3 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){
                                                                RESULT=sma.testManager.operateConstAsst(num1,num2,Operation.MULTIPLICATION,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumConst2",188, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // NumConstC ::= NumConst2 
            {
              Object RESULT =null;
		int asstleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int asstright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object asst = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=asst;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumConstC",187, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // NumConstC ::= NumConstC MINUS NumConst2 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){
                                                                RESULT=sma.testManager.operateConstAsst(num1,num2,Operation.MINUS,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumConstC",187, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // NumConstC ::= NumConstC PLUS NumConst2 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               RESULT=sma.testManager.operateConstAsst(num1,num2,Operation.PLUS,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumConstC",187, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // Constante ::= CONST Type ID EQUAL NumConstC 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		
                                        if(val!=null){ 
                                            boolean bool=sma.testManager.insertConst(id,(Integer)type,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        if(bool){
                                                            Quadruple quad= sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                        quad.setConstante(true);
                                                        
                                                        }
                                                       
                                                       }
                                        
                                        
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Constante",137, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // Constantes ::= Constante SEMICOLON 
            {
              Object RESULT =null;
		sma.translateControlerTAC.acceptAllIdQuas();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Constantes",136, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // Constantes ::= Constantes Constante SEMICOLON 
            {
              Object RESULT =null;
		sma.translateControlerTAC.acceptAllIdQuas();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Constantes",136, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // Library ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Library",131, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // Library ::= Library Include 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Library",131, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // ProgramSeperator ::= PROGRAM_SEPERATOR 
            {
              Object RESULT =null;
		sma.testManager.creatSonAmbit();
                            sma.translateControlerTAC.createNewQuadrupleBlock();
                            sma.testManager.enterMain();
                             
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ProgramSeperator",14, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // Program ::= ProgramSeperator Library Constantes Globals Main 
            {
              Object RESULT =null;
		
                                    sma.testManager.finishAmbit();
                                    sma.translateControlerTAC.acceptCurrentBlock();
                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getcurrentQuads());
                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Program",7, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // ElifHeader ::= ELIF OpBool COLON 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT =op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElifHeader",129, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // ElseHeaderPY ::= ELSE COLON 
            {
              Object RESULT =null;
		sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseHeaderPY",130, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // Elif ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Elif",128, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // Elif ::= ElseHeaderPY INDENT FunctionLinesPY DEDENT 
            {
              Object RESULT =null;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT=lines;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Elif",128, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // Elif ::= ElifHeader INDENT FunctionLinesPY DEDENT Elif 
            {
              Object RESULT =null;
		int ifBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int ifBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object ifBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int elseBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int elseBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object elseBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(ifBool!=null){
                                                                    BoolQuad bool=(BoolQuad)ifBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    if(elseBool!=null){bool.changeFatherNoBool((ArrayList<Object>)elseBool);}
                                                                                    RESULT =sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool);
                                                                                    
                                                                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Elif",128, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // IfPYHeader ::= IF OpBool COLON 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT=op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IfPYHeader",127, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // IfPY ::= IfPYHeader INDENT FunctionLinesPY DEDENT Elif 
            {
              Object RESULT =null;
		int ifBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int ifBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object ifBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int elseBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int elseBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object elseBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		BoolQuad bool=(BoolQuad)ifBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    if(elseBool!=null){bool.changeFatherNoBool((ArrayList<Object>)elseBool);}
                                                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool));
                                                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IfPY",126, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // ConditionPY ::= IfPY 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionPY",125, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // AssignmentPY ::= ID EQUAL Input 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type = sma.testManager.getTypeFromST(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                            if(type!=null&&in!=null){
                                                SyntaxInputAsst sia= (SyntaxInputAsst) in;
                                                
                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.createInputQuads(id,sia.getString()));
                                                
                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentPY",124, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // AssignmentPY ::= ID EQUAL NumberValue 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num!=null){
                                                                    if(!sma.testManager.checkExistence(id)){
                                                                    sma.testManager.insertTuple(id,TypeManager.VAR_TYPE,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                            }
                                                           sma.translateControlerTAC.createTempIdQuadAssign(num,id);
                                                        sma.translateControlerTAC.acceptAllIdQuas();}
                                                    

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentPY",124, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // WhilePYHeader ::= WHILE OpBool COLON 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT=op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("WhilePYHeader",123, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // WhilePY ::= WhilePYHeader INDENT FunctionLinesPY DEDENT 
            {
              Object RESULT =null;
		int whileBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int whileBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object whileBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		BoolQuad bool=(BoolQuad)whileBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.addGotoWhileTags(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool)));
                                                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("WhilePY",122, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // ForStartPy ::= FOR 
            {
              Object RESULT =null;
		sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForStartPy",119, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // ForPYHeader2 ::= ForStartPy ID IN RANGE PARENTHESIS_A NumberValue 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if (id!=null) {
                    if(!sma.testManager.checkExistence(id)){
                        sma.testManager.insertTuple(id,TypeManager.VAR_TYPE,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                       }
                       sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                       RESULT=new SemanticAsstIdQuad(id, sma.translateControlerTAC.getcurrentTempQuads());
                                                        
                    
                    }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForPYHeader2",121, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // ForPYHeader ::= ForPYHeader2 COMMA NumberValue PARENTHESIS_B 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		if (id!=null) {
                    SemanticAsstIdQuad saiq= (SemanticAsstIdQuad)id;
                    SynthesizedOpAsst s1= (SynthesizedOpAsst)num;
                    Quadruple quadruple=sma.translateControlerTAC.operateIdBoolQuadruple(saiq.getId(),s1.getQuadruple(),Operation.EQUAL_BOOL);
                    BoolQuad bool =sma.translateControlerTAC.getBoolQuadControl().convertQuadToBool(sma.translateControlerTAC.getcurrentTempQuads());
                     For f=sma.translateControlerTAC.createForAsst(saiq.getQuads(), "1", bool, saiq.getId());
                    RESULT=f;}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForPYHeader",120, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // ForPYHeader ::= ForPYHeader2 COMMA NumberValue COMMA CaseValue PARENTHESIS_B 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int stepleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int stepright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object step = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		if (id!=null) {
                    SemanticAsstIdQuad saiq= (SemanticAsstIdQuad)id;
                    SynthesizedOpAsst s1= (SynthesizedOpAsst)num;
                    Quadruple quadruple=sma.translateControlerTAC.operateIdBoolQuadruple(saiq.getId(),s1.getQuadruple(),Operation.EQUAL_BOOL);
                    BoolQuad bool =sma.translateControlerTAC.getBoolQuadControl().convertQuadToBool(sma.translateControlerTAC.getcurrentTempQuads());
                     For f=sma.translateControlerTAC.createForAsst(saiq.getQuads(), (String) step, bool, saiq.getId());
                    RESULT=f;}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForPYHeader",120, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // ForPY ::= ForPYHeader COLON INDENT FunctionLinesPY DEDENT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		if(f!=null){
                                                                For fo=(For)f;
                                                                fo.addCode((ArrayList<Object>)lines);
                                                                sma.translateControlerTAC.addQuadsToCurrent(fo.convertToQuad());
                                                                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForPY",118, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // CyclePY ::= WhilePY 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CyclePY",117, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // CyclePY ::= ForPY 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CyclePY",117, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // OutputValuesPY ::= ValueVb 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll((ArrayList<Object>)val);
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValuesPY",116, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // OutputValuesPY ::= OutputValuesPY COMMA ValueVb 
            {
              Object RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll((ArrayList<Object>)vals);
                                    printQuad.addAll((ArrayList<Object>)val);
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValuesPY",116, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // OutputPY ::= PRINT PARENTHESIS_A OutputValuesPY PARENTHESIS_B 
            {
              Object RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		 if(vals!=null){
                                                                                                sma.translateControlerTAC.addQuadsToCurrent((ArrayList<Object>)vals);
                                                                                                
                                                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputPY",115, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // LineCodePY ::= error 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodePY",114, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // LineCodePY ::= ConditionPY 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodePY",114, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // LineCodePY ::= AssignmentPY 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodePY",114, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // LineCodePY ::= CyclePY 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodePY",114, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // LineCodePY ::= OutputPY 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodePY",114, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // LineCodePY ::= Input 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(in!=null){
                                    SyntaxInputAsst sia= (SyntaxInputAsst)in;
                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.createInputQuads(null,sia.getString()));
                                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodePY",114, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // LinesPY ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LinesPY",113, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // LinesPY ::= LinesPY LineCodePY 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LinesPY",113, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // FunctionLinesPY1 ::= LinesPY RETURN NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionLinesPY1",108, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // FunctionLinesPY1 ::= LinesPY 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionLinesPY1",108, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // FunctionLinesPY ::= FunctionLinesPY1 
            {
              Object RESULT =null;
		RESULT=sma.translateControlerTAC.getcurrentQuads();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionLinesPY",112, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // IdsPY ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.getParameterControl().insertParameter(TypeManager.VAR_TYPE,id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IdsPY",111, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // IdsPY ::= IdsPY COMMA ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.getParameterControl().insertParameter(TypeManager.VAR_TYPE,id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IdsPY",111, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // ParametersPY ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParametersPY",110, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // ParametersPY ::= IdsPY 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParametersPY",110, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // FunctionPYHeader ::= DEF ID PARENTHESIS_A ParametersPY PARENTHESIS_B COLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		sma.testManager.creatSonAmbit();
                                                                                            sma.translateControlerTAC.createNewQuadrupleBlock();
                                                                                            String name =sma.testManager.insertFunction(id,TypeManager.VAR_TYPE, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                RESULT= name;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionPYHeader",109, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // FunctionPY ::= error 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionPY",107, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // FunctionPY ::= FunctionPYHeader INDENT FunctionLinesPY DEDENT 
            {
              Object RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int funright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object fun = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		ArrayList<Object>quad=new ArrayList<>();
                                                                        if(fun!=null){
                                                                        quad=sma.translateControlerTAC.tagFunction((String)fun,(ArrayList<Object>) ins);
                                                                         
                                                                          }
                                                                         sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    sma.translateControlerTAC.addQuadsToCurrent(quad);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionPY",107, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // PythonCode ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("PythonCode",6, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // PythonCode ::= PythonCode FunctionPY 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("PythonCode",6, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // PythonSeperator ::= PYTHON_SEPERATOR 
            {
              Object RESULT =null;
		sma.testManager.creatSonAmbit();
                            sma.translateControlerTAC.createNewQuadrupleBlock();
                             
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("PythonSeperator",9, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // Python ::= PythonSeperator PythonCode 
            {
              Object RESULT =null;
		sma.testManager.switchNextTypes();
                                            sma.testManager.finishAmbit();
                                    sma.translateControlerTAC.acceptCurrentBlock();
                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getcurrentQuads());
                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Python",3, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // BreakJ ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BreakJ",103, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // CaseJHeader ::= CASE ValJ 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=val;
                                            sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseJHeader",100, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // CaseJ ::= CaseJHeader COLON LineCodesJ BreakJ 
            {
              Object RESULT =null;
		int caseJleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int caseJright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object caseJ = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		UniquenessTable ut=sma.testManager.createNewUniquenessTable();
                                                                        if(caseJ!=null){
                                                                            
                                                                            boolean verified =ut.add(caseJ,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                            if(verified){
                                                                            
                                                                            sma.translateControlerTAC.getSwitchAsst().addCases((String)caseJ,(ArrayList<Object>)lines);}
                                                                            }
                                                                        RESULT=ut;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseJ",102, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // CasesJ2 ::= CaseJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesJ2",101, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // CasesJ2 ::= CasesJ2 CaseJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesJ2",101, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // CasesJ1 ::= CaseJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesJ1",99, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // CasesJ1 ::= CasesJ2 CaseElseCHeader COLON LineCodesJ BreakJ 
            {
              Object RESULT =null;
		int caseJleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int caseJright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object caseJ = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		UniquenessTable ut=sma.testManager.createNewUniquenessTable();
                                                                        if(caseJ!=null){
                                                                            
                                                                            boolean verified =ut.add(caseJ,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                            if(verified){
                                                                            
                                                                            sma.translateControlerTAC.getSwitchAsst().addCases((String)caseJ,(ArrayList<Object>)lines);}
                                                                            }
                                                                        RESULT=ut;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesJ1",99, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // CasesJ1 ::= CasesJ2 CaseJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesJ1",99, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // SwitchJHeader ::= SWITCH_J PARENTHESIS_A ID PARENTHESIS_B 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.translateControlerTAC.createSwitchAsst(id);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("SwitchJHeader",98, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // ElseIfJHeader ::= ELSE IF PARENTHESIS_A OpBool PARENTHESIS_B 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT =op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseIfJHeader",96, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // ElseJHeader ::= ELSE 
            {
              Object RESULT =null;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseJHeader",97, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // ElseJ ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseJ",95, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // ElseJ ::= ElseIfJHeader LEFT_CB LineCodeJ RIGHT_CB ElseJ 
            {
              Object RESULT =null;
		int ifBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int ifBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object ifBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int elseBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int elseBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object elseBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(ifBool!=null){
                                                                    BoolQuad bool=(BoolQuad)ifBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    if(elseBool!=null){bool.changeFatherNoBool((ArrayList<Object>)elseBool);}
                                                                                    RESULT =sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool);
                                                                                    
                                                                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseJ",95, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // ElseJ ::= ElseJHeader LEFT_CB LineCodesJ RIGHT_CB 
            {
              Object RESULT =null;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT=lines;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseJ",95, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // IfJHeader ::= IF PARENTHESIS_A OpBool PARENTHESIS_B 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT=op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IfJHeader",94, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // ConditionJ ::= SwitchJHeader LEFT_CB CasesJ1 RIGHT_CB 
            {
              Object RESULT =null;
		sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(sma.translateControlerTAC.getSwitchAsst().getFatherCases()));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionJ",93, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // ConditionJ ::= IfJHeader LEFT_CB LineCodesJ RIGHT_CB ElseJ 
            {
              Object RESULT =null;
		int ifBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int ifBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object ifBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int elseBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int elseBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object elseBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		BoolQuad bool=(BoolQuad)ifBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    if(elseBool!=null){bool.changeFatherNoBool((ArrayList<Object>)elseBool);}
                                                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool));
                                                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionJ",93, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // AssignmentJ ::= ID EQUAL Input 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type = sma.testManager.getTypeFromST(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                            if(type!=null&&in!=null){
                                                SyntaxInputAsst sia= (SyntaxInputAsst) in;
                                                if(sma.testManager.verifyType(type.getNumber(),sia.getType(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),id)){
                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.createInputQuads(id,sia.getString()));
                                                }
                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentJ",92, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // AssignmentJ ::= ID EQUAL NumberValue 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                        sma.translateControlerTAC.acceptAllIdQuas();}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentJ",92, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // DeclarationJ ::= Public Type ID EQUAL Input 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(in!=null&&!sma.testManager.checkExistence(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()))){
                                                        SyntaxInputAsst sia = (SyntaxInputAsst)in;

                                                      if(sma.testManager.verifyType((Integer)type,sia.getType(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),id)){
                                                          sma.testManager.insertTuple(id,(Integer)type,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.createInputQuads(id,sia.getString()));
                                                }       
                        }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationJ",91, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // DeclarationJ ::= Public Type IdsVb 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.testManager.insertPreTuplesToSymbolTable((Integer)type,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationJ",91, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // WhileJHeader ::= WHILE PARENTHESIS_A OpBool PARENTHESIS_B 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT=op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("WhileJHeader",90, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // ForJHeaderStarter ::= For PARENTHESIS_A ID EQUAL NumberValue SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		Type type=sma.testManager.getTypeFromST(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    if(type!=null){
                                                    if(sma.testManager.getTypeManager().isNumerico(type.getNumber())){
                                                        
                                                        boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                            RESULT=new SemanticAsstIdQuad(id, sma.translateControlerTAC.getcurrentTempQuads());
                                                        }
                                                    }else{
                                                        sma.testManager.callNumericError(id,type,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    }}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForJHeaderStarter",88, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // ForJHeaderStarter ::= For PARENTHESIS_A Type ID EQUAL NumberValue SEMICOLON 
            {
              Object RESULT =null;
		int type1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int type1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object type1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		 boolean boolExistence= sma.testManager.checkExistence(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                if(boolExistence){

                                                    if(sma.testManager.getTypeManager().isNumerico((Integer)type1)){
                                                        sma.testManager.insertTuple(id,(Integer)type1,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                            RESULT=new SemanticAsstIdQuad(id, sma.translateControlerTAC.getcurrentTempQuads());
                                                        }
                                                    }else{
                                                        sma.testManager.callNumericError(id,sma.testManager.getTypeManager().getType((Integer)type1),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    }
                                                }
                                                
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForJHeaderStarter",88, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // AssignmentStepJ ::= ID EQUAL NumberValue 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                        RESULT=sma.translateControlerTAC.getcurrentTempQuads();}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentStepJ",89, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // ForJHeader ::= ForJHeaderStarter OpBool SEMICOLON AssignmentStepJ PARENTHESIS_B 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int stepleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int stepright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object step = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		if (id!=null) {
                    BoolQuad boolQuad=(BoolQuad)op;
                    SemanticAsstIdQuad saiq= (SemanticAsstIdQuad)id;
                    
                    
                     For f=sma.translateControlerTAC.createForAsst(saiq.getQuads(),step,boolQuad );
                    RESULT=f;}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForJHeader",87, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // CycleJ ::= DO LEFT_CB LineCodesJ RIGHT_CB OpBool SEMICOLON 
            {
              Object RESULT =null;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		if(op!=null){
                                                                                sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.creatDoWhile((ArrayList<Object>)lines,(BoolQuad)op));
                                                                                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleJ",86, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // CycleJ ::= WhileJHeader LEFT_CB LineCodesJ RIGHT_CB 
            {
              Object RESULT =null;
		int whileBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int whileBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object whileBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		BoolQuad bool=(BoolQuad)whileBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.addGotoWhileTags(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool)));
                                                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleJ",86, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // CycleJ ::= ForJHeader LEFT_CB LineCodesJ RIGHT_CB 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		if(f!=null){
                                                                For fo=(For)f;
                                                                if(lines!=null){
                                                                    fo.addCode((ArrayList<Object>)lines);
                                                                }else{
                                                                    fo.addCode(new ArrayList<Object>());
                                                                }
                                                                
                                                                sma.translateControlerTAC.addQuadsToCurrent(fo.convertToQuad());
                                                                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleJ",86, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // OutputJ ::= SYSTEM_OUT_PRINTLN PARENTHESIS_A ValuesOutputJ PARENTHESIS_B 
            {
              Object RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		Quadruple lineBreak = sma.translateControlerTAC.createPrintQuad("\\n");
                                                                                            if(vals!=null){
                                                                                                ArrayList asst=(ArrayList<Object>)vals;
                                                                                                asst.add(lineBreak);
                                                                                                sma.translateControlerTAC.addQuadsToCurrent(asst);
                                                                                                
                                                                                                
                                                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputJ",83, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // OutputJ ::= SYSTEM_OUT_PRINT PARENTHESIS_A ValuesOutputJ PARENTHESIS_B 
            {
              Object RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		 if(vals!=null){
                                                                                                sma.translateControlerTAC.addQuadsToCurrent((ArrayList<Object>)vals);
                                                                                                
                                                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputJ",83, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // LineCodeJ ::= error 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",82, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // LineCodeJ ::= ConditionJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",82, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // LineCodeJ ::= AssignmentJ SEMICOLON 
            {
              Object RESULT =null;
		System.out.println("ASIGNACION");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",82, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // LineCodeJ ::= DeclarationJ SEMICOLON 
            {
              Object RESULT =null;
		System.out.println("DECLARACION");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",82, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // LineCodeJ ::= CycleJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",82, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // LineCodeJ ::= Input SEMICOLON 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		if(in!=null){
                                    SyntaxInputAsst sia= (SyntaxInputAsst)in;
                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.createInputQuads(null,sia.getString()));
                                }
                                
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",82, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // LineCodeJ ::= OutputJ SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",82, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // ValJ ::= STRING 
            {
              Object RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.add(sma.translateControlerTAC.createPrintQuad(string));
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValJ",81, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // ValJ ::= CHAR 
            {
              Object RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.add(sma.translateControlerTAC.createPrintQuad(ch));
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValJ",81, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // ValJ ::= DECIMAL 
            {
              Object RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.add(sma.translateControlerTAC.createPrintQuad(dec));
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValJ",81, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // ValJ ::= NUMBER 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.add(sma.translateControlerTAC.createPrintQuad(num));
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValJ",81, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // ValJ ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type = sma.testManager.getTypeFromST(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                            if(type!=null){
                                    ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll(sma.translateControlerTAC.createIdPrintQuad(id));
                                    RESULT=printQuad;}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValJ",81, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ValuesOutputJ ::= ValJ 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll((ArrayList<Object>)val);
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValuesOutputJ",80, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // ValuesOutputJ ::= ValuesOutputJ PLUS ValJ 
            {
              Object RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll((ArrayList<Object>)vals);
                                    printQuad.addAll((ArrayList<Object>)val);
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValuesOutputJ",80, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // LineCodeJ3 ::= LineCodeJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ3",77, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // LineCodeJ3 ::= LineCodeJ3 LineCodeJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ3",77, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // LineCodesJ2 ::= LineCodeJ3 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodesJ2",78, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // LineCodesJ2 ::= LineCodeJ3 RETURN_J NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodesJ2",78, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // LineCodesJ ::= 
            {
              Object RESULT =null;
		 
                                                    sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodesJ",76, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // LineCodesJ ::= LineCodesJ2 
            {
              Object RESULT =null;
		 RESULT=sma.translateControlerTAC.getcurrentQuads();
                                                    sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodesJ",76, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ParameterJ ::= Type ID 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.getParameterControl().insertParameter((Integer)type,id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParameterJ",69, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ParameterJ ::= ParametersJ COMMA Type ID 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.getParameterControl().insertParameter((Integer)type,id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParameterJ",69, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ParametersJ ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParametersJ",68, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ParametersJ ::= ParameterJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParametersJ",68, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ProcessJHeader ::= Public VOID_J ID PARENTHESIS_A ParametersJ PARENTHESIS_B 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		sma.testManager.creatSonAmbit();
                                                                                            sma.translateControlerTAC.createNewQuadrupleBlock();
                                                                                            String name =sma.testManager.insertFunction(id, null, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.testManager.getCurrentClass());
                RESULT= name;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ProcessJHeader",75, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ProcessJ ::= ProcessJHeader LEFT_CB LineCodesJ RIGHT_CB 
            {
              Object RESULT =null;
		int subleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int subright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object sub = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		ArrayList<Object>quad=new ArrayList<>();
                                                                        if(sub!=null){
                                                                        if(lines==null){
                                                                                quad=sma.translateControlerTAC.tagFunction((String)sub,null);
                                                                            }else{
                                                                                quad=sma.translateControlerTAC.tagFunction((String)sub,(ArrayList<Object>) lines);
                                                                            }
                                                                          }
                                                                         sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    sma.translateControlerTAC.addQuadsToCurrent(quad);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ProcessJ",74, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // FunctionJHeader ::= Public Type ID PARENTHESIS_A ParametersJ PARENTHESIS_B 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		sma.testManager.creatSonAmbit();
                                                                                            sma.translateControlerTAC.createNewQuadrupleBlock();
                                                                                            String name =sma.testManager.insertFunction(id, (Integer) type, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.testManager.getCurrentClass());
                RESULT= name;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionJHeader",73, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // FunctionJ ::= FunctionJHeader LEFT_CB LineCodesJ RIGHT_CB 
            {
              Object RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int funright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object fun = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		ArrayList<Object>quad=new ArrayList<>();
                                                                        if(fun!=null){
                                                                            if(ins==null){
                                                                                quad=sma.translateControlerTAC.tagFunction((String)fun,null);
                                                                            }else{
                                                                                quad=sma.translateControlerTAC.tagFunction((String)fun,(ArrayList<Object>) ins);
                                                                            }
                                                                        
                                                                         
                                                                          }
                                                                         sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    sma.translateControlerTAC.addQuadsToCurrent(quad);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionJ",72, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ConstructorJHeader ::= Public ID PARENTHESIS_A ParametersJ PARENTHESIS_B 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		sma.testManager.creatSonAmbit();
                                                                                            sma.translateControlerTAC.createNewQuadrupleBlock();
                                                                                            String name =sma.testManager.insertFunction(id, null, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.testManager.getCurrentClass());
                RESULT= name;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConstructorJHeader",67, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ConstructorJ ::= ConstructorJHeader LEFT_CB LineCodesJ RIGHT_CB 
            {
              Object RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int funright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object fun = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		ArrayList<Object>quad=new ArrayList<>();
                                                                        if(fun!=null){
                                                                            if(ins==null){
                                                                                quad=sma.translateControlerTAC.tagFunction((String)fun,null);
                                                                            }else{
                                                                                quad=sma.translateControlerTAC.tagFunction((String)fun,(ArrayList<Object>) ins);
                                                                            }
                                                                        
                                                                         
                                                                          }
                                                                         sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    sma.translateControlerTAC.addQuadsToCurrent(quad);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConstructorJ",106, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ClassCodeJ ::= error 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClassCodeJ",71, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ClassCodeJ ::= ConstructorJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClassCodeJ",71, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ClassCodeJ ::= DeclarationJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClassCodeJ",71, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ClassCodeJ ::= ProcessJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClassCodeJ",71, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ClassCodeJ ::= FunctionJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClassCodeJ",71, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // JavaClassCode1 ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("JavaClassCode1",85, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // JavaClassCode1 ::= JavaClassCode1 ClassCodeJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("JavaClassCode1",85, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // JavaClassCode ::= JavaClassCode1 
            {
              Object RESULT =null;
		RESULT=sma.translateControlerTAC.getcurrentQuads();
                                                    sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("JavaClassCode",70, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ClaseJHeader ::= Public CLASS_J ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.creatSonAmbit();
                                    sma.translateControlerTAC.createNewQuadrupleBlock();
                                    sma.testManager.setCurrentClass(sma.testManager.insertClass(id, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek())));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClaseJHeader",66, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ClaseJ ::= ClaseJHeader LEFT_CB JavaClassCode RIGHT_CB 
            {
              Object RESULT =null;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		ArrayList<Object>quad=new ArrayList<>();
                                                                        
                                                                            if(lines!=null){
                                                                                quad=(ArrayList<Object>) lines;
                                                                            }
                                                                        
                                                                         
                                                                        sma.testManager.setCurrentClass(null);
                                                                         sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    sma.translateControlerTAC.addQuadsToCurrent(quad);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClaseJ",65, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // JavaCode ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("JavaCode",5, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // JavaCode ::= JavaCode ClaseJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("JavaCode",5, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // JavaSeperator ::= JAVA_SEPERATOR 
            {
              Object RESULT =null;
		sma.testManager.creatSonAmbit();
                            sma.translateControlerTAC.createNewQuadrupleBlock();
                             
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("JavaSeperator",13, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Java ::= JavaSeperator JavaCode 
            {
              Object RESULT =null;
		sma.testManager.switchNextTypes();
                                    sma.testManager.finishAmbit();
                                    sma.translateControlerTAC.acceptCurrentBlock();
                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getcurrentQuads());
                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Java",2, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CaseValue ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type=sma.testManager.getTypeFromST(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                            if(type!=null){
                                RESULT=id;
                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseValue",64, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CaseValue ::= CHAR 
            {
              Object RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=ch;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseValue",64, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CaseValue ::= DECIMAL 
            {
              Object RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=dec;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseValue",64, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CaseValue ::= NUMBER 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=num;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseValue",64, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CasesVbHeader ::= CASE_VB ELSE 
            {
              Object RESULT =null;
		RESULT=Switch.ELSE;
                    sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesVbHeader",63, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CasesVbHeader ::= CASE_VB CaseValue 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=val;
                                            sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesVbHeader",63, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CasesVb ::= CasesVbHeader InstructionsFunctionVb 
            {
              Object RESULT =null;
		int caseHleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int caseHright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object caseH = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		UniquenessTable ut=sma.testManager.createNewUniquenessTable();
                                                                        if(caseH!=null){
                                                                            
                                                                            boolean verified =ut.add(caseH,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                            if(verified){
                                                                            
                                                                            sma.translateControlerTAC.getSwitchAsst().addCases((String)caseH,(ArrayList<Object>)lines);}
                                                                            }
                                                                        RESULT=ut;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesVb",62, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CasesVb ::= CasesVb CasesVbHeader InstructionsFunctionVb 
            {
              Object RESULT =null;
		int caseVbleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int caseVbright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object caseVb = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int caseHleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int caseHright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object caseH = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		UniquenessTable ut=(UniquenessTable)caseVb;
                                                                        if(caseH!=null){
                                                                            
                                                                            boolean verified =ut.add(caseH,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                            if(verified){
                                                                            
                                                                            sma.translateControlerTAC.getSwitchAsst().addCases((String)caseH,(ArrayList<Object>)lines);}
                                                                            }
                                                                        RESULT=ut;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesVb",62, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SwitchVbHeader ::= SELECT_VB CASE_VB ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.translateControlerTAC.createSwitchAsst(id);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("SwitchVbHeader",61, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SwitchVb ::= SwitchVbHeader CasesVb END_VB SELECT_VB 
            {
              Object RESULT =null;
		sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(sma.translateControlerTAC.getSwitchAsst().getFatherCases()));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("SwitchVb",60, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ThenVb ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ThenVb",59, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ThenVb ::= THEN_VB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ThenVb",59, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ElseIfHeader ::= ELSE_IF_VB OpBool ThenVb 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT =op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseIfHeader",58, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ElseHeader ::= ELSE 
            {
              Object RESULT =null;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseHeader",57, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ElseVb ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseVb",56, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ElseVb ::= ElseIfHeader InstructionsFunctionVb ElseVb 
            {
              Object RESULT =null;
		int ifBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int ifBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object ifBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int elseBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int elseBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object elseBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(ifBool!=null){
                                                                    BoolQuad bool=(BoolQuad)ifBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    if(elseBool!=null){bool.changeFatherNoBool((ArrayList<Object>)elseBool);}
                                                                                    RESULT =sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool);
                                                                                    
                                                                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseVb",56, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ElseVb ::= ElseHeader InstructionsFunctionVb 
            {
              Object RESULT =null;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=lines;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseVb",56, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // IfVbHeader ::= IF OpBool ThenVb 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT=op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IfVbHeader",55, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // IfVb ::= IfVbHeader InstructionsFunctionVb ElseVb END_VB IF 
            {
              Object RESULT =null;
		int ifBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int ifBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object ifBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int elseBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int elseBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object elseBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		BoolQuad bool=(BoolQuad)ifBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    if(elseBool!=null){bool.changeFatherNoBool((ArrayList<Object>)elseBool);}
                                                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool));
                                                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IfVb",54, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ConditionVb ::= SwitchVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionVb",53, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ConditionVb ::= IfVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionVb",53, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // AssignmentVb ::= ID EQUAL Input 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type = sma.testManager.getTypeFromST(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                            if(type!=null&&in!=null){
                                                SyntaxInputAsst sia= (SyntaxInputAsst) in;
                                                if(sma.testManager.verifyType(type.getNumber(),sia.getType(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),id)){
                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.createInputQuads(id,sia.getString()));
                                                }
                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentVb",52, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // AssignmentVb ::= ID EQUAL NumberValue 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                        sma.translateControlerTAC.acceptAllIdQuas();}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentVb",52, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // AssiVb ::= 
            {
              Object RESULT =null;
		System.out.println("ASSI VACIO");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssiVb",51, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // AssiVb ::= EQUAL NumberValue 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT = val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssiVb",51, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // IdsVb ::= ID AssiVb 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.insertPreTuple(id,null,val,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                        if(val!=null){ 
                                                            sma.translateControlerTAC.createTempIdQuadAssign(val,id);}
                                        sma.translateControlerTAC.nextIdQuad();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IdsVb",50, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // IdsVb ::= IdsVb COMMA ID AssiVb 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.insertPreTuple(id,null,val,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        if(val!=null){ 
                                                            sma.translateControlerTAC.createTempIdQuadAssign(val,id);}
                                                       
                                                        sma.translateControlerTAC.nextIdQuad();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IdsVb",50, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Type ::= CHAR_TYPE 
            {
              Object RESULT =null;
		RESULT=TypeManager.CHAR_TYPE;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Type",11, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Type ::= FLOAT_TYPE 
            {
              Object RESULT =null;
		RESULT=TypeManager.FLOAT_TYPE;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Type",11, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Type ::= INTEGER_TYPE 
            {
              Object RESULT =null;
		RESULT=TypeManager.INTEGER_TYPE;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Type",11, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DeTypeVb ::= ID AssiVb COMMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		
                                                        sma.testManager.insertPreTuple(id,null,val,0,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        // if(val!=null){ 
                                                        //     sma.translateControlerTAC.createTempIdQuadAssign(val,id);}
                                                       
                                                        sma.translateControlerTAC.nextIdQuad();
                                                        

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeTypeVb",49, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DeTypeVb ::= DeTypeVb ID AssiVb COMMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		
                                                        sma.testManager.insertPreTuple(id,null,val,0,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        // if(val!=null){ 
                                                        //     sma.translateControlerTAC.createTempIdQuadAssign(val,id);}
                                                       
                                                        sma.translateControlerTAC.nextIdQuad();
                                                        

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeTypeVb",49, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DeclarationVb ::= DIM_VB ID AS_VB Type EQUAL Input 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(in!=null&&!sma.testManager.checkExistence(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()))){
                                                        SyntaxInputAsst sia = (SyntaxInputAsst)in;

                                                      if(sma.testManager.verifyType((Integer)type,sia.getType(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),id)){
                                                          sma.testManager.insertTuple(id,(Integer)type,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.createInputQuads(id,sia.getString()));
                                                }       
                        }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationVb",48, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DeclarationVb ::= DIM_VB ID AS_VB Type AssiVb 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.insertPreTuple(id,null,val, 0,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                             sma.testManager.insertPreTuplesToSymbolTable((Integer)type,0,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
                                                            //     if(val!=null){ 
                                                                   
                                                            // sma.translateControlerTAC.createTempIdQuadAssign(val,id);}
                                                       sma.translateControlerTAC.nextIdQuad();
                                                        
                                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationVb",48, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DeclarationVb ::= DIM_VB DeTypeVb ID AS_VB Type AssiVb 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.insertPreTuple(id,null,val, 0,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                    sma.testManager.insertPreTuplesToSymbolTable((Integer)type,0,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
                                                            //         if(val!=null){ 
                                                                        
                                                            // sma.translateControlerTAC.createTempIdQuadAssign(val,id);}
                                                       
                                                        sma.translateControlerTAC.nextIdQuad();
                                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationVb",48, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DoHeader ::= DO 
            {
              Object RESULT =null;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DoHeader",47, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DoWhileVb ::= DoHeader InstructionsFunctionVb LOOP_VB WHILE OpBool 
            {
              Object RESULT =null;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(op!=null){
                                                                                sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.creatDoWhile((ArrayList<Object>)lines,(BoolQuad)op));
                                                                                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DoWhileVb",46, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ExBoolVb ::= LESS_THAN_EQUAL 
            {
              Object RESULT =null;
		RESULT=Operation.LESS_THAN_EQUAL;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb",45, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ExBoolVb ::= GREATER_THAN_EQUAL 
            {
              Object RESULT =null;
		RESULT=Operation.GREATER_THAN_EQUAL;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb",45, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ExBoolVb ::= LESS_THAN 
            {
              Object RESULT =null;
		RESULT=Operation.LESS_THAN;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb",45, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ExBoolVb ::= GREATER_THAN 
            {
              Object RESULT =null;
		RESULT=Operation.GREATER_THAN;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb",45, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ExBoolVb ::= DIFERENT_VB 
            {
              Object RESULT =null;
		RESULT=Operation.DIFERENT;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb",45, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ExBoolVb ::= EQUAL 
            {
              Object RESULT =null;
		RESULT=Operation.EQUAL_BOOL;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb",45, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // BoolValueVb ::= PARENTHESIS_A OpBool PARENTHESIS_B 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT=val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueVb",44, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // BoolValueVb ::= NumberValue ExBoolVb Number3 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int exValleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int exValright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object exVal = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateBoolType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdBoolQuadruple(s1.getQuadruple(),s2.getQuadruple(),(Integer)exVal);
                                                                    RESULT=sma.translateControlerTAC.getcurrentTempQuads();
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueVb",44, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // BoolValueVb ::= FALSE 
            {
              Object RESULT =null;
		 Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.BOOL_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL_BOOL,0,1,null);
		                    RESULT=sma.translateControlerTAC.getcurrentTempQuads();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueVb",44, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // BoolValueVb ::= TRUE 
            {
              Object RESULT =null;
		 Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.BOOL_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL_BOOL,1,1,null);
		                    RESULT=sma.translateControlerTAC.getcurrentTempQuads();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueVb",44, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OpBool3 ::= BoolValueVb 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(val!=null){
                   RESULT = sma.translateControlerTAC.getBoolQuadControl().convertQuadToBool(((ArrayList<Object>)val)); 
        }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBool3",43, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OpBool3 ::= NOT BoolValueVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBool3",43, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OpBool2 ::= OpBool3 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBool2",42, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OpBool2 ::= OpBool2 AND OpBool3 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(val1!=null &&val2!=null){
                                            RESULT= sma.translateControlerTAC.getBoolQuadControl().operateBoolQuad(val1,val2,Operation.OP_AND);}
                                            
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBool2",42, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OpBool ::= OpBool2 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBool",41, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OpBool ::= OpBool OR OpBool2 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(val1!=null &&val2!=null){
                                            RESULT= sma.translateControlerTAC.getBoolQuadControl().operateBoolQuad(val1,val2,Operation.OP_OR);}
                                            
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBool",41, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // WhileVbHeader ::= WHILE OpBool 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT=op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("WhileVbHeader",40, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // WhileVb ::= WhileVbHeader InstructionsFunctionVb END_VB WHILE 
            {
              Object RESULT =null;
		int whileBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int whileBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object whileBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		BoolQuad bool=(BoolQuad)whileBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.addGotoWhileTags(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool)));
                                                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("WhileVb",39, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Number3 ::= PARENTHESIS_A NumberValue PARENTHESIS_B 
            {
              Object RESULT =null;
		int asstleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int asstright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object asst = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT=asst;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3",38, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Number3 ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type=sma.testManager.getTypeFromST(val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                            if(type!=null){
                                Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL,sma.translateControlerTAC.getIdForStack(val),null,null);
                                RESULT=new SynthesizedOpAsst(quadruple,type);
                            }else{
                                RESULT=null;
                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3",38, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Number3 ::= CHAR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.CHAR_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL,val,null,null);
		                    RESULT=new SynthesizedOpAsst(quadruple,type);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3",38, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Number3 ::= DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.FLOAT_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL,val,null,null);
		                    RESULT=new SynthesizedOpAsst(quadruple,type);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3",38, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Number3 ::= NUMBER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		 Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.INTEGER_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL,val,null,null);
		                    RESULT=new SynthesizedOpAsst(quadruple,type);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3",38, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Number2 ::= Number3 
            {
              Object RESULT =null;
		int asstleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int asstright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object asst = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=asst;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number2",37, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Number2 ::= Number2 MOD Number3 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.MOD);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number2",37, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Number2 ::= Number2 DIVISION Number3 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.DIVISION);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number2",37, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Number2 ::= Number2 MULTIPLICATION Number3 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.MULTIPLICATION);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number2",37, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NumberValue ::= Number2 
            {
              Object RESULT =null;
		int asstleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int asstright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object asst = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=asst;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumberValue",36, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NumberValue ::= NumberValue MINUS Number2 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.MINUS);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumberValue",36, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NumberValue ::= NumberValue PLUS Number2 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.PLUS);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumberValue",36, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Step ::= 
            {
              Object RESULT =null;
		RESULT="1";
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Step",35, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Step ::= STEP_VB PLUS CaseValue 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=value;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Step",35, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Step ::= STEP_VB MINUS CaseValue 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT="-"+(String)value;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Step",35, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Step ::= STEP_VB CaseValue 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=value;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Step",35, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // For ::= FOR 
            {
              Object RESULT =null;
		sma.testManager.creatSonAmbit();
                                                        sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("For",34, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ForVbHeaderStart ::= For ID EQUAL NumberValue 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type=sma.testManager.getTypeFromST(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    if(type!=null){
                                                    if(sma.testManager.getTypeManager().isNumerico(type.getNumber())){
                                                        
                                                        boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                            RESULT=new SemanticAsstIdQuad(id, sma.translateControlerTAC.getcurrentTempQuads());
                                                        }
                                                    }else{
                                                        sma.testManager.callNumericError(id,type,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    }}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForVbHeaderStart",33, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ForVbHeaderStart ::= For ID AS_VB Type EQUAL NumberValue 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int type1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int type1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object type1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		 boolean boolExistence= sma.testManager.checkExistence(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                if(boolExistence){

                                                    if(sma.testManager.getTypeManager().isNumerico((Integer)type1)){
                                                        sma.testManager.insertTuple(id,(Integer)type1,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        if(bool){sma.translateControlerTAC.createTempIdQuadAssign(val,id);
                                                            RESULT=new SemanticAsstIdQuad(id, sma.translateControlerTAC.getcurrentTempQuads());
                                                        }
                                                    }else{
                                                        sma.testManager.callNumericError(id,sma.testManager.getTypeManager().getType((Integer)type1),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    }
                                                }
                                                
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForVbHeaderStart",33, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ForVbHeader ::= ForVbHeaderStart TO_VB NumberValue Step 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int stepleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int stepright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object step = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if (id!=null) {
                    SemanticAsstIdQuad saiq= (SemanticAsstIdQuad)id;
                    SynthesizedOpAsst s1= (SynthesizedOpAsst)num;
                    Quadruple quadruple=sma.translateControlerTAC.operateIdBoolQuadruple(saiq.getId(),s1.getQuadruple(),Operation.EQUAL_BOOL);
                    BoolQuad bool =sma.translateControlerTAC.getBoolQuadControl().convertQuadToBool(sma.translateControlerTAC.getcurrentTempQuads());
                     For f=sma.translateControlerTAC.createForAsst(saiq.getQuads(), (String) step, bool, saiq.getId());
                    RESULT=f;}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForVbHeader",32, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ForVb ::= ForVbHeader InstructionsFunctionVb NEXT_VB 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		if(f!=null){
                                                                For fo=(For)f;
                                                                fo.addCode((ArrayList<Object>)lines);
                                                                sma.translateControlerTAC.addQuadsToCurrent(fo.convertToQuad());
                                                                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForVb",31, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CycleVb ::= DoWhileVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleVb",30, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CycleVb ::= WhileVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleVb",30, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CycleVb ::= ForVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleVb",30, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ValueVb ::= NumberValue 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll(sma.translateControlerTAC.getcurrentTempQuads());
                                    printQuad.add(sma.translateControlerTAC.createPrintQuad(val));
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValueVb",28, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ValueVb ::= STRING 
            {
              Object RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.add(sma.translateControlerTAC.createPrintQuad(string));
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValueVb",28, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ValuesVb ::= ValueVb 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll((ArrayList<Object>)val);
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValuesVb",27, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ValuesVb ::= ValuesVb AMPERSON ValueVb 
            {
              Object RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll((ArrayList<Object>)vals);
                                    printQuad.addAll((ArrayList<Object>)val);
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValuesVb",27, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OutputVb ::= CONSOLE_VB POINT WRITELN_VB PARENTHESIS_A ValuesVb PARENTHESIS_B 
            {
              Object RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		Quadruple lineBreak = sma.translateControlerTAC.createPrintQuad("\\n");
                                                                                            if(vals!=null){
                                                                                                ArrayList asst=(ArrayList<Object>)vals;
                                                                                                asst.add(lineBreak);
                                                                                                sma.translateControlerTAC.addQuadsToCurrent(asst);
                                                                                                
                                                                                                
                                                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputVb",26, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OutputVb ::= CONSOLE_VB POINT WRITE_VB PARENTHESIS_A ValuesVb PARENTHESIS_B 
            {
              Object RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		 if(vals!=null){
                                                                                                sma.translateControlerTAC.addQuadsToCurrent((ArrayList<Object>)vals);
                                                                                                
                                                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputVb",26, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Input ::= CHARINPUT PARENTHESIS_A STRING PARENTHESIS_B 
            {
              Object RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT= new SyntaxInputAsst(TypeManager.CHAR_TYPE,string);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Input",176, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Input ::= FLOATINPUT PARENTHESIS_A STRING PARENTHESIS_B 
            {
              Object RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT= new SyntaxInputAsst(TypeManager.FLOAT_TYPE,string);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Input",176, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Input ::= INTINPUT PARENTHESIS_A STRING PARENTHESIS_B 
            {
              Object RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT= new SyntaxInputAsst(TypeManager.INTEGER_TYPE,string);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Input",176, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LnInstructionsVb ::= error 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",24, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LnInstructionsVb ::= ConditionVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",24, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LnInstructionsVb ::= AssignmentVb 
            {
              Object RESULT =null;
		System.out.println("ASIGNACION");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",24, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LnInstructionsVb ::= DeclarationVb 
            {
              Object RESULT =null;
		System.out.println("DECLARACION");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",24, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LnInstructionsVb ::= CycleVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",24, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LnInstructionsVb ::= OutputVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",24, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LnInstructionsVb ::= Input 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(in!=null){
                                    SyntaxInputAsst sia= (SyntaxInputAsst)in;
                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.createInputQuads(null,sia.getString()));
                                }
                                
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",24, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Lines ::= LnInstructionsVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Lines",25, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Lines ::= Lines LnInstructionsVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Lines",25, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // InstructionsFunctionVb2 ::= RETURN_VB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb2",23, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // InstructionsFunctionVb2 ::= RETURN_VB ValuesVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb2",23, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // InstructionsFunctionVb2 ::= LnInstructionsVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb2",23, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // InstructionsFunctionVb2 ::= Lines RETURN_VB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb2",23, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // InstructionsFunctionVb2 ::= Lines RETURN_VB ValuesVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb2",23, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // InstructionsFunctionVb2 ::= Lines LnInstructionsVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb2",23, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // InstructionsFunctionVb ::= InstructionsFunctionVb2 
            {
              Object RESULT =null;
		 RESULT=sma.translateControlerTAC.getcurrentQuads();
                                                    sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb",22, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Parameter ::= ID AS_VB Type 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.getParameterControl().insertParameter((Integer)type,id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Parameter",21, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Parameter ::= Parameter COMMA ID AS_VB Type 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.getParameterControl().insertParameter((Integer)type,id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Parameter",21, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Parameters ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Parameters",20, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Parameters ::= Parameter 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Parameters",20, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Public ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Public",12, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Public ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Public",12, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SubVbHeader ::= Public SUB_VB ID PARENTHESIS_A Parameters PARENTHESIS_B 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		sma.testManager.creatSonAmbit();
                                                                                            sma.translateControlerTAC.createNewQuadrupleBlock();
                                                                                            String name =sma.testManager.insertFunction(id, null, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                RESULT= name;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("SubVbHeader",19, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SubVb ::= SubVbHeader InstructionsFunctionVb END_VB SUB_VB 
            {
              Object RESULT =null;
		int subleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int subright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object sub = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		ArrayList<Object>quad=new ArrayList<>();
                                                                        if(sub!=null){
                                                                        quad=sma.translateControlerTAC.tagFunction((String)sub,(ArrayList<Object>) lines);
                                                                         
                                                                          }
                                                                         sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    sma.translateControlerTAC.addQuadsToCurrent(quad);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("SubVb",18, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FunctionVbHeader ::= Public FUNCTION_VB ID PARENTHESIS_A Parameters PARENTHESIS_B AS_VB Type 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.creatSonAmbit();
                                                                                            sma.translateControlerTAC.createNewQuadrupleBlock();
                                                                                            String name =sma.testManager.insertFunction(id, (Integer) type, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                RESULT= name;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionVbHeader",16, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-7)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FunctionVB ::= FunctionVbHeader InstructionsFunctionVb END_VB FUNCTION_VB 
            {
              Object RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int funright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object fun = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		ArrayList<Object>quad=new ArrayList<>();
                                                                        if(fun!=null){
                                                                            if(ins==null){
                                                                                quad=sma.translateControlerTAC.tagFunction((String)fun,null);
                                                                            }else{
                                                                                quad=sma.translateControlerTAC.tagFunction((String)fun,(ArrayList<Object>) ins);
                                                                            }
                                                                        
                                                                         
                                                                          }
                                                                         sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    sma.translateControlerTAC.addQuadsToCurrent(quad);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionVB",15, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Funct ::= error 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Funct",17, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Funct ::= SubVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Funct",17, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Funct ::= FunctionVB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Funct",17, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VbCode ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("VbCode",4, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VbCode ::= VbCode Funct 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("VbCode",4, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VbSeperator ::= VB_SEPERATOR 
            {
              Object RESULT =null;
		sma.testManager.creatSonAmbit();
                            sma.translateControlerTAC.createNewQuadrupleBlock();
                             
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("VbSeperator",8, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // VB ::= VbSeperator VbCode 
            {
              Object RESULT =null;
		sma.testManager.switchNextTypes();
                                    sma.testManager.finishAmbit();
                                    sma.translateControlerTAC.acceptCurrentBlock();
                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getcurrentQuads());
                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("VB",1, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicio ::= VB Java Python Program 
            {
              Object RESULT =null;
		
                                        
                                        sma.testManager.finishAmbit();
                                    sma.translateControlerTAC.acceptCurrentBlock();
                                        sma.translateControlerTAC.convertQuads(sma.translateControlerTAC.getcurrentQuads());
                                        
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT = start_val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SyntaxMlgAnalyzer$parser.done_parsing();
          return CUP$SyntaxMlgAnalyzer$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

