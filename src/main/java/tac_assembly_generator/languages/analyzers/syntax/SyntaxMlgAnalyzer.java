
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Oct 13 01:22:36 CST 2020
//----------------------------------------------------

package tac_assembly_generator.languages.analyzers.syntax;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import tac_assembly_generator.languages.semantic.verification.TestManager;
import tac_assembly_generator.TAC.TranslateControlerTAC;
import tac_assembly_generator.TAC.quadruple.Operation;
import tac_assembly_generator.TAC.quadruple.Quadruple;
import tac_assembly_generator.TAC.quadruple.BoolQuad;
import tac_assembly_generator.languages.semantic.type.Type;
import tac_assembly_generator.languages.semantic.type.TypeManager;
import tac_assembly_generator.TAC.asst.Switch;
import tac_assembly_generator.languages.semantic.UniquenessTable;
import tac_assembly_generator.TAC.asst.For;
import tac_assembly_generator.languages.semantic.SemanticAsstIdQuad;
import tac_assembly_generator.ui.backend.OutputErrors;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Oct 13 01:22:36 CST 2020
  */
public class SyntaxMlgAnalyzer extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SyntaxMlgAnalyzer() {super();}

  /** Constructor which sets the default scanner. */
  public SyntaxMlgAnalyzer(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SyntaxMlgAnalyzer(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u015c\000\002\002\004\000\002\002\006\000\002\003" +
    "\004\000\002\012\003\000\002\006\004\000\002\006\004" +
    "\000\002\006\002\000\002\006\004\000\002\020\006\000" +
    "\002\021\012\000\002\022\006\000\002\023\010\000\002" +
    "\016\003\000\002\016\002\000\002\024\003\000\002\024" +
    "\002\000\002\025\007\000\002\025\005\000\002\026\003" +
    "\000\002\027\004\000\002\027\005\000\002\027\004\000" +
    "\002\027\003\000\002\027\004\000\002\027\003\000\002" +
    "\031\004\000\002\031\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\032\006\000" +
    "\002\032\006\000\002\032\006\000\002\033\010\000\002" +
    "\033\010\000\002\034\005\000\002\034\003\000\002\035" +
    "\003\000\002\035\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\037\005\000\002\040\006\000" +
    "\002\041\010\000\002\041\006\000\002\042\003\000\002" +
    "\043\004\000\002\043\005\000\002\043\005\000\002\043" +
    "\002\000\002\044\005\000\002\044\005\000\002\044\003" +
    "\000\002\045\005\000\002\045\005\000\002\045\005\000" +
    "\002\045\003\000\002\046\003\000\002\046\003\000\002" +
    "\046\003\000\002\046\003\000\002\046\005\000\002\047" +
    "\006\000\002\050\004\000\002\051\005\000\002\051\003" +
    "\000\002\052\005\000\002\052\003\000\002\053\004\000" +
    "\002\053\003\000\002\054\003\000\002\054\003\000\002" +
    "\054\005\000\002\054\005\000\002\055\003\000\002\055" +
    "\003\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\055\003\000\002\056\007\000\002\057\003\000" +
    "\002\060\004\000\002\061\010\000\002\061\006\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\062" +
    "\006\000\002\062\004\000\002\063\004\000\002\063\002" +
    "\000\002\064\005\000\002\065\003\000\002\065\003\000" +
    "\002\066\007\000\002\067\005\000\002\070\004\000\002" +
    "\070\005\000\002\070\002\000\002\071\003\000\002\072" +
    "\005\000\002\073\003\000\002\073\002\000\002\074\006" +
    "\000\002\075\005\000\002\076\005\000\002\076\004\000" +
    "\002\077\004\000\002\077\004\000\002\100\003\000\002" +
    "\100\003\000\002\100\003\000\002\100\003\000\002\004" +
    "\004\000\002\017\003\000\002\007\004\000\002\007\002" +
    "\000\002\101\006\000\002\102\005\000\002\104\006\000" +
    "\002\104\004\000\002\105\004\000\002\105\003\000\002" +
    "\106\003\000\002\106\003\000\002\106\003\000\002\106" +
    "\003\000\002\146\006\000\002\103\007\000\002\107\006" +
    "\000\002\107\005\000\002\110\010\000\002\110\007\000" +
    "\002\111\006\000\002\111\005\000\002\112\010\000\002" +
    "\112\007\000\002\113\005\000\002\113\003\000\002\114" +
    "\004\000\002\114\003\000\002\115\003\000\002\115\003" +
    "\000\002\116\005\000\002\116\003\000\002\117\005\000" +
    "\002\117\003\000\002\120\003\000\002\120\003\000\002" +
    "\120\003\000\002\120\003\000\002\121\004\000\002\121" +
    "\004\000\002\121\003\000\002\121\004\000\002\121\004" +
    "\000\002\121\003\000\002\121\003\000\002\122\006\000" +
    "\002\122\006\000\002\123\006\000\002\123\006\000\002" +
    "\123\006\000\002\124\006\000\002\124\006\000\002\124" +
    "\010\000\002\125\017\000\002\125\016\000\002\126\006" +
    "\000\002\127\005\000\002\127\006\000\002\127\006\000" +
    "\002\127\006\000\002\127\006\000\002\130\005\000\002" +
    "\130\004\000\002\131\005\000\002\132\003\000\002\132" +
    "\006\000\002\133\007\000\002\134\006\000\002\135\006" +
    "\000\002\135\004\000\002\135\002\000\002\136\006\000" +
    "\002\137\004\000\002\137\007\000\002\137\003\000\002" +
    "\140\004\000\002\140\003\000\002\141\007\000\002\142" +
    "\004\000\002\142\002\000\002\143\003\000\002\143\003" +
    "\000\002\143\003\000\002\143\003\000\002\143\003\000" +
    "\002\143\003\000\002\144\004\000\002\144\005\000\002" +
    "\144\003\000\002\144\003\000\002\144\005\000\002\145" +
    "\005\000\002\145\003\000\002\005\004\000\002\005\003" +
    "\000\002\013\003\000\002\010\005\000\002\010\003\000" +
    "\002\147\005\000\002\151\010\000\002\152\003\000\002" +
    "\152\002\000\002\153\005\000\002\153\003\000\002\154" +
    "\003\000\002\150\003\000\002\150\005\000\002\155\004" +
    "\000\002\155\002\000\002\156\003\000\002\156\003\000" +
    "\002\156\003\000\002\156\003\000\002\156\003\000\002" +
    "\156\003\000\002\235\003\000\002\157\006\000\002\160" +
    "\005\000\002\160\003\000\002\161\003\000\002\161\003" +
    "\000\002\162\007\000\002\163\006\000\002\164\012\000" +
    "\002\164\010\000\002\164\006\000\002\165\003\000\002" +
    "\166\006\000\002\167\005\000\002\170\005\000\002\170" +
    "\005\000\002\171\003\000\002\172\007\000\002\173\005" +
    "\000\002\174\007\000\002\174\006\000\002\174\002\000" +
    "\002\176\004\000\002\175\005\000\002\011\007\000\002" +
    "\177\004\000\002\177\002\000\002\201\005\000\002\201" +
    "\004\000\002\202\007\000\002\202\010\000\002\203\006" +
    "\000\002\203\005\000\002\204\005\000\002\204\005\000" +
    "\002\205\005\000\002\205\003\000\002\206\007\000\002" +
    "\206\005\000\002\207\005\000\002\207\004\000\002\210" +
    "\004\000\002\210\006\000\002\200\011\000\002\211\004" +
    "\000\002\211\003\000\002\212\004\000\002\212\004\000" +
    "\002\212\003\000\002\212\003\000\002\212\004\000\002" +
    "\212\004\000\002\212\004\000\002\212\004\000\002\213" +
    "\004\000\002\214\006\000\002\214\004\000\002\215\004" +
    "\000\002\215\003\000\002\215\005\000\002\215\002\000" +
    "\002\216\005\000\002\216\006\000\002\217\006\000\002" +
    "\217\006\000\002\220\006\000\002\221\006\000\002\222" +
    "\004\000\002\222\007\000\002\222\003\000\002\223\004" +
    "\000\002\223\003\000\002\224\006\000\002\225\006\000" +
    "\002\225\006\000\002\225\010\000\002\226\015\000\002" +
    "\226\014\000\002\227\006\000\002\230\005\000\002\230" +
    "\006\000\002\230\006\000\002\230\006\000\002\230\006" +
    "\000\002\231\006\000\002\231\005\000\002\232\005\000" +
    "\002\232\003\000\002\233\003\000\002\233\003\000\002" +
    "\233\003\000\002\233\003\000\002\234\005\000\002\235" +
    "\011\000\002\236\006\000\002\236\005\000\002\237\005" +
    "\000\002\237\003\000\002\240\005\000\002\240\003\000" +
    "\002\241\003\000\002\241\003\000\002\241\003\000\002" +
    "\241\003\000\002\241\003\000\002\244\004\000\002\242" +
    "\004\000\002\242\005\000\002\242\003\000\002\242\003" +
    "\000\002\242\003\000\002\242\005\000\002\243\005\000" +
    "\002\243\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0300\000\004\004\004\001\002\000\014\003\ufffe\033" +
    "\ufffe\057\ufffe\062\ufffe\064\ufffe\001\002\000\004\057\344" +
    "\001\002\000\014\003\ufffb\033\ufffb\057\ufffb\062\ufffb\064" +
    "\ufffb\001\002\000\004\002\010\001\002\000\004\002\001" +
    "\001\002\000\014\003\012\033\015\057\uffff\062\ufff4\064" +
    "\ufff4\001\002\000\014\003\ufffa\033\ufffa\057\ufffa\062\ufffa" +
    "\064\ufffa\001\002\000\014\003\ufffc\033\ufffc\057\ufffc\062" +
    "\ufffc\064\ufffc\001\002\000\034\003\076\030\075\031\107" +
    "\032\060\034\106\035\057\036\065\041\062\053\063\060" +
    "\071\065\064\066\054\100\067\001\002\000\006\062\ufff5" +
    "\064\ufff5\001\002\000\014\003\ufffd\033\ufffd\057\ufffd\062" +
    "\ufffd\064\ufffd\001\002\000\034\003\076\030\075\031\107" +
    "\032\060\034\106\035\057\036\065\041\062\053\063\060" +
    "\071\065\064\066\054\100\067\001\002\000\006\062\022" +
    "\064\021\001\002\000\004\053\044\001\002\000\004\053" +
    "\023\001\002\000\004\007\024\001\002\000\006\010\ufff2" +
    "\053\025\001\002\000\004\061\042\001\002\000\004\010" +
    "\037\001\002\000\006\010\ufff3\021\030\001\002\000\004" +
    "\053\031\001\002\000\004\061\032\001\002\000\010\022" +
    "\035\023\036\024\034\001\002\000\006\010\ufff1\021\ufff1" +
    "\001\002\000\056\003\uffa5\006\uffa5\010\uffa5\021\uffa5\030" +
    "\uffa5\031\uffa5\032\uffa5\034\uffa5\035\uffa5\036\uffa5\041\uffa5" +
    "\042\uffa5\053\uffa5\060\uffa5\063\uffa5\065\uffa5\066\uffa5\073" +
    "\uffa5\075\uffa5\076\uffa5\100\uffa5\101\uffa5\001\002\000\056" +
    "\003\uffa7\006\uffa7\010\uffa7\021\uffa7\030\uffa7\031\uffa7\032" +
    "\uffa7\034\uffa7\035\uffa7\036\uffa7\041\uffa7\042\uffa7\053\uffa7" +
    "\060\uffa7\063\uffa7\065\uffa7\066\uffa7\073\uffa7\075\uffa7\076" +
    "\uffa7\100\uffa7\101\uffa7\001\002\000\056\003\uffa6\006\uffa6" +
    "\010\uffa6\021\uffa6\030\uffa6\031\uffa6\032\uffa6\034\uffa6\035" +
    "\uffa6\036\uffa6\041\uffa6\042\uffa6\053\uffa6\060\uffa6\063\uffa6" +
    "\065\uffa6\066\uffa6\073\uffa6\075\uffa6\076\uffa6\100\uffa6\101" +
    "\uffa6\001\002\000\004\061\040\001\002\000\010\022\035" +
    "\023\036\024\034\001\002\000\034\003\ufff8\030\ufff8\031" +
    "\ufff8\032\ufff8\034\ufff8\035\ufff8\036\ufff8\041\ufff8\053\ufff8" +
    "\060\ufff8\065\ufff8\066\ufff8\100\ufff8\001\002\000\010\022" +
    "\035\023\036\024\034\001\002\000\006\010\ufff0\021\ufff0" +
    "\001\002\000\004\007\045\001\002\000\006\010\ufff2\053" +
    "\025\001\002\000\004\010\047\001\002\000\034\003\ufff6" +
    "\030\ufff6\031\ufff6\032\ufff6\034\ufff6\035\ufff6\036\ufff6\041" +
    "\ufff6\053\ufff6\060\ufff6\065\ufff6\066\ufff6\100\ufff6\001\002" +
    "\000\050\003\uffe5\030\uffe5\031\uffe5\032\uffe5\034\uffe5\035" +
    "\uffe5\036\uffe5\041\uffe5\042\uffe5\053\uffe5\060\uffe5\063\uffe5" +
    "\065\uffe5\066\uffe5\073\uffe5\075\uffe5\076\uffe5\100\uffe5\101" +
    "\uffe5\001\002\000\050\003\uffd5\030\uffd5\031\uffd5\032\uffd5" +
    "\034\uffd5\035\uffd5\036\uffd5\041\uffd5\042\uffd5\053\uffd5\060" +
    "\uffd5\063\uffd5\065\uffd5\066\uffd5\073\uffd5\075\uffd5\076\uffd5" +
    "\100\uffd5\101\uffd5\001\002\000\004\053\331\001\002\000" +
    "\004\071\320\001\002\000\004\017\307\001\002\000\050" +
    "\003\uffd4\030\uffd4\031\uffd4\032\uffd4\034\uffd4\035\uffd4\036" +
    "\uffd4\041\uffd4\042\uffd4\053\uffd4\060\uffd4\063\uffd4\065\uffd4" +
    "\066\uffd4\073\uffd4\075\uffd4\076\uffd4\100\uffd4\101\uffd4\001" +
    "\002\000\050\003\uff9e\030\uff9e\031\uff9e\032\uff9e\034\uff9e" +
    "\035\uff9e\036\uff9e\041\uff9e\042\uff9e\053\uff9e\060\uff9e\063" +
    "\uff9e\065\uff9e\066\uff9e\073\uff9e\075\uff9e\076\uff9e\100\uff9e" +
    "\101\uff9e\001\002\000\022\007\126\027\131\037\124\040" +
    "\125\053\127\054\133\055\123\056\116\001\002\000\004" +
    "\007\303\001\002\000\034\003\076\030\075\031\107\032" +
    "\060\034\106\035\057\036\065\041\062\053\063\060\071" +
    "\065\300\066\054\100\067\001\002\000\022\007\126\027" +
    "\131\037\124\040\125\053\127\054\133\055\123\056\116" +
    "\001\002\000\004\006\274\001\002\000\032\007\151\042" +
    "\uffe9\052\267\053\127\054\133\055\123\056\116\063\uffe9" +
    "\073\uffe9\075\uffe9\076\uffe9\101\uffe9\001\002\000\034\003" +
    "\uffab\030\uffab\031\uffab\032\uffab\034\uffab\035\uffab\036\uffab" +
    "\041\uffab\053\uffab\060\uffab\065\uffab\066\uffab\100\uffab\001" +
    "\002\000\050\003\uff9f\030\uff9f\031\uff9f\032\uff9f\034\uff9f" +
    "\035\uff9f\036\uff9f\041\uff9f\042\uff9f\053\uff9f\060\uff9f\063" +
    "\uff9f\065\uff9f\066\uff9f\073\uff9f\075\uff9f\076\uff9f\100\uff9f" +
    "\101\uff9f\001\002\000\004\101\264\001\002\000\034\003" +
    "\076\030\075\031\107\032\060\034\106\035\057\036\065" +
    "\041\062\053\063\060\071\065\064\066\054\100\067\001" +
    "\002\000\004\053\240\001\002\000\050\003\uffe3\030\uffe3" +
    "\031\uffe3\032\uffe3\034\uffe3\035\uffe3\036\uffe3\041\uffe3\042" +
    "\uffe3\053\uffe3\060\uffe3\063\uffe3\065\uffe3\066\uffe3\073\uffe3" +
    "\075\uffe3\076\uffe3\100\uffe3\101\uffe3\001\002\000\050\003" +
    "\uffe6\030\uffe6\031\uffe6\032\uffe6\034\uffe6\035\uffe6\036\uffe6" +
    "\041\uffe6\042\uffe6\053\uffe6\060\uffe6\063\uffe6\065\uffe6\066" +
    "\uffe6\073\uffe6\075\uffe6\076\uffe6\100\uffe6\101\uffe6\001\002" +
    "\000\050\003\uffe2\030\uffe2\031\uffe2\032\uffe2\034\uffe2\035" +
    "\uffe2\036\uffe2\041\uffe2\042\uffe2\053\uffe2\060\uffe2\063\uffe2" +
    "\065\uffe2\066\uffe2\073\uffe2\075\uffe2\076\uffe2\100\uffe2\101" +
    "\uffe2\001\002\000\004\007\235\001\002\000\050\003\uffe0" +
    "\030\uffe0\031\uffe0\032\uffe0\034\uffe0\035\uffe0\036\uffe0\041" +
    "\uffe0\042\uffe0\053\uffe0\060\uffe0\063\uffe0\065\uffe0\066\uffe0" +
    "\073\uffe0\075\uffe0\076\uffe0\100\uffe0\101\uffe0\001\002\000" +
    "\016\042\uffef\063\uffef\073\uffef\075\uffef\076\uffef\101\uffef" +
    "\001\002\000\034\003\076\030\075\031\107\032\060\034" +
    "\106\035\057\036\065\041\062\053\063\060\071\065\064" +
    "\066\054\100\067\001\002\000\050\003\uffe4\030\uffe4\031" +
    "\uffe4\032\uffe4\034\uffe4\035\uffe4\036\uffe4\041\uffe4\042\uffe4" +
    "\053\uffe4\060\uffe4\063\uffe4\065\uffe4\066\uffe4\073\uffe4\075" +
    "\uffe4\076\uffe4\100\uffe4\101\uffe4\001\002\000\050\003\uffe1" +
    "\030\uffe1\031\uffe1\032\uffe1\034\uffe1\035\uffe1\036\uffe1\041" +
    "\uffe1\042\uffe1\053\uffe1\060\uffe1\063\uffe1\065\uffe1\066\uffe1" +
    "\073\uffe1\075\uffe1\076\uffe1\100\uffe1\101\uffe1\001\002\000" +
    "\004\101\203\001\002\000\004\063\177\001\002\000\034" +
    "\003\076\030\075\031\107\032\060\034\106\035\057\036" +
    "\065\041\062\053\063\060\071\065\064\066\054\100\067" +
    "\001\002\000\004\053\uffcf\001\002\000\004\007\172\001" +
    "\002\000\034\003\076\030\075\031\107\032\060\034\106" +
    "\035\057\036\065\041\062\053\063\060\071\065\064\066" +
    "\054\100\067\001\002\000\050\003\uffd6\030\uffd6\031\uffd6" +
    "\032\uffd6\034\uffd6\035\uffd6\036\uffd6\041\uffd6\042\uffd6\053" +
    "\uffd6\060\uffd6\063\uffd6\065\uffd6\066\uffd6\073\uffd6\075\uffd6" +
    "\076\uffd6\100\uffd6\101\uffd6\001\002\000\050\003\uffe7\030" +
    "\uffe7\031\uffe7\032\uffe7\034\uffe7\035\uffe7\036\uffe7\041\uffe7" +
    "\042\uffeb\053\uffe7\060\uffe7\063\uffeb\065\uffe7\066\uffe7\073" +
    "\uffeb\075\uffeb\076\uffeb\100\uffe7\101\uffeb\001\002\000\004" +
    "\075\114\001\002\000\004\035\115\001\002\000\022\007" +
    "\126\027\131\037\124\040\125\053\127\054\133\055\123" +
    "\056\116\001\002\000\154\003\uffc2\006\uffc2\010\uffc2\011" +
    "\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\020\uffc2\021\uffc2" +
    "\025\uffc2\026\uffc2\030\uffc2\031\uffc2\032\uffc2\034\uffc2\035" +
    "\uffc2\036\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2" +
    "\046\uffc2\047\uffc2\050\uffc2\051\uffc2\053\uffc2\060\uffc2\061" +
    "\uffc2\063\uffc2\065\uffc2\066\uffc2\071\uffc2\072\uffc2\073\uffc2" +
    "\074\uffc2\075\uffc2\076\uffc2\077\uffc2\100\uffc2\101\uffc2\111" +
    "\uffc2\112\uffc2\113\uffc2\114\uffc2\116\uffc2\117\uffc2\120\uffc2" +
    "\121\uffc2\122\uffc2\132\uffc2\137\uffc2\001\002\000\062\003" +
    "\uffb7\010\uffb7\025\uffb7\026\uffb7\030\uffb7\031\uffb7\032\uffb7" +
    "\034\uffb7\035\uffb7\036\uffb7\041\uffb7\042\uffb7\053\uffb7\060" +
    "\uffb7\063\uffb7\065\uffb7\066\uffb7\073\uffb7\075\uffb7\076\uffb7" +
    "\077\uffb7\100\uffb7\101\uffb7\117\uffb7\001\002\000\146\003" +
    "\uffc4\006\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4" +
    "\015\uffc4\020\uffc4\021\uffc4\030\uffc4\031\uffc4\032\uffc4\034" +
    "\uffc4\035\uffc4\036\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4" +
    "\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\053\uffc4\060" +
    "\uffc4\061\uffc4\063\uffc4\065\uffc4\066\uffc4\071\uffc4\072\uffc4" +
    "\073\uffc4\074\uffc4\075\uffc4\076\uffc4\100\uffc4\101\uffc4\111" +
    "\uffc4\112\uffc4\113\uffc4\114\uffc4\116\uffc4\117\uffc4\120\uffc4" +
    "\121\uffc4\122\uffc4\132\uffc4\137\uffc4\001\002\000\052\003" +
    "\uffac\025\170\030\uffac\031\uffac\032\uffac\034\uffac\035\uffac" +
    "\036\uffac\041\uffac\042\uffac\053\uffac\060\uffac\063\uffac\065" +
    "\uffac\066\uffac\073\uffac\075\uffac\076\uffac\100\uffac\101\uffac" +
    "\001\002\000\146\003\uffc8\006\uffc8\010\uffc8\011\uffc8\012" +
    "\uffc8\013\157\014\160\015\156\020\uffc8\021\uffc8\030\uffc8" +
    "\031\uffc8\032\uffc8\034\uffc8\035\uffc8\036\uffc8\041\uffc8\042" +
    "\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8" +
    "\051\uffc8\053\uffc8\060\uffc8\061\uffc8\063\uffc8\065\uffc8\066" +
    "\uffc8\071\uffc8\072\uffc8\073\uffc8\074\uffc8\075\uffc8\076\uffc8" +
    "\100\uffc8\101\uffc8\111\uffc8\112\uffc8\113\uffc8\114\uffc8\116" +
    "\uffc8\117\uffc8\120\uffc8\121\uffc8\122\uffc8\132\uffc8\137\uffc8" +
    "\001\002\000\154\003\uffc3\006\uffc3\010\uffc3\011\uffc3\012" +
    "\uffc3\013\uffc3\014\uffc3\015\uffc3\020\uffc3\021\uffc3\025\uffc3" +
    "\026\uffc3\030\uffc3\031\uffc3\032\uffc3\034\uffc3\035\uffc3\036" +
    "\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3" +
    "\047\uffc3\050\uffc3\051\uffc3\053\uffc3\060\uffc3\061\uffc3\063" +
    "\uffc3\065\uffc3\066\uffc3\071\uffc3\072\uffc3\073\uffc3\074\uffc3" +
    "\075\uffc3\076\uffc3\077\uffc3\100\uffc3\101\uffc3\111\uffc3\112" +
    "\uffc3\113\uffc3\114\uffc3\116\uffc3\117\uffc3\120\uffc3\121\uffc3" +
    "\122\uffc3\132\uffc3\137\uffc3\001\002\000\062\003\uffb6\010" +
    "\uffb6\025\uffb6\026\uffb6\030\uffb6\031\uffb6\032\uffb6\034\uffb6" +
    "\035\uffb6\036\uffb6\041\uffb6\042\uffb6\053\uffb6\060\uffb6\063" +
    "\uffb6\065\uffb6\066\uffb6\073\uffb6\075\uffb6\076\uffb6\077\uffb6" +
    "\100\uffb6\101\uffb6\117\uffb6\001\002\000\062\003\uffb5\010" +
    "\uffb5\025\uffb5\026\uffb5\030\uffb5\031\uffb5\032\uffb5\034\uffb5" +
    "\035\uffb5\036\uffb5\041\uffb5\042\uffb5\053\uffb5\060\uffb5\063" +
    "\uffb5\065\uffb5\066\uffb5\073\uffb5\075\uffb5\076\uffb5\077\uffb5" +
    "\100\uffb5\101\uffb5\117\uffb5\001\002\000\022\007\126\027" +
    "\131\037\124\040\125\053\127\054\133\055\123\056\116" +
    "\001\002\000\154\003\uffc0\006\uffc0\010\uffc0\011\uffc0\012" +
    "\uffc0\013\uffc0\014\uffc0\015\uffc0\020\uffc0\021\uffc0\025\uffc0" +
    "\026\uffc0\030\uffc0\031\uffc0\032\uffc0\034\uffc0\035\uffc0\036" +
    "\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0" +
    "\047\uffc0\050\uffc0\051\uffc0\053\uffc0\060\uffc0\061\uffc0\063" +
    "\uffc0\065\uffc0\066\uffc0\071\uffc0\072\uffc0\073\uffc0\074\uffc0" +
    "\075\uffc0\076\uffc0\077\uffc0\100\uffc0\101\uffc0\111\uffc0\112" +
    "\uffc0\113\uffc0\114\uffc0\116\uffc0\117\uffc0\120\uffc0\121\uffc0" +
    "\122\uffc0\132\uffc0\137\uffc0\001\002\000\022\006\142\011" +
    "\144\012\140\043\147\046\143\047\146\050\141\074\150" +
    "\001\002\000\020\007\126\037\124\040\125\053\127\054" +
    "\133\055\123\056\116\001\002\000\062\003\uffb9\010\uffb9" +
    "\025\uffb9\026\uffb9\030\uffb9\031\uffb9\032\uffb9\034\uffb9\035" +
    "\uffb9\036\uffb9\041\uffb9\042\uffb9\053\uffb9\060\uffb9\063\uffb9" +
    "\065\uffb9\066\uffb9\073\uffb9\075\uffb9\076\uffb9\077\uffb9\100" +
    "\uffb9\101\uffb9\117\uffb9\001\002\000\154\003\uffc1\006\uffc1" +
    "\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\020" +
    "\uffc1\021\uffc1\025\uffc1\026\uffc1\030\uffc1\031\uffc1\032\uffc1" +
    "\034\uffc1\035\uffc1\036\uffc1\041\uffc1\042\uffc1\043\uffc1\044" +
    "\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\053\uffc1" +
    "\060\uffc1\061\uffc1\063\uffc1\065\uffc1\066\uffc1\071\uffc1\072" +
    "\uffc1\073\uffc1\074\uffc1\075\uffc1\076\uffc1\077\uffc1\100\uffc1" +
    "\101\uffc1\111\uffc1\112\uffc1\113\uffc1\114\uffc1\116\uffc1\117" +
    "\uffc1\120\uffc1\121\uffc1\122\uffc1\132\uffc1\137\uffc1\001\002" +
    "\000\062\003\uffbb\010\uffbb\025\uffbb\026\135\030\uffbb\031" +
    "\uffbb\032\uffbb\034\uffbb\035\uffbb\036\uffbb\041\uffbb\042\uffbb" +
    "\053\uffbb\060\uffbb\063\uffbb\065\uffbb\066\uffbb\073\uffbb\075" +
    "\uffbb\076\uffbb\077\uffbb\100\uffbb\101\uffbb\117\uffbb\001\002" +
    "\000\022\007\126\027\131\037\124\040\125\053\127\054" +
    "\133\055\123\056\116\001\002\000\062\003\uffba\010\uffba" +
    "\025\uffba\026\uffba\030\uffba\031\uffba\032\uffba\034\uffba\035" +
    "\uffba\036\uffba\041\uffba\042\uffba\053\uffba\060\uffba\063\uffba" +
    "\065\uffba\066\uffba\073\uffba\075\uffba\076\uffba\077\uffba\100" +
    "\uffba\101\uffba\117\uffba\001\002\000\062\003\uffb8\010\uffb8" +
    "\025\uffb8\026\uffb8\030\uffb8\031\uffb8\032\uffb8\034\uffb8\035" +
    "\uffb8\036\uffb8\041\uffb8\042\uffb8\053\uffb8\060\uffb8\063\uffb8" +
    "\065\uffb8\066\uffb8\073\uffb8\075\uffb8\076\uffb8\077\uffb8\100" +
    "\uffb8\101\uffb8\117\uffb8\001\002\000\014\007\151\053\127" +
    "\054\133\055\123\056\116\001\002\000\014\007\uffad\053" +
    "\uffad\054\uffad\055\uffad\056\uffad\001\002\000\014\007\uffb2" +
    "\053\uffb2\054\uffb2\055\uffb2\056\uffb2\001\002\000\014\007" +
    "\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\001\002\000\014" +
    "\007\151\053\127\054\133\055\123\056\116\001\002\000" +
    "\014\007\151\053\127\054\133\055\123\056\116\001\002" +
    "\000\014\007\uffae\053\uffae\054\uffae\055\uffae\056\uffae\001" +
    "\002\000\014\007\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0" +
    "\001\002\000\014\007\uffb1\053\uffb1\054\uffb1\055\uffb1\056" +
    "\uffb1\001\002\000\014\007\151\053\127\054\133\055\123" +
    "\056\116\001\002\000\062\003\uffb4\010\uffb4\025\uffb4\026" +
    "\uffb4\030\uffb4\031\uffb4\032\uffb4\034\uffb4\035\uffb4\036\uffb4" +
    "\041\uffb4\042\uffb4\053\uffb4\060\uffb4\063\uffb4\065\uffb4\066" +
    "\uffb4\073\uffb4\075\uffb4\076\uffb4\077\uffb4\100\uffb4\101\uffb4" +
    "\117\uffb4\001\002\000\010\010\154\011\144\012\140\001" +
    "\002\000\154\003\uffbf\006\uffbf\010\uffbf\011\uffbf\012\uffbf" +
    "\013\uffbf\014\uffbf\015\uffbf\020\uffbf\021\uffbf\025\uffbf\026" +
    "\uffbf\030\uffbf\031\uffbf\032\uffbf\034\uffbf\035\uffbf\036\uffbf" +
    "\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047" +
    "\uffbf\050\uffbf\051\uffbf\053\uffbf\060\uffbf\061\uffbf\063\uffbf" +
    "\065\uffbf\066\uffbf\071\uffbf\072\uffbf\073\uffbf\074\uffbf\075" +
    "\uffbf\076\uffbf\077\uffbf\100\uffbf\101\uffbf\111\uffbf\112\uffbf" +
    "\113\uffbf\114\uffbf\116\uffbf\117\uffbf\120\uffbf\121\uffbf\122" +
    "\uffbf\132\uffbf\137\uffbf\001\002\000\146\003\uffca\006\uffca" +
    "\010\uffca\011\uffca\012\uffca\013\157\014\160\015\156\020" +
    "\uffca\021\uffca\030\uffca\031\uffca\032\uffca\034\uffca\035\uffca" +
    "\036\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046" +
    "\uffca\047\uffca\050\uffca\051\uffca\053\uffca\060\uffca\061\uffca" +
    "\063\uffca\065\uffca\066\uffca\071\uffca\072\uffca\073\uffca\074" +
    "\uffca\075\uffca\076\uffca\100\uffca\101\uffca\111\uffca\112\uffca" +
    "\113\uffca\114\uffca\116\uffca\117\uffca\120\uffca\121\uffca\122" +
    "\uffca\132\uffca\137\uffca\001\002\000\014\007\151\053\127" +
    "\054\133\055\123\056\116\001\002\000\014\007\151\053" +
    "\127\054\133\055\123\056\116\001\002\000\014\007\151" +
    "\053\127\054\133\055\123\056\116\001\002\000\146\003" +
    "\uffc6\006\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6" +
    "\015\uffc6\020\uffc6\021\uffc6\030\uffc6\031\uffc6\032\uffc6\034" +
    "\uffc6\035\uffc6\036\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6" +
    "\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\053\uffc6\060" +
    "\uffc6\061\uffc6\063\uffc6\065\uffc6\066\uffc6\071\uffc6\072\uffc6" +
    "\073\uffc6\074\uffc6\075\uffc6\076\uffc6\100\uffc6\101\uffc6\111" +
    "\uffc6\112\uffc6\113\uffc6\114\uffc6\116\uffc6\117\uffc6\120\uffc6" +
    "\121\uffc6\122\uffc6\132\uffc6\137\uffc6\001\002\000\146\003" +
    "\uffc7\006\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7" +
    "\015\uffc7\020\uffc7\021\uffc7\030\uffc7\031\uffc7\032\uffc7\034" +
    "\uffc7\035\uffc7\036\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7" +
    "\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\053\uffc7\060" +
    "\uffc7\061\uffc7\063\uffc7\065\uffc7\066\uffc7\071\uffc7\072\uffc7" +
    "\073\uffc7\074\uffc7\075\uffc7\076\uffc7\100\uffc7\101\uffc7\111" +
    "\uffc7\112\uffc7\113\uffc7\114\uffc7\116\uffc7\117\uffc7\120\uffc7" +
    "\121\uffc7\122\uffc7\132\uffc7\137\uffc7\001\002\000\146\003" +
    "\uffc5\006\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5" +
    "\015\uffc5\020\uffc5\021\uffc5\030\uffc5\031\uffc5\032\uffc5\034" +
    "\uffc5\035\uffc5\036\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5" +
    "\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\053\uffc5\060" +
    "\uffc5\061\uffc5\063\uffc5\065\uffc5\066\uffc5\071\uffc5\072\uffc5" +
    "\073\uffc5\074\uffc5\075\uffc5\076\uffc5\100\uffc5\101\uffc5\111" +
    "\uffc5\112\uffc5\113\uffc5\114\uffc5\116\uffc5\117\uffc5\120\uffc5" +
    "\121\uffc5\122\uffc5\132\uffc5\137\uffc5\001\002\000\146\003" +
    "\uffc9\006\uffc9\010\uffc9\011\uffc9\012\uffc9\013\157\014\160" +
    "\015\156\020\uffc9\021\uffc9\030\uffc9\031\uffc9\032\uffc9\034" +
    "\uffc9\035\uffc9\036\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9" +
    "\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\053\uffc9\060" +
    "\uffc9\061\uffc9\063\uffc9\065\uffc9\066\uffc9\071\uffc9\072\uffc9" +
    "\073\uffc9\074\uffc9\075\uffc9\076\uffc9\100\uffc9\101\uffc9\111" +
    "\uffc9\112\uffc9\113\uffc9\114\uffc9\116\uffc9\117\uffc9\120\uffc9" +
    "\121\uffc9\122\uffc9\132\uffc9\137\uffc9\001\002\000\006\010" +
    "\167\025\170\001\002\000\024\006\142\010\154\011\144" +
    "\012\140\043\147\046\143\047\146\050\141\074\150\001" +
    "\002\000\062\003\uffb3\010\uffb3\025\uffb3\026\uffb3\030\uffb3" +
    "\031\uffb3\032\uffb3\034\uffb3\035\uffb3\036\uffb3\041\uffb3\042" +
    "\uffb3\053\uffb3\060\uffb3\063\uffb3\065\uffb3\066\uffb3\073\uffb3" +
    "\075\uffb3\076\uffb3\077\uffb3\100\uffb3\101\uffb3\117\uffb3\001" +
    "\002\000\022\007\126\027\131\037\124\040\125\053\127" +
    "\054\133\055\123\056\116\001\002\000\062\003\uffbc\010" +
    "\uffbc\025\uffbc\026\135\030\uffbc\031\uffbc\032\uffbc\034\uffbc" +
    "\035\uffbc\036\uffbc\041\uffbc\042\uffbc\053\uffbc\060\uffbc\063" +
    "\uffbc\065\uffbc\066\uffbc\073\uffbc\075\uffbc\076\uffbc\077\uffbc" +
    "\100\uffbc\101\uffbc\117\uffbc\001\002\000\004\052\173\001" +
    "\002\000\004\010\174\001\002\000\064\003\uffdd\030\uffdd" +
    "\031\uffdd\032\uffdd\034\uffdd\035\uffdd\036\uffdd\041\uffdd\042" +
    "\uffdd\044\uffdd\045\uffdd\053\uffdd\060\uffdd\063\uffdd\065\uffdd" +
    "\066\uffdd\073\uffdd\075\uffdd\076\uffdd\100\uffdd\101\uffdd\114" +
    "\uffdd\121\uffdd\122\uffdd\137\uffdd\001\002\000\004\073\176" +
    "\001\002\000\050\003\uffd3\030\uffd3\031\uffd3\032\uffd3\034" +
    "\uffd3\035\uffd3\036\uffd3\041\uffd3\042\uffd3\053\uffd3\060\uffd3" +
    "\063\uffd3\065\uffd3\066\uffd3\073\uffd3\075\uffd3\076\uffd3\100" +
    "\uffd3\101\uffd3\001\002\000\004\062\200\001\002\000\014" +
    "\003\ufff9\033\ufff9\057\ufff9\062\ufff9\064\ufff9\001\002\000" +
    "\034\003\076\030\075\031\107\032\060\034\106\035\057" +
    "\036\065\041\062\053\063\060\071\065\064\066\054\100" +
    "\067\001\002\000\006\063\213\101\203\001\002\000\014" +
    "\042\206\053\204\054\211\055\207\056\210\001\002\000" +
    "\034\003\uff8b\030\uff8b\031\uff8b\032\uff8b\034\uff8b\035\uff8b" +
    "\036\uff8b\041\uff8b\053\uff8b\060\uff8b\065\uff8b\066\uff8b\100" +
    "\uff8b\001\002\000\034\003\uff90\030\uff90\031\uff90\032\uff90" +
    "\034\uff90\035\uff90\036\uff90\041\uff90\053\uff90\060\uff90\065" +
    "\uff90\066\uff90\100\uff90\001\002\000\034\003\uff8f\030\uff8f" +
    "\031\uff8f\032\uff8f\034\uff8f\035\uff8f\036\uff8f\041\uff8f\053" +
    "\uff8f\060\uff8f\065\uff8f\066\uff8f\100\uff8f\001\002\000\034" +
    "\003\uff8e\030\uff8e\031\uff8e\032\uff8e\034\uff8e\035\uff8e\036" +
    "\uff8e\041\uff8e\053\uff8e\060\uff8e\065\uff8e\066\uff8e\100\uff8e" +
    "\001\002\000\034\003\uff8d\030\uff8d\031\uff8d\032\uff8d\034" +
    "\uff8d\035\uff8d\036\uff8d\041\uff8d\053\uff8d\060\uff8d\065\uff8d" +
    "\066\uff8d\100\uff8d\001\002\000\034\003\uff8c\030\uff8c\031" +
    "\uff8c\032\uff8c\034\uff8c\035\uff8c\036\uff8c\041\uff8c\053\uff8c" +
    "\060\uff8c\065\uff8c\066\uff8c\100\uff8c\001\002\000\034\003" +
    "\076\030\075\031\107\032\060\034\106\035\057\036\065" +
    "\041\062\053\063\060\071\065\064\066\054\100\067\001" +
    "\002\000\004\100\214\001\002\000\050\003\uff94\030\uff94" +
    "\031\uff94\032\uff94\034\uff94\035\uff94\036\uff94\041\uff94\042" +
    "\uff94\053\uff94\060\uff94\063\uff94\065\uff94\066\uff94\073\uff94" +
    "\075\uff94\076\uff94\100\uff94\101\uff94\001\002\000\006\063" +
    "\uff92\101\uff92\001\002\000\006\063\uff91\101\uff91\001\002" +
    "\000\010\042\223\063\uff99\076\224\001\002\000\034\003" +
    "\076\030\075\031\107\032\060\034\106\035\057\036\065" +
    "\041\062\053\063\060\071\065\064\066\054\100\067\001" +
    "\002\000\034\003\076\030\075\031\107\032\060\034\106" +
    "\035\057\036\065\041\062\053\063\060\071\065\064\066" +
    "\054\100\067\001\002\000\004\063\230\001\002\000\034" +
    "\003\uff98\030\uff98\031\uff98\032\uff98\034\uff98\035\uff98\036" +
    "\uff98\041\uff98\053\uff98\060\uff98\065\uff98\066\uff98\100\uff98" +
    "\001\002\000\022\007\126\027\131\037\124\040\125\053" +
    "\127\054\133\055\123\056\116\001\002\000\040\003\uff95" +
    "\025\170\030\uff95\031\uff95\032\uff95\034\uff95\035\uff95\036" +
    "\uff95\041\uff95\053\uff95\060\uff95\065\uff95\066\uff95\077\227" +
    "\100\uff95\001\002\000\034\003\uff97\030\uff97\031\uff97\032" +
    "\uff97\034\uff97\035\uff97\036\uff97\041\uff97\053\uff97\060\uff97" +
    "\065\uff97\066\uff97\100\uff97\001\002\000\034\003\uff96\030" +
    "\uff96\031\uff96\032\uff96\034\uff96\035\uff96\036\uff96\041\uff96" +
    "\053\uff96\060\uff96\065\uff96\066\uff96\100\uff96\001\002\000" +
    "\004\041\231\001\002\000\050\003\uff9d\030\uff9d\031\uff9d" +
    "\032\uff9d\034\uff9d\035\uff9d\036\uff9d\041\uff9d\042\uff9d\053" +
    "\uff9d\060\uff9d\063\uff9d\065\uff9d\066\uff9d\073\uff9d\075\uff9d" +
    "\076\uff9d\100\uff9d\101\uff9d\001\002\000\010\042\223\063" +
    "\uff99\076\224\001\002\000\004\063\uff9a\001\002\000\004" +
    "\063\uff9b\001\002\000\004\052\236\001\002\000\004\010" +
    "\237\001\002\000\064\003\uffdf\030\uffdf\031\uffdf\032\uffdf" +
    "\034\uffdf\035\uffdf\036\uffdf\041\uffdf\042\uffdf\044\uffdf\045" +
    "\uffdf\053\uffdf\060\uffdf\063\uffdf\065\uffdf\066\uffdf\073\uffdf" +
    "\075\uffdf\076\uffdf\100\uffdf\101\uffdf\114\uffdf\121\uffdf\122" +
    "\uffdf\137\uffdf\001\002\000\012\006\250\021\uffa1\061\uffa1" +
    "\114\uffa1\001\002\000\006\021\245\061\255\001\002\000" +
    "\052\003\uffaa\021\243\030\uffaa\031\uffaa\032\uffaa\034\uffaa" +
    "\035\uffaa\036\uffaa\041\uffaa\042\uffaa\053\uffaa\060\uffaa\063" +
    "\uffaa\065\uffaa\066\uffaa\073\uffaa\075\uffaa\076\uffaa\100\uffaa" +
    "\101\uffaa\001\002\000\004\053\240\001\002\000\006\021" +
    "\245\061\246\001\002\000\004\053\253\001\002\000\010" +
    "\022\035\023\036\024\034\001\002\000\054\003\uffa1\006" +
    "\250\021\uffa1\030\uffa1\031\uffa1\032\uffa1\034\uffa1\035\uffa1" +
    "\036\uffa1\041\uffa1\042\uffa1\053\uffa1\060\uffa1\063\uffa1\065" +
    "\uffa1\066\uffa1\073\uffa1\075\uffa1\076\uffa1\100\uffa1\101\uffa1" +
    "\001\002\000\014\007\151\053\127\054\133\055\123\056" +
    "\116\001\002\000\052\003\uffa9\021\uffa9\030\uffa9\031\uffa9" +
    "\032\uffa9\034\uffa9\035\uffa9\036\uffa9\041\uffa9\042\uffa9\053" +
    "\uffa9\060\uffa9\063\uffa9\065\uffa9\066\uffa9\073\uffa9\075\uffa9" +
    "\076\uffa9\100\uffa9\101\uffa9\001\002\000\062\003\uffa2\011" +
    "\144\012\140\021\uffa2\030\uffa2\031\uffa2\032\uffa2\034\uffa2" +
    "\035\uffa2\036\uffa2\041\uffa2\042\uffa2\053\uffa2\060\uffa2\061" +
    "\uffa2\063\uffa2\065\uffa2\066\uffa2\073\uffa2\075\uffa2\076\uffa2" +
    "\100\uffa2\101\uffa2\114\uffa2\001\002\000\012\006\250\021" +
    "\uffa1\061\uffa1\114\uffa1\001\002\000\010\021\uffa4\061\uffa4" +
    "\114\uffa4\001\002\000\010\022\035\023\036\024\034\001" +
    "\002\000\054\003\uffa1\006\250\021\uffa1\030\uffa1\031\uffa1" +
    "\032\uffa1\034\uffa1\035\uffa1\036\uffa1\041\uffa1\042\uffa1\053" +
    "\uffa1\060\uffa1\063\uffa1\065\uffa1\066\uffa1\073\uffa1\075\uffa1" +
    "\076\uffa1\100\uffa1\101\uffa1\001\002\000\052\003\uffa8\021" +
    "\uffa8\030\uffa8\031\uffa8\032\uffa8\034\uffa8\035\uffa8\036\uffa8" +
    "\041\uffa8\042\uffa8\053\uffa8\060\uffa8\063\uffa8\065\uffa8\066" +
    "\uffa8\073\uffa8\075\uffa8\076\uffa8\100\uffa8\101\uffa8\001\002" +
    "\000\010\021\uffa3\061\uffa3\114\uffa3\001\002\000\004\063" +
    "\262\001\002\000\004\035\263\001\002\000\050\003\uffbe" +
    "\030\uffbe\031\uffbe\032\uffbe\034\uffbe\035\uffbe\036\uffbe\041" +
    "\uffbe\042\uffbe\053\uffbe\060\uffbe\063\uffbe\065\uffbe\066\uffbe" +
    "\073\uffbe\075\uffbe\076\uffbe\100\uffbe\101\uffbe\001\002\000" +
    "\004\053\265\001\002\000\004\101\uff93\001\002\000\022" +
    "\010\uffd9\020\uffd9\042\uffd9\063\uffd9\073\uffd9\075\uffd9\076" +
    "\uffd9\101\uffd9\001\002\000\024\010\uffd8\020\uffd8\021\uffd8" +
    "\042\uffd8\063\uffd8\073\uffd8\075\uffd8\076\uffd8\101\uffd8\001" +
    "\002\000\020\020\272\042\uffea\063\uffea\073\uffea\075\uffea" +
    "\076\uffea\101\uffea\001\002\000\030\010\uffd7\011\144\012" +
    "\140\020\uffd7\021\uffd7\042\uffd7\063\uffd7\073\uffd7\075\uffd7" +
    "\076\uffd7\101\uffd7\001\002\000\016\007\151\052\267\053" +
    "\127\054\133\055\123\056\116\001\002\000\022\010\uffda" +
    "\020\uffda\042\uffda\063\uffda\073\uffda\075\uffda\076\uffda\101" +
    "\uffda\001\002\000\014\007\151\053\127\054\133\055\123" +
    "\056\116\001\002\000\054\003\uffa0\011\144\012\140\030" +
    "\uffa0\031\uffa0\032\uffa0\034\uffa0\035\uffa0\036\uffa0\041\uffa0" +
    "\042\uffa0\053\uffa0\060\uffa0\063\uffa0\065\uffa0\066\uffa0\073" +
    "\uffa0\075\uffa0\076\uffa0\100\uffa0\101\uffa0\001\002\000\040" +
    "\003\uff95\025\170\030\uff95\031\uff95\032\uff95\034\uff95\035" +
    "\uff95\036\uff95\041\uff95\053\uff95\060\uff95\065\uff95\066\uff95" +
    "\077\227\100\uff95\001\002\000\034\003\uff9c\030\uff9c\031" +
    "\uff9c\032\uff9c\034\uff9c\035\uff9c\036\uff9c\041\uff9c\053\uff9c" +
    "\060\uff9c\065\uff9c\066\uff9c\100\uff9c\001\002\000\032\007" +
    "\151\042\uffec\052\267\053\127\054\133\055\123\056\116" +
    "\063\uffec\073\uffec\075\uffec\076\uffec\101\uffec\001\002\000" +
    "\050\003\uffe8\030\uffe8\031\uffe8\032\uffe8\034\uffe8\035\uffe8" +
    "\036\uffe8\041\uffe8\042\uffee\053\uffe8\060\uffe8\063\uffee\065" +
    "\uffe8\066\uffe8\073\uffee\075\uffee\076\uffee\100\uffe8\101\uffee" +
    "\001\002\000\020\020\272\042\uffed\063\uffed\073\uffed\075" +
    "\uffed\076\uffed\101\uffed\001\002\000\004\052\304\001\002" +
    "\000\004\010\305\001\002\000\064\003\uffde\030\uffde\031" +
    "\uffde\032\uffde\034\uffde\035\uffde\036\uffde\041\uffde\042\uffde" +
    "\044\uffde\045\uffde\053\uffde\060\uffde\063\uffde\065\uffde\066" +
    "\uffde\073\uffde\075\uffde\076\uffde\100\uffde\101\uffde\114\uffde" +
    "\121\uffde\122\uffde\137\uffde\001\002\000\036\003\uffbd\025" +
    "\170\030\uffbd\031\uffbd\032\uffbd\034\uffbd\035\uffbd\036\uffbd" +
    "\041\uffbd\053\uffbd\060\uffbd\065\uffbd\066\uffbd\100\uffbd\001" +
    "\002\000\006\067\311\070\310\001\002\000\004\007\315" +
    "\001\002\000\004\007\312\001\002\000\016\007\151\052" +
    "\267\053\127\054\133\055\123\056\116\001\002\000\006" +
    "\010\314\020\272\001\002\000\050\003\uffdc\030\uffdc\031" +
    "\uffdc\032\uffdc\034\uffdc\035\uffdc\036\uffdc\041\uffdc\042\uffdc" +
    "\053\uffdc\060\uffdc\063\uffdc\065\uffdc\066\uffdc\073\uffdc\075" +
    "\uffdc\076\uffdc\100\uffdc\101\uffdc\001\002\000\016\007\151" +
    "\052\267\053\127\054\133\055\123\056\116\001\002\000" +
    "\006\010\317\020\272\001\002\000\050\003\uffdb\030\uffdb" +
    "\031\uffdb\032\uffdb\034\uffdb\035\uffdb\036\uffdb\041\uffdb\042" +
    "\uffdb\053\uffdb\060\uffdb\063\uffdb\065\uffdb\066\uffdb\073\uffdb" +
    "\075\uffdb\076\uffdb\100\uffdb\101\uffdb\001\002\000\014\007" +
    "\151\053\127\054\133\055\123\056\116\001\002\000\042" +
    "\003\uffcb\011\144\012\140\030\uffcb\031\uffcb\032\uffcb\034" +
    "\uffcb\035\uffcb\036\uffcb\041\uffcb\053\uffcb\060\uffcb\065\uffcb" +
    "\066\uffcb\072\323\100\uffcb\001\002\000\034\003\uffd2\030" +
    "\uffd2\031\uffd2\032\uffd2\034\uffd2\035\uffd2\036\uffd2\041\uffd2" +
    "\053\uffd2\060\uffd2\065\uffd2\066\uffd2\100\uffd2\001\002\000" +
    "\016\011\325\012\326\053\204\054\211\055\207\056\210" +
    "\001\002\000\034\003\uffce\030\uffce\031\uffce\032\uffce\034" +
    "\uffce\035\uffce\036\uffce\041\uffce\053\uffce\060\uffce\065\uffce" +
    "\066\uffce\100\uffce\001\002\000\012\053\204\054\211\055" +
    "\207\056\210\001\002\000\012\053\204\054\211\055\207" +
    "\056\210\001\002\000\034\003\uffcd\030\uffcd\031\uffcd\032" +
    "\uffcd\034\uffcd\035\uffcd\036\uffcd\041\uffcd\053\uffcd\060\uffcd" +
    "\065\uffcd\066\uffcd\100\uffcd\001\002\000\034\003\uffcc\030" +
    "\uffcc\031\uffcc\032\uffcc\034\uffcc\035\uffcc\036\uffcc\041\uffcc" +
    "\053\uffcc\060\uffcc\065\uffcc\066\uffcc\100\uffcc\001\002\000" +
    "\006\006\332\061\333\001\002\000\014\007\151\053\127" +
    "\054\133\055\123\056\116\001\002\000\010\022\035\023" +
    "\036\024\034\001\002\000\004\006\335\001\002\000\014" +
    "\007\151\053\127\054\133\055\123\056\116\001\002\000" +
    "\010\011\144\012\140\071\uffd1\001\002\000\010\011\144" +
    "\012\140\071\uffd0\001\002\000\004\063\341\001\002\000" +
    "\004\064\342\001\002\000\014\003\ufff7\033\ufff7\057\ufff7" +
    "\062\ufff7\064\ufff7\001\002\000\004\102\u01c4\001\002\000" +
    "\006\033\uff89\102\uff89\001\002\000\006\033\uff87\102\uff87" +
    "\001\002\000\006\033\351\102\uff8a\001\002\000\006\033" +
    "\uff88\102\uff88\001\002\000\004\115\354\001\002\000\004" +
    "\103\352\001\002\000\004\053\353\001\002\000\004\115" +
    "\uff85\001\002\000\042\003\373\022\035\023\036\024\034" +
    "\030\366\031\u0107\032\u0101\033\u0105\034\362\035\u0102\036" +
    "\u010e\041\367\053\370\106\377\107\376\110\u0104\001\002" +
    "\000\004\115\u01be\001\002\000\044\003\uff81\022\uff81\023" +
    "\uff81\024\uff81\030\uff81\031\uff81\032\uff81\033\uff81\034\uff81" +
    "\035\uff81\036\uff81\041\uff81\053\uff81\106\uff81\107\uff81\110" +
    "\uff81\116\uff81\001\002\000\004\114\u01bd\001\002\000\054" +
    "\003\uff5f\022\uff5f\023\uff5f\024\uff5f\030\uff5f\031\uff5f\032" +
    "\uff5f\033\uff5f\034\uff5f\035\uff5f\036\uff5f\041\uff5f\053\uff5f" +
    "\105\uff5f\106\uff5f\107\uff5f\110\uff5f\111\uff5f\112\uff5f\113" +
    "\uff5f\116\uff5f\001\002\000\044\003\uff80\022\uff80\023\uff80" +
    "\024\uff80\030\uff80\031\uff80\032\uff80\033\uff80\034\uff80\035" +
    "\uff80\036\uff80\041\uff80\053\uff80\106\uff80\107\uff80\110\uff80" +
    "\116\uff80\001\002\000\004\007\u0198\001\002\000\004\115" +
    "\u0195\001\002\000\004\115\u0184\001\002\000\004\114\u0183" +
    "\001\002\000\004\007\u0180\001\002\000\004\007\u017d\001" +
    "\002\000\004\006\u017b\001\002\000\054\003\uff4a\022\uff4a" +
    "\023\uff4a\024\uff4a\030\uff4a\031\uff4a\032\uff4a\033\uff4a\034" +
    "\uff4a\035\uff4a\036\uff4a\041\uff4a\053\uff4a\105\uff4a\106\uff4a" +
    "\107\uff4a\110\uff4a\111\uff4a\112\uff4a\113\uff4a\116\uff4a\001" +
    "\002\000\004\115\u0178\001\002\000\054\003\uff5e\022\uff5e" +
    "\023\uff5e\024\uff5e\030\uff5e\031\uff5e\032\uff5e\033\uff5e\034" +
    "\uff5e\035\uff5e\036\uff5e\041\uff5e\053\uff5e\105\uff5e\106\uff5e" +
    "\107\uff5e\110\uff5e\111\uff5e\112\uff5e\113\uff5e\116\uff5e\001" +
    "\002\000\044\003\uff7f\022\uff7f\023\uff7f\024\uff7f\030\uff7f" +
    "\031\uff7f\032\uff7f\033\uff7f\034\uff7f\035\uff7f\036\uff7f\041" +
    "\uff7f\053\uff7f\106\uff7f\107\uff7f\110\uff7f\116\uff7f\001\002" +
    "\000\004\114\u0177\001\002\000\004\007\u0174\001\002\000" +
    "\004\007\u016a\001\002\000\004\115\u0166\001\002\000\004" +
    "\007\u0163\001\002\000\004\007\u014c\001\002\000\004\114" +
    "\u014b\001\002\000\004\007\u0148\001\002\000\014\022\035" +
    "\023\036\024\034\053\u0133\104\u0135\001\002\000\004\115" +
    "\u0130\001\002\000\004\007\u012d\001\002\000\054\003\uff62" +
    "\022\uff62\023\uff62\024\uff62\030\uff62\031\uff62\032\uff62\033" +
    "\uff62\034\uff62\035\uff62\036\uff62\041\uff62\053\uff62\105\uff62" +
    "\106\uff62\107\uff62\110\uff62\111\uff62\112\uff62\113\uff62\116" +
    "\uff62\001\002\000\004\115\u0124\001\002\000\044\003\uff7d" +
    "\022\uff7d\023\uff7d\024\uff7d\030\uff7d\031\uff7d\032\uff7d\033" +
    "\uff7d\034\uff7d\035\uff7d\036\uff7d\041\uff7d\053\uff7d\106\uff7d" +
    "\107\uff7d\110\uff7d\116\uff7d\001\002\000\004\053\240\001" +
    "\002\000\044\003\373\022\035\023\036\024\034\030\366" +
    "\031\u0107\032\u0101\033\u0105\034\362\035\u0102\036\u010e\041" +
    "\367\053\370\106\377\107\376\110\u0104\116\u0122\001\002" +
    "\000\044\003\uff7e\022\uff7e\023\uff7e\024\uff7e\030\uff7e\031" +
    "\uff7e\032\uff7e\033\uff7e\034\uff7e\035\uff7e\036\uff7e\041\uff7e" +
    "\053\uff7e\106\uff7e\107\uff7e\110\uff7e\116\uff7e\001\002\000" +
    "\004\115\u010f\001\002\000\042\003\373\022\035\023\036" +
    "\024\034\030\366\031\u0107\032\u0101\033\u0111\034\362\035" +
    "\u0102\036\u010e\041\367\053\370\106\377\107\376\110\u0104" +
    "\001\002\000\054\003\uff6f\022\uff6f\023\uff6f\024\uff6f\030" +
    "\uff6f\031\uff6f\032\uff6f\033\uff6f\034\uff6f\035\uff6f\036\uff6f" +
    "\041\uff6f\053\uff6f\105\uff6f\106\uff6f\107\uff6f\110\uff6f\111" +
    "\uff6f\112\uff6f\113\uff6f\116\uff6f\001\002\000\010\022\035" +
    "\023\036\024\034\001\002\000\054\003\373\022\035\023" +
    "\036\024\034\030\366\031\u0107\032\u0101\033\u0111\034\362" +
    "\035\u0102\036\u010e\041\367\053\370\105\u0118\106\377\107" +
    "\376\110\u0104\111\uff71\112\uff71\113\uff71\116\uff71\001\002" +
    "\000\004\116\u0114\001\002\000\004\035\u0102\001\002\000" +
    "\004\114\u0116\001\002\000\054\003\uff56\022\uff56\023\uff56" +
    "\024\uff56\030\uff56\031\uff56\032\uff56\033\uff56\034\uff56\035" +
    "\uff56\036\uff56\041\uff56\053\uff56\105\uff56\106\uff56\107\uff56" +
    "\110\uff56\111\uff56\112\uff56\113\uff56\116\uff56\001\002\000" +
    "\054\003\uff70\022\uff70\023\uff70\024\uff70\030\uff70\031\uff70" +
    "\032\uff70\033\uff70\034\uff70\035\uff70\036\uff70\041\uff70\053" +
    "\uff70\105\uff70\106\uff70\107\uff70\110\uff70\111\uff70\112\uff70" +
    "\113\uff70\116\uff70\001\002\000\016\007\151\052\u011b\053" +
    "\127\054\133\055\123\056\116\001\002\000\012\111\uff72" +
    "\112\uff72\113\uff72\116\uff72\001\002\000\016\011\u011d\111" +
    "\uff6e\112\uff6e\113\uff6e\116\uff6e\117\uff6e\001\002\000\016" +
    "\011\uff6b\111\uff6b\112\uff6b\113\uff6b\116\uff6b\117\uff6b\001" +
    "\002\000\020\011\144\012\140\111\uff6d\112\uff6d\113\uff6d" +
    "\116\uff6d\117\uff6d\001\002\000\004\052\u011e\001\002\000" +
    "\016\011\uff6c\111\uff6c\112\uff6c\113\uff6c\116\uff6c\117\uff6c" +
    "\001\002\000\004\053\240\001\002\000\006\021\245\114" +
    "\uff4d\001\002\000\044\003\uff82\022\uff82\023\uff82\024\uff82" +
    "\030\uff82\031\uff82\032\uff82\033\uff82\034\uff82\035\uff82\036" +
    "\uff82\041\uff82\053\uff82\106\uff82\107\uff82\110\uff82\116\uff82" +
    "\001\002\000\006\033\uff86\102\uff86\001\002\000\006\021" +
    "\245\114\uff4c\001\002\000\042\003\373\022\035\023\036" +
    "\024\034\030\366\031\u0107\032\u0101\033\u0111\034\362\035" +
    "\u0102\036\u010e\041\367\053\370\106\377\107\376\110\u0104" +
    "\001\002\000\004\116\u0126\001\002\000\056\003\uff44\022" +
    "\uff44\023\uff44\024\uff44\030\uff44\031\uff44\032\uff44\033\uff44" +
    "\034\uff44\035\uff44\036\uff44\041\uff44\042\u0127\053\uff44\105" +
    "\uff44\106\uff44\107\uff44\110\uff44\111\uff44\112\uff44\113\uff44" +
    "\116\uff44\001\002\000\006\041\367\115\u0129\001\002\000" +
    "\054\003\uff48\022\uff48\023\uff48\024\uff48\030\uff48\031\uff48" +
    "\032\uff48\033\uff48\034\uff48\035\uff48\036\uff48\041\uff48\053" +
    "\uff48\105\uff48\106\uff48\107\uff48\110\uff48\111\uff48\112\uff48" +
    "\113\uff48\116\uff48\001\002\000\042\003\373\022\035\023" +
    "\036\024\034\030\366\031\u0107\032\u0101\033\u0111\034\362" +
    "\035\u0102\036\u010e\041\367\053\370\106\377\107\376\110" +
    "\u0104\001\002\000\054\003\uff45\022\uff45\023\uff45\024\uff45" +
    "\030\uff45\031\uff45\032\uff45\033\uff45\034\uff45\035\uff45\036" +
    "\uff45\041\uff45\053\uff45\105\uff45\106\uff45\107\uff45\110\uff45" +
    "\111\uff45\112\uff45\113\uff45\116\uff45\001\002\000\004\116" +
    "\u012c\001\002\000\054\003\uff46\022\uff46\023\uff46\024\uff46" +
    "\030\uff46\031\uff46\032\uff46\033\uff46\034\uff46\035\uff46\036" +
    "\uff46\041\uff46\053\uff46\105\uff46\106\uff46\107\uff46\110\uff46" +
    "\111\uff46\112\uff46\113\uff46\116\uff46\001\002\000\004\052" +
    "\u012e\001\002\000\004\010\u012f\001\002\000\004\114\uff59" +
    "\001\002\000\042\003\373\022\035\023\036\024\034\030" +
    "\366\031\u0107\032\u0101\033\u0111\034\362\035\u0102\036\u010e" +
    "\041\367\053\370\106\377\107\376\110\u0104\001\002\000" +
    "\004\116\u0132\001\002\000\054\003\uff57\022\uff57\023\uff57" +
    "\024\uff57\030\uff57\031\uff57\032\uff57\033\uff57\034\uff57\035" +
    "\uff57\036\uff57\041\uff57\053\uff57\105\uff57\106\uff57\107\uff57" +
    "\110\uff57\111\uff57\112\uff57\113\uff57\116\uff57\001\002\000" +
    "\004\007\u0145\001\002\000\004\053\u0140\001\002\000\004" +
    "\053\u0136\001\002\000\004\007\u0137\001\002\000\012\010" +
    "\u0138\022\035\023\036\024\034\001\002\000\004\115\uff73" +
    "\001\002\000\004\053\u013f\001\002\000\006\010\u013c\021" +
    "\u013b\001\002\000\010\022\035\023\036\024\034\001\002" +
    "\000\004\115\uff74\001\002\000\004\053\u013e\001\002\000" +
    "\006\010\uff84\021\uff84\001\002\000\006\010\uff83\021\uff83" +
    "\001\002\000\012\006\250\007\u0141\021\uffa1\114\uffa1\001" +
    "\002\000\012\010\u0142\022\035\023\036\024\034\001\002" +
    "\000\004\115\uff77\001\002\000\006\010\u0144\021\u013b\001" +
    "\002\000\004\115\uff78\001\002\000\010\022\035\023\036" +
    "\024\034\001\002\000\006\010\u0147\021\u013b\001\002\000" +
    "\004\115\uff7b\001\002\000\004\053\u0149\001\002\000\004" +
    "\010\u014a\001\002\000\004\115\uff43\001\002\000\054\003" +
    "\uff60\022\uff60\023\uff60\024\uff60\030\uff60\031\uff60\032\uff60" +
    "\033\uff60\034\uff60\035\uff60\036\uff60\041\uff60\053\uff60\105" +
    "\uff60\106\uff60\107\uff60\110\uff60\111\uff60\112\uff60\113\uff60" +
    "\116\uff60\001\002\000\022\007\u0150\027\u0152\037\u014d\040" +
    "\u014e\053\127\054\133\055\123\056\116\001\002\000\004" +
    "\010\uff32\001\002\000\004\010\uff31\001\002\000\004\010" +
    "\uff2e\001\002\000\022\007\u0150\027\u0152\037\u014d\040\u014e" +
    "\053\127\054\133\055\123\056\116\001\002\000\022\011" +
    "\144\012\140\043\u015d\046\u015a\047\u015c\050\u0159\051\u015b" +
    "\120\u0158\001\002\000\022\007\u0150\027\u0152\037\u014d\040" +
    "\u014e\053\127\054\133\055\123\056\116\001\002\000\004" +
    "\010\u0155\001\002\000\022\007\u0150\027\u0152\037\u014d\040" +
    "\u014e\053\127\054\133\055\123\056\116\001\002\000\006" +
    "\114\uff53\115\uff53\001\002\000\004\010\uff2f\001\002\000" +
    "\004\010\uff34\001\002\000\014\007\uff39\053\uff39\054\uff39" +
    "\055\uff39\056\uff39\001\002\000\014\007\uff35\053\uff35\054" +
    "\uff35\055\uff35\056\uff35\001\002\000\014\007\uff37\053\uff37" +
    "\054\uff37\055\uff37\056\uff37\001\002\000\014\007\uff3a\053" +
    "\uff3a\054\uff3a\055\uff3a\056\uff3a\001\002\000\014\007\uff36" +
    "\053\uff36\054\uff36\055\uff36\056\uff36\001\002\000\014\007" +
    "\uff38\053\uff38\054\uff38\055\uff38\056\uff38\001\002\000\014" +
    "\007\151\053\127\054\133\055\123\056\116\001\002\000" +
    "\010\010\uff30\011\144\012\140\001\002\000\024\010\154" +
    "\011\144\012\140\043\u015d\046\u015a\047\u015c\050\u0159\051" +
    "\u015b\120\u0158\001\002\000\004\010\u0162\001\002\000\004" +
    "\010\uff33\001\002\000\004\052\u0164\001\002\000\004\010" +
    "\u0165\001\002\000\004\114\uff5a\001\002\000\044\003\373" +
    "\022\035\023\036\024\034\030\366\031\u0107\032\u0101\033" +
    "\u0111\034\362\035\u0102\036\u010e\041\367\053\370\106\377" +
    "\107\376\110\u0104\116\u0167\001\002\000\044\003\uff79\022" +
    "\uff79\023\uff79\024\uff79\030\uff79\031\uff79\032\uff79\033\uff79" +
    "\034\uff79\035\uff79\036\uff79\041\uff79\053\uff79\106\uff79\107" +
    "\uff79\110\uff79\116\uff79\001\002\000\004\116\u0169\001\002" +
    "\000\044\003\uff7a\022\uff7a\023\uff7a\024\uff7a\030\uff7a\031" +
    "\uff7a\032\uff7a\033\uff7a\034\uff7a\035\uff7a\036\uff7a\041\uff7a" +
    "\053\uff7a\106\uff7a\107\uff7a\110\uff7a\116\uff7a\001\002\000" +
    "\012\052\u016d\053\u016b\055\u016f\056\u0170\001\002\000\006" +
    "\010\uff68\011\uff68\001\002\000\006\010\uff69\011\uff69\001" +
    "\002\000\006\010\uff65\011\uff65\001\002\000\006\010\u0171" +
    "\011\u0172\001\002\000\006\010\uff67\011\uff67\001\002\000" +
    "\006\010\uff66\011\uff66\001\002\000\004\114\uff5d\001\002" +
    "\000\012\052\u016d\053\u016b\055\u016f\056\u0170\001\002\000" +
    "\006\010\uff6a\011\uff6a\001\002\000\012\052\u016d\053\u016b" +
    "\055\u016f\056\u0170\001\002\000\006\010\u0176\011\u0172\001" +
    "\002\000\004\114\uff5c\001\002\000\054\003\uff64\022\uff64" +
    "\023\uff64\024\uff64\030\uff64\031\uff64\032\uff64\033\uff64\034" +
    "\uff64\035\uff64\036\uff64\041\uff64\053\uff64\105\uff64\106\uff64" +
    "\107\uff64\110\uff64\111\uff64\112\uff64\113\uff64\116\uff64\001" +
    "\002\000\042\003\373\022\035\023\036\024\034\030\366" +
    "\031\u0107\032\u0101\033\u0111\034\362\035\u0102\036\u010e\041" +
    "\367\053\370\106\377\107\376\110\u0104\001\002\000\004" +
    "\116\u017a\001\002\000\054\003\uff58\022\uff58\023\uff58\024" +
    "\uff58\030\uff58\031\uff58\032\uff58\033\uff58\034\uff58\035\uff58" +
    "\036\uff58\041\uff58\053\uff58\105\uff58\106\uff58\107\uff58\110" +
    "\uff58\111\uff58\112\uff58\113\uff58\116\uff58\001\002\000\014" +
    "\007\151\053\127\054\133\055\123\056\116\001\002\000" +
    "\010\011\144\012\140\114\uff4b\001\002\000\022\007\u0150" +
    "\027\u0152\037\u014d\040\u014e\053\127\054\133\055\123\056" +
    "\116\001\002\000\004\010\u017f\001\002\000\004\115\uff47" +
    "\001\002\000\004\052\u0181\001\002\000\004\010\u0182\001" +
    "\002\000\004\114\uff5b\001\002\000\054\003\uff63\022\uff63" +
    "\023\uff63\024\uff63\030\uff63\031\uff63\032\uff63\033\uff63\034" +
    "\uff63\035\uff63\036\uff63\041\uff63\053\uff63\105\uff63\106\uff63" +
    "\107\uff63\110\uff63\111\uff63\112\uff63\113\uff63\116\uff63\001" +
    "\002\000\004\111\u0185\001\002\000\016\007\151\052\u011b" +
    "\053\127\054\133\055\123\056\116\001\002\000\006\111" +
    "\u0185\112\u018a\001\002\000\010\111\uff3e\112\uff3e\116\uff40" +
    "\001\002\000\004\116\u0189\001\002\000\054\003\uff49\022" +
    "\uff49\023\uff49\024\uff49\030\uff49\031\uff49\032\uff49\033\uff49" +
    "\034\uff49\035\uff49\036\uff49\041\uff49\053\uff49\105\uff49\106" +
    "\uff49\107\uff49\110\uff49\111\uff49\112\uff49\113\uff49\116\uff49" +
    "\001\002\000\004\117\u018c\001\002\000\010\111\uff3f\112" +
    "\uff3f\116\uff42\001\002\000\042\003\373\022\035\023\036" +
    "\024\034\030\366\031\u0107\032\u0101\033\u0111\034\362\035" +
    "\u0102\036\u010e\041\367\053\370\106\377\107\376\110\u0104" +
    "\001\002\000\006\113\u018f\116\uff3b\001\002\000\004\116" +
    "\uff41\001\002\000\004\114\u0190\001\002\000\010\111\uff3c" +
    "\112\uff3c\116\uff3c\001\002\000\004\117\u0192\001\002\000" +
    "\042\003\373\022\035\023\036\024\034\030\366\031\u0107" +
    "\032\u0101\033\u0111\034\362\035\u0102\036\u010e\041\367\053" +
    "\370\106\377\107\376\110\u0104\001\002\000\012\111\uff3b" +
    "\112\uff3b\113\u018f\116\uff3b\001\002\000\010\111\uff3d\112" +
    "\uff3d\116\uff3d\001\002\000\042\003\373\022\035\023\036" +
    "\024\034\030\366\031\u0107\032\u0101\033\u0111\034\362\035" +
    "\u0102\036\u010e\041\367\053\370\106\377\107\376\110\u0104" +
    "\001\002\000\004\116\u0197\001\002\000\044\003\uff7c\022" +
    "\uff7c\023\uff7c\024\uff7c\030\uff7c\031\uff7c\032\uff7c\033\uff7c" +
    "\034\uff7c\035\uff7c\036\uff7c\041\uff7c\053\uff7c\106\uff7c\107" +
    "\uff7c\110\uff7c\116\uff7c\001\002\000\012\022\035\023\036" +
    "\024\034\053\u0199\001\002\000\004\006\u01b4\001\002\000" +
    "\004\053\u019b\001\002\000\004\006\u019c\001\002\000\014" +
    "\007\151\053\127\054\133\055\123\056\116\001\002\000" +
    "\010\011\144\012\140\114\u019e\001\002\000\004\053\u019f" +
    "\001\002\000\016\043\u015d\046\u015a\047\u015c\050\u0159\051" +
    "\u015b\120\u0158\001\002\000\014\007\151\053\127\054\133" +
    "\055\123\056\116\001\002\000\010\011\144\012\140\114" +
    "\u01a2\001\002\000\004\053\u01a3\001\002\000\014\006\u01a8" +
    "\011\u01a6\012\u01aa\013\u01a7\014\u01a9\001\002\000\004\010" +
    "\u01a5\001\002\000\004\115\uff55\001\002\000\004\006\u01b2" +
    "\001\002\000\004\006\u01b0\001\002\000\014\007\151\053" +
    "\127\054\133\055\123\056\116\001\002\000\004\006\u01ad" +
    "\001\002\000\004\006\u01ab\001\002\000\014\007\151\053" +
    "\127\054\133\055\123\056\116\001\002\000\010\010\uff50" +
    "\011\144\012\140\001\002\000\014\007\151\053\127\054" +
    "\133\055\123\056\116\001\002\000\010\010\uff4e\011\144" +
    "\012\140\001\002\000\010\010\uff52\011\144\012\140\001" +
    "\002\000\014\007\151\053\127\054\133\055\123\056\116" +
    "\001\002\000\010\010\uff4f\011\144\012\140\001\002\000" +
    "\014\007\151\053\127\054\133\055\123\056\116\001\002" +
    "\000\010\010\uff51\011\144\012\140\001\002\000\014\007" +
    "\151\053\127\054\133\055\123\056\116\001\002\000\010" +
    "\011\144\012\140\114\u01b6\001\002\000\004\053\u01b7\001" +
    "\002\000\016\043\u015d\046\u015a\047\u015c\050\u0159\051\u015b" +
    "\120\u0158\001\002\000\014\007\151\053\127\054\133\055" +
    "\123\056\116\001\002\000\010\011\144\012\140\114\u01ba" +
    "\001\002\000\004\053\u01a3\001\002\000\004\010\u01bc\001" +
    "\002\000\004\115\uff54\001\002\000\054\003\uff61\022\uff61" +
    "\023\uff61\024\uff61\030\uff61\031\uff61\032\uff61\033\uff61\034" +
    "\uff61\035\uff61\036\uff61\041\uff61\053\uff61\105\uff61\106\uff61" +
    "\107\uff61\110\uff61\111\uff61\112\uff61\113\uff61\116\uff61\001" +
    "\002\000\044\003\373\022\035\023\036\024\034\030\366" +
    "\031\u0107\032\u0101\033\u0111\034\362\035\u0102\036\u010e\041" +
    "\367\053\370\106\377\107\376\110\u0104\116\u01bf\001\002" +
    "\000\044\003\uff75\022\uff75\023\uff75\024\uff75\030\uff75\031" +
    "\uff75\032\uff75\033\uff75\034\uff75\035\uff75\036\uff75\041\uff75" +
    "\053\uff75\106\uff75\107\uff75\110\uff75\116\uff75\001\002\000" +
    "\004\116\u01c1\001\002\000\044\003\uff76\022\uff76\023\uff76" +
    "\024\uff76\030\uff76\031\uff76\032\uff76\033\uff76\034\uff76\035" +
    "\uff76\036\uff76\041\uff76\053\uff76\106\uff76\107\uff76\110\uff76" +
    "\116\uff76\001\002\000\004\121\u022a\001\002\000\006\121" +
    "\uff2c\124\u01c5\001\002\000\006\121\uff2b\124\uff2b\001\002" +
    "\000\004\053\u0220\001\002\000\006\121\uff2d\122\u021e\001" +
    "\002\000\006\121\uff29\122\uff29\001\002\000\004\123\u01c9" +
    "\001\002\000\034\003\uff1e\030\uff1e\031\uff1e\032\uff1e\034" +
    "\uff1e\035\uff1e\041\uff1e\044\uff1e\045\uff1e\053\uff1e\121\uff1e" +
    "\122\uff1e\137\uff1e\001\002\000\034\003\u01dc\030\075\031" +
    "\107\032\060\034\u01df\035\u01d1\041\u01d5\044\u01d3\045\u01db" +
    "\053\u01d6\121\uff21\122\uff21\137\u01cd\001\002\000\006\121" +
    "\uff22\122\uff22\001\002\000\006\121\uff28\122\uff28\001\002" +
    "\000\004\007\u0218\001\002\000\034\003\uff13\030\uff13\031" +
    "\uff13\032\uff13\034\uff13\035\uff13\041\uff13\044\uff13\045\uff13" +
    "\053\uff13\121\uff13\122\uff13\137\uff13\001\002\000\004\123" +
    "\u0215\001\002\000\034\003\uff1c\030\uff1c\031\uff1c\032\uff1c" +
    "\034\uff1c\035\uff1c\041\uff1c\044\uff1c\045\uff1c\053\uff1c\121" +
    "\uff1c\122\uff1c\137\uff1c\001\002\000\022\007\126\027\131" +
    "\037\124\040\125\053\127\054\133\055\123\056\116\001" +
    "\002\000\034\003\uff12\030\uff12\031\uff12\032\uff12\034\uff12" +
    "\035\uff12\041\uff12\044\uff12\045\uff12\053\uff12\121\uff12\122" +
    "\uff12\137\uff12\001\002\000\014\007\151\053\127\054\133" +
    "\055\123\056\116\001\002\000\004\123\u0200\001\002\000" +
    "\022\007\126\027\131\037\124\040\125\053\127\054\133" +
    "\055\123\056\116\001\002\000\004\006\u01fb\001\002\000" +
    "\004\117\u01f7\001\002\000\034\003\uff1f\030\uff1f\031\uff1f" +
    "\032\uff1f\034\uff1f\035\uff1f\041\uff1f\044\uff1f\045\uff1f\053" +
    "\uff1f\121\uff1f\122\uff1f\137\uff1f\001\002\000\034\003\uff07" +
    "\030\uff07\031\uff07\032\uff07\034\uff07\035\uff07\041\uff07\044" +
    "\uff07\045\uff07\053\uff07\121\uff07\122\uff07\137\uff07\001\002" +
    "\000\036\003\uff17\030\uff17\031\uff17\032\uff17\034\uff17\035" +
    "\uff17\041\uff17\044\uff17\045\uff17\053\uff17\114\uff17\121\uff17" +
    "\122\uff17\137\uff17\001\002\000\004\007\u01f1\001\002\000" +
    "\034\003\uff18\030\uff18\031\uff18\032\uff18\034\uff18\035\uff18" +
    "\041\uff18\044\uff18\045\uff18\053\uff18\121\uff18\122\uff18\137" +
    "\uff18\001\002\000\034\003\uff1d\030\uff1d\031\uff1d\032\uff1d" +
    "\034\uff1d\035\uff1d\041\uff1d\044\uff1d\045\uff1d\053\uff1d\121" +
    "\uff1d\122\uff1d\137\uff1d\001\002\000\034\003\uff1a\030\uff1a" +
    "\031\uff1a\032\uff1a\034\uff1a\035\uff1a\041\uff1a\044\uff1a\045" +
    "\uff1a\053\uff1a\121\uff1a\122\uff1a\137\uff1a\001\002\000\004" +
    "\053\u01e2\001\002\000\034\003\uff1b\030\uff1b\031\uff1b\032" +
    "\uff1b\034\uff1b\035\uff1b\041\uff1b\044\uff1b\045\uff1b\053\uff1b" +
    "\121\uff1b\122\uff1b\137\uff1b\001\002\000\034\003\uff19\030" +
    "\uff19\031\uff19\032\uff19\034\uff19\035\uff19\041\uff19\044\uff19" +
    "\045\uff19\053\uff19\121\uff19\122\uff19\137\uff19\001\002\000" +
    "\004\125\u01e3\001\002\000\004\126\u01e4\001\002\000\004" +
    "\007\u01e6\001\002\000\004\117\uff10\001\002\000\014\007" +
    "\151\053\127\054\133\055\123\056\116\001\002\000\004" +
    "\021\u01ea\001\002\000\012\010\u01e9\011\144\012\140\021" +
    "\uff0c\001\002\000\004\117\uff0d\001\002\000\014\007\151" +
    "\053\127\054\133\055\123\056\116\001\002\000\004\021" +
    "\u01ee\001\002\000\012\010\u01ed\011\144\012\140\021\uff0c" +
    "\001\002\000\004\117\uff0e\001\002\000\014\007\151\053" +
    "\127\054\133\055\123\056\116\001\002\000\010\010\u01f0" +
    "\011\144\012\140\001\002\000\004\117\uff0f\001\002\000" +
    "\016\007\151\052\267\053\127\054\133\055\123\056\116" +
    "\001\002\000\006\010\uff14\021\uff14\001\002\000\006\010" +
    "\u01f5\021\u01f4\001\002\000\016\007\151\052\267\053\127" +
    "\054\133\055\123\056\116\001\002\000\034\003\uff16\030" +
    "\uff16\031\uff16\032\uff16\034\uff16\035\uff16\041\uff16\044\uff16" +
    "\045\uff16\053\uff16\121\uff16\122\uff16\137\uff16\001\002\000" +
    "\006\010\uff15\021\uff15\001\002\000\004\123\u01f8\001\002" +
    "\000\032\003\uff1e\030\uff1e\031\uff1e\032\uff1e\034\uff1e\035" +
    "\uff1e\041\uff1e\044\uff1e\045\uff1e\053\uff1e\122\uff1e\137\uff1e" +
    "\001\002\000\004\122\u01fa\001\002\000\034\003\uff11\030" +
    "\uff11\031\uff11\032\uff11\034\uff11\035\uff11\041\uff11\044\uff11" +
    "\045\uff11\053\uff11\121\uff11\122\uff11\137\uff11\001\002\000" +
    "\022\007\151\030\075\031\107\032\060\053\127\054\133" +
    "\055\123\056\116\001\002\000\034\003\uff08\030\uff08\031" +
    "\uff08\032\uff08\034\uff08\035\uff08\041\uff08\044\uff08\045\uff08" +
    "\053\uff08\121\uff08\122\uff08\137\uff08\001\002\000\040\003" +
    "\uff09\011\144\012\140\030\uff09\031\uff09\032\uff09\034\uff09" +
    "\035\uff09\041\uff09\044\uff09\045\uff09\053\uff09\121\uff09\122" +
    "\uff09\137\uff09\001\002\000\006\025\170\117\u01ff\001\002" +
    "\000\004\123\uff05\001\002\000\032\003\uff1e\030\uff1e\031" +
    "\uff1e\032\uff1e\034\uff1e\035\uff1e\041\uff1e\044\uff1e\045\uff1e" +
    "\053\uff1e\122\uff1e\137\uff1e\001\002\000\004\122\u0202\001" +
    "\002\000\040\003\uff02\030\uff02\031\uff02\032\uff02\034\uff02" +
    "\035\uff02\041\uff02\042\u0203\044\uff02\045\uff02\053\uff02\121" +
    "\uff02\122\uff02\127\u0204\137\uff02\001\002\000\004\117\u0211" +
    "\001\002\000\022\007\126\027\131\037\124\040\125\053" +
    "\127\054\133\055\123\056\116\001\002\000\004\123\u020c" +
    "\001\002\000\034\003\uff06\030\uff06\031\uff06\032\uff06\034" +
    "\uff06\035\uff06\041\uff06\044\uff06\045\uff06\053\uff06\121\uff06" +
    "\122\uff06\137\uff06\001\002\000\004\123\u0208\001\002\000" +
    "\032\003\uff1e\030\uff1e\031\uff1e\032\uff1e\034\uff1e\035\uff1e" +
    "\041\uff1e\044\uff1e\045\uff1e\053\uff1e\122\uff1e\137\uff1e\001" +
    "\002\000\004\122\u020a\001\002\000\040\003\uff02\030\uff02" +
    "\031\uff02\032\uff02\034\uff02\035\uff02\041\uff02\042\u0203\044" +
    "\uff02\045\uff02\053\uff02\121\uff02\122\uff02\127\u0204\137\uff02" +
    "\001\002\000\034\003\uff04\030\uff04\031\uff04\032\uff04\034" +
    "\uff04\035\uff04\041\uff04\044\uff04\045\uff04\053\uff04\121\uff04" +
    "\122\uff04\137\uff04\001\002\000\032\003\uff1e\030\uff1e\031" +
    "\uff1e\032\uff1e\034\uff1e\035\uff1e\041\uff1e\044\uff1e\045\uff1e" +
    "\053\uff1e\122\uff1e\137\uff1e\001\002\000\004\122\u020e\001" +
    "\002\000\034\003\uff03\030\uff03\031\uff03\032\uff03\034\uff03" +
    "\035\uff03\041\uff03\044\uff03\045\uff03\053\uff03\121\uff03\122" +
    "\uff03\137\uff03\001\002\000\006\025\170\117\u0210\001\002" +
    "\000\004\123\uff00\001\002\000\004\123\uff01\001\002\000" +
    "\012\011\144\012\140\121\uff20\122\uff20\001\002\000\006" +
    "\025\170\117\u0214\001\002\000\004\123\uff0a\001\002\000" +
    "\032\003\uff1e\030\uff1e\031\uff1e\032\uff1e\034\uff1e\035\uff1e" +
    "\041\uff1e\044\uff1e\045\uff1e\053\uff1e\122\uff1e\137\uff1e\001" +
    "\002\000\004\122\u0217\001\002\000\034\003\uff0b\030\uff0b" +
    "\031\uff0b\032\uff0b\034\uff0b\035\uff0b\041\uff0b\044\uff0b\045" +
    "\uff0b\053\uff0b\121\uff0b\122\uff0b\137\uff0b\001\002\000\004" +
    "\052\u0219\001\002\000\004\021\u021a\001\002\000\004\020" +
    "\u021b\001\002\000\004\053\u021c\001\002\000\004\010\u021d" +
    "\001\002\000\036\003\ufeba\030\ufeba\031\ufeba\032\ufeba\034" +
    "\ufeba\035\ufeba\041\ufeba\044\ufeba\045\ufeba\053\ufeba\114\ufeba" +
    "\121\ufeba\122\ufeba\137\ufeba\001\002\000\004\124\u01c5\001" +
    "\002\000\006\121\uff2a\122\uff2a\001\002\000\004\007\u0221" +
    "\001\002\000\006\010\uff25\053\u0222\001\002\000\006\010" +
    "\uff23\021\uff23\001\002\000\006\010\uff26\021\u0227\001\002" +
    "\000\004\010\u0225\001\002\000\004\117\u0226\001\002\000" +
    "\004\123\uff27\001\002\000\004\053\u0228\001\002\000\006" +
    "\010\uff24\021\uff24\001\002\000\004\002\000\001\002\000" +
    "\006\130\ufefd\133\ufefd\001\002\000\006\130\u022c\133\u022f" +
    "\001\002\000\010\022\035\023\036\024\034\001\002\000" +
    "\012\022\035\023\036\024\034\130\u022c\001\002\000\004" +
    "\114\u0238\001\002\000\006\046\u0232\052\u0231\001\002\000" +
    "\006\130\ufefe\133\ufefe\001\002\000\006\130\ufeee\133\ufeee" +
    "\001\002\000\004\053\u0233\001\002\000\006\017\ufeb6\043" +
    "\ufeb6\001\002\000\006\017\u0235\043\u0236\001\002\000\004" +
    "\053\u0237\001\002\000\006\130\ufeed\133\ufeed\001\002\000" +
    "\010\007\ufeb7\017\ufeb7\043\ufeb7\001\002\000\012\022\ufefb" +
    "\023\ufefb\024\ufefb\130\ufefb\001\002\000\004\114\u02fb\001" +
    "\002\000\004\053\u02e2\001\002\000\012\022\035\023\036" +
    "\024\034\104\u023f\001\002\000\004\114\u023d\001\002\000" +
    "\012\022\ufefc\023\ufefc\024\ufefc\130\ufefc\001\002\000\004" +
    "\114\u02e1\001\002\000\004\140\u0241\001\002\000\004\002" +
    "\ufeff\001\002\000\004\007\u0242\001\002\000\004\010\u0243" +
    "\001\002\000\004\115\u0244\001\002\000\042\022\035\023" +
    "\036\024\034\030\075\031\107\032\060\034\u025c\035\u0248" +
    "\036\u0252\041\u024e\053\u0251\110\u0245\134\u024f\135\u0254\136" +
    "\u025b\137\u01cd\001\002\000\004\007\u02de\001\002\000\004" +
    "\115\u02d0\001\002\000\044\022\035\023\036\024\034\030" +
    "\075\031\107\032\060\034\u025c\035\u0248\036\u0252\041\u024e" +
    "\053\u0251\110\u0245\116\u02cf\134\u024f\135\u0254\136\u025b\137" +
    "\u01cd\001\002\000\004\007\u02cc\001\002\000\052\022\ufeea" +
    "\023\ufeea\024\ufeea\030\ufeea\031\ufeea\032\ufeea\034\ufeea\035" +
    "\ufeea\036\ufeea\041\ufeea\053\ufeea\110\ufeea\111\ufeea\112\ufeea" +
    "\113\ufeea\116\ufeea\134\ufeea\135\ufeea\136\ufeea\137\ufeea\001" +
    "\002\000\004\114\u02cb\001\002\000\004\115\u02c8\001\002" +
    "\000\004\114\u02c7\001\002\000\004\114\u02c6\001\002\000" +
    "\004\007\u02c3\001\002\000\004\007\u02b9\001\002\000\004" +
    "\115\u02b6\001\002\000\012\006\u02b2\007\ufeb6\017\ufeb6\131" +
    "\u026a\001\002\000\004\115\u02ac\001\002\000\004\114\u02ab" +
    "\001\002\000\004\007\u02a9\001\002\000\052\022\ufee6\023" +
    "\ufee6\024\ufee6\030\ufee6\031\ufee6\032\ufee6\034\ufee6\035\ufee6" +
    "\036\ufee6\041\ufee6\053\ufee6\110\ufee6\111\ufee6\112\ufee6\113" +
    "\ufee6\116\ufee6\134\ufee6\135\ufee6\136\ufee6\137\ufee6\001\002" +
    "\000\006\007\u02a2\017\u0235\001\002\000\004\114\u02a1\001" +
    "\002\000\052\022\ufee7\023\ufee7\024\ufee7\030\ufee7\031\ufee7" +
    "\032\ufee7\034\ufee7\035\ufee7\036\ufee7\041\ufee7\053\ufee7\110" +
    "\ufee7\111\ufee7\112\ufee7\113\ufee7\116\ufee7\134\ufee7\135\ufee7" +
    "\136\ufee7\137\ufee7\001\002\000\004\114\u02a0\001\002\000" +
    "\004\115\u029c\001\002\000\004\007\u029a\001\002\000\004" +
    "\007\u025d\001\002\000\012\022\035\023\036\024\034\053" +
    "\u025e\001\002\000\004\006\u0293\001\002\000\004\053\u0260" +
    "\001\002\000\004\006\u0261\001\002\000\020\007\151\052" +
    "\u0265\053\u0266\054\133\055\123\056\116\136\u025b\001\002" +
    "\000\004\114\u0270\001\002\000\010\010\ufeb1\021\ufeb1\114" +
    "\ufeb1\001\002\000\010\010\ufeaf\021\ufeaf\114\ufeaf\001\002" +
    "\000\010\010\ufeb3\021\ufeb3\114\ufeb3\001\002\000\030\007" +
    "\ufeb6\010\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0" +
    "\017\ufeb6\021\uffc0\114\uffc0\131\u026a\001\002\000\014\010" +
    "\ufeb2\011\144\012\140\021\ufeb2\114\ufeb2\001\002\000\010" +
    "\010\ufeb0\021\ufeb0\114\ufeb0\001\002\000\012\010\ufeae\021" +
    "\ufeae\114\ufeae\131\u026d\001\002\000\014\007\151\053\127" +
    "\054\133\055\123\056\116\001\002\000\010\011\144\012" +
    "\140\132\u026c\001\002\000\014\006\ufef7\010\ufef7\021\ufef7" +
    "\114\ufef7\131\ufef7\001\002\000\014\007\151\053\127\054" +
    "\133\055\123\056\116\001\002\000\010\011\144\012\140" +
    "\132\u026f\001\002\000\014\006\ufef8\010\ufef8\021\ufef8\114" +
    "\ufef8\131\ufef8\001\002\000\022\007\u0275\027\u0278\037\u0272" +
    "\040\u0274\053\u0276\054\133\055\123\056\116\001\002\000" +
    "\004\114\u0280\001\002\000\006\010\ufeaa\114\ufeaa\001\002" +
    "\000\006\010\ufeab\114\ufeab\001\002\000\006\010\ufea9\114" +
    "\ufea9\001\002\000\022\007\u0150\027\u0152\037\u014d\040\u014e" +
    "\053\127\054\133\055\123\056\116\001\002\000\034\007" +
    "\ufeb6\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\017\ufeb6" +
    "\043\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\120\uffc0\001" +
    "\002\000\022\011\144\012\140\043\u015d\046\u015a\047\u015c" +
    "\050\u0159\051\u015b\120\u0158\001\002\000\022\007\u0275\027" +
    "\u0278\037\u0272\040\u0274\053\u0276\054\133\055\123\056\116" +
    "\001\002\000\006\010\ufea6\114\ufea6\001\002\000\006\010" +
    "\ufead\114\ufead\001\002\000\014\007\151\053\127\054\133" +
    "\055\123\056\116\001\002\000\012\010\ufea8\011\144\012" +
    "\140\114\ufea8\001\002\000\004\010\u027e\001\002\000\006" +
    "\010\ufeac\114\ufeac\001\002\000\022\007\u0275\027\u0278\037" +
    "\u0272\040\u0274\053\u0276\054\133\055\123\056\116\001\002" +
    "\000\004\053\u0281\001\002\000\014\006\u0286\011\u0285\012" +
    "\u0288\013\u0284\014\u0287\001\002\000\004\010\u0283\001\002" +
    "\000\004\115\ufecb\001\002\000\004\006\u0290\001\002\000" +
    "\004\006\u028e\001\002\000\020\007\151\052\u0265\053\u0266" +
    "\054\133\055\123\056\116\136\u025b\001\002\000\004\006" +
    "\u028b\001\002\000\004\006\u0289\001\002\000\020\007\151" +
    "\052\u0265\053\u0266\054\133\055\123\056\116\136\u025b\001" +
    "\002\000\004\010\ufec6\001\002\000\020\007\151\052\u0265" +
    "\053\u0266\054\133\055\123\056\116\136\u025b\001\002\000" +
    "\004\010\ufec4\001\002\000\004\010\ufec8\001\002\000\020" +
    "\007\151\052\u0265\053\u0266\054\133\055\123\056\116\136" +
    "\u025b\001\002\000\004\010\ufec7\001\002\000\020\007\151" +
    "\052\u0265\053\u0266\054\133\055\123\056\116\136\u025b\001" +
    "\002\000\004\010\ufec5\001\002\000\006\010\ufea7\114\ufea7" +
    "\001\002\000\020\007\151\052\u0265\053\u0266\054\133\055" +
    "\123\056\116\136\u025b\001\002\000\004\114\u0295\001\002" +
    "\000\022\007\u0275\027\u0278\037\u0272\040\u0274\053\u0276\054" +
    "\133\055\123\056\116\001\002\000\004\114\u0297\001\002" +
    "\000\004\053\u0281\001\002\000\004\010\u0299\001\002\000" +
    "\004\115\ufeca\001\002\000\004\010\u029b\001\002\000\010" +
    "\010\ufebb\021\ufebb\114\ufebb\001\002\000\042\022\035\023" +
    "\036\024\034\030\075\031\107\032\060\034\u025c\035\u0248" +
    "\036\u0252\041\u024e\053\u0251\110\u0245\134\u024f\135\u0254\136" +
    "\u025b\137\u01cd\001\002\000\044\022\035\023\036\024\034" +
    "\030\075\031\107\032\060\034\u025c\035\u0248\036\u0252\041" +
    "\u024e\053\u0251\110\u0245\116\u029f\134\u024f\135\u0254\136\u025b" +
    "\137\u01cd\001\002\000\052\022\ufeeb\023\ufeeb\024\ufeeb\030" +
    "\ufeeb\031\ufeeb\032\ufeeb\034\ufeeb\035\ufeeb\036\ufeeb\041\ufeeb" +
    "\053\ufeeb\110\ufeeb\111\ufeeb\112\ufeeb\113\ufeeb\116\ufeeb\134" +
    "\ufeeb\135\ufeeb\136\ufeeb\137\ufeeb\001\002\000\052\022\ufece" +
    "\023\ufece\024\ufece\030\ufece\031\ufece\032\ufece\034\ufece\035" +
    "\ufece\036\ufece\041\ufece\053\ufece\110\ufece\111\ufece\112\ufece" +
    "\113\ufece\116\ufece\134\ufece\135\ufece\136\ufece\137\ufece\001" +
    "\002\000\052\022\ufee5\023\ufee5\024\ufee5\030\ufee5\031\ufee5" +
    "\032\ufee5\034\ufee5\035\ufee5\036\ufee5\041\ufee5\053\ufee5\110" +
    "\ufee5\111\ufee5\112\ufee5\113\ufee5\116\ufee5\134\ufee5\135\ufee5" +
    "\136\ufee5\137\ufee5\001\002\000\052\022\ufee3\023\ufee3\024" +
    "\ufee3\030\ufee3\031\ufee3\032\ufee3\034\ufee3\035\ufee3\036\ufee3" +
    "\041\ufee3\053\ufee3\110\ufee3\111\ufee3\112\ufee3\113\ufee3\116" +
    "\ufee3\134\ufee3\135\ufee3\136\ufee3\137\ufee3\001\002\000\022" +
    "\007\151\010\u02a5\052\u0265\053\u0266\054\133\055\123\056" +
    "\116\136\u025b\001\002\000\006\010\ufeb4\021\ufeb4\001\002" +
    "\000\006\010\u02a7\021\u02a6\001\002\000\010\010\ufeb8\021" +
    "\ufeb8\114\ufeb8\001\002\000\020\007\151\052\u0265\053\u0266" +
    "\054\133\055\123\056\116\136\u025b\001\002\000\010\010" +
    "\ufeb9\021\ufeb9\114\ufeb9\001\002\000\006\010\ufeb5\021\ufeb5" +
    "\001\002\000\004\010\u02aa\001\002\000\004\114\ufec2\001" +
    "\002\000\052\022\ufee4\023\ufee4\024\ufee4\030\ufee4\031\ufee4" +
    "\032\ufee4\034\ufee4\035\ufee4\036\ufee4\041\ufee4\053\ufee4\110" +
    "\ufee4\111\ufee4\112\ufee4\113\ufee4\116\ufee4\134\ufee4\135\ufee4" +
    "\136\ufee4\137\ufee4\001\002\000\042\022\035\023\036\024" +
    "\034\030\075\031\107\032\060\034\u025c\035\u0248\036\u0252" +
    "\041\u024e\053\u0251\110\u0245\134\u024f\135\u0254\136\u025b\137" +
    "\u01cd\001\002\000\044\022\035\023\036\024\034\030\075" +
    "\031\107\032\060\034\u025c\035\u0248\036\u0252\041\u024e\053" +
    "\u0251\110\u0245\116\u02ae\134\u024f\135\u0254\136\u025b\137\u01cd" +
    "\001\002\000\004\035\u0248\001\002\000\004\114\u02b0\001" +
    "\002\000\052\022\ufecc\023\ufecc\024\ufecc\030\ufecc\031\ufecc" +
    "\032\ufecc\034\ufecc\035\ufecc\036\ufecc\041\ufecc\053\ufecc\110" +
    "\ufecc\111\ufecc\112\ufecc\113\ufecc\116\ufecc\134\ufecc\135\ufecc" +
    "\136\ufecc\137\ufecc\001\002\000\006\006\u02b4\131\u026d\001" +
    "\002\000\020\007\151\052\u0265\053\u0266\054\133\055\123" +
    "\056\116\136\u025b\001\002\000\004\114\ufeda\001\002\000" +
    "\020\007\151\052\u0265\053\u0266\054\133\055\123\056\116" +
    "\136\u025b\001\002\000\004\114\ufed9\001\002\000\042\022" +
    "\035\023\036\024\034\030\075\031\107\032\060\034\u025c" +
    "\035\u0248\036\u0252\041\u024e\053\u0251\110\u0245\134\u024f\135" +
    "\u0254\136\u025b\137\u01cd\001\002\000\044\022\035\023\036" +
    "\024\034\030\075\031\107\032\060\034\u025c\035\u0248\036" +
    "\u0252\041\u024e\053\u0251\110\u0245\116\u02b8\134\u024f\135\u0254" +
    "\136\u025b\137\u01cd\001\002\000\052\022\ufed8\023\ufed8\024" +
    "\ufed8\030\ufed8\031\ufed8\032\ufed8\034\ufed8\035\ufed8\036\ufed8" +
    "\041\ufed8\053\ufed8\110\ufed8\111\ufed8\112\ufed8\113\ufed8\116" +
    "\ufed8\134\ufed8\135\ufed8\136\ufed8\137\ufed8\001\002\000\012" +
    "\052\u02bb\053\u02ba\055\u02bc\056\u02be\001\002\000\006\010" +
    "\ufebe\021\ufebe\001\002\000\006\010\ufebc\021\ufebc\001\002" +
    "\000\006\010\ufebf\021\ufebf\001\002\000\006\010\u02c1\021" +
    "\u02c0\001\002\000\006\010\ufebd\021\ufebd\001\002\000\006" +
    "\010\ufec0\021\ufec0\001\002\000\012\052\u02bb\053\u02ba\055" +
    "\u02bc\056\u02be\001\002\000\004\114\ufec3\001\002\000\006" +
    "\010\ufec1\021\ufec1\001\002\000\022\007\u0275\027\u0278\037" +
    "\u0272\040\u0274\053\u0276\054\133\055\123\056\116\001\002" +
    "\000\004\010\u02c5\001\002\000\004\115\ufed6\001\002\000" +
    "\052\022\ufee9\023\ufee9\024\ufee9\030\ufee9\031\ufee9\032\ufee9" +
    "\034\ufee9\035\ufee9\036\ufee9\041\ufee9\053\ufee9\110\ufee9\111" +
    "\ufee9\112\ufee9\113\ufee9\116\ufee9\134\ufee9\135\ufee9\136\ufee9" +
    "\137\ufee9\001\002\000\052\022\ufee2\023\ufee2\024\ufee2\030" +
    "\ufee2\031\ufee2\032\ufee2\034\ufee2\035\ufee2\036\ufee2\041\ufee2" +
    "\053\ufee2\110\ufee2\111\ufee2\112\ufee2\113\ufee2\116\ufee2\134" +
    "\ufee2\135\ufee2\136\ufee2\137\ufee2\001\002\000\042\022\035" +
    "\023\036\024\034\030\075\031\107\032\060\034\u025c\035" +
    "\u0248\036\u0252\041\u024e\053\u0251\110\u0245\134\u024f\135\u0254" +
    "\136\u025b\137\u01cd\001\002\000\044\022\035\023\036\024" +
    "\034\030\075\031\107\032\060\034\u025c\035\u0248\036\u0252" +
    "\041\u024e\053\u0251\110\u0245\116\u02ca\134\u024f\135\u0254\136" +
    "\u025b\137\u01cd\001\002\000\052\022\ufecd\023\ufecd\024\ufecd" +
    "\030\ufecd\031\ufecd\032\ufecd\034\ufecd\035\ufecd\036\ufecd\041" +
    "\ufecd\053\ufecd\110\ufecd\111\ufecd\112\ufecd\113\ufecd\116\ufecd" +
    "\134\ufecd\135\ufecd\136\ufecd\137\ufecd\001\002\000\052\022" +
    "\ufee8\023\ufee8\024\ufee8\030\ufee8\031\ufee8\032\ufee8\034\ufee8" +
    "\035\ufee8\036\ufee8\041\ufee8\053\ufee8\110\ufee8\111\ufee8\112" +
    "\ufee8\113\ufee8\116\ufee8\134\ufee8\135\ufee8\136\ufee8\137\ufee8" +
    "\001\002\000\022\007\u0275\027\u0278\037\u0272\040\u0274\053" +
    "\u0276\054\133\055\123\056\116\001\002\000\004\010\u02ce" +
    "\001\002\000\006\114\ufec9\115\ufec9\001\002\000\004\002" +
    "\ufeec\001\002\000\004\111\u02d1\001\002\000\004\117\u02db" +
    "\001\002\000\004\116\u02da\001\002\000\010\111\ufed0\112" +
    "\ufed0\116\ufed2\001\002\000\006\111\u02d1\112\u02d5\001\002" +
    "\000\004\117\u02d7\001\002\000\010\111\ufed1\112\ufed1\116" +
    "\ufed4\001\002\000\042\022\035\023\036\024\034\030\075" +
    "\031\107\032\060\034\u025c\035\u0248\036\u0252\041\u024e\053" +
    "\u0251\110\u0245\134\u024f\135\u0254\136\u025b\137\u01cd\001\002" +
    "\000\046\022\035\023\036\024\034\030\075\031\107\032" +
    "\060\034\u025c\035\u0248\036\u0252\041\u024e\053\u0251\110\u0245" +
    "\113\u018f\116\uff3b\134\u024f\135\u0254\136\u025b\137\u01cd\001" +
    "\002\000\004\116\ufed3\001\002\000\052\022\ufed7\023\ufed7" +
    "\024\ufed7\030\ufed7\031\ufed7\032\ufed7\034\ufed7\035\ufed7\036" +
    "\ufed7\041\ufed7\053\ufed7\110\ufed7\111\ufed7\112\ufed7\113\ufed7" +
    "\116\ufed7\134\ufed7\135\ufed7\136\ufed7\137\ufed7\001\002\000" +
    "\042\022\035\023\036\024\034\030\075\031\107\032\060" +
    "\034\u025c\035\u0248\036\u0252\041\u024e\053\u0251\110\u0245\134" +
    "\u024f\135\u0254\136\u025b\137\u01cd\001\002\000\052\022\035" +
    "\023\036\024\034\030\075\031\107\032\060\034\u025c\035" +
    "\u0248\036\u0252\041\u024e\053\u0251\110\u0245\111\uff3b\112\uff3b" +
    "\113\u018f\116\uff3b\134\u024f\135\u0254\136\u025b\137\u01cd\001" +
    "\002\000\010\111\ufecf\112\ufecf\116\ufecf\001\002\000\004" +
    "\053\u02df\001\002\000\004\010\u02e0\001\002\000\004\115" +
    "\ufed5\001\002\000\012\022\ufef0\023\ufef0\024\ufef0\104\ufef0" +
    "\001\002\000\012\006\u02e6\021\ufedb\114\ufedb\131\u026a\001" +
    "\002\000\004\114\ufee1\001\002\000\006\021\u02f9\114\ufedf" +
    "\001\002\000\012\006\u02e8\021\ufedd\114\ufedd\131\u026d\001" +
    "\002\000\020\007\151\052\u0265\053\u0266\054\133\055\123" +
    "\056\116\136\u025b\001\002\000\006\021\ufede\114\ufede\001" +
    "\002\000\004\115\u02e9\001\002\000\016\007\151\053\127" +
    "\054\133\055\123\056\116\115\u02ee\001\002\000\006\021" +
    "\ufedc\114\ufedc\001\002\000\006\021\u02f0\116\u02f8\001\002" +
    "\000\006\021\u02f3\116\u02f4\001\002\000\014\011\144\012" +
    "\140\021\ufef3\116\ufef3\132\ufef3\001\002\000\014\007\151" +
    "\053\127\054\133\055\123\056\116\001\002\000\006\021" +
    "\u02f0\132\u02f1\001\002\000\014\007\151\053\127\054\133" +
    "\055\123\056\116\001\002\000\006\021\ufef1\116\ufef1\001" +
    "\002\000\014\011\144\012\140\021\ufef4\116\ufef4\132\ufef4" +
    "\001\002\000\004\115\u02f5\001\002\000\006\021\ufef5\114" +
    "\ufef5\001\002\000\014\007\151\053\127\054\133\055\123" +
    "\056\116\001\002\000\006\021\u02f0\132\u02f7\001\002\000" +
    "\006\021\ufef2\116\ufef2\001\002\000\006\021\ufef6\114\ufef6" +
    "\001\002\000\004\053\240\001\002\000\006\021\245\114" +
    "\ufee0\001\002\000\012\022\ufeef\023\ufeef\024\ufeef\104\ufeef" +
    "\001\002\000\004\053\u02fd\001\002\000\006\006\u02ff\131" +
    "\u026a\001\002\000\006\006\u0301\131\u026d\001\002\000\020" +
    "\007\151\052\u0265\053\u0266\054\133\055\123\056\116\136" +
    "\u025b\001\002\000\004\114\ufefa\001\002\000\004\115\u02e9" +
    "\001\002\000\004\114\ufef9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0300\000\010\002\006\003\004\012\005\001\001\000" +
    "\002\001\001\000\006\004\342\017\344\001\001\000\004" +
    "\006\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\016\017\020\015\021\016\022\012\023\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\026\337\027" +
    "\076\030\111\031\060\032\072\033\047\036\100\037\110" +
    "\040\104\041\052\042\051\047\050\050\067\056\054\057" +
    "\107\060\071\064\073\065\101\066\065\067\077\074\055" +
    "\075\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\026\103\027\076\030\111\031\060\032\072\033\047" +
    "\036\100\037\110\040\104\041\052\042\051\047\050\050" +
    "\067\056\054\057\107\060\071\064\073\065\101\066\065" +
    "\067\077\074\055\075\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\024\025\025\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\040\001\001\000\002\001\001\000\004\015" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\024\045\025\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\044\127\045\121\046\117\051\305" +
    "\052\133\053\131\054\116\001\001\000\002\001\001\000" +
    "\050\030\300\032\072\033\047\036\100\037\110\040\104" +
    "\041\052\042\051\047\050\050\067\056\054\057\107\060" +
    "\071\064\073\065\101\066\065\067\077\074\055\075\102" +
    "\001\001\000\020\044\127\045\121\046\117\051\275\052" +
    "\133\053\131\054\116\001\001\000\002\001\001\000\014" +
    "\034\267\035\265\044\270\045\121\046\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\026\260\027\076\030\111\031\060\032\072\033\047\036" +
    "\100\037\110\040\104\041\052\042\051\047\050\050\067" +
    "\056\054\057\107\060\071\064\073\065\101\066\065\067" +
    "\077\074\055\075\102\001\001\000\006\061\241\062\240" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\026\216\027\076\030\111\031\060\032\072\033" +
    "\047\036\100\037\110\040\104\041\052\042\051\047\050" +
    "\050\067\056\054\057\107\060\071\064\073\065\101\066" +
    "\065\067\077\074\055\075\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\076\201\077\200\001\001\000" +
    "\002\001\001\000\056\026\174\027\076\030\111\031\060" +
    "\032\072\033\047\036\100\037\110\040\104\041\052\042" +
    "\051\047\050\050\067\056\054\057\107\060\071\064\073" +
    "\065\101\066\065\067\077\074\055\075\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\026\112\027\076" +
    "\030\111\031\060\032\072\033\047\036\100\037\110\040" +
    "\104\041\052\042\051\047\050\050\067\056\054\057\107" +
    "\060\071\064\073\065\101\066\065\067\077\074\055\075" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\044\127\045\121\046" +
    "\117\051\120\052\133\053\131\054\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\044\165\045\121\046\117\051" +
    "\164\052\133\053\131\054\116\001\001\000\002\001\001" +
    "\000\004\055\144\001\001\000\012\044\127\045\121\046" +
    "\117\054\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\044\127\045\121\046\117\053" +
    "\135\054\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\045\163\046\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\045\154\046\117" +
    "\001\001\000\004\046\151\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\044\152\045\121" +
    "\046\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\162\001\001" +
    "\000\004\046\161\001\001\000\004\046\160\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\055\144\001\001\000" +
    "\002\001\001\000\016\044\127\045\121\046\117\052\170" +
    "\053\131\054\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\026\215\027\076\030\111\031\060\032\072\033\047" +
    "\036\100\037\110\040\104\041\052\042\051\047\050\050" +
    "\067\056\054\057\107\060\071\064\073\065\101\066\065" +
    "\067\077\074\055\075\102\001\001\000\004\077\211\001" +
    "\001\000\004\100\204\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\026\214\027\076\030\111" +
    "\031\060\032\072\033\047\036\100\037\110\040\104\041" +
    "\052\042\051\047\050\050\067\056\054\057\107\060\071" +
    "\064\073\065\101\066\065\067\077\074\055\075\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\070\221\071\217\072\220\001" +
    "\001\000\056\026\233\027\076\030\111\031\060\032\072" +
    "\033\047\036\100\037\110\040\104\041\052\042\051\047" +
    "\050\050\067\056\054\057\107\060\071\064\073\065\101" +
    "\066\065\067\077\074\055\075\102\001\001\000\056\026" +
    "\231\027\076\030\111\031\060\032\072\033\047\036\100" +
    "\037\110\040\104\041\052\042\051\047\050\050\067\056" +
    "\054\057\107\060\071\064\073\065\101\066\065\067\077" +
    "\074\055\075\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\044\127\045\121\046\117\051\224\052\133" +
    "\053\131\054\116\001\001\000\004\073\225\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\070\232\071\217\072\220\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\063\257\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\062\243\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\246\001" +
    "\001\000\004\063\250\001\001\000\010\044\251\045\121" +
    "\046\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\063\253\001\001\000\002\001\001\000\004\015\255" +
    "\001\001\000\004\063\256\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\035\272\044\270\045\121\046\117\001\001\000" +
    "\002\001\001\000\010\044\274\045\121\046\117\001\001" +
    "\000\002\001\001\000\004\073\276\001\001\000\002\001" +
    "\001\000\014\034\301\035\265\044\270\045\121\046\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\034\312\035\265\044\270\045\121\046\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\034\315\035" +
    "\265\044\270\045\121\046\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\044\320\045\121\046\117\001" +
    "\001\000\004\043\321\001\001\000\002\001\001\000\004" +
    "\100\323\001\001\000\002\001\001\000\004\100\327\001" +
    "\001\000\004\100\326\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\044\336\045\121\046" +
    "\117\001\001\000\004\015\333\001\001\000\002\001\001" +
    "\000\010\044\335\045\121\046\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\u01c1\013\u01c2\001\001\000" +
    "\002\001\001\000\004\007\345\001\001\000\006\101\346" +
    "\102\347\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\054" +
    "\015\u010a\103\362\105\u010b\106\355\107\360\110\377\111" +
    "\373\112\354\121\u010c\122\374\123\364\124\u0107\125\371" +
    "\126\u0105\130\356\131\u0102\132\357\133\370\134\u0108\136" +
    "\363\146\u0109\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\u0133\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\062" +
    "\u0122\001\001\000\052\015\u010a\103\362\106\u0120\107\360" +
    "\110\377\111\373\112\354\121\u010c\122\374\123\364\124" +
    "\u0107\125\371\126\u0105\130\356\131\u0102\132\357\133\370" +
    "\134\u0108\136\363\146\u0109\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\015\u010a\113\u0112\114\u0111\121\u010f" +
    "\122\374\123\364\124\u0107\125\371\126\u0105\130\356\131" +
    "\u0102\132\357\133\370\134\u0108\136\363\001\001\000\002" +
    "\001\001\000\004\015\u011e\001\001\000\034\015\u010a\121" +
    "\u0116\122\374\123\364\124\u0107\125\371\126\u0105\130\356" +
    "\131\u0102\132\357\133\370\134\u0108\136\363\001\001\000" +
    "\002\001\001\000\004\126\u0114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\044\u011b\045" +
    "\121\046\117\115\u0118\116\u0119\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\062\u011f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\015\u010a\113\u0124\114\u0111\121\u010f" +
    "\122\374\123\364\124\u0107\125\371\126\u0105\130\356\131" +
    "\u0102\132\357\133\370\134\u0108\136\363\001\001\000\002" +
    "\001\001\000\004\135\u0127\001\001\000\006\133\u0129\134" +
    "\u0108\001\001\000\002\001\001\000\040\015\u010a\113\u012a" +
    "\114\u0111\121\u010f\122\374\123\364\124\u0107\125\371\126" +
    "\u0105\130\356\131\u0102\132\357\133\370\134\u0108\136\363" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\015\u010a\113\u0130\114\u0111\121\u010f\122\374\123" +
    "\364\124\u0107\125\371\126\u0105\130\356\131\u0102\132\357" +
    "\133\370\134\u0108\136\363\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\062\u011f\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\u0138\104" +
    "\u0139\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\u013c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\063\257\001\001\000\006\015\u0138\104\u0142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\u0138\104\u0145\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\044\u0150\045\121\046\117\144" +
    "\u014e\145\u0152\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\044\u015f\045\121\046\117\144" +
    "\u014e\145\u0160\001\001\000\004\143\u015d\001\001\000\012" +
    "\044\u0150\045\121\046\117\144\u0156\001\001\000\004\014" +
    "\u0153\001\001\000\012\044\u0150\045\121\046\117\144\u0155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\044\u015e\045\121\046\117\001\001\000\002\001\001" +
    "\000\004\143\u015d\001\001\000\004\014\u0153\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\015\u010a\113\u0167\114\u0111\121\u010f\122" +
    "\374\123\364\124\u0107\125\371\126\u0105\130\356\131\u0102" +
    "\132\357\133\370\134\u0108\136\363\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\117\u016d" +
    "\120\u016b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\120\u0172\001\001\000" +
    "\002\001\001\000\006\117\u0174\120\u016b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\015" +
    "\u010a\113\u0178\114\u0111\121\u010f\122\374\123\364\124\u0107" +
    "\125\371\126\u0105\130\356\131\u0102\132\357\133\370\134" +
    "\u0108\136\363\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\044\u017b\045\121\046\117\001\001\000\002\001" +
    "\001\000\014\044\u0150\045\121\046\117\144\u014e\145\u017d" +
    "\001\001\000\004\014\u0153\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\137\u0187\140\u0185\141\u0186\001\001\000" +
    "\014\044\u011b\045\121\046\117\115\u0190\116\u0119\001\001" +
    "\000\004\141\u018a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\015\u010a\113\u018c\114\u0111\121\u010f\122\374\123" +
    "\364\124\u0107\125\371\126\u0105\130\356\131\u0102\132\357" +
    "\133\370\134\u0108\136\363\001\001\000\004\142\u018d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\015\u010a\113\u0192\114\u0111\121" +
    "\u010f\122\374\123\364\124\u0107\125\371\126\u0105\130\356" +
    "\131\u0102\132\357\133\370\134\u0108\136\363\001\001\000" +
    "\004\142\u0193\001\001\000\002\001\001\000\040\015\u010a" +
    "\113\u0195\114\u0111\121\u010f\122\374\123\364\124\u0107\125" +
    "\371\126\u0105\130\356\131\u0102\132\357\133\370\134\u0108" +
    "\136\363\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\u0199\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\044\u019c\045\121\046\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\143\u019f" +
    "\001\001\000\010\044\u01a0\045\121\046\117\001\001\000" +
    "\002\001\001\000\004\127\u01a3\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\044\u01ae\045\121\046\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\044\u01ab\045" +
    "\121\046\117\001\001\000\002\001\001\000\010\044\u01ad" +
    "\045\121\046\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\044\u01b0\045\121\046\117\001\001\000\002" +
    "\001\001\000\010\044\u01b2\045\121\046\117\001\001\000" +
    "\002\001\001\000\010\044\u01b4\045\121\046\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\143\u01b7\001" +
    "\001\000\010\044\u01b8\045\121\046\117\001\001\000\002" +
    "\001\001\000\004\127\u01ba\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\015\u010a\113\u01bf" +
    "\114\u0111\121\u010f\122\374\123\364\124\u0107\125\371\126" +
    "\u0105\130\356\131\u0102\132\357\133\370\134\u0108\136\363" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\u0228\001\001\000\010\010\u01c5\147\u01c6" +
    "\151\u01c7\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\150\u01ca\154\u01cb\155\u01c9\001\001\000\034\032\u01d9\156" +
    "\u01d7\157\u01cf\161\u01df\162\u01cd\163\u01d6\166\u01d1\167\u01ce" +
    "\170\u01dd\171\u01e0\172\u01d8\173\u01d3\235\u01dc\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\044" +
    "\127\045\121\046\117\051\u0212\052\133\053\131\054\116" +
    "\001\001\000\002\001\001\000\010\044\u0211\045\121\046" +
    "\117\001\001\000\002\001\001\000\020\044\127\045\121" +
    "\046\117\051\u01fd\052\133\053\131\054\116\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\164\u01e4\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\044\u01e7\045\121\046\117\165\u01e6\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\044\u01eb\045\121\046\117\165\u01ea\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\044\u01ee" +
    "\045\121\046\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\035\u01f1\044\270\045\121\046\117\160\u01f2" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\035" +
    "\u01f5\044\270\045\121\046\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\150\u01ca\154" +
    "\u01f8\155\u01c9\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\032\u01fb\044\u01fc\045\121\046\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\150\u01ca\154\u0200\155\u01c9\001\001\000" +
    "\002\001\001\000\010\174\u0205\175\u0206\176\u0204\001\001" +
    "\000\002\001\001\000\020\044\127\045\121\046\117\051" +
    "\u020e\052\133\053\131\054\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\150\u01ca\154" +
    "\u0208\155\u01c9\001\001\000\002\001\001\000\010\174\u020a" +
    "\175\u0206\176\u0204\001\001\000\002\001\001\000\010\150" +
    "\u01ca\154\u020c\155\u01c9\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\150\u01ca\154\u0215\155\u01c9\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\147\u021e\151\u01c7\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\152\u0223\153\u0222\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\177\u022a\001\001" +
    "\000\010\201\u022c\202\u022d\210\u022f\001\001\000\004\015" +
    "\u02fb\001\001\000\012\015\u0239\202\u023b\207\u023a\213\u0238" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\237\u0233\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\214\u02e2\001\001\000\010\015\u0239\200\u023f\213" +
    "\u023d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\015\u0239" +
    "\032\u01d9\211\u0246\212\u0248\213\u024c\216\u0249\217\u0257\220" +
    "\u024f\221\u0245\225\u0254\226\u0259\227\u024a\231\u0258\234\u0252" +
    "\235\u0256\236\u024b\237\u0255\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\015\u0239\032\u01d9\212\u029d\213\u024c" +
    "\216\u0249\217\u0257\220\u024f\221\u0245\225\u0254\226\u0259\227" +
    "\u024a\231\u0258\234\u0252\235\u0256\236\u024b\237\u0255\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\203" +
    "\u02b0\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\u025e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\044\u0266\045\121\046\117\234\u0267\236\u0262\237" +
    "\u0255\241\u0261\244\u0263\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\203" +
    "\u0268\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\044\u026a\045\121\046\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\044\u026d\045\121" +
    "\046\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\044\u0276\045\121\046\117\236\u0272\237\u0255\242\u0278" +
    "\243\u0270\001\001\000\004\014\u027e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\044\u015f" +
    "\045\121\046\117\144\u014e\145\u027c\001\001\000\002\001" +
    "\001\000\004\143\u027a\001\001\000\016\044\u0276\045\121" +
    "\046\117\236\u0272\237\u0255\242\u0279\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\044\u027b\045\121\046\117" +
    "\001\001\000\002\001\001\000\004\014\u0153\001\001\000" +
    "\002\001\001\000\016\044\u0276\045\121\046\117\236\u0272" +
    "\237\u0255\242\u0291\001\001\000\004\230\u0281\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\044\u0266\045\121\046" +
    "\117\234\u0267\236\u0262\237\u0255\241\u028c\244\u0263\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\044\u0266\045" +
    "\121\046\117\234\u0267\236\u0262\237\u0255\241\u0289\244\u0263" +
    "\001\001\000\002\001\001\000\022\044\u0266\045\121\046" +
    "\117\234\u0267\236\u0262\237\u0255\241\u028b\244\u0263\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\044\u0266\045" +
    "\121\046\117\234\u0267\236\u0262\237\u0255\241\u028e\244\u0263" +
    "\001\001\000\002\001\001\000\022\044\u0266\045\121\046" +
    "\117\234\u0267\236\u0262\237\u0255\241\u0290\244\u0263\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\044\u0266\045" +
    "\121\046\117\234\u0267\236\u0262\237\u0255\241\u0293\244\u0263" +
    "\001\001\000\002\001\001\000\020\044\u0276\045\121\046" +
    "\117\236\u0272\237\u0255\242\u0278\243\u0295\001\001\000\004" +
    "\014\u027e\001\001\000\004\230\u0297\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\015\u0239\032\u01d9\211\u029c\212\u0248\213\u024c\216" +
    "\u0249\217\u0257\220\u024f\221\u0245\225\u0254\226\u0259\227\u024a" +
    "\231\u0258\234\u0252\235\u0256\236\u024b\237\u0255\001\001\000" +
    "\042\015\u0239\032\u01d9\212\u029d\213\u024c\216\u0249\217\u0257" +
    "\220\u024f\221\u0245\225\u0254\226\u0259\227\u024a\231\u0258\234" +
    "\u0252\235\u0256\236\u024b\237\u0255\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\044\u0266\045\121\046\117\234\u0267\236\u0262\237\u0255" +
    "\240\u02a3\241\u02a2\244\u0263\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\044\u0266\045\121" +
    "\046\117\234\u0267\236\u0262\237\u0255\241\u02a7\244\u0263\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\015\u0239\032" +
    "\u01d9\211\u02ac\212\u0248\213\u024c\216\u0249\217\u0257\220\u024f" +
    "\221\u0245\225\u0254\226\u0259\227\u024a\231\u0258\234\u0252\235" +
    "\u0256\236\u024b\237\u0255\001\001\000\042\015\u0239\032\u01d9" +
    "\212\u029d\213\u024c\216\u0249\217\u0257\220\u024f\221\u0245\225" +
    "\u0254\226\u0259\227\u024a\231\u0258\234\u0252\235\u0256\236\u024b" +
    "\237\u0255\001\001\000\004\227\u02ae\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\044\u0266" +
    "\045\121\046\117\234\u0267\236\u0262\237\u0255\241\u02b2\244" +
    "\u0263\001\001\000\002\001\001\000\022\044\u0266\045\121" +
    "\046\117\234\u0267\236\u0262\237\u0255\241\u02b4\244\u0263\001" +
    "\001\000\002\001\001\000\044\015\u0239\032\u01d9\211\u02b6" +
    "\212\u0248\213\u024c\216\u0249\217\u0257\220\u024f\221\u0245\225" +
    "\u0254\226\u0259\227\u024a\231\u0258\234\u0252\235\u0256\236\u024b" +
    "\237\u0255\001\001\000\042\015\u0239\032\u01d9\212\u029d\213" +
    "\u024c\216\u0249\217\u0257\220\u024f\221\u0245\225\u0254\226\u0259" +
    "\227\u024a\231\u0258\234\u0252\235\u0256\236\u024b\237\u0255\001" +
    "\001\000\002\001\001\000\006\232\u02bc\233\u02be\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\233\u02c1\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\044\u0276\045\121\046\117\236\u0272\237\u0255\242\u0278" +
    "\243\u02c3\001\001\000\004\014\u027e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\015\u0239" +
    "\032\u01d9\211\u02c8\212\u0248\213\u024c\216\u0249\217\u0257\220" +
    "\u024f\221\u0245\225\u0254\226\u0259\227\u024a\231\u0258\234\u0252" +
    "\235\u0256\236\u024b\237\u0255\001\001\000\042\015\u0239\032" +
    "\u01d9\212\u029d\213\u024c\216\u0249\217\u0257\220\u024f\221\u0245" +
    "\225\u0254\226\u0259\227\u024a\231\u0258\234\u0252\235\u0256\236" +
    "\u024b\237\u0255\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\044\u0276\045\121\046\117\236\u0272\237\u0255\242" +
    "\u0278\243\u02cc\001\001\000\004\014\u027e\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\222\u02d1\223\u02d3\224" +
    "\u02d2\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\224\u02d5\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\015\u0239\032\u01d9\211\u02d7\212\u0248" +
    "\213\u024c\216\u0249\217\u0257\220\u024f\221\u0245\225\u0254\226" +
    "\u0259\227\u024a\231\u0258\234\u0252\235\u0256\236\u024b\237\u0255" +
    "\001\001\000\044\015\u0239\032\u01d9\142\u02d8\212\u029d\213" +
    "\u024c\216\u0249\217\u0257\220\u024f\221\u0245\225\u0254\226\u0259" +
    "\227\u024a\231\u0258\234\u0252\235\u0256\236\u024b\237\u0255\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\015\u0239" +
    "\032\u01d9\211\u02db\212\u0248\213\u024c\216\u0249\217\u0257\220" +
    "\u024f\221\u0245\225\u0254\226\u0259\227\u024a\231\u0258\234\u0252" +
    "\235\u0256\236\u024b\237\u0255\001\001\000\044\015\u0239\032" +
    "\u01d9\142\u02dc\212\u029d\213\u024c\216\u0249\217\u0257\220\u024f" +
    "\221\u0245\225\u0254\226\u0259\227\u024a\231\u0258\234\u0252\235" +
    "\u0256\236\u024b\237\u0255\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\203\u02e4\215\u02e3\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\044\u0266\045" +
    "\121\046\117\234\u0267\236\u0262\237\u0255\241\u02e6\244\u0263" +
    "\001\001\000\002\001\001\000\004\204\u02e9\001\001\000" +
    "\014\044\u02ec\045\121\046\117\205\u02ea\206\u02eb\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\044\u02ec\045\121\046\117\205\u02ee" +
    "\001\001\000\002\001\001\000\010\044\u02f1\045\121\046" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\044\u02ec\045\121\046" +
    "\117\205\u02f5\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\062\u02f9\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\203\u02fd" +
    "\001\001\000\002\001\001\000\022\044\u0266\045\121\046" +
    "\117\234\u0267\236\u0262\237\u0255\241\u02ff\244\u0263\001\001" +
    "\000\002\001\001\000\004\204\u0301\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SyntaxMlgAnalyzer$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SyntaxMlgAnalyzer$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SyntaxMlgAnalyzer$do_action(act_num, parser, stack, top,this);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    

public boolean SyntaxError;
    public boolean SyntaxRecoverableError;
    public TestManager testManager;
    public TranslateControlerTAC translateControlerTAC;

    public void setTestManager(TestManager testManager) {
        this.testManager = testManager;
        testManager.creatFatherAmbit();
    }

public void setTranslateControlerTAC(TranslateControlerTAC translateControlerTAC) {
        this.translateControlerTAC = translateControlerTAC;
                            
    }

     public void syntax_error(Symbol s){
        try {
            String lexema = s.value.toString();
            int fila = s.right;
            int columna = s.left;
            OutputErrors.syntacticRecovered(testManager.getMainFrame().getOutputPannel(), lexema, columna, fila, s);
        } catch (Exception e) {
            System.out.println("error");
            int fila = s.right;
            int columna = s.left;
            System.out.println("\t \tFila: " + fila + "\n");
            System.out.println("\t \tColumna: " + columna + "\n");
        }

    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        try{
            String lexema = s.value.toString();
            int fila = s.right;
            int columna = s.left;
        OutputErrors.syntacticNotRecovered(testManager.getMainFrame().getOutputPannel(), lexema, columna, fila, s);

        } catch (Exception ex) {
            
         }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SyntaxMlgAnalyzer$actions {




  private final SyntaxMlgAnalyzer parser;

  /** Constructor */
  CUP$SyntaxMlgAnalyzer$actions(SyntaxMlgAnalyzer parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SyntaxMlgAnalyzer$do_action(
    int                        CUP$SyntaxMlgAnalyzer$act_num,
    java_cup.runtime.lr_parser CUP$SyntaxMlgAnalyzer$parser,
    java.util.Stack            CUP$SyntaxMlgAnalyzer$stack,
    int                        CUP$SyntaxMlgAnalyzer$top,SyntaxMlgAnalyzer sma)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SyntaxMlgAnalyzer$result;

      /* select the action based on the action number */
      switch (CUP$SyntaxMlgAnalyzer$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // OpBoolC ::= BoolValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBoolC",161, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // OpBoolC ::= OpBoolC OpLogic BoolValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBoolC",161, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // BoolValueC ::= NumberValue ExBoolJ NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueC",160, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // BoolValueC ::= FALSE 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueC",160, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // BoolValueC ::= TRUE 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueC",160, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // BoolValueC ::= FuntionCall 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueC",160, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // BoolValueC ::= PARENTHESIS_A OpBoolJ PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueC",160, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // BoolValueC ::= NOT BoolValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueC",160, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // ArrayVal ::= ID Dimensions 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ArrayVal",162, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // ValueC ::= ArrayVal 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValueC",159, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // ValueC ::= Getch 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValueC",159, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // ValueC ::= FuntionCall 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValueC",159, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // ValueC ::= NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValueC",159, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // ValueC ::= STRING 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValueC",159, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // ParametersC ::= ValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParametersC",158, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // ParametersC ::= ParametersC COMMA ValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParametersC",158, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // FuntionIDs ::= ID 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FuntionIDs",157, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // FuntionIDs ::= FuntionIDs POINT ID 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FuntionIDs",157, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // FuntionCall ::= FuntionIDs PARENTHESIS_A PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FuntionCall",156, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // FuntionCall ::= FuntionIDs PARENTHESIS_A ParametersC PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FuntionCall",156, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // Input ::= SCAN_F PARENTHESIS_A STRING COMMA AMPERSON ID PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Input",155, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // Getch ::= GETCH PARENTHESIS_A PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Getch",154, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // OutputValueC ::= STRING 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValueC",153, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // OutputValueC ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValueC",153, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // OutputValueC ::= ID 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValueC",153, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // OutputValueC ::= NUMBER 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValueC",153, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // OutputValuesC ::= OutputValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValuesC",152, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // OutputValuesC ::= OutputValuesC COMMA OutputValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValuesC",152, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // OutputC ::= CLRSCR PARENTHESIS_A PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputC",151, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // OutputC ::= PRINTF PARENTHESIS_A OutputValuesC PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputC",151, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // StepC ::= ID DIVISION EQUAL ValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepC",150, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // StepC ::= ID MULTIPLICATION EQUAL ValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepC",150, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // StepC ::= ID MINUS EQUAL ValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepC",150, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // StepC ::= ID PLUS EQUAL ValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepC",150, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // StepC ::= ID EQUAL ValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepC",150, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // WhileCHeader ::= WHILE PARENTHESIS_A OpBoolC PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("WhileCHeader",149, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // ForCHeader ::= FOR PARENTHESIS_A ID EQUAL ValueC SEMICOLON OpBoolC SEMICOLON StepC PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForCHeader",148, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-9)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // ForCHeader ::= FOR PARENTHESIS_A Type ID EQUAL ValueC SEMICOLON OpBoolC SEMICOLON StepC PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForCHeader",148, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-10)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // CycleC ::= DO LEFT_CB MainCode RIGHT_CB WhileCHeader SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleC",147, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // CycleC ::= WhileCHeader LEFT_CB MainCode RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleC",147, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // CycleC ::= ForCHeader LEFT_CB MainCode RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleC",147, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // CaseC ::= CASE_J COLON MainCode BreakJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseC",146, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // CasesC2 ::= CaseC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesC2",145, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // CasesC2 ::= CasesC2 CaseC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesC2",145, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // CasesC ::= CaseC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesC",144, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // CasesC ::= CasesC2 DEFAULT_J COLON MainCode BreakJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesC",144, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // CasesC ::= CasesC2 CaseC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesC",144, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // SwitchCHeader ::= SWITCH_J PARENTHESIS_A ID PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("SwitchCHeader",143, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // IfCHeader ::= IF PARENTHESIS_A OpBoolC PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IfCHeader",142, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // ConditionC ::= SwitchCHeader LEFT_CB CasesC RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionC",141, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // ConditionC ::= IfCHeader LEFT_CB MainCode RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionC",141, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // AssignmentC ::= ID Dimensions EQUAL ValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentC",140, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // AssignmentC ::= ID EQUAL ValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentC",140, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // AssiC ::= 
            {
              Object RESULT =null;
		System.out.println("ASSI VACIO");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssiC",139, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // AssiC ::= Dimensions EQUAL ArrayValues 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssiC",139, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // AssiC ::= Dimensions 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssiC",139, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // AssiC ::= EQUAL ValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssiC",139, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // IdsC ::= ID AssiC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IdsC",138, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // IdsC ::= ID AssiC COMMA IdsVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IdsC",138, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // DeclarationC ::= Type IdsC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationC",137, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // MainLineCode ::= FuntionCall SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",136, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // MainLineCode ::= Input SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",136, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // MainLineCode ::= Getch SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",136, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // MainLineCode ::= OutputC SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",136, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // MainLineCode ::= CycleC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",136, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // MainLineCode ::= ConditionC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",136, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // MainLineCode ::= AssignmentC SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",136, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // MainLineCode ::= DeclarationC SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",136, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // MainCode ::= MainLineCode 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainCode",135, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // MainCode ::= MainCode MainLineCode 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainCode",135, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // Main ::= VOID_J MAIN PARENTHESIS_A PARENTHESIS_B LEFT_CB MainCode RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Main",126, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // Include ::= INCLUDE LESS_THAN FuntionIDs GREATER_THAN 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Include",134, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // Include ::= INCLUDE STRING 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Include",134, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // Globals ::= DeclarationC SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Globals",133, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // Globals ::= Globals DeclarationC SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Globals",133, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // Rows ::= LEFT_CB Nums RIGHT_BRACKET 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Rows",132, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // Rows ::= Rows COMMA LEFT_CB Nums RIGHT_BRACKET 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Rows",132, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // Nums ::= NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Nums",131, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // Nums ::= Nums COMMA NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Nums",131, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // ArrayValues ::= LEFT_CB Rows RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ArrayValues",130, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // ArrayValues ::= LEFT_CB Nums RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ArrayValues",130, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // Dimensions ::= LEFT_BRACKET NumberValue RIGHT_BRACKET 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Dimensions",129, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // Dimensions ::= Dimensions LEFT_BRACKET NumberValue RIGHT_BRACKET 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Dimensions",129, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // Constante ::= CONST Type ID Dimensions EQUAL ArrayValues 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Constante",128, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // Constante ::= CONST Type ID EQUAL ValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Constante",128, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // Constantes ::= Constante SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Constantes",127, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // Constantes ::= Constantes Constante SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Constantes",127, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // Library ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Library",125, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // Library ::= Library Include 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Library",125, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // Programa ::= PROGRAM_SEPERATOR Library Constantes Globals Main 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Programa",7, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // ElifHeader ::= ELIF OpBool COLON 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT =op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElifHeader",123, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // ElseHeaderPY ::= ELSE COLON 
            {
              Object RESULT =null;
		sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseHeaderPY",124, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // Elif ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Elif",122, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // Elif ::= ElseHeaderPY INDENT FunctionLinesPY DEDENT 
            {
              Object RESULT =null;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT=lines;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Elif",122, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // Elif ::= ElifHeader INDENT FunctionLinesPY DEDENT Elif 
            {
              Object RESULT =null;
		int ifBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int ifBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object ifBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int elseBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int elseBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object elseBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(ifBool!=null){
                                                                    BoolQuad bool=(BoolQuad)ifBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    if(elseBool!=null){bool.changeFatherNoBool((ArrayList<Object>)elseBool);}
                                                                                    RESULT =sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool);
                                                                                    
                                                                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Elif",122, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // IfPYHeader ::= IF OpBool COLON 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT=op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IfPYHeader",121, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // IfPY ::= IfPYHeader INDENT FunctionLinesPY DEDENT Elif 
            {
              Object RESULT =null;
		int ifBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int ifBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object ifBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int elseBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int elseBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object elseBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		BoolQuad bool=(BoolQuad)ifBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    if(elseBool!=null){bool.changeFatherNoBool((ArrayList<Object>)elseBool);}
                                                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool));
                                                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IfPY",120, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // ConditionPY ::= IfPY 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionPY",119, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // AssignmentPY ::= ID EQUAL InputVb 
            {
              Object RESULT =null;
		
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentPY",118, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // AssignmentPY ::= ID EQUAL NumberValue 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num!=null){
                                                                    if(!sma.testManager.checkExistence(id)){
                                                                    sma.testManager.insertTuple(id,TypeManager.VAR_TYPE,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                            }
                                                           sma.translateControlerTAC.creatTempIdQuadAssign(num,id);
                                                        sma.translateControlerTAC.acceptAllIdQuas();}
                                                    

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentPY",118, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // WhilePYHeader ::= WHILE OpBool COLON 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT=op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("WhilePYHeader",117, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // WhilePY ::= WhilePYHeader INDENT FunctionLinesPY DEDENT 
            {
              Object RESULT =null;
		int whileBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int whileBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object whileBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		BoolQuad bool=(BoolQuad)whileBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.addGotoWhileTags(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool)));
                                                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("WhilePY",116, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // Range1 ::= NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Range1",115, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // Range ::= RANGE PARENTHESIS_A NumberValue PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Range",114, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // Range ::= RANGE PARENTHESIS_A Range1 COMMA NumberValue PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Range",114, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // Range ::= RANGE PARENTHESIS_A Range1 COMMA Range1 COMMA NumberValue PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Range",114, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-7)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // ForPYHeader ::= FOR ID IN Range 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForPYHeader",113, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // ForPY ::= ForPYHeader COLON INDENT FunctionLinesPY DEDENT 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForPY",112, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // CyclePY ::= WhilePY 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CyclePY",111, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // CyclePY ::= ForPY 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CyclePY",111, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // OutputValuesPY ::= ValueVb 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll((ArrayList<Object>)val);
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValuesPY",110, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // OutputValuesPY ::= OutputValuesPY COMMA ValueVb 
            {
              Object RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll((ArrayList<Object>)vals);
                                    printQuad.addAll((ArrayList<Object>)val);
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValuesPY",110, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // OutputPY ::= PRINT PARENTHESIS_A OutputValuesPY PARENTHESIS_B 
            {
              Object RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		 if(vals!=null){
                                                                                                sma.translateControlerTAC.addQuadsToCurrent((ArrayList<Object>)vals);
                                                                                                
                                                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputPY",109, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // Input ::= InputVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Input",155, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // LineCodePY ::= error 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodePY",108, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // LineCodePY ::= ConditionPY 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodePY",108, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // LineCodePY ::= AssignmentPY 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodePY",108, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // LineCodePY ::= CyclePY 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodePY",108, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // LineCodePY ::= OutputPY 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodePY",108, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // LineCodePY ::= Input 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodePY",108, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // LinesPY ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LinesPY",107, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // LinesPY ::= LinesPY LineCodePY 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LinesPY",107, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // FunctionLinesPY1 ::= LinesPY RETURN NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionLinesPY1",102, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // FunctionLinesPY1 ::= LinesPY 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionLinesPY1",102, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // FunctionLinesPY ::= FunctionLinesPY1 
            {
              Object RESULT =null;
		RESULT=sma.translateControlerTAC.getcurrentQuads();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionLinesPY",106, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // IdsPY ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.getParameterControl().insertParameter(TypeManager.VAR_TYPE,id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IdsPY",105, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // IdsPY ::= IdsPY COMMA ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.getParameterControl().insertParameter(TypeManager.VAR_TYPE,id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IdsPY",105, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // ParametersPY ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParametersPY",104, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // ParametersPY ::= IdsPY 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParametersPY",104, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // FunctionPYHeader ::= DEF ID PARENTHESIS_A ParametersPY PARENTHESIS_B COLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		sma.testManager.creatFatherAmbit();
                                                                                            sma.translateControlerTAC.createNewQuadrupleBlock();
                                                                                            String name =sma.testManager.insertFunction(id,TypeManager.VAR_TYPE, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                RESULT= name;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionPYHeader",103, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // FunctionPY ::= FunctionPYHeader INDENT FunctionLinesPY 
            {
              Object RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int funright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object fun = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object>quad=new ArrayList<>();
                                                                        if(fun!=null){
                                                                        quad=sma.translateControlerTAC.tagFunction((String)fun,(ArrayList<Object>) ins);
                                                                         
                                                                          }
                                                                         sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    sma.translateControlerTAC.addQuadsToCurrent(quad);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionPY",101, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // PythonCode ::= FunctionPY 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("PythonCode",6, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // PythonCode ::= PythonCode DEDENT FunctionPY 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("PythonCode",6, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // PythonSeperator ::= PYTHON_SEPERATOR 
            {
              Object RESULT =null;
		sma.testManager.creatFatherAmbit();
                            sma.translateControlerTAC.createNewQuadrupleBlock();
                             
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("PythonSeperator",9, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // Python ::= PythonSeperator 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Python",3, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // Python ::= PythonSeperator PythonCode 
            {
              Object RESULT =null;
		sma.testManager.switchNextTypes();
                                            sma.testManager.finishAmbit();
                                    sma.translateControlerTAC.acceptCurrentBlock();
                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getcurrentQuads());
                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Python",3, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // OpBoolJ ::= BoolValueJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBoolJ",99, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // OpBoolJ ::= OpBoolJ OpLogic BoolValueJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBoolJ",99, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // BoolValueJ ::= NumberValue ExBoolJ NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueJ",98, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // BoolValueJ ::= FALSE 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueJ",98, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // BoolValueJ ::= TRUE 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueJ",98, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // BoolValueJ ::= PARENTHESIS_A OpBoolJ PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueJ",98, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // BoolValueJ ::= NOT BoolValueJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueJ",98, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // ExBoolJ ::= LESS_THAN_EQUAL 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolJ",97, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // ExBoolJ ::= GREATER_THAN_EQUAL 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolJ",97, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // ExBoolJ ::= LESS_THAN 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolJ",97, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // ExBoolJ ::= GREATER_THAN 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolJ",97, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // ExBoolJ ::= DIFERENT_J 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolJ",97, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // ExBoolJ ::= EQUAL_BOOL 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolJ",97, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // BreakJ ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BreakJ",96, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // BreakJ ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BreakJ",96, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // CaseJ ::= CASE_J ValuesJ COLON LineCodesJ BreakJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseJ",95, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // CasesJ2 ::= CaseJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesJ2",94, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // CasesJ2 ::= CasesJ2 CaseJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesJ2",94, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // CasesJ1 ::= CaseJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesJ1",93, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // CasesJ1 ::= CasesJ2 DEFAULT_J COLON LineCodesJ BreakJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesJ1",93, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // CasesJ1 ::= CasesJ2 CaseJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesJ1",93, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // SwitchJHeader ::= SWITCH_J PARENTHESIS_A ID PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("SwitchJHeader",92, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // ElseJ ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseJ",91, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // ElseJ ::= ELSE IfJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseJ",91, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // ElseJ ::= ELSE LEFT_CB LineCodesJ RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseJ",91, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // IfJHeader ::= IF PARENTHESIS_A OpBoolJ PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IfJHeader",90, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // IfJ ::= IfJHeader LEFT_CB LineCodesJ RIGHT_CB ElseJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IfJ",89, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // ConditionJ ::= SwitchJHeader LEFT_CB CasesJ1 RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionJ",88, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // ConditionJ ::= IfJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionJ",88, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // AssignmentJ ::= ID EQUAL NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentJ",87, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // DeclarationJ ::= Type IdsVb 
            {
              Object RESULT =null;
		
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationJ",86, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // DeclarationJ ::= PUBLIC Type IdsVb 
            {
              Object RESULT =null;
		
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationJ",86, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // StepJ ::= ID DIVISION EQUAL NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepJ",85, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // StepJ ::= ID MULTIPLICATION EQUAL NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepJ",85, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // StepJ ::= ID MINUS EQUAL NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepJ",85, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // StepJ ::= ID PLUS EQUAL NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepJ",85, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // StepJ ::= ID EQUAL NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepJ",85, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // WhileJHeader ::= WHILE PARENTHESIS_A OpBoolJ PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("WhileJHeader",84, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // ForJHeader ::= FOR PARENTHESIS_A ID EQUAL NumberValue SEMICOLON ID ExBoolJ NumberValue SEMICOLON StepJ PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForJHeader",83, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-11)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // ForJHeader ::= FOR PARENTHESIS_A Type ID EQUAL NumberValue SEMICOLON ID ExBoolJ NumberValue SEMICOLON StepJ PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForJHeader",83, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-12)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // CycleJ ::= DO LEFT_CB LineCodesJ RIGHT_CB WhileJHeader SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleJ",82, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // CycleJ ::= WhileJHeader LEFT_CB LineCodesJ RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleJ",82, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // CycleJ ::= ForJHeader LEFT_CB LineCodesJ RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleJ",82, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // InputJ ::= CHARINPUT PARENTHESIS_A STRING PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InputJ",81, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // InputJ ::= FLOATINPUT PARENTHESIS_A STRING PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InputJ",81, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // InputJ ::= INTINPUT PARENTHESIS_A STRING PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InputJ",81, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // OutputJ ::= SYSTEM_OUT_PRINT PARENTHESIS_A ValuesOutputJ PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputJ",80, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // OutputJ ::= SYSTEM_OUT_PRINTLN PARENTHESIS_A ValuesOutputJ PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputJ",80, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // LineCodeJ ::= error 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",79, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // LineCodeJ ::= ConditionJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",79, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // LineCodeJ ::= AssignmentJ SEMICOLON 
            {
              Object RESULT =null;
		System.out.println("ASIGNACION");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",79, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // LineCodeJ ::= DeclarationJ SEMICOLON 
            {
              Object RESULT =null;
		System.out.println("DECLARACION");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",79, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // LineCodeJ ::= CycleJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",79, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // LineCodeJ ::= InputJ SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",79, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // LineCodeJ ::= OutputJ SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",79, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // ValJ ::= STRING 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValJ",78, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // ValJ ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValJ",78, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ValJ ::= NUMBER 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValJ",78, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // ValJ ::= ID 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValJ",78, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // ValuesOutputJ ::= ValJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValuesOutputJ",77, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // ValuesOutputJ ::= ValuesOutputJ PLUS ValJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValuesOutputJ",77, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // StringValue ::= STRING 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StringValue",76, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // StringValue ::= StringValue PLUS STRING 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StringValue",76, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ValuesJ ::= NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValuesJ",75, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ValuesJ ::= StringValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValuesJ",75, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // LineCodesJ2 ::= LineCodeJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodesJ2",74, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // LineCodesJ2 ::= LineCodesJ2 LineCodeJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodesJ2",74, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // LineCodesJ ::= LineCodesJ2 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodesJ",73, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // LineCodesJ ::= LineCodesJ2 RETURN_J ValuesJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodesJ",73, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ProcessJHeader ::= PUBLIC VOID_J ID PARENTHESIS_A PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ProcessJHeader",72, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ProcessJHeader ::= PUBLIC VOID_J ID PARENTHESIS_A ParametersJ PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ProcessJHeader",72, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ProcessJ ::= ProcessJHeader LEFT_CB RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ProcessJ",71, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ProcessJ ::= ProcessJHeader LEFT_CB LineCodesJ RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ProcessJ",71, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // FunctionJHeader ::= PUBLIC Type ID PARENTHESIS_A PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionJHeader",70, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // FunctionJHeader ::= PUBLIC Type ID PARENTHESIS_A ParametersJ PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionJHeader",70, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // FunctionJ ::= FunctionJHeader LEFT_CB RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionJ",69, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // FunctionJ ::= FunctionJHeader LEFT_CB LineCodesJ RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionJ",69, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ConditionJHeader ::= PUBLIC ID PARENTHESIS_A ParametersJ PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionJHeader",65, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ConstructorJ ::= ConditionJHeader LEFT_CB LineCodesJ RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConstructorJ",100, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ClassCodeJ ::= ConstructorJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClassCodeJ",68, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ClassCodeJ ::= LineCodeJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClassCodeJ",68, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ClassCodeJ ::= ProcessJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClassCodeJ",68, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ClassCodeJ ::= FunctionJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClassCodeJ",68, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // JavaClassCode ::= ClassCodeJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("JavaClassCode",67, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // JavaClassCode ::= JavaClassCode ClassCodeJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("JavaClassCode",67, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ParametersJ ::= Type ID 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParametersJ",66, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ParametersJ ::= ParametersJ COMMA Type ID 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParametersJ",66, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ClaseJHeader ::= PUBLIC CLASS_J ID 
            {
              Object RESULT =null;
		sma.testManager.creatFatherAmbit();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClaseJHeader",64, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ClaseJ ::= ClaseJHeader LEFT_CB JavaClassCode RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClaseJ",63, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // JavaCode ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("JavaCode",5, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // JavaCode ::= JavaCode ClaseJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("JavaCode",5, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // JavaSeperator ::= JAVA_SEPERATOR 
            {
              Object RESULT =null;
		sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("JavaSeperator",13, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Java ::= JavaSeperator JavaCode 
            {
              Object RESULT =null;
		sma.testManager.switchNextTypes();
                                    sma.translateControlerTAC.acceptCurrentBlock();
                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Java",2, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CaseValue ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type=sma.testManager.getTypeFromST(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                            if(type!=null){
                                RESULT=id;
                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseValue",62, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CaseValue ::= CHAR 
            {
              Object RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=ch;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseValue",62, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CaseValue ::= DECIMAL 
            {
              Object RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=dec;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseValue",62, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CaseValue ::= NUMBER 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=num;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseValue",62, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CasesVbHeader ::= CASE_VB ELSE 
            {
              Object RESULT =null;
		RESULT=Switch.ELSE;
                    sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesVbHeader",61, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CasesVbHeader ::= CASE_VB CaseValue 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=val;
                                            sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesVbHeader",61, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CasesVb ::= CasesVbHeader InstructionsFunctionVb 
            {
              Object RESULT =null;
		int caseHleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int caseHright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object caseH = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		UniquenessTable ut=sma.testManager.createNewUniquenessTable();
                                                                        if(caseH!=null){
                                                                            
                                                                            boolean verified =ut.add(caseH,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                            if(verified){
                                                                            
                                                                            sma.translateControlerTAC.getSwitchAsst().addCases((String)caseH,(ArrayList<Object>)lines);}
                                                                            }
                                                                        RESULT=ut;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesVb",60, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CasesVb ::= CasesVb CasesVbHeader InstructionsFunctionVb 
            {
              Object RESULT =null;
		int caseVbleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int caseVbright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object caseVb = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int caseHleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int caseHright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object caseH = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		UniquenessTable ut=(UniquenessTable)caseVb;
                                                                        if(caseH!=null){
                                                                            
                                                                            boolean verified =ut.add(caseH,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                            if(verified){
                                                                            
                                                                            sma.translateControlerTAC.getSwitchAsst().addCases((String)caseH,(ArrayList<Object>)lines);}
                                                                            }
                                                                        RESULT=ut;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesVb",60, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // SwitchVbHeader ::= SELECT_VB CASE_VB ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.translateControlerTAC.createSwitchAsst(id);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("SwitchVbHeader",59, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // SwitchVb ::= SwitchVbHeader CasesVb END_VB SELECT_VB 
            {
              Object RESULT =null;
		sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(sma.translateControlerTAC.getSwitchAsst().getFatherCases()));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("SwitchVb",58, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ThenVb ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ThenVb",57, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ThenVb ::= THEN_VB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ThenVb",57, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ElseIfHeader ::= ELSE_IF_VB OpBool ThenVb 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT =op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseIfHeader",56, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ElseHeader ::= ELSE 
            {
              Object RESULT =null;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseHeader",55, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ElseVb ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseVb",54, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ElseVb ::= ElseIfHeader InstructionsFunctionVb ElseVb 
            {
              Object RESULT =null;
		int ifBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int ifBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object ifBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int elseBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int elseBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object elseBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(ifBool!=null){
                                                                    BoolQuad bool=(BoolQuad)ifBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    if(elseBool!=null){bool.changeFatherNoBool((ArrayList<Object>)elseBool);}
                                                                                    RESULT =sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool);
                                                                                    
                                                                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseVb",54, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ElseVb ::= ElseHeader InstructionsFunctionVb 
            {
              Object RESULT =null;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=lines;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseVb",54, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // IfVbHeader ::= IF OpBool ThenVb 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT=op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IfVbHeader",53, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // IfVb ::= IfVbHeader InstructionsFunctionVb ElseVb END_VB IF 
            {
              Object RESULT =null;
		int ifBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int ifBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object ifBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int elseBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int elseBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object elseBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		BoolQuad bool=(BoolQuad)ifBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    if(elseBool!=null){bool.changeFatherNoBool((ArrayList<Object>)elseBool);}
                                                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool));
                                                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IfVb",52, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ConditionVb ::= SwitchVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionVb",51, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ConditionVb ::= IfVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionVb",51, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // AssignmentVb ::= ID EQUAL NumberValue 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                if(bool){sma.translateControlerTAC.creatTempIdQuadAssign(val,id);
                                                        sma.translateControlerTAC.acceptAllIdQuas();}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentVb",50, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // AssiVb ::= 
            {
              Object RESULT =null;
		System.out.println("ASSI VACIO");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssiVb",49, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // AssiVb ::= EQUAL NumberValue 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT = val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssiVb",49, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // IdsVb ::= ID AssiVb 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.insertPreTuple(id,null,val,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                        if(val!=null){ 
                                                            sma.translateControlerTAC.creatTempIdQuadAssign(val,id);}
                                        sma.translateControlerTAC.nextIdQuad();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IdsVb",48, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // IdsVb ::= IdsVb COMMA ID AssiVb 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.insertPreTuple(id,null,val,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        if(val!=null){ 
                                                            sma.translateControlerTAC.creatTempIdQuadAssign(val,id);}
                                                       
                                                        sma.translateControlerTAC.nextIdQuad();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IdsVb",48, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Type ::= CHAR_TYPE 
            {
              Object RESULT =null;
		RESULT=TypeManager.CHAR_TYPE;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Type",11, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Type ::= FLOAT_TYPE 
            {
              Object RESULT =null;
		RESULT=TypeManager.FLOAT_TYPE;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Type",11, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Type ::= INTEGER_TYPE 
            {
              Object RESULT =null;
		RESULT=TypeManager.INTEGER_TYPE;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Type",11, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DeTypeVb ::= IdsVb AS_VB Type AssiVb 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.testManager.insertPreTuplesToSymbolTable((Integer)type,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeTypeVb",47, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DeTypeVb ::= DeTypeVb COMMA IdsVb AS_VB Type AssiVb 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.testManager.insertPreTuplesToSymbolTable((Integer)type,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeTypeVb",47, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DeclarationVb ::= DIM_VB DeTypeVb 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationVb",46, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DoHeader ::= DO 
            {
              Object RESULT =null;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DoHeader",45, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DoWhileVb ::= DoHeader InstructionsFunctionVb LOOP_VB WHILE OpBool 
            {
              Object RESULT =null;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(op!=null){
                                                                                sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.creatDoWhile((ArrayList<Object>)lines,(BoolQuad)op));
                                                                                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DoWhileVb",44, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ExBoolVb ::= LESS_THAN_EQUAL 
            {
              Object RESULT =null;
		RESULT=Operation.LESS_THAN_EQUAL;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb",43, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ExBoolVb ::= GREATER_THAN_EQUAL 
            {
              Object RESULT =null;
		RESULT=Operation.GREATER_THAN_EQUAL;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb",43, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ExBoolVb ::= LESS_THAN 
            {
              Object RESULT =null;
		RESULT=Operation.LESS_THAN;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb",43, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ExBoolVb ::= GREATER_THAN 
            {
              Object RESULT =null;
		RESULT=Operation.GREATER_THAN;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb",43, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ExBoolVb ::= DIFERENT_VB 
            {
              Object RESULT =null;
		RESULT=Operation.DIFERENT;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb",43, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ExBoolVb ::= EQUAL 
            {
              Object RESULT =null;
		RESULT=Operation.EQUAL_BOOL;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb",43, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // BoolValueVb ::= PARENTHESIS_A OpBool PARENTHESIS_B 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT=val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueVb",42, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // BoolValueVb ::= NumberValue ExBoolVb Number3 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int exValleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int exValright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object exVal = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateBoolType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdBoolQuadruple(s1.getQuadruple(),s2.getQuadruple(),(Integer)exVal);
                                                                    RESULT=sma.translateControlerTAC.getcurrentTempQuads();
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueVb",42, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // BoolValueVb ::= FALSE 
            {
              Object RESULT =null;
		 Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.BOOL_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL_BOOL,0,1,null);
		                    RESULT=sma.translateControlerTAC.getcurrentTempQuads();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueVb",42, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // BoolValueVb ::= TRUE 
            {
              Object RESULT =null;
		 Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.BOOL_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL_BOOL,1,1,null);
		                    RESULT=sma.translateControlerTAC.getcurrentTempQuads();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueVb",42, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OpBool3 ::= BoolValueVb 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(val!=null){
                   RESULT = sma.translateControlerTAC.getBoolQuadControl().convertQuadToBool(((ArrayList<Object>)val)); 
        }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBool3",41, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OpBool3 ::= NOT BoolValueVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBool3",41, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OpBool2 ::= OpBool3 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBool2",40, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OpBool2 ::= OpBool2 AND OpBool3 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(val1!=null &&val2!=null){
                                            RESULT= sma.translateControlerTAC.getBoolQuadControl().operateBoolQuad(val1,val2,Operation.OP_AND);}
                                            
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBool2",40, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OpBool ::= OpBool2 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBool",39, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OpBool ::= OpBool OR OpBool2 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(val1!=null &&val2!=null){
                                            RESULT= sma.translateControlerTAC.getBoolQuadControl().operateBoolQuad(val1,val2,Operation.OP_OR);}
                                            
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBool",39, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // WhileVbHeader ::= WHILE OpBool 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT=op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("WhileVbHeader",38, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // WhileVb ::= WhileVbHeader InstructionsFunctionVb END_VB WHILE 
            {
              Object RESULT =null;
		int whileBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int whileBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object whileBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		BoolQuad bool=(BoolQuad)whileBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.addGotoWhileTags(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool)));
                                                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("WhileVb",37, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Number3 ::= PARENTHESIS_A NumberValue PARENTHESIS_B 
            {
              Object RESULT =null;
		int asstleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int asstright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object asst = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT=asst;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3",36, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Number3 ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type=sma.testManager.getTypeFromST(val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                            if(type!=null){
                                Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL,val,null,null);
                                RESULT=new SynthesizedOpAsst(quadruple,type);
                            }else{

                                RESULT=null;
                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3",36, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Number3 ::= CHAR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.CHAR_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL,val,null,null);
		                    RESULT=new SynthesizedOpAsst(quadruple,type);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3",36, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Number3 ::= DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.FLOAT_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL,val,null,null);
		                    RESULT=new SynthesizedOpAsst(quadruple,type);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3",36, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Number3 ::= NUMBER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		 Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.INTEGER_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL,val,null,null);
		                    RESULT=new SynthesizedOpAsst(quadruple,type);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3",36, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Number2 ::= Number3 
            {
              Object RESULT =null;
		int asstleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int asstright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object asst = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=asst;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number2",35, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Number2 ::= Number2 MOD Number3 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.MOD);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number2",35, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Number2 ::= Number2 DIVISION Number3 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.DIVISION);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number2",35, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Number2 ::= Number2 MULTIPLICATION Number3 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.MULTIPLICATION);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number2",35, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NumberValue ::= Number2 
            {
              Object RESULT =null;
		int asstleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int asstright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object asst = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=asst;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumberValue",34, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NumberValue ::= NumberValue MINUS Number2 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.MINUS);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumberValue",34, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NumberValue ::= NumberValue PLUS Number2 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.PLUS);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumberValue",34, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Step ::= 
            {
              Object RESULT =null;
		RESULT="1";
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Step",33, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Step ::= STEP_VB PLUS CaseValue 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=value;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Step",33, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Step ::= STEP_VB MINUS CaseValue 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT="-"+(String)value;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Step",33, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Step ::= STEP_VB CaseValue 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=value;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Step",33, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // For ::= FOR 
            {
              Object RESULT =null;
		sma.testManager.creatSonAmbit();
                                                        sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("For",32, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ForVbHeaderStart ::= For ID EQUAL NumberValue 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type=sma.testManager.getTypeFromST(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    if(type!=null){
                                                    if(sma.testManager.getTypeManager().isNumerico(type.getNumber())){
                                                        
                                                        boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        if(bool){sma.translateControlerTAC.creatTempIdQuadAssign(val,id);
                                                            RESULT=new SemanticAsstIdQuad(id, sma.translateControlerTAC.getcurrentTempQuads());
                                                        }
                                                    }else{
                                                        sma.testManager.callNumericError(id,type,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    }}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForVbHeaderStart",31, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ForVbHeaderStart ::= For ID AS_VB Type EQUAL NumberValue 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                if(bool){sma.translateControlerTAC.creatTempIdQuadAssign(val,id);
                                                        sma.translateControlerTAC.acceptAllIdQuas();
                                                        RESULT=id;}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForVbHeaderStart",31, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ForVbHeader ::= ForVbHeaderStart TO_VB NumberValue Step 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int stepleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int stepright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object step = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if (id!=null) {
                    SemanticAsstIdQuad saiq= (SemanticAsstIdQuad)id;
                    SynthesizedOpAsst s1= (SynthesizedOpAsst)num;
                    Quadruple quadruple=sma.translateControlerTAC.operateIdBoolQuadruple(saiq.getId(),s1.getQuadruple(),Operation.EQUAL_BOOL);
                    BoolQuad bool =sma.translateControlerTAC.getBoolQuadControl().convertQuadToBool(sma.translateControlerTAC.getcurrentTempQuads());
                     For f=sma.translateControlerTAC.createForAsst(saiq.getQuads(), (String) step, bool, saiq.getId());
                    RESULT=f;}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForVbHeader",30, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ForVb ::= ForVbHeader InstructionsFunctionVb NEXT_VB 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		if(f!=null){
                                                                For fo=(For)f;
                                                                fo.addCode((ArrayList<Object>)lines);
                                                                sma.translateControlerTAC.addQuadsToCurrent(fo.convertToQuad());
                                                                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForVb",29, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CycleVb ::= DoWhileVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleVb",28, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CycleVb ::= WhileVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleVb",28, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CycleVb ::= ForVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleVb",28, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ValueVb ::= NumberValue 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll(sma.translateControlerTAC.getcurrentTempQuads());
                                    printQuad.add(sma.translateControlerTAC.createPrintQuad(val));
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValueVb",27, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ValueVb ::= STRING 
            {
              Object RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.add(sma.translateControlerTAC.createPrintQuad(string));
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValueVb",27, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ValuesVb ::= ValueVb 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll((ArrayList<Object>)val);
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValuesVb",26, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ValuesVb ::= ValuesVb AMPERSON ValueVb 
            {
              Object RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		ArrayList<Object> printQuad= new ArrayList<Object>();
                                    printQuad.addAll((ArrayList<Object>)vals);
                                    printQuad.addAll((ArrayList<Object>)val);
                                    RESULT=printQuad;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValuesVb",26, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OutputVb ::= CONSOLE_VB POINT WRITELN_VB PARENTHESIS_A ValuesVb PARENTHESIS_B 
            {
              Object RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		Quadruple lineBreak = sma.translateControlerTAC.createPrintQuad("\n");
                                                                                            if(vals!=null){
                                                                                                ArrayList asst=(ArrayList<Object>)vals;
                                                                                                asst.add(lineBreak);
                                                                                                sma.translateControlerTAC.addQuadsToCurrent(asst);
                                                                                                
                                                                                                
                                                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputVb",25, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OutputVb ::= CONSOLE_VB POINT WRITE_VB PARENTHESIS_A ValuesVb PARENTHESIS_B 
            {
              Object RESULT =null;
		int valsleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valsright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object vals = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		 if(vals!=null){
                                                                                                sma.translateControlerTAC.addQuadsToCurrent((ArrayList<Object>)vals);
                                                                                                
                                                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputVb",25, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // InputVb ::= CHARINPUT PARENTHESIS_A STRING PARENTHESIS_B 
            {
              Object RESULT =null;
		RESULT= TypeManager.CHAR_TYPE;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InputVb",24, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // InputVb ::= FLOATINPUT PARENTHESIS_A STRING PARENTHESIS_B 
            {
              Object RESULT =null;
		RESULT= TypeManager.FLOAT_TYPE;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InputVb",24, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // InputVb ::= INTINPUT PARENTHESIS_A STRING PARENTHESIS_B 
            {
              Object RESULT =null;
		RESULT= TypeManager.INTEGER_TYPE;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InputVb",24, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LnInstructionsVb ::= error 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",22, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LnInstructionsVb ::= ConditionVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",22, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LnInstructionsVb ::= AssignmentVb 
            {
              Object RESULT =null;
		System.out.println("ASIGNACION");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",22, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LnInstructionsVb ::= DeclarationVb 
            {
              Object RESULT =null;
		System.out.println("DECLARACION");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",22, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LnInstructionsVb ::= CycleVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",22, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LnInstructionsVb ::= OutputVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",22, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LnInstructionsVb ::= InputVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",22, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Lines ::= LnInstructionsVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Lines",23, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Lines ::= Lines LnInstructionsVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Lines",23, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // InstructionsFunctionVb2 ::= RETURN_VB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb2",21, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // InstructionsFunctionVb2 ::= RETURN_VB ValuesVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb2",21, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // InstructionsFunctionVb2 ::= LnInstructionsVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb2",21, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // InstructionsFunctionVb2 ::= Lines RETURN_VB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb2",21, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // InstructionsFunctionVb2 ::= Lines RETURN_VB ValuesVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb2",21, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // InstructionsFunctionVb2 ::= Lines LnInstructionsVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb2",21, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // InstructionsFunctionVb ::= InstructionsFunctionVb2 
            {
              Object RESULT =null;
		 RESULT=sma.translateControlerTAC.getcurrentQuads();
                                                    sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb",20, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Parameter ::= ID AS_VB Type 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.getParameterControl().insertParameter((Integer)type,id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Parameter",19, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Parameter ::= Parameter COMMA ID AS_VB Type 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.getParameterControl().insertParameter((Integer)type,id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Parameter",19, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Parameters ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Parameters",18, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Parameters ::= Parameter 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Parameters",18, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Public ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Public",12, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Public ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Public",12, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SubVbHeader ::= Public SUB_VB ID PARENTHESIS_A Parameters PARENTHESIS_B 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		sma.testManager.creatFatherAmbit();
                                                                                            sma.translateControlerTAC.createNewQuadrupleBlock();
                                                                                            String name =sma.testManager.insertFunction(id, null, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                RESULT= name;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("SubVbHeader",17, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SubVb ::= SubVbHeader InstructionsFunctionVb END_VB SUB_VB 
            {
              Object RESULT =null;
		int subleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int subright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object sub = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		ArrayList<Object>quad=new ArrayList<>();
                                                                        if(sub!=null){
                                                                        quad=sma.translateControlerTAC.tagFunction((String)sub,(ArrayList<Object>) lines);
                                                                         
                                                                          }
                                                                         sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    sma.translateControlerTAC.addQuadsToCurrent(quad);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("SubVb",16, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FunctionVbHeader ::= Public FUNCTION_VB ID PARENTHESIS_A Parameters PARENTHESIS_B AS_VB Type 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.creatFatherAmbit();
                                                                                            sma.translateControlerTAC.createNewQuadrupleBlock();
                                                                                            String name =sma.testManager.insertFunction(id, (Integer) type, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                RESULT= name;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionVbHeader",15, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-7)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FunctionVB ::= FunctionVbHeader InstructionsFunctionVb END_VB FUNCTION_VB 
            {
              Object RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int funright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object fun = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		ArrayList<Object>quad=new ArrayList<>();
                                                                        if(fun!=null){
                                                                        quad=sma.translateControlerTAC.tagFunction((String)fun,(ArrayList<Object>) ins);
                                                                         
                                                                          }
                                                                         sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    sma.translateControlerTAC.addQuadsToCurrent(quad);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionVB",14, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VbCode ::= VbCode error 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("VbCode",4, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VbCode ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("VbCode",4, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VbCode ::= VbCode SubVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("VbCode",4, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VbCode ::= VbCode FunctionVB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("VbCode",4, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VbSeperator ::= VB_SEPERATOR 
            {
              Object RESULT =null;
		sma.testManager.creatFatherAmbit();
                            sma.translateControlerTAC.createNewQuadrupleBlock();
                             
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("VbSeperator",8, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // VB ::= VbSeperator VbCode 
            {
              Object RESULT =null;
		sma.testManager.switchNextTypes();
                                    sma.testManager.finishAmbit();
                                    sma.translateControlerTAC.acceptCurrentBlock();
                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getcurrentQuads());
                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("VB",1, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicio ::= VB Java Python Programa 
            {
              Object RESULT =null;
		System.out.println("FIN Inicio");
                                        sma.translateControlerTAC.printQuads();
                                        sma.testManager.finishAmbit();
                                    sma.translateControlerTAC.acceptCurrentBlock();
                                        sma.translateControlerTAC.convertQuads(sma.translateControlerTAC.getcurrentQuads());
                                        
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT = start_val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SyntaxMlgAnalyzer$parser.done_parsing();
          return CUP$SyntaxMlgAnalyzer$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

