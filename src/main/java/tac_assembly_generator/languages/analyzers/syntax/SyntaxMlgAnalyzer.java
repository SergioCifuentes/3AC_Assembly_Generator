//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Oct 07 22:46:46 CST 2020
//----------------------------------------------------
package tac_assembly_generator.languages.analyzers.syntax;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import tac_assembly_generator.languages.semantic.verification.TestManager;
import tac_assembly_generator.TAC.TranslateControlerTAC;
import tac_assembly_generator.TAC.quadruple.Operation;
import tac_assembly_generator.TAC.quadruple.Quadruple;
import tac_assembly_generator.TAC.quadruple.BoolQuad;
import tac_assembly_generator.languages.semantic.type.Type;
import tac_assembly_generator.languages.semantic.type.TypeManager;

/**
 * CUP v0.11a beta 20060608 generated parser.
 *
 * @version Wed Oct 07 22:46:46 CST 2020
 */
public class SyntaxMlgAnalyzer extends java_cup.runtime.lr_parser {

    /**
     * Default constructor.
     */
    public SyntaxMlgAnalyzer() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    public SyntaxMlgAnalyzer(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public SyntaxMlgAnalyzer(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][]
            = unpackFromStrings(new String[]{
        "\000\u0121\000\002\002\004\000\002\002\006\000\002\003"
        + "\004\000\002\012\003\000\002\006\004\000\002\006\004"
        + "\000\002\006\002\000\002\006\004\000\002\016\006\000"
        + "\002\017\012\000\002\020\006\000\002\021\010\000\002"
        + "\015\003\000\002\015\002\000\002\022\003\000\002\022"
        + "\002\000\002\023\007\000\002\023\005\000\002\024\003"
        + "\000\002\025\004\000\002\025\005\000\002\025\004\000"
        + "\002\025\003\000\002\025\004\000\002\025\003\000\002"
        + "\027\004\000\002\027\003\000\002\026\003\000\002\026"
        + "\003\000\002\026\003\000\002\026\003\000\002\026\003"
        + "\000\002\026\003\000\002\026\003\000\002\030\006\000"
        + "\002\030\006\000\002\030\006\000\002\031\010\000\002"
        + "\031\010\000\002\032\005\000\002\032\003\000\002\033"
        + "\003\000\002\033\003\000\002\034\003\000\002\034\003"
        + "\000\002\034\003\000\002\035\015\000\002\035\013\000"
        + "\002\036\004\000\002\036\005\000\002\036\005\000\002"
        + "\036\002\000\002\037\005\000\002\037\005\000\002\037"
        + "\003\000\002\040\005\000\002\040\005\000\002\040\005"
        + "\000\002\040\003\000\002\041\003\000\002\041\003\000"
        + "\002\041\003\000\002\041\003\000\002\041\005\000\002"
        + "\042\007\000\002\043\005\000\002\043\003\000\002\044"
        + "\005\000\002\044\003\000\002\045\004\000\002\045\003"
        + "\000\002\046\003\000\002\046\003\000\002\046\005\000"
        + "\002\046\005\000\002\047\003\000\002\047\003\000\002"
        + "\047\003\000\002\047\003\000\002\047\003\000\002\047"
        + "\003\000\002\050\007\000\002\051\004\000\002\052\010"
        + "\000\002\052\006\000\002\014\003\000\002\014\003\000"
        + "\002\014\003\000\002\053\006\000\002\053\004\000\002"
        + "\054\004\000\002\054\002\000\002\055\005\000\002\056"
        + "\003\000\002\056\003\000\002\057\007\000\002\060\005"
        + "\000\002\061\004\000\002\061\007\000\002\061\002\000"
        + "\002\062\003\000\002\062\002\000\002\063\010\000\002"
        + "\064\006\000\002\064\005\000\002\004\004\000\002\007"
        + "\004\000\002\007\002\000\002\065\006\000\002\066\005"
        + "\000\002\070\006\000\002\070\004\000\002\071\004\000"
        + "\002\071\003\000\002\072\003\000\002\072\003\000\002"
        + "\072\003\000\002\072\003\000\002\132\006\000\002\067"
        + "\007\000\002\073\006\000\002\073\005\000\002\074\010"
        + "\000\002\074\007\000\002\075\006\000\002\075\005\000"
        + "\002\076\010\000\002\076\007\000\002\077\005\000\002"
        + "\077\003\000\002\100\004\000\002\100\003\000\002\101"
        + "\003\000\002\101\003\000\002\102\005\000\002\102\003"
        + "\000\002\103\005\000\002\103\003\000\002\104\003\000"
        + "\002\104\003\000\002\104\003\000\002\104\003\000\002"
        + "\105\004\000\002\105\004\000\002\105\003\000\002\105"
        + "\004\000\002\105\004\000\002\105\003\000\002\105\003"
        + "\000\002\106\006\000\002\106\006\000\002\107\006\000"
        + "\002\107\006\000\002\107\006\000\002\110\006\000\002"
        + "\110\006\000\002\110\010\000\002\111\017\000\002\111"
        + "\016\000\002\112\006\000\002\113\005\000\002\113\006"
        + "\000\002\113\006\000\002\113\006\000\002\113\006\000"
        + "\002\114\005\000\002\114\004\000\002\115\005\000\002"
        + "\116\003\000\002\116\006\000\002\117\007\000\002\120"
        + "\006\000\002\121\006\000\002\121\004\000\002\121\002"
        + "\000\002\122\006\000\002\123\004\000\002\123\007\000"
        + "\002\123\003\000\002\124\004\000\002\124\003\000\002"
        + "\125\007\000\002\126\004\000\002\126\002\000\002\127"
        + "\004\000\002\127\003\000\002\127\003\000\002\127\003"
        + "\000\002\127\003\000\002\127\003\000\002\130\004\000"
        + "\002\130\005\000\002\130\003\000\002\130\003\000\002"
        + "\130\005\000\002\131\005\000\002\131\003\000\002\005"
        + "\004\000\002\010\002\000\002\011\007\000\002\133\004"
        + "\000\002\133\002\000\002\135\005\000\002\135\004\000"
        + "\002\136\007\000\002\136\010\000\002\137\006\000\002"
        + "\137\005\000\002\140\005\000\002\140\005\000\002\141"
        + "\005\000\002\141\003\000\002\142\007\000\002\142\005"
        + "\000\002\143\005\000\002\143\004\000\002\144\004\000"
        + "\002\144\006\000\002\134\011\000\002\145\004\000\002"
        + "\145\003\000\002\146\004\000\002\146\004\000\002\146"
        + "\003\000\002\146\003\000\002\146\004\000\002\146\004"
        + "\000\002\146\004\000\002\146\004\000\002\147\004\000"
        + "\002\150\006\000\002\150\004\000\002\151\004\000\002"
        + "\151\003\000\002\151\005\000\002\151\002\000\002\152"
        + "\005\000\002\152\006\000\002\153\006\000\002\153\006"
        + "\000\002\154\006\000\002\155\006\000\002\156\004\000"
        + "\002\156\007\000\002\156\003\000\002\157\004\000\002"
        + "\157\003\000\002\160\006\000\002\161\006\000\002\161"
        + "\006\000\002\161\010\000\002\162\015\000\002\162\014"
        + "\000\002\163\006\000\002\164\005\000\002\164\006\000"
        + "\002\164\006\000\002\164\006\000\002\164\006\000\002"
        + "\165\006\000\002\165\005\000\002\166\005\000\002\166"
        + "\003\000\002\167\003\000\002\167\003\000\002\167\003"
        + "\000\002\167\003\000\002\170\005\000\002\171\011\000"
        + "\002\172\006\000\002\172\005\000\002\173\005\000\002"
        + "\173\003\000\002\174\005\000\002\174\003\000\002\175"
        + "\003\000\002\175\003\000\002\175\003\000\002\175\003"
        + "\000\002\175\003\000\002\200\004\000\002\176\004\000"
        + "\002\176\005\000\002\176\003\000\002\176\003\000\002"
        + "\176\003\000\002\176\005\000\002\177\005\000\002\177"
        + "\003"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table
            = unpackFromStrings(new String[]{
        "\000\u029e\000\004\004\004\001\002\000\014\003\ufffe\033"
        + "\ufffe\054\ufffe\057\ufffe\061\ufffe\001\002\000\004\054\337"
        + "\001\002\000\014\003\012\033\015\054\ufffb\057\ufff4\061"
        + "\ufff4\001\002\000\004\002\010\001\002\000\004\002\001"
        + "\001\002\000\004\054\uffff\001\002\000\014\003\012\033"
        + "\015\054\ufffb\057\ufff4\061\ufff4\001\002\000\014\003\012"
        + "\033\015\054\ufffb\057\ufff4\061\ufff4\001\002\000\034\003"
        + "\073\030\072\031\102\032\056\034\101\035\055\036\063"
        + "\041\060\050\061\055\066\062\062\063\052\075\065\001"
        + "\002\000\006\057\ufff5\061\ufff5\001\002\000\014\003\012"
        + "\033\015\054\ufffb\057\ufff4\061\ufff4\001\002\000\034\003"
        + "\073\030\072\031\102\032\056\034\101\035\055\036\063"
        + "\041\060\050\061\055\066\062\062\063\052\075\065\001"
        + "\002\000\006\057\022\061\021\001\002\000\004\050\044"
        + "\001\002\000\004\050\023\001\002\000\004\007\024\001"
        + "\002\000\006\010\ufff2\050\025\001\002\000\004\056\042"
        + "\001\002\000\004\010\037\001\002\000\006\010\ufff3\021"
        + "\030\001\002\000\004\050\031\001\002\000\004\056\032"
        + "\001\002\000\010\022\035\023\036\024\034\001\002\000"
        + "\006\010\ufff1\021\ufff1\001\002\000\056\003\uffaa\006\uffaa"
        + "\010\uffaa\021\uffaa\030\uffaa\031\uffaa\032\uffaa\034\uffaa\035"
        + "\uffaa\036\uffaa\041\uffaa\042\uffaa\050\uffaa\055\uffaa\060\uffaa"
        + "\062\uffaa\063\uffaa\070\uffaa\072\uffaa\073\uffaa\075\uffaa\076"
        + "\uffaa\001\002\000\056\003\uffac\006\uffac\010\uffac\021\uffac"
        + "\030\uffac\031\uffac\032\uffac\034\uffac\035\uffac\036\uffac\041"
        + "\uffac\042\uffac\050\uffac\055\uffac\060\uffac\062\uffac\063\uffac"
        + "\070\uffac\072\uffac\073\uffac\075\uffac\076\uffac\001\002\000"
        + "\056\003\uffab\006\uffab\010\uffab\021\uffab\030\uffab\031\uffab"
        + "\032\uffab\034\uffab\035\uffab\036\uffab\041\uffab\042\uffab\050"
        + "\uffab\055\uffab\060\uffab\062\uffab\063\uffab\070\uffab\072\uffab"
        + "\073\uffab\075\uffab\076\uffab\001\002\000\004\056\040\001"
        + "\002\000\010\022\035\023\036\024\034\001\002\000\034"
        + "\003\ufff8\030\ufff8\031\ufff8\032\ufff8\034\ufff8\035\ufff8\036"
        + "\ufff8\041\ufff8\050\ufff8\055\ufff8\062\ufff8\063\ufff8\075\ufff8"
        + "\001\002\000\010\022\035\023\036\024\034\001\002\000"
        + "\006\010\ufff0\021\ufff0\001\002\000\004\007\045\001\002"
        + "\000\006\010\ufff2\050\025\001\002\000\004\010\047\001"
        + "\002\000\034\003\ufff6\030\ufff6\031\ufff6\032\ufff6\034\ufff6"
        + "\035\ufff6\036\ufff6\041\ufff6\050\ufff6\055\ufff6\062\ufff6\063"
        + "\ufff6\075\ufff6\001\002\000\050\003\uffe5\030\uffe5\031\uffe5"
        + "\032\uffe5\034\uffe5\035\uffe5\036\uffe5\041\uffe5\042\uffe5\050"
        + "\uffe5\055\uffe5\060\uffe5\062\uffe5\063\uffe5\070\uffe5\072\uffe5"
        + "\073\uffe5\075\uffe5\076\uffe5\001\002\000\050\003\uffd5\030"
        + "\uffd5\031\uffd5\032\uffd5\034\uffd5\035\uffd5\036\uffd5\041\uffd5"
        + "\042\uffd5\050\uffd5\055\uffd5\060\uffd5\062\uffd5\063\uffd5\070"
        + "\uffd5\072\uffd5\073\uffd5\075\uffd5\076\uffd5\001\002\000\004"
        + "\017\317\001\002\000\050\003\uffd4\030\uffd4\031\uffd4\032"
        + "\uffd4\034\uffd4\035\uffd4\036\uffd4\041\uffd4\042\uffd4\050\uffd4"
        + "\055\uffd4\060\uffd4\062\uffd4\063\uffd4\070\uffd4\072\uffd4\073"
        + "\uffd4\075\uffd4\076\uffd4\001\002\000\050\003\uffa3\030\uffa3"
        + "\031\uffa3\032\uffa3\034\uffa3\035\uffa3\036\uffa3\041\uffa3\042"
        + "\uffa3\050\uffa3\055\uffa3\060\uffa3\062\uffa3\063\uffa3\070\uffa3"
        + "\072\uffa3\073\uffa3\075\uffa3\076\uffa3\001\002\000\022\007"
        + "\174\027\176\037\172\040\173\050\115\051\123\052\120"
        + "\053\124\001\002\000\004\007\310\001\002\000\034\003"
        + "\073\030\072\031\102\032\056\034\101\035\055\036\063"
        + "\041\060\050\061\055\066\062\305\063\052\075\065\001"
        + "\002\000\022\007\174\027\176\037\172\040\173\050\115"
        + "\051\123\052\120\053\124\001\002\000\004\006\301\001"
        + "\002\000\032\007\117\042\uffe9\047\246\050\115\051\123"
        + "\052\120\053\124\060\uffe9\070\uffe9\072\uffe9\073\uffe9\076"
        + "\uffe9\001\002\000\034\003\073\030\072\031\102\032\056"
        + "\034\101\035\055\036\063\041\060\050\061\055\066\062"
        + "\062\063\052\075\065\001\002\000\050\003\uffa4\030\uffa4"
        + "\031\uffa4\032\uffa4\034\uffa4\035\uffa4\036\uffa4\041\uffa4\042"
        + "\uffa4\050\uffa4\055\uffa4\060\uffa4\062\uffa4\063\uffa4\070\uffa4"
        + "\072\uffa4\073\uffa4\075\uffa4\076\uffa4\001\002\000\004\076"
        + "\256\001\002\000\004\050\233\001\002\000\050\003\uffe3"
        + "\030\uffe3\031\uffe3\032\uffe3\034\uffe3\035\uffe3\036\uffe3\041"
        + "\uffe3\042\uffe3\050\uffe3\055\uffe3\060\uffe3\062\uffe3\063\uffe3"
        + "\070\uffe3\072\uffe3\073\uffe3\075\uffe3\076\uffe3\001\002\000"
        + "\050\003\uffe6\030\uffe6\031\uffe6\032\uffe6\034\uffe6\035\uffe6"
        + "\036\uffe6\041\uffe6\042\uffe6\050\uffe6\055\uffe6\060\uffe6\062"
        + "\uffe6\063\uffe6\070\uffe6\072\uffe6\073\uffe6\075\uffe6\076\uffe6"
        + "\001\002\000\050\003\uffe2\030\uffe2\031\uffe2\032\uffe2\034"
        + "\uffe2\035\uffe2\036\uffe2\041\uffe2\042\uffe2\050\uffe2\055\uffe2"
        + "\060\uffe2\062\uffe2\063\uffe2\070\uffe2\072\uffe2\073\uffe2\075"
        + "\uffe2\076\uffe2\001\002\000\004\007\230\001\002\000\050"
        + "\003\uffe0\030\uffe0\031\uffe0\032\uffe0\034\uffe0\035\uffe0\036"
        + "\uffe0\041\uffe0\042\uffe0\050\uffe0\055\uffe0\060\uffe0\062\uffe0"
        + "\063\uffe0\070\uffe0\072\uffe0\073\uffe0\075\uffe0\076\uffe0\001"
        + "\002\000\034\003\073\030\072\031\102\032\056\034\101"
        + "\035\055\036\063\041\060\050\061\055\066\062\062\063"
        + "\052\075\065\001\002\000\016\042\uffef\060\uffef\070\uffef"
        + "\072\uffef\073\uffef\076\uffef\001\002\000\050\003\uffe4\030"
        + "\uffe4\031\uffe4\032\uffe4\034\uffe4\035\uffe4\036\uffe4\041\uffe4"
        + "\042\uffe4\050\uffe4\055\uffe4\060\uffe4\062\uffe4\063\uffe4\070"
        + "\uffe4\072\uffe4\073\uffe4\075\uffe4\076\uffe4\001\002\000\050"
        + "\003\uffe1\030\uffe1\031\uffe1\032\uffe1\034\uffe1\035\uffe1\036"
        + "\uffe1\041\uffe1\042\uffe1\050\uffe1\055\uffe1\060\uffe1\062\uffe1"
        + "\063\uffe1\070\uffe1\072\uffe1\073\uffe1\075\uffe1\076\uffe1\001"
        + "\002\000\004\060\162\001\002\000\004\050\110\001\002"
        + "\000\004\007\105\001\002\000\050\003\uffd6\030\uffd6\031"
        + "\uffd6\032\uffd6\034\uffd6\035\uffd6\036\uffd6\041\uffd6\042\uffd6"
        + "\050\uffd6\055\uffd6\060\uffd6\062\uffd6\063\uffd6\070\uffd6\072"
        + "\uffd6\073\uffd6\075\uffd6\076\uffd6\001\002\000\050\003\uffe7"
        + "\030\uffe7\031\uffe7\032\uffe7\034\uffe7\035\uffe7\036\uffe7\041"
        + "\uffe7\042\uffeb\050\uffe7\055\uffe7\060\uffeb\062\uffe7\063\uffe7"
        + "\070\uffeb\072\uffeb\073\uffeb\075\uffe7\076\uffeb\001\002\000"
        + "\004\047\106\001\002\000\004\010\107\001\002\000\050"
        + "\003\uffdd\030\uffdd\031\uffdd\032\uffdd\034\uffdd\035\uffdd\036"
        + "\uffdd\041\uffdd\042\uffdd\050\uffdd\055\uffdd\060\uffdd\062\uffdd"
        + "\063\uffdd\070\uffdd\072\uffdd\073\uffdd\075\uffdd\076\uffdd\001"
        + "\002\000\006\006\111\056\112\001\002\000\014\007\117"
        + "\050\115\051\123\052\120\053\124\001\002\000\010\022"
        + "\035\023\036\024\034\001\002\000\004\006\114\001\002"
        + "\000\014\007\117\050\115\051\123\052\120\053\124\001"
        + "\002\000\140\003\uffc3\006\uffc3\010\uffc3\011\uffc3\012\uffc3"
        + "\013\uffc3\014\uffc3\015\uffc3\020\uffc3\021\uffc3\025\uffc3\026"
        + "\uffc3\030\uffc3\031\uffc3\032\uffc3\034\uffc3\035\uffc3\036\uffc3"
        + "\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\050"
        + "\uffc3\055\uffc3\056\uffc3\060\uffc3\062\uffc3\063\uffc3\066\uffc3"
        + "\067\uffc3\070\uffc3\071\uffc3\072\uffc3\073\uffc3\074\uffc3\075"
        + "\uffc3\076\uffc3\106\uffc3\107\uffc3\110\uffc3\111\uffc3\113\uffc3"
        + "\114\uffc3\115\uffc3\121\uffc3\001\002\000\010\011\135\012"
        + "\136\066\141\001\002\000\014\007\117\050\115\051\123"
        + "\052\120\053\124\001\002\000\140\003\uffc6\006\uffc6\010"
        + "\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\020\uffc6"
        + "\021\uffc6\025\uffc6\026\uffc6\030\uffc6\031\uffc6\032\uffc6\034"
        + "\uffc6\035\uffc6\036\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6"
        + "\045\uffc6\046\uffc6\050\uffc6\055\uffc6\056\uffc6\060\uffc6\062"
        + "\uffc6\063\uffc6\066\uffc6\067\uffc6\070\uffc6\071\uffc6\072\uffc6"
        + "\073\uffc6\074\uffc6\075\uffc6\076\uffc6\106\uffc6\107\uffc6\110"
        + "\uffc6\111\uffc6\113\uffc6\114\uffc6\115\uffc6\121\uffc6\001\002"
        + "\000\132\003\uffc7\006\uffc7\010\uffc7\011\uffc7\012\uffc7\013"
        + "\uffc7\014\uffc7\015\uffc7\020\uffc7\021\uffc7\030\uffc7\031\uffc7"
        + "\032\uffc7\034\uffc7\035\uffc7\036\uffc7\041\uffc7\042\uffc7\043"
        + "\uffc7\044\uffc7\045\uffc7\046\uffc7\050\uffc7\055\uffc7\056\uffc7"
        + "\060\uffc7\062\uffc7\063\uffc7\066\uffc7\067\uffc7\070\uffc7\071"
        + "\uffc7\072\uffc7\073\uffc7\075\uffc7\076\uffc7\106\uffc7\107\uffc7"
        + "\110\uffc7\111\uffc7\113\uffc7\114\uffc7\115\uffc7\121\uffc7\001"
        + "\002\000\132\003\uffcb\006\uffcb\010\uffcb\011\uffcb\012\uffcb"
        + "\013\126\014\127\015\125\020\uffcb\021\uffcb\030\uffcb\031"
        + "\uffcb\032\uffcb\034\uffcb\035\uffcb\036\uffcb\041\uffcb\042\uffcb"
        + "\043\uffcb\044\uffcb\045\uffcb\046\uffcb\050\uffcb\055\uffcb\056"
        + "\uffcb\060\uffcb\062\uffcb\063\uffcb\066\uffcb\067\uffcb\070\uffcb"
        + "\071\uffcb\072\uffcb\073\uffcb\075\uffcb\076\uffcb\106\uffcb\107"
        + "\uffcb\110\uffcb\111\uffcb\113\uffcb\114\uffcb\115\uffcb\121\uffcb"
        + "\001\002\000\140\003\uffc4\006\uffc4\010\uffc4\011\uffc4\012"
        + "\uffc4\013\uffc4\014\uffc4\015\uffc4\020\uffc4\021\uffc4\025\uffc4"
        + "\026\uffc4\030\uffc4\031\uffc4\032\uffc4\034\uffc4\035\uffc4\036"
        + "\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4"
        + "\050\uffc4\055\uffc4\056\uffc4\060\uffc4\062\uffc4\063\uffc4\066"
        + "\uffc4\067\uffc4\070\uffc4\071\uffc4\072\uffc4\073\uffc4\074\uffc4"
        + "\075\uffc4\076\uffc4\106\uffc4\107\uffc4\110\uffc4\111\uffc4\113"
        + "\uffc4\114\uffc4\115\uffc4\121\uffc4\001\002\000\140\003\uffc5"
        + "\006\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015"
        + "\uffc5\020\uffc5\021\uffc5\025\uffc5\026\uffc5\030\uffc5\031\uffc5"
        + "\032\uffc5\034\uffc5\035\uffc5\036\uffc5\041\uffc5\042\uffc5\043"
        + "\uffc5\044\uffc5\045\uffc5\046\uffc5\050\uffc5\055\uffc5\056\uffc5"
        + "\060\uffc5\062\uffc5\063\uffc5\066\uffc5\067\uffc5\070\uffc5\071"
        + "\uffc5\072\uffc5\073\uffc5\074\uffc5\075\uffc5\076\uffc5\106\uffc5"
        + "\107\uffc5\110\uffc5\111\uffc5\113\uffc5\114\uffc5\115\uffc5\121"
        + "\uffc5\001\002\000\014\007\117\050\115\051\123\052\120"
        + "\053\124\001\002\000\014\007\117\050\115\051\123\052"
        + "\120\053\124\001\002\000\014\007\117\050\115\051\123"
        + "\052\120\053\124\001\002\000\132\003\uffc9\006\uffc9\010"
        + "\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\020\uffc9"
        + "\021\uffc9\030\uffc9\031\uffc9\032\uffc9\034\uffc9\035\uffc9\036"
        + "\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9"
        + "\050\uffc9\055\uffc9\056\uffc9\060\uffc9\062\uffc9\063\uffc9\066"
        + "\uffc9\067\uffc9\070\uffc9\071\uffc9\072\uffc9\073\uffc9\075\uffc9"
        + "\076\uffc9\106\uffc9\107\uffc9\110\uffc9\111\uffc9\113\uffc9\114"
        + "\uffc9\115\uffc9\121\uffc9\001\002\000\132\003\uffca\006\uffca"
        + "\010\uffca\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca\020"
        + "\uffca\021\uffca\030\uffca\031\uffca\032\uffca\034\uffca\035\uffca"
        + "\036\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046"
        + "\uffca\050\uffca\055\uffca\056\uffca\060\uffca\062\uffca\063\uffca"
        + "\066\uffca\067\uffca\070\uffca\071\uffca\072\uffca\073\uffca\075"
        + "\uffca\076\uffca\106\uffca\107\uffca\110\uffca\111\uffca\113\uffca"
        + "\114\uffca\115\uffca\121\uffca\001\002\000\132\003\uffc8\006"
        + "\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8"
        + "\020\uffc8\021\uffc8\030\uffc8\031\uffc8\032\uffc8\034\uffc8\035"
        + "\uffc8\036\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8"
        + "\046\uffc8\050\uffc8\055\uffc8\056\uffc8\060\uffc8\062\uffc8\063"
        + "\uffc8\066\uffc8\067\uffc8\070\uffc8\071\uffc8\072\uffc8\073\uffc8"
        + "\075\uffc8\076\uffc8\106\uffc8\107\uffc8\110\uffc8\111\uffc8\113"
        + "\uffc8\114\uffc8\115\uffc8\121\uffc8\001\002\000\010\010\134"
        + "\011\135\012\136\001\002\000\140\003\uffc2\006\uffc2\010"
        + "\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\020\uffc2"
        + "\021\uffc2\025\uffc2\026\uffc2\030\uffc2\031\uffc2\032\uffc2\034"
        + "\uffc2\035\uffc2\036\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2"
        + "\045\uffc2\046\uffc2\050\uffc2\055\uffc2\056\uffc2\060\uffc2\062"
        + "\uffc2\063\uffc2\066\uffc2\067\uffc2\070\uffc2\071\uffc2\072\uffc2"
        + "\073\uffc2\074\uffc2\075\uffc2\076\uffc2\106\uffc2\107\uffc2\110"
        + "\uffc2\111\uffc2\113\uffc2\114\uffc2\115\uffc2\121\uffc2\001\002"
        + "\000\014\007\117\050\115\051\123\052\120\053\124\001"
        + "\002\000\014\007\117\050\115\051\123\052\120\053\124"
        + "\001\002\000\132\003\uffcc\006\uffcc\010\uffcc\011\uffcc\012"
        + "\uffcc\013\126\014\127\015\125\020\uffcc\021\uffcc\030\uffcc"
        + "\031\uffcc\032\uffcc\034\uffcc\035\uffcc\036\uffcc\041\uffcc\042"
        + "\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\050\uffcc\055\uffcc"
        + "\056\uffcc\060\uffcc\062\uffcc\063\uffcc\066\uffcc\067\uffcc\070"
        + "\uffcc\071\uffcc\072\uffcc\073\uffcc\075\uffcc\076\uffcc\106\uffcc"
        + "\107\uffcc\110\uffcc\111\uffcc\113\uffcc\114\uffcc\115\uffcc\121"
        + "\uffcc\001\002\000\132\003\uffcd\006\uffcd\010\uffcd\011\uffcd"
        + "\012\uffcd\013\126\014\127\015\125\020\uffcd\021\uffcd\030"
        + "\uffcd\031\uffcd\032\uffcd\034\uffcd\035\uffcd\036\uffcd\041\uffcd"
        + "\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\050\uffcd\055"
        + "\uffcd\056\uffcd\060\uffcd\062\uffcd\063\uffcd\066\uffcd\067\uffcd"
        + "\070\uffcd\071\uffcd\072\uffcd\073\uffcd\075\uffcd\076\uffcd\106"
        + "\uffcd\107\uffcd\110\uffcd\111\uffcd\113\uffcd\114\uffcd\115\uffcd"
        + "\121\uffcd\001\002\000\014\007\117\050\115\051\123\052"
        + "\120\053\124\001\002\000\042\003\uffce\011\135\012\136"
        + "\030\uffce\031\uffce\032\uffce\034\uffce\035\uffce\036\uffce\041"
        + "\uffce\050\uffce\055\uffce\062\uffce\063\uffce\067\144\075\uffce"
        + "\001\002\000\034\003\073\030\072\031\102\032\056\034"
        + "\101\035\055\036\063\041\060\050\061\055\066\062\062"
        + "\063\052\075\065\001\002\000\020\007\117\011\146\012"
        + "\145\050\115\051\123\052\120\053\124\001\002\000\014"
        + "\007\117\050\115\051\123\052\120\053\124\001\002\000"
        + "\014\007\117\050\115\051\123\052\120\053\124\001\002"
        + "\000\040\003\uffd1\011\135\012\136\030\uffd1\031\uffd1\032"
        + "\uffd1\034\uffd1\035\uffd1\036\uffd1\041\uffd1\050\uffd1\055\uffd1"
        + "\062\uffd1\063\uffd1\075\uffd1\001\002\000\040\003\uffcf\011"
        + "\135\012\136\030\uffcf\031\uffcf\032\uffcf\034\uffcf\035\uffcf"
        + "\036\uffcf\041\uffcf\050\uffcf\055\uffcf\062\uffcf\063\uffcf\075"
        + "\uffcf\001\002\000\040\003\uffd0\011\135\012\136\030\uffd0"
        + "\031\uffd0\032\uffd0\034\uffd0\035\uffd0\036\uffd0\041\uffd0\050"
        + "\uffd0\055\uffd0\062\uffd0\063\uffd0\075\uffd0\001\002\000\004"
        + "\070\153\001\002\000\050\003\uffd3\030\uffd3\031\uffd3\032"
        + "\uffd3\034\uffd3\035\uffd3\036\uffd3\041\uffd3\042\uffd3\050\uffd3"
        + "\055\uffd3\060\uffd3\062\uffd3\063\uffd3\070\uffd3\072\uffd3\073"
        + "\uffd3\075\uffd3\076\uffd3\001\002\000\010\011\135\012\136"
        + "\066\155\001\002\000\014\007\117\050\115\051\123\052"
        + "\120\053\124\001\002\000\042\003\uffce\011\135\012\136"
        + "\030\uffce\031\uffce\032\uffce\034\uffce\035\uffce\036\uffce\041"
        + "\uffce\050\uffce\055\uffce\062\uffce\063\uffce\067\144\075\uffce"
        + "\001\002\000\034\003\073\030\072\031\102\032\056\034"
        + "\101\035\055\036\063\041\060\050\061\055\066\062\062"
        + "\063\052\075\065\001\002\000\004\070\161\001\002\000"
        + "\050\003\uffd2\030\uffd2\031\uffd2\032\uffd2\034\uffd2\035\uffd2"
        + "\036\uffd2\041\uffd2\042\uffd2\050\uffd2\055\uffd2\060\uffd2\062"
        + "\uffd2\063\uffd2\070\uffd2\072\uffd2\073\uffd2\075\uffd2\076\uffd2"
        + "\001\002\000\004\057\163\001\002\000\014\003\ufff9\033"
        + "\ufff9\054\ufff9\057\ufff9\061\ufff9\001\002\000\010\042\166"
        + "\060\uff9e\073\167\001\002\000\004\060\226\001\002\000"
        + "\034\003\073\030\072\031\102\032\056\034\101\035\055"
        + "\036\063\041\060\050\061\055\066\062\062\063\052\075"
        + "\065\001\002\000\022\007\174\027\176\037\172\040\173"
        + "\050\115\051\123\052\120\053\124\001\002\000\060\003"
        + "\uffbb\010\uffbb\025\uffbb\026\uffbb\030\uffbb\031\uffbb\032\uffbb"
        + "\034\uffbb\035\uffbb\036\uffbb\041\uffbb\042\uffbb\050\uffbb\055"
        + "\uffbb\060\uffbb\062\uffbb\063\uffbb\070\uffbb\072\uffbb\073\uffbb"
        + "\074\uffbb\075\uffbb\076\uffbb\001\002\000\040\003\uff9c\025"
        + "\217\030\uff9c\031\uff9c\032\uff9c\034\uff9c\035\uff9c\036\uff9c"
        + "\041\uff9c\050\uff9c\055\uff9c\062\uff9c\063\uff9c\074\222\075"
        + "\uff9c\001\002\000\060\003\uffba\010\uffba\025\uffba\026\uffba"
        + "\030\uffba\031\uffba\032\uffba\034\uffba\035\uffba\036\uffba\041"
        + "\uffba\042\uffba\050\uffba\055\uffba\060\uffba\062\uffba\063\uffba"
        + "\070\uffba\072\uffba\073\uffba\074\uffba\075\uffba\076\uffba\001"
        + "\002\000\060\003\uffb9\010\uffb9\025\uffb9\026\uffb9\030\uffb9"
        + "\031\uffb9\032\uffb9\034\uffb9\035\uffb9\036\uffb9\041\uffb9\042"
        + "\uffb9\050\uffb9\055\uffb9\060\uffb9\062\uffb9\063\uffb9\070\uffb9"
        + "\072\uffb9\073\uffb9\074\uffb9\075\uffb9\076\uffb9\001\002\000"
        + "\022\007\174\027\176\037\172\040\173\050\115\051\123"
        + "\052\120\053\124\001\002\000\022\006\205\011\135\012"
        + "\136\043\211\044\206\045\210\046\204\071\212\001\002"
        + "\000\020\007\174\037\172\040\173\050\115\051\123\052"
        + "\120\053\124\001\002\000\060\003\uffbd\010\uffbd\025\uffbd"
        + "\026\uffbd\030\uffbd\031\uffbd\032\uffbd\034\uffbd\035\uffbd\036"
        + "\uffbd\041\uffbd\042\uffbd\050\uffbd\055\uffbd\060\uffbd\062\uffbd"
        + "\063\uffbd\070\uffbd\072\uffbd\073\uffbd\074\uffbd\075\uffbd\076"
        + "\uffbd\001\002\000\060\003\uffbf\010\uffbf\025\uffbf\026\201"
        + "\030\uffbf\031\uffbf\032\uffbf\034\uffbf\035\uffbf\036\uffbf\041"
        + "\uffbf\042\uffbf\050\uffbf\055\uffbf\060\uffbf\062\uffbf\063\uffbf"
        + "\070\uffbf\072\uffbf\073\uffbf\074\uffbf\075\uffbf\076\uffbf\001"
        + "\002\000\022\007\174\027\176\037\172\040\173\050\115"
        + "\051\123\052\120\053\124\001\002\000\060\003\uffbe\010"
        + "\uffbe\025\uffbe\026\uffbe\030\uffbe\031\uffbe\032\uffbe\034\uffbe"
        + "\035\uffbe\036\uffbe\041\uffbe\042\uffbe\050\uffbe\055\uffbe\060"
        + "\uffbe\062\uffbe\063\uffbe\070\uffbe\072\uffbe\073\uffbe\074\uffbe"
        + "\075\uffbe\076\uffbe\001\002\000\060\003\uffbc\010\uffbc\025"
        + "\uffbc\026\uffbc\030\uffbc\031\uffbc\032\uffbc\034\uffbc\035\uffbc"
        + "\036\uffbc\041\uffbc\042\uffbc\050\uffbc\055\uffbc\060\uffbc\062"
        + "\uffbc\063\uffbc\070\uffbc\072\uffbc\073\uffbc\074\uffbc\075\uffbc"
        + "\076\uffbc\001\002\000\014\007\uffb1\050\uffb1\051\uffb1\052"
        + "\uffb1\053\uffb1\001\002\000\014\007\uffb6\050\uffb6\051\uffb6"
        + "\052\uffb6\053\uffb6\001\002\000\014\007\uffb3\050\uffb3\051"
        + "\uffb3\052\uffb3\053\uffb3\001\002\000\014\007\117\050\115"
        + "\051\123\052\120\053\124\001\002\000\014\007\uffb2\050"
        + "\uffb2\051\uffb2\052\uffb2\053\uffb2\001\002\000\014\007\uffb4"
        + "\050\uffb4\051\uffb4\052\uffb4\053\uffb4\001\002\000\014\007"
        + "\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\001\002\000\060"
        + "\003\uffb8\010\uffb8\025\uffb8\026\uffb8\030\uffb8\031\uffb8\032"
        + "\uffb8\034\uffb8\035\uffb8\036\uffb8\041\uffb8\042\uffb8\050\uffb8"
        + "\055\uffb8\060\uffb8\062\uffb8\063\uffb8\070\uffb8\072\uffb8\073"
        + "\uffb8\074\uffb8\075\uffb8\076\uffb8\001\002\000\006\010\216"
        + "\025\217\001\002\000\024\006\205\010\134\011\135\012"
        + "\136\043\211\044\206\045\210\046\204\071\212\001\002"
        + "\000\060\003\uffb7\010\uffb7\025\uffb7\026\uffb7\030\uffb7\031"
        + "\uffb7\032\uffb7\034\uffb7\035\uffb7\036\uffb7\041\uffb7\042\uffb7"
        + "\050\uffb7\055\uffb7\060\uffb7\062\uffb7\063\uffb7\070\uffb7\072"
        + "\uffb7\073\uffb7\074\uffb7\075\uffb7\076\uffb7\001\002\000\022"
        + "\007\174\027\176\037\172\040\173\050\115\051\123\052"
        + "\120\053\124\001\002\000\060\003\uffc0\010\uffc0\025\uffc0"
        + "\026\201\030\uffc0\031\uffc0\032\uffc0\034\uffc0\035\uffc0\036"
        + "\uffc0\041\uffc0\042\uffc0\050\uffc0\055\uffc0\060\uffc0\062\uffc0"
        + "\063\uffc0\070\uffc0\072\uffc0\073\uffc0\074\uffc0\075\uffc0\076"
        + "\uffc0\001\002\000\034\003\073\030\072\031\102\032\056"
        + "\034\101\035\055\036\063\041\060\050\061\055\066\062"
        + "\062\063\052\075\065\001\002\000\034\003\uff9d\030\uff9d"
        + "\031\uff9d\032\uff9d\034\uff9d\035\uff9d\036\uff9d\041\uff9d\050"
        + "\uff9d\055\uff9d\062\uff9d\063\uff9d\075\uff9d\001\002\000\010"
        + "\042\166\060\uff9e\073\167\001\002\000\004\060\uff9f\001"
        + "\002\000\004\060\uffa0\001\002\000\004\041\227\001\002"
        + "\000\050\003\uffa2\030\uffa2\031\uffa2\032\uffa2\034\uffa2\035"
        + "\uffa2\036\uffa2\041\uffa2\042\uffa2\050\uffa2\055\uffa2\060\uffa2"
        + "\062\uffa2\063\uffa2\070\uffa2\072\uffa2\073\uffa2\075\uffa2\076"
        + "\uffa2\001\002\000\004\047\231\001\002\000\004\010\232"
        + "\001\002\000\050\003\uffdf\030\uffdf\031\uffdf\032\uffdf\034"
        + "\uffdf\035\uffdf\036\uffdf\041\uffdf\042\uffdf\050\uffdf\055\uffdf"
        + "\060\uffdf\062\uffdf\063\uffdf\070\uffdf\072\uffdf\073\uffdf\075"
        + "\uffdf\076\uffdf\001\002\000\012\006\243\021\uffa6\056\uffa6"
        + "\111\uffa6\001\002\000\006\021\240\056\252\001\002\000"
        + "\052\003\uffaf\021\236\030\uffaf\031\uffaf\032\uffaf\034\uffaf"
        + "\035\uffaf\036\uffaf\041\uffaf\042\uffaf\050\uffaf\055\uffaf\060"
        + "\uffaf\062\uffaf\063\uffaf\070\uffaf\072\uffaf\073\uffaf\075\uffaf"
        + "\076\uffaf\001\002\000\004\050\233\001\002\000\006\021"
        + "\240\056\241\001\002\000\004\050\250\001\002\000\010"
        + "\022\035\023\036\024\034\001\002\000\054\003\uffa6\006"
        + "\243\021\uffa6\030\uffa6\031\uffa6\032\uffa6\034\uffa6\035\uffa6"
        + "\036\uffa6\041\uffa6\042\uffa6\050\uffa6\055\uffa6\060\uffa6\062"
        + "\uffa6\063\uffa6\070\uffa6\072\uffa6\073\uffa6\075\uffa6\076\uffa6"
        + "\001\002\000\016\007\117\047\246\050\115\051\123\052"
        + "\120\053\124\001\002\000\052\003\uffae\021\uffae\030\uffae"
        + "\031\uffae\032\uffae\034\uffae\035\uffae\036\uffae\041\uffae\042"
        + "\uffae\050\uffae\055\uffae\060\uffae\062\uffae\063\uffae\070\uffae"
        + "\072\uffae\073\uffae\075\uffae\076\uffae\001\002\000\056\003"
        + "\uffa7\021\uffa7\030\uffa7\031\uffa7\032\uffa7\034\uffa7\035\uffa7"
        + "\036\uffa7\041\uffa7\042\uffa7\050\uffa7\055\uffa7\056\uffa7\060"
        + "\uffa7\062\uffa7\063\uffa7\070\uffa7\072\uffa7\073\uffa7\075\uffa7"
        + "\076\uffa7\111\uffa7\001\002\000\062\003\uffd8\010\uffd8\020"
        + "\uffd8\021\uffd8\030\uffd8\031\uffd8\032\uffd8\034\uffd8\035\uffd8"
        + "\036\uffd8\041\uffd8\042\uffd8\050\uffd8\055\uffd8\056\uffd8\060"
        + "\uffd8\062\uffd8\063\uffd8\070\uffd8\072\uffd8\073\uffd8\075\uffd8"
        + "\076\uffd8\111\uffd8\001\002\000\066\003\uffd7\010\uffd7\011"
        + "\135\012\136\020\uffd7\021\uffd7\030\uffd7\031\uffd7\032\uffd7"
        + "\034\uffd7\035\uffd7\036\uffd7\041\uffd7\042\uffd7\050\uffd7\055"
        + "\uffd7\056\uffd7\060\uffd7\062\uffd7\063\uffd7\070\uffd7\072\uffd7"
        + "\073\uffd7\075\uffd7\076\uffd7\111\uffd7\001\002\000\012\006"
        + "\243\021\uffa6\056\uffa6\111\uffa6\001\002\000\010\021\uffa9"
        + "\056\uffa9\111\uffa9\001\002\000\010\022\035\023\036\024"
        + "\034\001\002\000\054\003\uffa6\006\243\021\uffa6\030\uffa6"
        + "\031\uffa6\032\uffa6\034\uffa6\035\uffa6\036\uffa6\041\uffa6\042"
        + "\uffa6\050\uffa6\055\uffa6\060\uffa6\062\uffa6\063\uffa6\070\uffa6"
        + "\072\uffa6\073\uffa6\075\uffa6\076\uffa6\001\002\000\052\003"
        + "\uffad\021\uffad\030\uffad\031\uffad\032\uffad\034\uffad\035\uffad"
        + "\036\uffad\041\uffad\042\uffad\050\uffad\055\uffad\060\uffad\062"
        + "\uffad\063\uffad\070\uffad\072\uffad\073\uffad\075\uffad\076\uffad"
        + "\001\002\000\010\021\uffa8\056\uffa8\111\uffa8\001\002\000"
        + "\004\050\257\001\002\000\004\076\261\001\002\000\004"
        + "\060\267\001\002\000\020\007\117\042\263\047\246\050"
        + "\115\051\123\052\120\053\124\001\002\000\034\003\073"
        + "\030\072\031\102\032\056\034\101\035\055\036\063\041"
        + "\060\050\061\055\066\062\062\063\052\075\065\001\002"
        + "\000\034\003\073\030\072\031\102\032\056\034\101\035"
        + "\055\036\063\041\060\050\061\055\066\062\062\063\052"
        + "\075\065\001\002\000\004\060\uff99\001\002\000\004\076"
        + "\261\001\002\000\004\060\uff9a\001\002\000\004\075\270"
        + "\001\002\000\050\003\uff9b\030\uff9b\031\uff9b\032\uff9b\034"
        + "\uff9b\035\uff9b\036\uff9b\041\uff9b\042\uff9b\050\uff9b\055\uff9b"
        + "\060\uff9b\062\uff9b\063\uff9b\070\uff9b\072\uff9b\073\uff9b\075"
        + "\uff9b\076\uff9b\001\002\000\004\072\272\001\002\000\004"
        + "\035\273\001\002\000\022\007\174\027\176\037\172\040"
        + "\173\050\115\051\123\052\120\053\124\001\002\000\052"
        + "\003\uffb0\025\217\030\uffb0\031\uffb0\032\uffb0\034\uffb0\035"
        + "\uffb0\036\uffb0\041\uffb0\042\uffb0\050\uffb0\055\uffb0\060\uffb0"
        + "\062\uffb0\063\uffb0\070\uffb0\072\uffb0\073\uffb0\075\uffb0\076"
        + "\uffb0\001\002\000\022\010\uffd9\020\277\042\uffd9\060\uffd9"
        + "\070\uffd9\072\uffd9\073\uffd9\076\uffd9\001\002\000\016\042"
        + "\uffea\060\uffea\070\uffea\072\uffea\073\uffea\076\uffea\001\002"
        + "\000\016\007\117\047\246\050\115\051\123\052\120\053"
        + "\124\001\002\000\020\010\uffda\042\uffda\060\uffda\070\uffda"
        + "\072\uffda\073\uffda\076\uffda\001\002\000\016\007\117\047"
        + "\246\050\115\051\123\052\120\053\124\001\002\000\050"
        + "\003\uffa5\030\uffa5\031\uffa5\032\uffa5\034\uffa5\035\uffa5\036"
        + "\uffa5\041\uffa5\042\uffa5\050\uffa5\055\uffa5\060\uffa5\062\uffa5"
        + "\063\uffa5\070\uffa5\072\uffa5\073\uffa5\075\uffa5\076\uffa5\001"
        + "\002\000\040\003\uff9c\025\217\030\uff9c\031\uff9c\032\uff9c"
        + "\034\uff9c\035\uff9c\036\uff9c\041\uff9c\050\uff9c\055\uff9c\062"
        + "\uff9c\063\uff9c\074\222\075\uff9c\001\002\000\034\003\uffa1"
        + "\030\uffa1\031\uffa1\032\uffa1\034\uffa1\035\uffa1\036\uffa1\041"
        + "\uffa1\050\uffa1\055\uffa1\062\uffa1\063\uffa1\075\uffa1\001\002"
        + "\000\032\007\117\042\uffec\047\246\050\115\051\123\052"
        + "\120\053\124\060\uffec\070\uffec\072\uffec\073\uffec\076\uffec"
        + "\001\002\000\050\003\uffe8\030\uffe8\031\uffe8\032\uffe8\034"
        + "\uffe8\035\uffe8\036\uffe8\041\uffe8\042\uffee\050\uffe8\055\uffe8"
        + "\060\uffee\062\uffe8\063\uffe8\070\uffee\072\uffee\073\uffee\075"
        + "\uffe8\076\uffee\001\002\000\016\042\uffed\060\uffed\070\uffed"
        + "\072\uffed\073\uffed\076\uffed\001\002\000\004\047\311\001"
        + "\002\000\004\010\312\001\002\000\050\003\uffde\030\uffde"
        + "\031\uffde\032\uffde\034\uffde\035\uffde\036\uffde\041\uffde\042"
        + "\uffde\050\uffde\055\uffde\060\uffde\062\uffde\063\uffde\070\uffde"
        + "\072\uffde\073\uffde\075\uffde\076\uffde\001\002\000\036\003"
        + "\073\025\217\030\072\031\102\032\056\034\101\035\055"
        + "\036\063\041\060\050\061\055\066\062\062\063\052\075"
        + "\065\001\002\000\004\060\315\001\002\000\004\035\316"
        + "\001\002\000\050\003\uffc1\030\uffc1\031\uffc1\032\uffc1\034"
        + "\uffc1\035\uffc1\036\uffc1\041\uffc1\042\uffc1\050\uffc1\055\uffc1"
        + "\060\uffc1\062\uffc1\063\uffc1\070\uffc1\072\uffc1\073\uffc1\075"
        + "\uffc1\076\uffc1\001\002\000\006\064\321\065\320\001\002"
        + "\000\004\007\325\001\002\000\004\007\322\001\002\000"
        + "\016\007\117\047\246\050\115\051\123\052\120\053\124"
        + "\001\002\000\004\010\324\001\002\000\050\003\uffdc\030"
        + "\uffdc\031\uffdc\032\uffdc\034\uffdc\035\uffdc\036\uffdc\041\uffdc"
        + "\042\uffdc\050\uffdc\055\uffdc\060\uffdc\062\uffdc\063\uffdc\070"
        + "\uffdc\072\uffdc\073\uffdc\075\uffdc\076\uffdc\001\002\000\016"
        + "\007\117\047\246\050\115\051\123\052\120\053\124\001"
        + "\002\000\004\010\327\001\002\000\050\003\uffdb\030\uffdb"
        + "\031\uffdb\032\uffdb\034\uffdb\035\uffdb\036\uffdb\041\uffdb\042"
        + "\uffdb\050\uffdb\055\uffdb\060\uffdb\062\uffdb\063\uffdb\070\uffdb"
        + "\072\uffdb\073\uffdb\075\uffdb\076\uffdb\001\002\000\004\054"
        + "\ufffd\001\002\000\004\060\332\001\002\000\004\061\333"
        + "\001\002\000\014\003\ufff7\033\ufff7\054\ufff7\057\ufff7\061"
        + "\ufff7\001\002\000\004\054\ufffc\001\002\000\004\054\ufffa"
        + "\001\002\000\004\077\u01be\001\002\000\006\033\uff96\077"
        + "\uff96\001\002\000\006\033\343\077\uff98\001\002\000\004"
        + "\112\346\001\002\000\006\033\uff97\077\uff97\001\002\000"
        + "\004\100\344\001\002\000\004\050\345\001\002\000\004"
        + "\112\uff94\001\002\000\042\003\365\022\035\023\036\024"
        + "\034\030\360\031\u0101\032\373\033\377\034\354\035\374"
        + "\036\u0108\041\361\050\362\103\371\104\370\105\376\001"
        + "\002\000\004\112\u01b9\001\002\000\044\003\uff90\022\uff90"
        + "\023\uff90\024\uff90\030\uff90\031\uff90\032\uff90\033\uff90\034"
        + "\uff90\035\uff90\036\uff90\041\uff90\050\uff90\103\uff90\104\uff90"
        + "\105\uff90\113\uff90\001\002\000\004\111\u01b8\001\002\000"
        + "\054\003\uff6e\022\uff6e\023\uff6e\024\uff6e\030\uff6e\031\uff6e"
        + "\032\uff6e\033\uff6e\034\uff6e\035\uff6e\036\uff6e\041\uff6e\050"
        + "\uff6e\102\uff6e\103\uff6e\104\uff6e\105\uff6e\106\uff6e\107\uff6e"
        + "\110\uff6e\113\uff6e\001\002\000\044\003\uff8f\022\uff8f\023"
        + "\uff8f\024\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f\034\uff8f"
        + "\035\uff8f\036\uff8f\041\uff8f\050\uff8f\103\uff8f\104\uff8f\105"
        + "\uff8f\113\uff8f\001\002\000\004\007\u0193\001\002\000\004"
        + "\112\u0190\001\002\000\004\112\u017f\001\002\000\004\111"
        + "\u017e\001\002\000\004\007\u017b\001\002\000\004\007\u0178"
        + "\001\002\000\004\006\u0176\001\002\000\054\003\uff59\022"
        + "\uff59\023\uff59\024\uff59\030\uff59\031\uff59\032\uff59\033\uff59"
        + "\034\uff59\035\uff59\036\uff59\041\uff59\050\uff59\102\uff59\103"
        + "\uff59\104\uff59\105\uff59\106\uff59\107\uff59\110\uff59\113\uff59"
        + "\001\002\000\004\112\u0173\001\002\000\054\003\uff6d\022"
        + "\uff6d\023\uff6d\024\uff6d\030\uff6d\031\uff6d\032\uff6d\033\uff6d"
        + "\034\uff6d\035\uff6d\036\uff6d\041\uff6d\050\uff6d\102\uff6d\103"
        + "\uff6d\104\uff6d\105\uff6d\106\uff6d\107\uff6d\110\uff6d\113\uff6d"
        + "\001\002\000\044\003\uff8e\022\uff8e\023\uff8e\024\uff8e\030"
        + "\uff8e\031\uff8e\032\uff8e\033\uff8e\034\uff8e\035\uff8e\036\uff8e"
        + "\041\uff8e\050\uff8e\103\uff8e\104\uff8e\105\uff8e\113\uff8e\001"
        + "\002\000\004\111\u0172\001\002\000\004\007\u016f\001\002"
        + "\000\004\007\u0165\001\002\000\004\112\u0161\001\002\000"
        + "\004\007\u015e\001\002\000\004\007\u0146\001\002\000\004"
        + "\111\u0145\001\002\000\004\007\u0142\001\002\000\014\022"
        + "\035\023\036\024\034\050\u012d\101\u012f\001\002\000\004"
        + "\112\u012a\001\002\000\004\007\u0127\001\002\000\054\003"
        + "\uff71\022\uff71\023\uff71\024\uff71\030\uff71\031\uff71\032\uff71"
        + "\033\uff71\034\uff71\035\uff71\036\uff71\041\uff71\050\uff71\102"
        + "\uff71\103\uff71\104\uff71\105\uff71\106\uff71\107\uff71\110\uff71"
        + "\113\uff71\001\002\000\004\112\u011e\001\002\000\044\003"
        + "\uff8c\022\uff8c\023\uff8c\024\uff8c\030\uff8c\031\uff8c\032\uff8c"
        + "\033\uff8c\034\uff8c\035\uff8c\036\uff8c\041\uff8c\050\uff8c\103"
        + "\uff8c\104\uff8c\105\uff8c\113\uff8c\001\002\000\004\050\233"
        + "\001\002\000\044\003\365\022\035\023\036\024\034\030"
        + "\360\031\u0101\032\373\033\377\034\354\035\374\036\u0108"
        + "\041\361\050\362\103\371\104\370\105\376\113\u011c\001"
        + "\002\000\044\003\uff8d\022\uff8d\023\uff8d\024\uff8d\030\uff8d"
        + "\031\uff8d\032\uff8d\033\uff8d\034\uff8d\035\uff8d\036\uff8d\041"
        + "\uff8d\050\uff8d\103\uff8d\104\uff8d\105\uff8d\113\uff8d\001\002"
        + "\000\004\112\u0109\001\002\000\042\003\365\022\035\023"
        + "\036\024\034\030\360\031\u0101\032\373\033\u010b\034\354"
        + "\035\374\036\u0108\041\361\050\362\103\371\104\370\105"
        + "\376\001\002\000\054\003\uff7e\022\uff7e\023\uff7e\024\uff7e"
        + "\030\uff7e\031\uff7e\032\uff7e\033\uff7e\034\uff7e\035\uff7e\036"
        + "\uff7e\041\uff7e\050\uff7e\102\uff7e\103\uff7e\104\uff7e\105\uff7e"
        + "\106\uff7e\107\uff7e\110\uff7e\113\uff7e\001\002\000\010\022"
        + "\035\023\036\024\034\001\002\000\054\003\365\022\035"
        + "\023\036\024\034\030\360\031\u0101\032\373\033\u010b\034"
        + "\354\035\374\036\u0108\041\361\050\362\102\u0112\103\371"
        + "\104\370\105\376\106\uff80\107\uff80\110\uff80\113\uff80\001"
        + "\002\000\004\113\u010e\001\002\000\004\035\374\001\002"
        + "\000\004\111\u0110\001\002\000\054\003\uff65\022\uff65\023"
        + "\uff65\024\uff65\030\uff65\031\uff65\032\uff65\033\uff65\034\uff65"
        + "\035\uff65\036\uff65\041\uff65\050\uff65\102\uff65\103\uff65\104"
        + "\uff65\105\uff65\106\uff65\107\uff65\110\uff65\113\uff65\001\002"
        + "\000\054\003\uff7f\022\uff7f\023\uff7f\024\uff7f\030\uff7f\031"
        + "\uff7f\032\uff7f\033\uff7f\034\uff7f\035\uff7f\036\uff7f\041\uff7f"
        + "\050\uff7f\102\uff7f\103\uff7f\104\uff7f\105\uff7f\106\uff7f\107"
        + "\uff7f\110\uff7f\113\uff7f\001\002\000\016\007\117\047\u0115"
        + "\050\115\051\123\052\120\053\124\001\002\000\012\106"
        + "\uff81\107\uff81\110\uff81\113\uff81\001\002\000\016\011\u0117"
        + "\106\uff7d\107\uff7d\110\uff7d\113\uff7d\114\uff7d\001\002\000"
        + "\016\011\uff7a\106\uff7a\107\uff7a\110\uff7a\113\uff7a\114\uff7a"
        + "\001\002\000\020\011\135\012\136\106\uff7c\107\uff7c\110"
        + "\uff7c\113\uff7c\114\uff7c\001\002\000\004\047\u0118\001\002"
        + "\000\016\011\uff7b\106\uff7b\107\uff7b\110\uff7b\113\uff7b\114"
        + "\uff7b\001\002\000\004\050\233\001\002\000\006\021\240"
        + "\111\uff5c\001\002\000\044\003\uff91\022\uff91\023\uff91\024"
        + "\uff91\030\uff91\031\uff91\032\uff91\033\uff91\034\uff91\035\uff91"
        + "\036\uff91\041\uff91\050\uff91\103\uff91\104\uff91\105\uff91\113"
        + "\uff91\001\002\000\006\033\uff95\077\uff95\001\002\000\006"
        + "\021\240\111\uff5b\001\002\000\042\003\365\022\035\023"
        + "\036\024\034\030\360\031\u0101\032\373\033\u010b\034\354"
        + "\035\374\036\u0108\041\361\050\362\103\371\104\370\105"
        + "\376\001\002\000\004\113\u0120\001\002\000\056\003\uff53"
        + "\022\uff53\023\uff53\024\uff53\030\uff53\031\uff53\032\uff53\033"
        + "\uff53\034\uff53\035\uff53\036\uff53\041\uff53\042\u0121\050\uff53"
        + "\102\uff53\103\uff53\104\uff53\105\uff53\106\uff53\107\uff53\110"
        + "\uff53\113\uff53\001\002\000\006\041\361\112\u0124\001\002"
        + "\000\054\003\uff57\022\uff57\023\uff57\024\uff57\030\uff57\031"
        + "\uff57\032\uff57\033\uff57\034\uff57\035\uff57\036\uff57\041\uff57"
        + "\050\uff57\102\uff57\103\uff57\104\uff57\105\uff57\106\uff57\107"
        + "\uff57\110\uff57\113\uff57\001\002\000\054\003\uff54\022\uff54"
        + "\023\uff54\024\uff54\030\uff54\031\uff54\032\uff54\033\uff54\034"
        + "\uff54\035\uff54\036\uff54\041\uff54\050\uff54\102\uff54\103\uff54"
        + "\104\uff54\105\uff54\106\uff54\107\uff54\110\uff54\113\uff54\001"
        + "\002\000\042\003\365\022\035\023\036\024\034\030\360"
        + "\031\u0101\032\373\033\u010b\034\354\035\374\036\u0108\041"
        + "\361\050\362\103\371\104\370\105\376\001\002\000\004"
        + "\113\u0126\001\002\000\054\003\uff55\022\uff55\023\uff55\024"
        + "\uff55\030\uff55\031\uff55\032\uff55\033\uff55\034\uff55\035\uff55"
        + "\036\uff55\041\uff55\050\uff55\102\uff55\103\uff55\104\uff55\105"
        + "\uff55\106\uff55\107\uff55\110\uff55\113\uff55\001\002\000\004"
        + "\047\u0128\001\002\000\004\010\u0129\001\002\000\004\111"
        + "\uff68\001\002\000\042\003\365\022\035\023\036\024\034"
        + "\030\360\031\u0101\032\373\033\u010b\034\354\035\374\036"
        + "\u0108\041\361\050\362\103\371\104\370\105\376\001\002"
        + "\000\004\113\u012c\001\002\000\054\003\uff66\022\uff66\023"
        + "\uff66\024\uff66\030\uff66\031\uff66\032\uff66\033\uff66\034\uff66"
        + "\035\uff66\036\uff66\041\uff66\050\uff66\102\uff66\103\uff66\104"
        + "\uff66\105\uff66\106\uff66\107\uff66\110\uff66\113\uff66\001\002"
        + "\000\004\007\u013f\001\002\000\004\050\u013a\001\002\000"
        + "\004\050\u0130\001\002\000\004\007\u0131\001\002\000\012"
        + "\010\u0133\022\035\023\036\024\034\001\002\000\004\050"
        + "\u0139\001\002\000\004\112\uff82\001\002\000\006\010\u0136"
        + "\021\u0135\001\002\000\010\022\035\023\036\024\034\001"
        + "\002\000\004\112\uff83\001\002\000\004\050\u0138\001\002"
        + "\000\006\010\uff93\021\uff93\001\002\000\006\010\uff92\021"
        + "\uff92\001\002\000\012\006\243\007\u013b\021\uffa6\111\uffa6"
        + "\001\002\000\012\010\u013c\022\035\023\036\024\034\001"
        + "\002\000\004\112\uff86\001\002\000\006\010\u013e\021\u0135"
        + "\001\002\000\004\112\uff87\001\002\000\010\022\035\023"
        + "\036\024\034\001\002\000\006\010\u0141\021\u0135\001\002"
        + "\000\004\112\uff8a\001\002\000\004\050\u0143\001\002\000"
        + "\004\010\u0144\001\002\000\004\112\uff52\001\002\000\054"
        + "\003\uff6f\022\uff6f\023\uff6f\024\uff6f\030\uff6f\031\uff6f\032"
        + "\uff6f\033\uff6f\034\uff6f\035\uff6f\036\uff6f\041\uff6f\050\uff6f"
        + "\102\uff6f\103\uff6f\104\uff6f\105\uff6f\106\uff6f\107\uff6f\110"
        + "\uff6f\113\uff6f\001\002\000\022\007\u014a\027\u014c\037\u0147"
        + "\040\u0148\050\115\051\123\052\120\053\124\001\002\000"
        + "\004\010\uff41\001\002\000\004\010\uff40\001\002\000\004"
        + "\010\uff3d\001\002\000\022\007\u014a\027\u014c\037\u0147\040"
        + "\u0148\050\115\051\123\052\120\053\124\001\002\000\022"
        + "\006\u0154\011\135\012\136\043\u0157\044\u0155\045\u0156\046"
        + "\u0153\115\u0152\001\002\000\022\007\u014a\027\u014c\037\u0147"
        + "\040\u0148\050\115\051\123\052\120\053\124\001\002\000"
        + "\004\010\u014f\001\002\000\022\007\u014a\027\u014c\037\u0147"
        + "\040\u0148\050\115\051\123\052\120\053\124\001\002\000"
        + "\006\111\uff62\112\uff62\001\002\000\004\010\uff3e\001\002"
        + "\000\004\010\uff43\001\002\000\014\007\uff48\050\uff48\051"
        + "\uff48\052\uff48\053\uff48\001\002\000\014\007\uff44\050\uff44"
        + "\051\uff44\052\uff44\053\uff44\001\002\000\004\006\u015a\001"
        + "\002\000\014\007\uff46\050\uff46\051\uff46\052\uff46\053\uff46"
        + "\001\002\000\014\007\uff45\050\uff45\051\uff45\052\uff45\053"
        + "\uff45\001\002\000\014\007\uff47\050\uff47\051\uff47\052\uff47"
        + "\053\uff47\001\002\000\014\007\117\050\115\051\123\052"
        + "\120\053\124\001\002\000\010\010\uff3f\011\135\012\136"
        + "\001\002\000\014\007\uff49\050\uff49\051\uff49\052\uff49\053"
        + "\uff49\001\002\000\024\006\u0154\010\134\011\135\012\136"
        + "\043\u0157\044\u0155\045\u0156\046\u0153\115\u0152\001\002\000"
        + "\004\010\u015d\001\002\000\004\010\uff42\001\002\000\004"
        + "\047\u015f\001\002\000\004\010\u0160\001\002\000\004\111"
        + "\uff69\001\002\000\044\003\365\022\035\023\036\024\034"
        + "\030\360\031\u0101\032\373\033\u010b\034\354\035\374\036"
        + "\u0108\041\361\050\362\103\371\104\370\105\376\113\u0162"
        + "\001\002\000\044\003\uff88\022\uff88\023\uff88\024\uff88\030"
        + "\uff88\031\uff88\032\uff88\033\uff88\034\uff88\035\uff88\036\uff88"
        + "\041\uff88\050\uff88\103\uff88\104\uff88\105\uff88\113\uff88\001"
        + "\002\000\004\113\u0164\001\002\000\044\003\uff89\022\uff89"
        + "\023\uff89\024\uff89\030\uff89\031\uff89\032\uff89\033\uff89\034"
        + "\uff89\035\uff89\036\uff89\041\uff89\050\uff89\103\uff89\104\uff89"
        + "\105\uff89\113\uff89\001\002\000\012\047\u0168\050\u0166\052"
        + "\u016a\053\u016b\001\002\000\006\010\uff77\011\uff77\001\002"
        + "\000\006\010\uff78\011\uff78\001\002\000\006\010\uff74\011"
        + "\uff74\001\002\000\006\010\u016c\011\u016d\001\002\000\006"
        + "\010\uff76\011\uff76\001\002\000\006\010\uff75\011\uff75\001"
        + "\002\000\004\111\uff6c\001\002\000\012\047\u0168\050\u0166"
        + "\052\u016a\053\u016b\001\002\000\006\010\uff79\011\uff79\001"
        + "\002\000\012\047\u0168\050\u0166\052\u016a\053\u016b\001\002"
        + "\000\006\010\u0171\011\u016d\001\002\000\004\111\uff6b\001"
        + "\002\000\054\003\uff73\022\uff73\023\uff73\024\uff73\030\uff73"
        + "\031\uff73\032\uff73\033\uff73\034\uff73\035\uff73\036\uff73\041"
        + "\uff73\050\uff73\102\uff73\103\uff73\104\uff73\105\uff73\106\uff73"
        + "\107\uff73\110\uff73\113\uff73\001\002\000\042\003\365\022"
        + "\035\023\036\024\034\030\360\031\u0101\032\373\033\u010b"
        + "\034\354\035\374\036\u0108\041\361\050\362\103\371\104"
        + "\370\105\376\001\002\000\004\113\u0175\001\002\000\054"
        + "\003\uff67\022\uff67\023\uff67\024\uff67\030\uff67\031\uff67\032"
        + "\uff67\033\uff67\034\uff67\035\uff67\036\uff67\041\uff67\050\uff67"
        + "\102\uff67\103\uff67\104\uff67\105\uff67\106\uff67\107\uff67\110"
        + "\uff67\113\uff67\001\002\000\016\007\117\047\246\050\115"
        + "\051\123\052\120\053\124\001\002\000\004\111\uff5a\001"
        + "\002\000\022\007\u014a\027\u014c\037\u0147\040\u0148\050\115"
        + "\051\123\052\120\053\124\001\002\000\004\010\u017a\001"
        + "\002\000\004\112\uff56\001\002\000\004\047\u017c\001\002"
        + "\000\004\010\u017d\001\002\000\004\111\uff6a\001\002\000"
        + "\054\003\uff72\022\uff72\023\uff72\024\uff72\030\uff72\031\uff72"
        + "\032\uff72\033\uff72\034\uff72\035\uff72\036\uff72\041\uff72\050"
        + "\uff72\102\uff72\103\uff72\104\uff72\105\uff72\106\uff72\107\uff72"
        + "\110\uff72\113\uff72\001\002\000\004\106\u0180\001\002\000"
        + "\016\007\117\047\u0115\050\115\051\123\052\120\053\124"
        + "\001\002\000\006\106\u0180\107\u0185\001\002\000\010\106"
        + "\uff4d\107\uff4d\113\uff4f\001\002\000\004\113\u0184\001\002"
        + "\000\054\003\uff58\022\uff58\023\uff58\024\uff58\030\uff58\031"
        + "\uff58\032\uff58\033\uff58\034\uff58\035\uff58\036\uff58\041\uff58"
        + "\050\uff58\102\uff58\103\uff58\104\uff58\105\uff58\106\uff58\107"
        + "\uff58\110\uff58\113\uff58\001\002\000\004\114\u0187\001\002"
        + "\000\010\106\uff4e\107\uff4e\113\uff51\001\002\000\042\003"
        + "\365\022\035\023\036\024\034\030\360\031\u0101\032\373"
        + "\033\u010b\034\354\035\374\036\u0108\041\361\050\362\103"
        + "\371\104\370\105\376\001\002\000\006\110\u018a\113\uff4a"
        + "\001\002\000\004\113\uff50\001\002\000\004\111\u018b\001"
        + "\002\000\010\106\uff4b\107\uff4b\113\uff4b\001\002\000\004"
        + "\114\u018d\001\002\000\042\003\365\022\035\023\036\024"
        + "\034\030\360\031\u0101\032\373\033\u010b\034\354\035\374"
        + "\036\u0108\041\361\050\362\103\371\104\370\105\376\001"
        + "\002\000\012\106\uff4a\107\uff4a\110\u018a\113\uff4a\001\002"
        + "\000\010\106\uff4c\107\uff4c\113\uff4c\001\002\000\042\003"
        + "\365\022\035\023\036\024\034\030\360\031\u0101\032\373"
        + "\033\u010b\034\354\035\374\036\u0108\041\361\050\362\103"
        + "\371\104\370\105\376\001\002\000\004\113\u0192\001\002"
        + "\000\044\003\uff8b\022\uff8b\023\uff8b\024\uff8b\030\uff8b\031"
        + "\uff8b\032\uff8b\033\uff8b\034\uff8b\035\uff8b\036\uff8b\041\uff8b"
        + "\050\uff8b\103\uff8b\104\uff8b\105\uff8b\113\uff8b\001\002\000"
        + "\012\022\035\023\036\024\034\050\u0194\001\002\000\004"
        + "\006\u01af\001\002\000\004\050\u0196\001\002\000\004\006"
        + "\u0197\001\002\000\014\007\117\050\115\051\123\052\120"
        + "\053\124\001\002\000\010\011\135\012\136\111\u0199\001"
        + "\002\000\004\050\u019a\001\002\000\016\006\u0154\043\u0157"
        + "\044\u0155\045\u0156\046\u0153\115\u0152\001\002\000\014\007"
        + "\117\050\115\051\123\052\120\053\124\001\002\000\010"
        + "\011\135\012\136\111\u019d\001\002\000\004\050\u019e\001"
        + "\002\000\014\006\u01a3\011\u01a2\012\u01a4\013\u01a1\014\u01a5"
        + "\001\002\000\004\010\u01a0\001\002\000\004\112\uff64\001"
        + "\002\000\004\006\u01ad\001\002\000\004\006\u01ab\001\002"
        + "\000\014\007\117\050\115\051\123\052\120\053\124\001"
        + "\002\000\004\006\u01a8\001\002\000\004\006\u01a6\001\002"
        + "\000\014\007\117\050\115\051\123\052\120\053\124\001"
        + "\002\000\010\010\uff5d\011\135\012\136\001\002\000\014"
        + "\007\117\050\115\051\123\052\120\053\124\001\002\000"
        + "\010\010\uff5f\011\135\012\136\001\002\000\010\010\uff61"
        + "\011\135\012\136\001\002\000\014\007\117\050\115\051"
        + "\123\052\120\053\124\001\002\000\010\010\uff60\011\135"
        + "\012\136\001\002\000\014\007\117\050\115\051\123\052"
        + "\120\053\124\001\002\000\010\010\uff5e\011\135\012\136"
        + "\001\002\000\014\007\117\050\115\051\123\052\120\053"
        + "\124\001\002\000\010\011\135\012\136\111\u01b1\001\002"
        + "\000\004\050\u01b2\001\002\000\016\006\u0154\043\u0157\044"
        + "\u0155\045\u0156\046\u0153\115\u0152\001\002\000\014\007\117"
        + "\050\115\051\123\052\120\053\124\001\002\000\010\011"
        + "\135\012\136\111\u01b5\001\002\000\004\050\u019e\001\002"
        + "\000\004\010\u01b7\001\002\000\004\112\uff63\001\002\000"
        + "\054\003\uff70\022\uff70\023\uff70\024\uff70\030\uff70\031\uff70"
        + "\032\uff70\033\uff70\034\uff70\035\uff70\036\uff70\041\uff70\050"
        + "\uff70\102\uff70\103\uff70\104\uff70\105\uff70\106\uff70\107\uff70"
        + "\110\uff70\113\uff70\001\002\000\044\003\365\022\035\023"
        + "\036\024\034\030\360\031\u0101\032\373\033\u010b\034\354"
        + "\035\374\036\u0108\041\361\050\362\103\371\104\370\105"
        + "\376\113\u01ba\001\002\000\044\003\uff84\022\uff84\023\uff84"
        + "\024\uff84\030\uff84\031\uff84\032\uff84\033\uff84\034\uff84\035"
        + "\uff84\036\uff84\041\uff84\050\uff84\103\uff84\104\uff84\105\uff84"
        + "\113\uff84\001\002\000\004\113\u01bc\001\002\000\044\003"
        + "\uff85\022\uff85\023\uff85\024\uff85\030\uff85\031\uff85\032\uff85"
        + "\033\uff85\034\uff85\035\uff85\036\uff85\041\uff85\050\uff85\103"
        + "\uff85\104\uff85\105\uff85\113\uff85\001\002\000\004\116\u01c1"
        + "\001\002\000\004\116\uff3b\001\002\000\004\116\uff3c\001"
        + "\002\000\004\002\000\001\002\000\006\117\uff38\122\uff38"
        + "\001\002\000\006\117\u01c4\122\u01c6\001\002\000\012\022"
        + "\035\023\036\024\034\117\u01c4\001\002\000\010\022\035"
        + "\023\036\024\034\001\002\000\004\111\u01cf\001\002\000"
        + "\006\044\u01c8\047\u01c9\001\002\000\006\117\uff39\122\uff39"
        + "\001\002\000\004\050\u01ca\001\002\000\006\117\uff29\122"
        + "\uff29\001\002\000\006\017\ufef1\043\ufef1\001\002\000\006"
        + "\017\u01cc\043\u01cd\001\002\000\004\050\u01ce\001\002\000"
        + "\006\117\uff28\122\uff28\001\002\000\010\007\ufef2\017\ufef2"
        + "\043\ufef2\001\002\000\012\022\uff36\023\uff36\024\uff36\117"
        + "\uff36\001\002\000\004\050\u01d1\001\002\000\006\006\u01d4"
        + "\120\u01d3\001\002\000\006\006\u01ed\120\u01df\001\002\000"
        + "\014\007\117\050\115\051\123\052\120\053\124\001\002"
        + "\000\020\007\117\047\u01d8\050\u01db\051\123\052\120\053"
        + "\124\125\u01da\001\002\000\004\111\uff35\001\002\000\010"
        + "\010\ufeec\021\ufeec\111\ufeec\001\002\000\010\010\ufeea\021"
        + "\ufeea\111\ufeea\001\002\000\010\010\ufeee\021\ufeee\111\ufeee"
        + "\001\002\000\006\007\u01e4\017\u01cc\001\002\000\004\007"
        + "\u01e2\001\002\000\030\007\ufef1\010\uffc3\011\uffc3\012\uffc3"
        + "\013\uffc3\014\uffc3\015\uffc3\017\ufef1\021\uffc3\111\uffc3\120"
        + "\u01d3\001\002\000\014\010\ufeed\011\135\012\136\021\ufeed"
        + "\111\ufeed\001\002\000\010\010\ufeeb\021\ufeeb\111\ufeeb\001"
        + "\002\000\012\010\ufee9\021\ufee9\111\ufee9\120\u01df\001\002"
        + "\000\014\007\117\050\115\051\123\052\120\053\124\001"
        + "\002\000\010\011\135\012\136\121\u01e1\001\002\000\014"
        + "\006\uff33\010\uff33\021\uff33\111\uff33\120\uff33\001\002\000"
        + "\004\010\u01e3\001\002\000\010\010\ufef6\021\ufef6\111\ufef6"
        + "\001\002\000\022\007\117\010\u01e7\047\u01d8\050\u01db\051"
        + "\123\052\120\053\124\125\u01da\001\002\000\006\010\ufeef"
        + "\021\ufeef\001\002\000\006\010\u01e9\021\u01e8\001\002\000"
        + "\010\010\ufef3\021\ufef3\111\ufef3\001\002\000\020\007\117"
        + "\047\u01d8\050\u01db\051\123\052\120\053\124\125\u01da\001"
        + "\002\000\010\010\ufef4\021\ufef4\111\ufef4\001\002\000\006"
        + "\010\ufef0\021\ufef0\001\002\000\010\011\135\012\136\121"
        + "\u01ec\001\002\000\014\006\uff32\010\uff32\021\uff32\111\uff32"
        + "\120\uff32\001\002\000\004\112\u01ee\001\002\000\016\007"
        + "\117\050\115\051\123\052\120\053\124\112\u01f3\001\002"
        + "\000\004\111\uff34\001\002\000\006\021\u01f5\113\u01fd\001"
        + "\002\000\006\021\u01f8\113\u01f9\001\002\000\014\011\135"
        + "\012\136\021\uff2e\113\uff2e\121\uff2e\001\002\000\014\007"
        + "\117\050\115\051\123\052\120\053\124\001\002\000\006"
        + "\021\u01f5\121\u01f6\001\002\000\014\007\117\050\115\051"
        + "\123\052\120\053\124\001\002\000\006\021\uff2c\113\uff2c"
        + "\001\002\000\014\011\135\012\136\021\uff2f\113\uff2f\121"
        + "\uff2f\001\002\000\004\112\u01fa\001\002\000\006\021\uff30"
        + "\111\uff30\001\002\000\014\007\117\050\115\051\123\052"
        + "\120\053\124\001\002\000\006\021\u01f5\121\u01fc\001\002"
        + "\000\006\021\uff2d\113\uff2d\001\002\000\006\021\uff31\111"
        + "\uff31\001\002\000\004\111\u02a0\001\002\000\012\022\035"
        + "\023\036\024\034\101\u020e\001\002\000\004\050\u0203\001"
        + "\002\000\004\111\u0202\001\002\000\012\022\uff37\023\uff37"
        + "\024\uff37\117\uff37\001\002\000\012\006\u0207\021\uff16\111"
        + "\uff16\120\u01d3\001\002\000\004\111\uff1c\001\002\000\006"
        + "\021\u020b\111\uff1a\001\002\000\012\006\u0209\021\uff18\111"
        + "\uff18\120\u01df\001\002\000\020\007\117\047\u01d8\050\u01db"
        + "\051\123\052\120\053\124\125\u01da\001\002\000\006\021"
        + "\uff19\111\uff19\001\002\000\004\112\u01ee\001\002\000\006"
        + "\021\uff17\111\uff17\001\002\000\004\050\233\001\002\000"
        + "\006\021\240\111\uff1b\001\002\000\004\111\u029f\001\002"
        + "\000\004\127\u0210\001\002\000\004\002\uff3a\001\002\000"
        + "\004\007\u0211\001\002\000\004\010\u0212\001\002\000\004"
        + "\112\u0213\001\002\000\034\022\035\023\036\024\034\034"
        + "\u022a\035\u0218\036\u0222\041\u021e\050\u0220\105\u0214\123\u021f"
        + "\124\u0224\125\u01da\126\u0215\001\002\000\004\007\u029c\001"
        + "\002\000\004\007\u0296\001\002\000\004\112\u0288\001\002"
        + "\000\036\022\035\023\036\024\034\034\u022a\035\u0218\036"
        + "\u0222\041\u021e\050\u0220\105\u0214\113\u0287\123\u021f\124\u0224"
        + "\125\u01da\126\u0215\001\002\000\004\007\u0284\001\002\000"
        + "\044\022\uff25\023\uff25\024\uff25\034\uff25\035\uff25\036\uff25"
        + "\041\uff25\050\uff25\105\uff25\106\uff25\107\uff25\110\uff25\113"
        + "\uff25\123\uff25\124\uff25\125\uff25\126\uff25\001\002\000\004"
        + "\111\u0283\001\002\000\004\112\u0280\001\002\000\004\111"
        + "\u027f\001\002\000\004\111\u027e\001\002\000\004\007\u027b"
        + "\001\002\000\004\007\u0271\001\002\000\012\006\u026d\007"
        + "\ufef1\017\ufef1\120\u01d3\001\002\000\004\112\u0269\001\002"
        + "\000\004\112\u0264\001\002\000\004\111\u0263\001\002\000"
        + "\004\007\u0261\001\002\000\044\022\uff21\023\uff21\024\uff21"
        + "\034\uff21\035\uff21\036\uff21\041\uff21\050\uff21\105\uff21\106"
        + "\uff21\107\uff21\110\uff21\113\uff21\123\uff21\124\uff21\125\uff21"
        + "\126\uff21\001\002\000\004\111\u0260\001\002\000\044\022"
        + "\uff22\023\uff22\024\uff22\034\uff22\035\uff22\036\uff22\041\uff22"
        + "\050\uff22\105\uff22\106\uff22\107\uff22\110\uff22\113\uff22\123"
        + "\uff22\124\uff22\125\uff22\126\uff22\001\002\000\004\111\u025f"
        + "\001\002\000\004\112\u025b\001\002\000\004\007\u022b\001"
        + "\002\000\012\022\035\023\036\024\034\050\u022c\001\002"
        + "\000\004\006\u0254\001\002\000\004\050\u022e\001\002\000"
        + "\004\006\u022f\001\002\000\020\007\117\047\u01d8\050\u01db"
        + "\051\123\052\120\053\124\125\u01da\001\002\000\004\111"
        + "\u0231\001\002\000\022\007\u0236\027\u0239\037\u0233\040\u0235"
        + "\050\u0237\051\123\052\120\053\124\001\002\000\004\111"
        + "\u0241\001\002\000\006\010\ufee5\111\ufee5\001\002\000\006"
        + "\010\ufee6\111\ufee6\001\002\000\006\010\ufee4\111\ufee4\001"
        + "\002\000\022\007\u014a\027\u014c\037\u0147\040\u0148\050\115"
        + "\051\123\052\120\053\124\001\002\000\034\006\uffc3\007"
        + "\ufef1\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\017\ufef1"
        + "\043\uffc3\044\uffc3\045\uffc3\046\uffc3\115\uffc3\001\002\000"
        + "\022\006\u0154\011\135\012\136\043\u0157\044\u0155\045\u0156"
        + "\046\u0153\115\u0152\001\002\000\022\007\u0236\027\u0239\037"
        + "\u0233\040\u0235\050\u0237\051\123\052\120\053\124\001\002"
        + "\000\006\010\ufee1\111\ufee1\001\002\000\006\010\ufee8\111"
        + "\ufee8\001\002\000\014\007\117\050\115\051\123\052\120"
        + "\053\124\001\002\000\012\010\ufee3\011\135\012\136\111"
        + "\ufee3\001\002\000\004\010\u023f\001\002\000\006\010\ufee7"
        + "\111\ufee7\001\002\000\022\007\u0236\027\u0239\037\u0233\040"
        + "\u0235\050\u0237\051\123\052\120\053\124\001\002\000\004"
        + "\050\u0242\001\002\000\014\006\u0247\011\u0246\012\u0248\013"
        + "\u0245\014\u0249\001\002\000\004\010\u0244\001\002\000\004"
        + "\112\uff06\001\002\000\004\006\u0251\001\002\000\004\006"
        + "\u024f\001\002\000\020\007\117\047\u01d8\050\u01db\051\123"
        + "\052\120\053\124\125\u01da\001\002\000\004\006\u024c\001"
        + "\002\000\004\006\u024a\001\002\000\020\007\117\047\u01d8"
        + "\050\u01db\051\123\052\120\053\124\125\u01da\001\002\000"
        + "\004\010\ufeff\001\002\000\020\007\117\047\u01d8\050\u01db"
        + "\051\123\052\120\053\124\125\u01da\001\002\000\004\010"
        + "\uff01\001\002\000\004\010\uff03\001\002\000\020\007\117"
        + "\047\u01d8\050\u01db\051\123\052\120\053\124\125\u01da\001"
        + "\002\000\004\010\uff02\001\002\000\020\007\117\047\u01d8"
        + "\050\u01db\051\123\052\120\053\124\125\u01da\001\002\000"
        + "\004\010\uff00\001\002\000\006\010\ufee2\111\ufee2\001\002"
        + "\000\020\007\117\047\u01d8\050\u01db\051\123\052\120\053"
        + "\124\125\u01da\001\002\000\004\111\u0256\001\002\000\022"
        + "\007\u0236\027\u0239\037\u0233\040\u0235\050\u0237\051\123\052"
        + "\120\053\124\001\002\000\004\111\u0258\001\002\000\004"
        + "\050\u0242\001\002\000\004\010\u025a\001\002\000\004\112"
        + "\uff05\001\002\000\034\022\035\023\036\024\034\034\u022a"
        + "\035\u0218\036\u0222\041\u021e\050\u0220\105\u0214\123\u021f\124"
        + "\u0224\125\u01da\126\u0215\001\002\000\036\022\035\023\036"
        + "\024\034\034\u022a\035\u0218\036\u0222\041\u021e\050\u0220\105"
        + "\u0214\113\u025e\123\u021f\124\u0224\125\u01da\126\u0215\001\002"
        + "\000\044\022\uff26\023\uff26\024\uff26\034\uff26\035\uff26\036"
        + "\uff26\041\uff26\050\uff26\105\uff26\106\uff26\107\uff26\110\uff26"
        + "\113\uff26\123\uff26\124\uff26\125\uff26\126\uff26\001\002\000"
        + "\044\022\uff09\023\uff09\024\uff09\034\uff09\035\uff09\036\uff09"
        + "\041\uff09\050\uff09\105\uff09\106\uff09\107\uff09\110\uff09\113"
        + "\uff09\123\uff09\124\uff09\125\uff09\126\uff09\001\002\000\044"
        + "\022\uff20\023\uff20\024\uff20\034\uff20\035\uff20\036\uff20\041"
        + "\uff20\050\uff20\105\uff20\106\uff20\107\uff20\110\uff20\113\uff20"
        + "\123\uff20\124\uff20\125\uff20\126\uff20\001\002\000\044\022"
        + "\uff1e\023\uff1e\024\uff1e\034\uff1e\035\uff1e\036\uff1e\041\uff1e"
        + "\050\uff1e\105\uff1e\106\uff1e\107\uff1e\110\uff1e\113\uff1e\123"
        + "\uff1e\124\uff1e\125\uff1e\126\uff1e\001\002\000\004\010\u0262"
        + "\001\002\000\004\111\ufefd\001\002\000\044\022\uff1f\023"
        + "\uff1f\024\uff1f\034\uff1f\035\uff1f\036\uff1f\041\uff1f\050\uff1f"
        + "\105\uff1f\106\uff1f\107\uff1f\110\uff1f\113\uff1f\123\uff1f\124"
        + "\uff1f\125\uff1f\126\uff1f\001\002\000\034\022\035\023\036"
        + "\024\034\034\u022a\035\u0218\036\u0222\041\u021e\050\u0220\105"
        + "\u0214\123\u021f\124\u0224\125\u01da\126\u0215\001\002\000\036"
        + "\022\035\023\036\024\034\034\u022a\035\u0218\036\u0222\041"
        + "\u021e\050\u0220\105\u0214\113\u0266\123\u021f\124\u0224\125\u01da"
        + "\126\u0215\001\002\000\004\035\u0218\001\002\000\004\111"
        + "\u0268\001\002\000\044\022\uff07\023\uff07\024\uff07\034\uff07"
        + "\035\uff07\036\uff07\041\uff07\050\uff07\105\uff07\106\uff07\107"
        + "\uff07\110\uff07\113\uff07\123\uff07\124\uff07\125\uff07\126\uff07"
        + "\001\002\000\034\022\035\023\036\024\034\034\u022a\035"
        + "\u0218\036\u0222\041\u021e\050\u0220\105\u0214\123\u021f\124\u0224"
        + "\125\u01da\126\u0215\001\002\000\036\022\035\023\036\024"
        + "\034\034\u022a\035\u0218\036\u0222\041\u021e\050\u0220\105\u0214"
        + "\113\u026b\123\u021f\124\u0224\125\u01da\126\u0215\001\002\000"
        + "\044\022\uff13\023\uff13\024\uff13\034\uff13\035\uff13\036\uff13"
        + "\041\uff13\050\uff13\105\uff13\106\uff13\107\uff13\110\uff13\113"
        + "\uff13\123\uff13\124\uff13\125\uff13\126\uff13\001\002\000\006"
        + "\006\u026f\120\u01df\001\002\000\020\007\117\047\u01d8\050"
        + "\u01db\051\123\052\120\053\124\125\u01da\001\002\000\004"
        + "\111\uff15\001\002\000\020\007\117\047\u01d8\050\u01db\051"
        + "\123\052\120\053\124\125\u01da\001\002\000\004\111\uff14"
        + "\001\002\000\012\047\u0273\050\u0272\052\u0274\053\u0276\001"
        + "\002\000\006\010\ufef9\021\ufef9\001\002\000\006\010\ufef7"
        + "\021\ufef7\001\002\000\006\010\ufefa\021\ufefa\001\002\000"
        + "\006\010\u0279\021\u0278\001\002\000\006\010\ufef8\021\ufef8"
        + "\001\002\000\006\010\ufefb\021\ufefb\001\002\000\012\047"
        + "\u0273\050\u0272\052\u0274\053\u0276\001\002\000\004\111\ufefe"
        + "\001\002\000\006\010\ufefc\021\ufefc\001\002\000\022\007"
        + "\u0236\027\u0239\037\u0233\040\u0235\050\u0237\051\123\052\120"
        + "\053\124\001\002\000\004\010\u027d\001\002\000\004\112"
        + "\uff11\001\002\000\044\022\uff24\023\uff24\024\uff24\034\uff24"
        + "\035\uff24\036\uff24\041\uff24\050\uff24\105\uff24\106\uff24\107"
        + "\uff24\110\uff24\113\uff24\123\uff24\124\uff24\125\uff24\126\uff24"
        + "\001\002\000\044\022\uff1d\023\uff1d\024\uff1d\034\uff1d\035"
        + "\uff1d\036\uff1d\041\uff1d\050\uff1d\105\uff1d\106\uff1d\107\uff1d"
        + "\110\uff1d\113\uff1d\123\uff1d\124\uff1d\125\uff1d\126\uff1d\001"
        + "\002\000\034\022\035\023\036\024\034\034\u022a\035\u0218"
        + "\036\u0222\041\u021e\050\u0220\105\u0214\123\u021f\124\u0224\125"
        + "\u01da\126\u0215\001\002\000\036\022\035\023\036\024\034"
        + "\034\u022a\035\u0218\036\u0222\041\u021e\050\u0220\105\u0214\113"
        + "\u0282\123\u021f\124\u0224\125\u01da\126\u0215\001\002\000\044"
        + "\022\uff08\023\uff08\024\uff08\034\uff08\035\uff08\036\uff08\041"
        + "\uff08\050\uff08\105\uff08\106\uff08\107\uff08\110\uff08\113\uff08"
        + "\123\uff08\124\uff08\125\uff08\126\uff08\001\002\000\044\022"
        + "\uff23\023\uff23\024\uff23\034\uff23\035\uff23\036\uff23\041\uff23"
        + "\050\uff23\105\uff23\106\uff23\107\uff23\110\uff23\113\uff23\123"
        + "\uff23\124\uff23\125\uff23\126\uff23\001\002\000\022\007\u0236"
        + "\027\u0239\037\u0233\040\u0235\050\u0237\051\123\052\120\053"
        + "\124\001\002\000\004\010\u0286\001\002\000\006\111\uff04"
        + "\112\uff04\001\002\000\004\002\uff27\001\002\000\004\106"
        + "\u0289\001\002\000\004\114\u0293\001\002\000\004\113\u0292"
        + "\001\002\000\010\106\uff0b\107\uff0b\113\uff0d\001\002\000"
        + "\006\106\u0289\107\u028d\001\002\000\004\114\u028f\001\002"
        + "\000\010\106\uff0c\107\uff0c\113\uff0f\001\002\000\034\022"
        + "\035\023\036\024\034\034\u022a\035\u0218\036\u0222\041\u021e"
        + "\050\u0220\105\u0214\123\u021f\124\u0224\125\u01da\126\u0215\001"
        + "\002\000\040\022\035\023\036\024\034\034\u022a\035\u0218"
        + "\036\u0222\041\u021e\050\u0220\105\u0214\110\u018a\113\uff4a\123"
        + "\u021f\124\u0224\125\u01da\126\u0215\001\002\000\004\113\uff0e"
        + "\001\002\000\044\022\uff12\023\uff12\024\uff12\034\uff12\035"
        + "\uff12\036\uff12\041\uff12\050\uff12\105\uff12\106\uff12\107\uff12"
        + "\110\uff12\113\uff12\123\uff12\124\uff12\125\uff12\126\uff12\001"
        + "\002\000\034\022\035\023\036\024\034\034\u022a\035\u0218"
        + "\036\u0222\041\u021e\050\u0220\105\u0214\123\u021f\124\u0224\125"
        + "\u01da\126\u0215\001\002\000\044\022\035\023\036\024\034"
        + "\034\u022a\035\u0218\036\u0222\041\u021e\050\u0220\105\u0214\106"
        + "\uff4a\107\uff4a\110\u018a\113\uff4a\123\u021f\124\u0224\125\u01da"
        + "\126\u0215\001\002\000\010\106\uff0a\107\uff0a\113\uff0a\001"
        + "\002\000\004\047\u0297\001\002\000\004\021\u0298\001\002"
        + "\000\004\020\u0299\001\002\000\004\050\u029a\001\002\000"
        + "\004\010\u029b\001\002\000\004\111\ufef5\001\002\000\004"
        + "\050\u029d\001\002\000\004\010\u029e\001\002\000\004\112"
        + "\uff10\001\002\000\012\022\uff2b\023\uff2b\024\uff2b\101\uff2b"
        + "\001\002\000\012\022\uff2a\023\uff2a\024\uff2a\101\uff2a\001"
        + "\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table
            = unpackFromStrings(new String[]{
        "\000\u029e\000\010\002\006\003\004\012\005\001\001\000"
        + "\002\001\001\000\004\004\335\001\001\000\016\006\010"
        + "\015\017\016\015\017\016\020\012\021\013\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\016"
        + "\006\334\015\017\016\015\017\016\020\012\021\013\001"
        + "\001\000\016\006\333\015\017\016\015\017\016\020\012"
        + "\021\013\001\001\000\042\024\330\025\074\026\103\027"
        + "\056\030\067\031\047\034\075\035\102\042\050\050\052"
        + "\051\066\055\070\056\076\057\063\060\073\063\053\001"
        + "\001\000\002\001\001\000\016\006\327\015\017\016\015"
        + "\017\016\020\012\021\013\001\001\000\042\024\077\025"
        + "\074\026\103\027\056\030\067\031\047\034\075\035\102"
        + "\042\050\050\052\051\066\055\070\056\076\057\063\060"
        + "\073\063\053\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\006\022\025\023"
        + "\026\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\004\014"
        + "\032\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\004\014"
        + "\040\001\001\000\002\001\001\000\004\014\042\001\001"
        + "\000\002\001\001\000\002\001\001\000\006\022\045\023"
        + "\026\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\020\037\174\040\121\041\120"
        + "\043\312\044\177\045\176\046\167\001\001\000\002\001"
        + "\001\000\034\026\305\030\067\031\047\034\075\035\102"
        + "\042\050\050\052\051\066\055\070\056\076\057\063\060"
        + "\073\063\053\001\001\000\020\037\174\040\121\041\120"
        + "\043\302\044\177\045\176\046\167\001\001\000\002\001"
        + "\001\000\014\032\275\033\274\037\246\040\121\041\120"
        + "\001\001\000\042\024\270\025\074\026\103\027\056\030"
        + "\067\031\047\034\075\035\102\042\050\050\052\051\066"
        + "\055\070\056\076\057\063\060\073\063\053\001\001\000"
        + "\002\001\001\000\002\001\001\000\006\052\234\053\233"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\042\024\163"
        + "\025\074\026\103\027\056\030\067\031\047\034\075\035"
        + "\102\042\050\050\052\051\066\055\070\056\076\057\063"
        + "\060\073\063\053\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\010\037\153\040\121\041\120\001\001\000"
        + "\004\014\112\001\001\000\002\001\001\000\010\037\115"
        + "\040\121\041\120\001\001\000\002\001\001\000\002\001"
        + "\001\000\010\037\132\040\121\041\120\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\004\041\131\001\001\000\004"
        + "\041\130\001\001\000\004\041\127\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\006\040\137\041\120\001\001\000"
        + "\006\040\136\041\120\001\001\000\002\001\001\000\002"
        + "\001\001\000\010\037\141\040\121\041\120\001\001\000"
        + "\004\036\142\001\001\000\042\024\151\025\074\026\103"
        + "\027\056\030\067\031\047\034\075\035\102\042\050\050"
        + "\052\051\066\055\070\056\076\057\063\060\073\063\053"
        + "\001\001\000\010\037\146\040\121\041\120\001\001\000"
        + "\010\037\150\040\121\041\120\001\001\000\010\037\147"
        + "\040\121\041\120\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\010\037\155\040\121\041\120\001"
        + "\001\000\004\036\156\001\001\000\042\024\157\025\074"
        + "\026\103\027\056\030\067\031\047\034\075\035\102\042"
        + "\050\050\052\051\066\055\070\056\076\057\063\060\073"
        + "\063\053\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\004\061\164\001\001"
        + "\000\002\001\001\000\042\024\224\025\074\026\103\027"
        + "\056\030\067\031\047\034\075\035\102\042\050\050\052"
        + "\051\066\055\070\056\076\057\063\060\073\063\053\001"
        + "\001\000\020\037\174\040\121\041\120\043\170\044\177"
        + "\045\176\046\167\001\001\000\002\001\001\000\004\062"
        + "\220\001\001\000\002\001\001\000\002\001\001\000\020"
        + "\037\214\040\121\041\120\043\213\044\177\045\176\046"
        + "\167\001\001\000\004\047\206\001\001\000\012\037\174"
        + "\040\121\041\120\046\202\001\001\000\002\001\001\000"
        + "\002\001\001\000\014\037\174\040\121\041\120\045\201"
        + "\046\167\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\004"
        + "\041\212\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\004"
        + "\047\206\001\001\000\002\001\001\000\016\037\174\040"
        + "\121\041\120\044\217\045\176\046\167\001\001\000\002"
        + "\001\001\000\042\024\222\025\074\026\103\027\056\030"
        + "\067\031\047\034\075\035\102\042\050\050\052\051\066"
        + "\055\070\056\076\057\063\060\073\063\053\001\001\000"
        + "\002\001\001\000\004\061\223\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\004"
        + "\054\254\001\001\000\002\001\001\000\002\001\001\000"
        + "\004\053\236\001\001\000\002\001\001\000\002\001\001"
        + "\000\004\014\241\001\001\000\004\054\243\001\001\000"
        + "\012\033\244\037\246\040\121\041\120\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\004\054\250\001\001\000\002\001\001\000\004"
        + "\014\252\001\001\000\004\054\253\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\004\064\257"
        + "\001\001\000\002\001\001\000\012\033\261\037\246\040"
        + "\121\041\120\001\001\000\042\024\264\025\074\026\103"
        + "\027\056\030\067\031\047\034\075\035\102\042\050\050"
        + "\052\051\066\055\070\056\076\057\063\060\073\063\053"
        + "\001\001\000\042\024\263\025\074\026\103\027\056\030"
        + "\067\031\047\034\075\035\102\042\050\050\052\051\066"
        + "\055\070\056\076\057\063\060\073\063\053\001\001\000"
        + "\002\001\001\000\004\064\265\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\020\037\174\040\121\041\120\043\273"
        + "\044\177\045\176\046\167\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\014\032\277\033\274"
        + "\037\246\040\121\041\120\001\001\000\002\001\001\000"
        + "\012\033\301\037\246\040\121\041\120\001\001\000\002"
        + "\001\001\000\004\062\303\001\001\000\002\001\001\000"
        + "\014\032\306\033\274\037\246\040\121\041\120\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\042\024\313\025\074"
        + "\026\103\027\056\030\067\031\047\034\075\035\102\042"
        + "\050\050\052\051\066\055\070\056\076\057\063\060\073"
        + "\063\053\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\014\032\322\033\274\037\246\040\121\041"
        + "\120\001\001\000\002\001\001\000\002\001\001\000\014"
        + "\032\325\033\274\037\246\040\121\041\120\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\004\005\u01bc\001\001\000\004"
        + "\007\337\001\001\000\006\065\341\066\340\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\054\014\u0104\067\354\071"
        + "\u0105\072\347\073\352\074\371\075\365\076\346\105\u0106"
        + "\106\366\107\356\110\u0101\111\363\112\377\114\350\115"
        + "\374\116\351\117\362\120\u0102\122\355\132\u0103\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\004\014\u012d\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\004\053\u011c\001\001\000\052"
        + "\014\u0104\067\354\072\u011a\073\352\074\371\075\365\076"
        + "\346\105\u0106\106\366\107\356\110\u0101\111\363\112\377"
        + "\114\350\115\374\116\351\117\362\120\u0102\122\355\132"
        + "\u0103\001\001\000\002\001\001\000\002\001\001\000\040"
        + "\014\u0104\077\u010c\100\u010b\105\u0109\106\366\107\356\110"
        + "\u0101\111\363\112\377\114\350\115\374\116\351\117\362"
        + "\120\u0102\122\355\001\001\000\002\001\001\000\004\014"
        + "\u0118\001\001\000\034\014\u0104\105\u0110\106\366\107\356"
        + "\110\u0101\111\363\112\377\114\350\115\374\116\351\117"
        + "\362\120\u0102\122\355\001\001\000\002\001\001\000\004"
        + "\112\u010e\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\014\037\u0115\040\121\041\120\101\u0112"
        + "\102\u0113\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\004\053\u0119\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\040"
        + "\014\u0104\077\u011e\100\u010b\105\u0109\106\366\107\356\110"
        + "\u0101\111\363\112\377\114\350\115\374\116\351\117\362"
        + "\120\u0102\122\355\001\001\000\002\001\001\000\004\121"
        + "\u0121\001\001\000\006\117\u0122\120\u0102\001\001\000\002"
        + "\001\001\000\002\001\001\000\040\014\u0104\077\u0124\100"
        + "\u010b\105\u0109\106\366\107\356\110\u0101\111\363\112\377"
        + "\114\350\115\374\116\351\117\362\120\u0102\122\355\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\040\014\u0104\077"
        + "\u012a\100\u010b\105\u0109\106\366\107\356\110\u0101\111\363"
        + "\112\377\114\350\115\374\116\351\117\362\120\u0102\122"
        + "\355\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\004\053\u0119\001\001\000\002\001\001\000"
        + "\002\001\001\000\006\014\u0131\070\u0133\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\004\014"
        + "\u0136\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\004\054\254\001\001\000"
        + "\006\014\u0131\070\u013c\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\006\014\u0131\070\u013f\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\014\037\u014a\040\121\041\120\130\u0148\131\u014c\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\014\037\u015a\040\121\041\120\130\u0148\131\u015b\001\001"
        + "\000\004\127\u0157\001\001\000\012\037\u014a\040\121\041"
        + "\120\130\u0150\001\001\000\004\013\u014d\001\001\000\012"
        + "\037\u014a\040\121\041\120\130\u014f\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\010\037\u0158\040\121"
        + "\041\120\001\001\000\002\001\001\000\002\001\001\000"
        + "\004\127\u0157\001\001\000\004\013\u014d\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\040\014\u0104\077\u0162\100\u010b\105\u0109\106\366"
        + "\107\356\110\u0101\111\363\112\377\114\350\115\374\116"
        + "\351\117\362\120\u0102\122\355\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\006\103\u0168\104"
        + "\u0166\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\004\104\u016d\001\001\000\002"
        + "\001\001\000\006\103\u016f\104\u0166\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\040\014\u0104"
        + "\077\u0173\100\u010b\105\u0109\106\366\107\356\110\u0101\111"
        + "\363\112\377\114\350\115\374\116\351\117\362\120\u0102"
        + "\122\355\001\001\000\002\001\001\000\002\001\001\000"
        + "\012\033\u0176\037\246\040\121\041\120\001\001\000\002"
        + "\001\001\000\014\037\u014a\040\121\041\120\130\u0148\131"
        + "\u0178\001\001\000\004\013\u014d\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\010\123\u0182\124\u0180\125\u0181\001\001"
        + "\000\014\037\u0115\040\121\041\120\101\u018b\102\u0113\001"
        + "\001\000\004\125\u0185\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\040\014\u0104\077\u0187\100\u010b\105\u0109\106\366"
        + "\107\356\110\u0101\111\363\112\377\114\350\115\374\116"
        + "\351\117\362\120\u0102\122\355\001\001\000\004\126\u0188"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\040\014\u0104\077\u018d\100\u010b"
        + "\105\u0109\106\366\107\356\110\u0101\111\363\112\377\114"
        + "\350\115\374\116\351\117\362\120\u0102\122\355\001\001"
        + "\000\004\126\u018e\001\001\000\002\001\001\000\040\014"
        + "\u0104\077\u0190\100\u010b\105\u0109\106\366\107\356\110\u0101"
        + "\111\363\112\377\114\350\115\374\116\351\117\362\120"
        + "\u0102\122\355\001\001\000\002\001\001\000\002\001\001"
        + "\000\004\014\u0194\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\010\037\u0197\040\121\041\120"
        + "\001\001\000\002\001\001\000\002\001\001\000\004\127"
        + "\u019a\001\001\000\010\037\u019b\040\121\041\120\001\001"
        + "\000\002\001\001\000\004\113\u019e\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\010\037\u01a9\040\121\041\120\001"
        + "\001\000\002\001\001\000\002\001\001\000\010\037\u01a6"
        + "\040\121\041\120\001\001\000\002\001\001\000\010\037"
        + "\u01a8\040\121\041\120\001\001\000\002\001\001\000\002"
        + "\001\001\000\010\037\u01ab\040\121\041\120\001\001\000"
        + "\002\001\001\000\010\037\u01ad\040\121\041\120\001\001"
        + "\000\002\001\001\000\010\037\u01af\040\121\041\120\001"
        + "\001\000\002\001\001\000\002\001\001\000\004\127\u01b2"
        + "\001\001\000\010\037\u01b3\040\121\041\120\001\001\000"
        + "\002\001\001\000\004\113\u01b5\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\040\014\u0104\077"
        + "\u01ba\100\u010b\105\u0109\106\366\107\356\110\u0101\111\363"
        + "\112\377\114\350\115\374\116\351\117\362\120\u0102\122"
        + "\355\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\004\011\u01bf\001\001\000\004\010\u01be\001"
        + "\001\000\002\001\001\000\002\001\001\000\004\133\u01c1"
        + "\001\001\000\010\135\u01c2\136\u01c4\144\u01c6\001\001\000"
        + "\012\014\u01ff\136\u0200\143\u01fe\147\u01fd\001\001\000\004"
        + "\014\u01cf\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\004\173\u01ca\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\004\137\u01d1\001\001\000\002\001\001\000"
        + "\010\037\u01ea\040\121\041\120\001\001\000\022\037\u01db"
        + "\040\121\041\120\170\u01dc\172\u01d5\173\u01d8\175\u01d4\200"
        + "\u01d6\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\004\137\u01dd\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\010\037\u01df\040\121\041"
        + "\120\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\024\037\u01db\040\121\041"
        + "\120\170\u01dc\172\u01d5\173\u01d8\174\u01e5\175\u01e4\200\u01d6"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\022\037\u01db\040\121\041\120\170\u01dc\172\u01d5"
        + "\173\u01d8\175\u01e9\200\u01d6\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\004"
        + "\140\u01ee\001\001\000\014\037\u01f1\040\121\041\120\141"
        + "\u01ef\142\u01f0\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\012\037\u01f1\040"
        + "\121\041\120\141\u01f3\001\001\000\002\001\001\000\010"
        + "\037\u01f6\040\121\041\120\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\012"
        + "\037\u01f1\040\121\041\120\141\u01fa\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\010\014\u01ff\134\u020e\147\u020c\001\001\000\004\150"
        + "\u0203\001\001\000\002\001\001\000\002\001\001\000\006"
        + "\137\u0205\151\u0204\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\022\037\u01db\040\121\041\120"
        + "\170\u01dc\172\u01d5\173\u01d8\175\u0207\200\u01d6\001\001\000"
        + "\002\001\001\000\004\140\u0209\001\001\000\002\001\001"
        + "\000\004\053\u020b\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\042\014\u01ff\145"
        + "\u0216\146\u0218\147\u021c\152\u0219\153\u0226\154\u0220\155\u0215"
        + "\161\u0224\162\u0228\163\u021a\165\u0227\170\u0222\171\u0225\172"
        + "\u021b\173\u01d8\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\040\014\u01ff\146\u025c\147\u021c\152"
        + "\u0219\153\u0226\154\u0220\155\u0215\161\u0224\162\u0228\163\u021a"
        + "\165\u0227\170\u0222\171\u0225\172\u021b\173\u01d8\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\004\137\u026b\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\004\014\u022c\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\022\037\u01db\040\121\041\120\170"
        + "\u01dc\172\u01d5\173\u01d8\175\u022f\200\u01d6\001\001\000\002"
        + "\001\001\000\020\037\u0237\040\121\041\120\172\u0233\173"
        + "\u01d8\176\u0239\177\u0231\001\001\000\004\013\u023f\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\014\037\u015a\040\121\041\120\130\u0148\131\u023d\001\001"
        + "\000\002\001\001\000\004\127\u023b\001\001\000\016\037"
        + "\u0237\040\121\041\120\172\u0233\173\u01d8\176\u023a\001\001"
        + "\000\002\001\001\000\002\001\001\000\010\037\u023c\040"
        + "\121\041\120\001\001\000\002\001\001\000\004\013\u014d"
        + "\001\001\000\002\001\001\000\016\037\u0237\040\121\041"
        + "\120\172\u0233\173\u01d8\176\u0252\001\001\000\004\164\u0242"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\022\037\u01db"
        + "\040\121\041\120\170\u01dc\172\u01d5\173\u01d8\175\u024d\200"
        + "\u01d6\001\001\000\002\001\001\000\002\001\001\000\022"
        + "\037\u01db\040\121\041\120\170\u01dc\172\u01d5\173\u01d8\175"
        + "\u024a\200\u01d6\001\001\000\002\001\001\000\022\037\u01db"
        + "\040\121\041\120\170\u01dc\172\u01d5\173\u01d8\175\u024c\200"
        + "\u01d6\001\001\000\002\001\001\000\002\001\001\000\022"
        + "\037\u01db\040\121\041\120\170\u01dc\172\u01d5\173\u01d8\175"
        + "\u024f\200\u01d6\001\001\000\002\001\001\000\022\037\u01db"
        + "\040\121\041\120\170\u01dc\172\u01d5\173\u01d8\175\u0251\200"
        + "\u01d6\001\001\000\002\001\001\000\002\001\001\000\022"
        + "\037\u01db\040\121\041\120\170\u01dc\172\u01d5\173\u01d8\175"
        + "\u0254\200\u01d6\001\001\000\002\001\001\000\020\037\u0237"
        + "\040\121\041\120\172\u0233\173\u01d8\176\u0239\177\u0256\001"
        + "\001\000\004\013\u023f\001\001\000\004\164\u0258\001\001"
        + "\000\002\001\001\000\002\001\001\000\042\014\u01ff\145"
        + "\u025b\146\u0218\147\u021c\152\u0219\153\u0226\154\u0220\155\u0215"
        + "\161\u0224\162\u0228\163\u021a\165\u0227\170\u0222\171\u0225\172"
        + "\u021b\173\u01d8\001\001\000\040\014\u01ff\146\u025c\147\u021c"
        + "\152\u0219\153\u0226\154\u0220\155\u0215\161\u0224\162\u0228\163"
        + "\u021a\165\u0227\170\u0222\171\u0225\172\u021b\173\u01d8\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\042\014\u01ff\145\u0264\146\u0218\147\u021c\152"
        + "\u0219\153\u0226\154\u0220\155\u0215\161\u0224\162\u0228\163\u021a"
        + "\165\u0227\170\u0222\171\u0225\172\u021b\173\u01d8\001\001\000"
        + "\040\014\u01ff\146\u025c\147\u021c\152\u0219\153\u0226\154\u0220"
        + "\155\u0215\161\u0224\162\u0228\163\u021a\165\u0227\170\u0222\171"
        + "\u0225\172\u021b\173\u01d8\001\001\000\004\163\u0266\001\001"
        + "\000\002\001\001\000\002\001\001\000\042\014\u01ff\145"
        + "\u0269\146\u0218\147\u021c\152\u0219\153\u0226\154\u0220\155\u0215"
        + "\161\u0224\162\u0228\163\u021a\165\u0227\170\u0222\171\u0225\172"
        + "\u021b\173\u01d8\001\001\000\040\014\u01ff\146\u025c\147\u021c"
        + "\152\u0219\153\u0226\154\u0220\155\u0215\161\u0224\162\u0228\163"
        + "\u021a\165\u0227\170\u0222\171\u0225\172\u021b\173\u01d8\001\001"
        + "\000\002\001\001\000\002\001\001\000\022\037\u01db\040"
        + "\121\041\120\170\u01dc\172\u01d5\173\u01d8\175\u026d\200\u01d6"
        + "\001\001\000\002\001\001\000\022\037\u01db\040\121\041"
        + "\120\170\u01dc\172\u01d5\173\u01d8\175\u026f\200\u01d6\001\001"
        + "\000\002\001\001\000\006\166\u0274\167\u0276\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\004\167"
        + "\u0279\001\001\000\002\001\001\000\002\001\001\000\020"
        + "\037\u0237\040\121\041\120\172\u0233\173\u01d8\176\u0239\177"
        + "\u027b\001\001\000\004\013\u023f\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\042\014\u01ff\145"
        + "\u0280\146\u0218\147\u021c\152\u0219\153\u0226\154\u0220\155\u0215"
        + "\161\u0224\162\u0228\163\u021a\165\u0227\170\u0222\171\u0225\172"
        + "\u021b\173\u01d8\001\001\000\040\014\u01ff\146\u025c\147\u021c"
        + "\152\u0219\153\u0226\154\u0220\155\u0215\161\u0224\162\u0228\163"
        + "\u021a\165\u0227\170\u0222\171\u0225\172\u021b\173\u01d8\001\001"
        + "\000\002\001\001\000\002\001\001\000\020\037\u0237\040"
        + "\121\041\120\172\u0233\173\u01d8\176\u0239\177\u0284\001\001"
        + "\000\004\013\u023f\001\001\000\002\001\001\000\002\001"
        + "\001\000\010\156\u0289\157\u028b\160\u028a\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\004\160"
        + "\u028d\001\001\000\002\001\001\000\002\001\001\000\042"
        + "\014\u01ff\145\u028f\146\u0218\147\u021c\152\u0219\153\u0226\154"
        + "\u0220\155\u0215\161\u0224\162\u0228\163\u021a\165\u0227\170\u0222"
        + "\171\u0225\172\u021b\173\u01d8\001\001\000\042\014\u01ff\126"
        + "\u0290\146\u025c\147\u021c\152\u0219\153\u0226\154\u0220\155\u0215"
        + "\161\u0224\162\u0228\163\u021a\165\u0227\170\u0222\171\u0225\172"
        + "\u021b\173\u01d8\001\001\000\002\001\001\000\002\001\001"
        + "\000\042\014\u01ff\145\u0293\146\u0218\147\u021c\152\u0219\153"
        + "\u0226\154\u0220\155\u0215\161\u0224\162\u0228\163\u021a\165\u0227"
        + "\170\u0222\171\u0225\172\u021b\173\u01d8\001\001\000\042\014"
        + "\u01ff\126\u0294\146\u025c\147\u021c\152\u0219\153\u0226\154\u0220"
        + "\155\u0215\161\u0224\162\u0228\163\u021a\165\u0227\170\u0222\171"
        + "\u0225\172\u021b\173\u01d8\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$SyntaxMlgAnalyzer$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$SyntaxMlgAnalyzer$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$SyntaxMlgAnalyzer$do_action(act_num, parser, stack, top, this);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 0;
    }

    /** <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }

    public boolean SyntaxError;
    public boolean SyntaxRecoverableError;
    public TestManager testManager;
    public TranslateControlerTAC translateControlerTAC;

    public void setTestManager(TestManager testManager) {
        this.testManager = testManager;
    }

    public void setTranslateControlerTAC(TranslateControlerTAC translateControlerTAC) {
        this.translateControlerTAC = translateControlerTAC;
    }

    public void syntax_error(Symbol s) {
        try {
            String lexema = s.value.toString();
            int fila = s.right;
            int columna = s.left;
            System.out.println("Error Sintactico Recuperado\n");
            System.out.println("\t \tLexema: " + lexema + "\n");
            System.out.println("\t \tFila: " + fila + "\n");
            System.out.println("\t \tColumna: " + columna + "\n");
        } catch (Exception e) {
            System.out.println("error");
            int fila = s.right;
            int columna = s.left;
            System.out.println("\t \tFila: " + fila + "\n");
            System.out.println("\t \tColumna: " + columna + "\n");
        }

    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        try {
            String lexema = s.value.toString();
            int fila = s.right;
            int columna = s.left;
            System.out.println("Error Sintactico Recuperado\n");
            System.out.println("\t \tLexema: " + lexema + "\n");
            System.out.println("\t \tFila: " + fila + "\n");
            System.out.println("\t \tColumna: " + columna + "\n");

        } catch (Exception ex) {

        }
    }

}

/**
 * Cup generated class to encapsulate user supplied action code.
 */
class CUP$SyntaxMlgAnalyzer$actions {

    private final SyntaxMlgAnalyzer parser;

    /**
     * Constructor
     */
    CUP$SyntaxMlgAnalyzer$actions(SyntaxMlgAnalyzer parser) {
        this.parser = parser;
    }

    /**
     * Method with the actual generated action code.
     */
    public final java_cup.runtime.Symbol CUP$SyntaxMlgAnalyzer$do_action(
            int CUP$SyntaxMlgAnalyzer$act_num,
            java_cup.runtime.lr_parser CUP$SyntaxMlgAnalyzer$parser,
            java.util.Stack CUP$SyntaxMlgAnalyzer$stack,
            int CUP$SyntaxMlgAnalyzer$top, SyntaxMlgAnalyzer sma)
            throws java.lang.Exception {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$SyntaxMlgAnalyzer$result;

        /* select the action based on the action number */
        switch (CUP$SyntaxMlgAnalyzer$act_num) {
            /*. . . . . . . . . . . . . . . . . . . .*/
            case 288: // OpBoolC ::= BoolValueC 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBoolC", 125, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 287: // OpBoolC ::= OpBoolC OpLogic BoolValueC 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBoolC", 125, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 286: // BoolValueC ::= NumberValue ExBoolJ NumberValue 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueC", 124, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 285: // BoolValueC ::= FALSE 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueC", 124, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 284: // BoolValueC ::= TRUE 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueC", 124, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 283: // BoolValueC ::= FuntionCall 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueC", 124, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 282: // BoolValueC ::= PARENTHESIS_A OpBoolJ PARENTHESIS_B 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueC", 124, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 281: // BoolValueC ::= NOT BoolValueC 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueC", 124, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 280: // ArrayVal ::= ID Dimensions 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ArrayVal", 126, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 279: // ValueC ::= ArrayVal 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValueC", 123, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 278: // ValueC ::= Getch 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValueC", 123, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 277: // ValueC ::= FuntionCall 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValueC", 123, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 276: // ValueC ::= NumberValue 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValueC", 123, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 275: // ValueC ::= STRING 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValueC", 123, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 274: // ParametersC ::= ValueC 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParametersC", 122, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 273: // ParametersC ::= ParametersC COMMA ValueC 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParametersC", 122, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 272: // FuntionIDs ::= ID 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FuntionIDs", 121, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 271: // FuntionIDs ::= FuntionIDs POINT ID 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FuntionIDs", 121, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 270: // FuntionCall ::= FuntionIDs PARENTHESIS_A PARENTHESIS_B 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FuntionCall", 120, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 269: // FuntionCall ::= FuntionIDs PARENTHESIS_A ParametersC PARENTHESIS_B 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FuntionCall", 120, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 268: // Input ::= SCAN_F PARENTHESIS_A STRING COMMA AMPERSON ID PARENTHESIS_B 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Input", 119, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 6)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 267: // Getch ::= GETCH PARENTHESIS_A PARENTHESIS_B 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Getch", 118, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 266: // OutputValueC ::= STRING 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValueC", 117, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 265: // OutputValueC ::= DECIMAL 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValueC", 117, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 264: // OutputValueC ::= ID 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValueC", 117, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 263: // OutputValueC ::= NUMBER 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValueC", 117, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 262: // OutputValuesC ::= OutputValueC 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValuesC", 116, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 261: // OutputValuesC ::= OutputValuesC COMMA OutputValueC 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValuesC", 116, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 260: // OutputC ::= CLRSCR PARENTHESIS_A PARENTHESIS_B 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputC", 115, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 259: // OutputC ::= PRINTF PARENTHESIS_A OutputValuesC PARENTHESIS_B 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputC", 115, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 258: // StepC ::= ID DIVISION EQUAL ValueC 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepC", 114, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 257: // StepC ::= ID MULTIPLICATION EQUAL ValueC 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepC", 114, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 256: // StepC ::= ID MINUS EQUAL ValueC 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepC", 114, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 255: // StepC ::= ID PLUS EQUAL ValueC 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepC", 114, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 254: // StepC ::= ID EQUAL ValueC 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepC", 114, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 253: // WhileCHeader ::= WHILE PARENTHESIS_A OpBoolC PARENTHESIS_B 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("WhileCHeader", 113, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 252: // ForCHeader ::= FOR PARENTHESIS_A ID EQUAL ValueC SEMICOLON OpBoolC SEMICOLON StepC PARENTHESIS_B 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForCHeader", 112, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 9)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 251: // ForCHeader ::= FOR PARENTHESIS_A Type ID EQUAL ValueC SEMICOLON OpBoolC SEMICOLON StepC PARENTHESIS_B 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForCHeader", 112, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 10)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 250: // CycleC ::= DO LEFT_CB MainCode RIGHT_CB WhileCHeader SEMICOLON 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleC", 111, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 5)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 249: // CycleC ::= WhileCHeader LEFT_CB MainCode RIGHT_CB 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleC", 111, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 248: // CycleC ::= ForCHeader LEFT_CB MainCode RIGHT_CB 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleC", 111, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 247: // CaseC ::= CASE_J COLON MainCode BreakJ 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseC", 110, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 246: // CasesC2 ::= CaseC 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesC2", 109, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 245: // CasesC2 ::= CasesC2 CaseC 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesC2", 109, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 244: // CasesC ::= CaseC 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesC", 108, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 243: // CasesC ::= CasesC2 DEFAULT_J COLON MainCode BreakJ 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesC", 108, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 4)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 242: // CasesC ::= CasesC2 CaseC 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesC", 108, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 241: // SwitchCHeader ::= SWITCH_J PARENTHESIS_A ID PARENTHESIS_B 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("SwitchCHeader", 107, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 240: // IfCHeader ::= IF PARENTHESIS_A OpBoolC PARENTHESIS_B 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IfCHeader", 106, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 239: // ConditionC ::= SwitchCHeader LEFT_CB CasesC RIGHT_CB 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionC", 105, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 238: // ConditionC ::= IfCHeader LEFT_CB MainCode RIGHT_CB 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionC", 105, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 237: // AssignmentC ::= ID Dimensions EQUAL ValueC 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentC", 104, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 236: // AssignmentC ::= ID EQUAL ValueC 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentC", 104, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 235: // AssiC ::= 
            {
                Object RESULT = null;
                System.out.println("ASSI VACIO");
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssiC", 103, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 234: // AssiC ::= Dimensions EQUAL ArrayValues 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssiC", 103, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 233: // AssiC ::= Dimensions 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssiC", 103, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 232: // AssiC ::= EQUAL ValueC 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssiC", 103, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 231: // IdsC ::= ID AssiC 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IdsC", 102, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 230: // IdsC ::= ID AssiC COMMA IdsVb 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IdsC", 102, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 229: // DeclarationC ::= Type IdsC 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationC", 101, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 228: // MainLineCode ::= FuntionCall SEMICOLON 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode", 100, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 227: // MainLineCode ::= Input SEMICOLON 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode", 100, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 226: // MainLineCode ::= Getch SEMICOLON 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode", 100, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 225: // MainLineCode ::= OutputC SEMICOLON 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode", 100, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 224: // MainLineCode ::= CycleC 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode", 100, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 223: // MainLineCode ::= ConditionC 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode", 100, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 222: // MainLineCode ::= AssignmentC SEMICOLON 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode", 100, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 221: // MainLineCode ::= DeclarationC SEMICOLON 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode", 100, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 220: // MainCode ::= MainLineCode 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainCode", 99, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 219: // MainCode ::= MainCode MainLineCode 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainCode", 99, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 218: // Main ::= VOID_J MAIN PARENTHESIS_A PARENTHESIS_B LEFT_CB MainCode RIGHT_CB 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Main", 90, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 6)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 217: // Include ::= INCLUDE LESS_THAN FuntionIDs GREATER_THAN 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Include", 98, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 216: // Include ::= INCLUDE STRING 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Include", 98, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 215: // Globals ::= DeclarationC SEMICOLON 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Globals", 97, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 214: // Globals ::= Globals DeclarationC SEMICOLON 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Globals", 97, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 213: // Rows ::= LEFT_CB Nums RIGHT_BRACKET 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Rows", 96, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 212: // Rows ::= Rows COMMA LEFT_CB Nums RIGHT_BRACKET 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Rows", 96, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 4)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 211: // Nums ::= NumberValue 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Nums", 95, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 210: // Nums ::= Nums COMMA NumberValue 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Nums", 95, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 209: // ArrayValues ::= LEFT_CB Rows RIGHT_CB 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ArrayValues", 94, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 208: // ArrayValues ::= LEFT_CB Nums RIGHT_CB 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ArrayValues", 94, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 207: // Dimensions ::= LEFT_BRACKET NumberValue RIGHT_BRACKET 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Dimensions", 93, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 206: // Dimensions ::= Dimensions LEFT_BRACKET NumberValue RIGHT_BRACKET 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Dimensions", 93, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 205: // Constante ::= CONST Type ID Dimensions EQUAL ArrayValues 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Constante", 92, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 5)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 204: // Constante ::= CONST Type ID EQUAL ValueC 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Constante", 92, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 4)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 203: // Constantes ::= Constante SEMICOLON 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Constantes", 91, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 202: // Constantes ::= Constantes Constante SEMICOLON 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Constantes", 91, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 201: // Library ::= 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Library", 89, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 200: // Library ::= Library Include 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Library", 89, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 199: // Programa ::= PROGRAM_SEPERATOR Library Constantes Globals Main 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Programa", 7, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 4)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 198: // PythonCode ::= 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("PythonCode", 6, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 197: // Python ::= PYTHON_SEPERATOR PythonCode 
            {
                Object RESULT = null;
                sma.testManager.switchNextTypes();
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Python", 3, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 196: // OpBoolJ ::= BoolValueJ 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBoolJ", 87, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 195: // OpBoolJ ::= OpBoolJ OpLogic BoolValueJ 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBoolJ", 87, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 194: // BoolValueJ ::= NumberValue ExBoolJ NumberValue 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueJ", 86, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 193: // BoolValueJ ::= FALSE 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueJ", 86, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 192: // BoolValueJ ::= TRUE 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueJ", 86, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 191: // BoolValueJ ::= PARENTHESIS_A OpBoolJ PARENTHESIS_B 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueJ", 86, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 190: // BoolValueJ ::= NOT BoolValueJ 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueJ", 86, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 189: // ExBoolJ ::= LESS_THAN_EQUAL 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolJ", 85, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 188: // ExBoolJ ::= GREATER_THAN_EQUAL 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolJ", 85, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 187: // ExBoolJ ::= LESS_THAN 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolJ", 85, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 186: // ExBoolJ ::= GREATER_THAN 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolJ", 85, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 185: // ExBoolJ ::= DIFERENT_J 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolJ", 85, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 184: // ExBoolJ ::= EQUAL EQUAL 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolJ", 85, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 183: // BreakJ ::= 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BreakJ", 84, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 182: // BreakJ ::= BREAK SEMICOLON 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BreakJ", 84, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 181: // CaseJ ::= CASE_J ValuesJ COLON LineCodesJ BreakJ 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseJ", 83, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 4)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 180: // CasesJ2 ::= CaseJ 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesJ2", 82, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 179: // CasesJ2 ::= CasesJ2 CaseJ 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesJ2", 82, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 178: // CasesJ1 ::= CaseJ 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesJ1", 81, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 177: // CasesJ1 ::= CasesJ2 DEFAULT_J COLON LineCodesJ BreakJ 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesJ1", 81, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 4)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 176: // CasesJ1 ::= CasesJ2 CaseJ 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesJ1", 81, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 175: // SwitchJHeader ::= SWITCH_J PARENTHESIS_A ID PARENTHESIS_B 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("SwitchJHeader", 80, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 174: // ElseJ ::= 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseJ", 79, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 173: // ElseJ ::= ELSE IfJ 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseJ", 79, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 172: // ElseJ ::= ELSE LEFT_CB LineCodesJ RIGHT_CB 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseJ", 79, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 171: // IfJHeader ::= IF PARENTHESIS_A OpBoolJ PARENTHESIS_B 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IfJHeader", 78, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 170: // IfJ ::= IfJHeader LEFT_CB LineCodesJ RIGHT_CB ElseJ 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IfJ", 77, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 4)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 169: // ConditionJ ::= SwitchJHeader LEFT_CB CasesJ1 RIGHT_CB 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionJ", 76, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 168: // ConditionJ ::= IfJ 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionJ", 76, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 167: // AssignmentJ ::= ID EQUAL ValueVb 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentJ", 75, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 166: // DeclarationJ ::= Type IdsVb 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationJ", 74, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 165: // DeclarationJ ::= PUBLIC Type IdsVb 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationJ", 74, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 164: // StepJ ::= ID DIVISION EQUAL NumberValue 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepJ", 73, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 163: // StepJ ::= ID MULTIPLICATION EQUAL NumberValue 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepJ", 73, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 162: // StepJ ::= ID MINUS EQUAL NumberValue 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepJ", 73, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 161: // StepJ ::= ID PLUS EQUAL NumberValue 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepJ", 73, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 160: // StepJ ::= ID EQUAL NumberValue 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepJ", 73, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 159: // WhileJHeader ::= WHILE PARENTHESIS_A OpBoolJ PARENTHESIS_B 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("WhileJHeader", 72, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 158: // ForJHeader ::= FOR PARENTHESIS_A ID EQUAL NumberValue SEMICOLON ID ExBoolJ NumberValue SEMICOLON StepJ PARENTHESIS_B 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForJHeader", 71, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 11)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 157: // ForJHeader ::= FOR PARENTHESIS_A Type ID EQUAL NumberValue SEMICOLON ID ExBoolJ NumberValue SEMICOLON StepJ PARENTHESIS_B 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForJHeader", 71, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 12)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 156: // CycleJ ::= DO LEFT_CB LineCodesJ RIGHT_CB WhileJHeader SEMICOLON 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleJ", 70, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 5)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 155: // CycleJ ::= WhileJHeader LEFT_CB LineCodesJ RIGHT_CB 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleJ", 70, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 154: // CycleJ ::= ForJHeader LEFT_CB LineCodesJ RIGHT_CB 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleJ", 70, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 153: // InputJ ::= CHARINPUT PARENTHESIS_A STRING PARENTHESIS_B 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InputJ", 69, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 152: // InputJ ::= FLOATINPUT PARENTHESIS_A STRING PARENTHESIS_B 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InputJ", 69, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 151: // InputJ ::= INTINPUT PARENTHESIS_A STRING PARENTHESIS_B 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InputJ", 69, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 150: // OutputJ ::= SYSTEM_OUT_PRINT PARENTHESIS_A ValuesOutputJ PARENTHESIS_B 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputJ", 68, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 149: // OutputJ ::= SYSTEM_OUT_PRINTLN PARENTHESIS_A ValuesOutputJ PARENTHESIS_B 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputJ", 68, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 148: // LineCodeJ ::= error 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ", 67, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 147: // LineCodeJ ::= ConditionJ 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ", 67, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 146: // LineCodeJ ::= AssignmentJ SEMICOLON 
            {
                Object RESULT = null;
                System.out.println("ASIGNACION");
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ", 67, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 145: // LineCodeJ ::= DeclarationJ SEMICOLON 
            {
                Object RESULT = null;
                System.out.println("DECLARACION");
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ", 67, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 144: // LineCodeJ ::= CycleJ 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ", 67, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 143: // LineCodeJ ::= InputJ SEMICOLON 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ", 67, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 142: // LineCodeJ ::= OutputJ SEMICOLON 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ", 67, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 141: // ValJ ::= STRING 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValJ", 66, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 140: // ValJ ::= DECIMAL 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValJ", 66, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 139: // ValJ ::= NUMBER 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValJ", 66, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 138: // ValJ ::= ID 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValJ", 66, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 137: // ValuesOutputJ ::= ValJ 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValuesOutputJ", 65, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 136: // ValuesOutputJ ::= ValuesOutputJ PLUS ValJ 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValuesOutputJ", 65, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 135: // StringValue ::= STRING 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StringValue", 64, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 134: // StringValue ::= StringValue PLUS STRING 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StringValue", 64, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 133: // ValuesJ ::= NumberValue 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValuesJ", 63, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 132: // ValuesJ ::= StringValue 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValuesJ", 63, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 131: // LineCodesJ2 ::= LineCodeJ 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodesJ2", 62, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 130: // LineCodesJ2 ::= LineCodesJ2 LineCodeJ 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodesJ2", 62, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 129: // LineCodesJ ::= LineCodesJ2 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodesJ", 61, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 128: // LineCodesJ ::= LineCodesJ2 RETURN_J ValuesJ 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodesJ", 61, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 127: // ProcessJHeader ::= PUBLIC VOID_J ID PARENTHESIS_A PARENTHESIS_B 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ProcessJHeader", 60, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 4)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 126: // ProcessJHeader ::= PUBLIC VOID_J ID PARENTHESIS_A ParametersJ PARENTHESIS_B 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ProcessJHeader", 60, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 5)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 125: // ProcessJ ::= ProcessJHeader LEFT_CB RIGHT_CB 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ProcessJ", 59, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 124: // ProcessJ ::= ProcessJHeader LEFT_CB LineCodesJ RIGHT_CB 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ProcessJ", 59, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 123: // FunctionJHeader ::= PUBLIC Type ID PARENTHESIS_A PARENTHESIS_B 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionJHeader", 58, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 4)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 122: // FunctionJHeader ::= PUBLIC Type ID PARENTHESIS_A ParametersJ PARENTHESIS_B 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionJHeader", 58, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 5)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 121: // FunctionJ ::= FunctionJHeader LEFT_CB RIGHT_CB 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionJ", 57, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 120: // FunctionJ ::= FunctionJHeader LEFT_CB LineCodesJ RIGHT_CB 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionJ", 57, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 119: // ConditionJHeader ::= PUBLIC ID PARENTHESIS_A ParametersJ PARENTHESIS_B 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionJHeader", 53, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 4)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 118: // ConstructorJ ::= ConditionJHeader LEFT_CB LineCodesJ RIGHT_CB 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConstructorJ", 88, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 117: // ClassCodeJ ::= ConstructorJ 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClassCodeJ", 56, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 116: // ClassCodeJ ::= LineCodeJ 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClassCodeJ", 56, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 115: // ClassCodeJ ::= ProcessJ 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClassCodeJ", 56, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 114: // ClassCodeJ ::= FunctionJ 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClassCodeJ", 56, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 113: // JavaClassCode ::= ClassCodeJ 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("JavaClassCode", 55, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 112: // JavaClassCode ::= JavaClassCode ClassCodeJ 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("JavaClassCode", 55, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 111: // ParametersJ ::= Type ID 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParametersJ", 54, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 110: // ParametersJ ::= ParametersJ COMMA Type ID 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParametersJ", 54, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 109: // ClaseJHeader ::= PUBLIC CLASS_J ID 
            {
                Object RESULT = null;
                sma.testManager.creatFatherAmbit();
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClaseJHeader", 52, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 108: // ClaseJ ::= ClaseJHeader LEFT_CB JavaClassCode RIGHT_CB 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClaseJ", 51, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 107: // JavaCode ::= 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("JavaCode", 5, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 106: // JavaCode ::= JavaCode ClaseJ 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("JavaCode", 5, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 105: // Java ::= JAVA_SEPERATOR JavaCode 
            {
                Object RESULT = null;
                sma.testManager.switchNextTypes();
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Java", 2, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 104: // CasesVb ::= CASE_VB ELSE InstructionsFunctionVb 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesVb", 50, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 103: // CasesVb ::= CASE_VB ValueVb InstructionsFunctionVb CasesVb 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesVb", 50, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 102: // SwitchVb ::= SELECT_VB CASE_VB ID CasesVb END_VB SELECT_VB 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("SwitchVb", 49, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 5)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 101: // ThenVb ::= 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ThenVb", 48, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 100: // ThenVb ::= THEN_VB 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ThenVb", 48, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 99: // ElseVb ::= 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseVb", 47, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 98: // ElseVb ::= ELSE_IF_VB OpBool ThenVb InstructionsFunctionVb ElseVb 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseVb", 47, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 4)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 97: // ElseVb ::= ELSE InstructionsFunctionVb 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseVb", 47, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 96: // IfVbHeader ::= IF OpBool ThenVb 
            {
                Object RESULT = null;
                int opleft = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)).right;
                Object op = (Object) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)).value;
                sma.testManager.creatSonAmbit();
                sma.translateControlerTAC.createNewQuadrupleBlock();
                RESULT = op;
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IfVbHeader", 46, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 95: // IfVb ::= IfVbHeader InstructionsFunctionVb ElseVb END_VB IF 
            {
                Object RESULT = null;
                int ifBoolleft = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 4)).left;
                int ifBoolright = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 4)).right;
                Object ifBool = (Object) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 4)).value;
                int linesleft = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)).left;
                int linesright = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)).right;
                Object lines = (Object) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)).value;
                int elseBoolleft = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)).left;
                int elseBoolright = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)).right;
                Object elseBool = (Object) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)).value;
                BoolQuad bool = (BoolQuad) ifBool;
                System.out.println("BEFORE");
                System.out.println(bool);
                System.out.println(((ArrayList<Object>) lines).size());
                System.out.println(elseBool);
                if (lines != null&&!((ArrayList<Object>) lines).isEmpty()) {
                    bool.changeFatherYesBool((ArrayList<Object>) lines);
                }
                if (elseBool != null) {
                    bool.changeFatherNoBool((ArrayList<Object>) elseBool);
                }
                System.out.println(bool);
                sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool));

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IfVb", 45, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 4)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 94: // ConditionVb ::= SwitchVb 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionVb", 44, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 93: // ConditionVb ::= IfVb 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionVb", 44, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 92: // AssignmentVb ::= ID EQUAL ValueVb 
            {
                Object RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)).value;
                int valleft = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).right;
                Object val = (Object) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
                boolean bool = sma.testManager.assigValue(id, val, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                if (bool) {
                    sma.translateControlerTAC.creatTempIdQuadAssign(val, id);
                    sma.translateControlerTAC.acceptAllIdQuas();
                }
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentVb", 43, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 91: // AssiVb ::= 
            {
                Object RESULT = null;
                System.out.println("ASSI VACIO");
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssiVb", 42, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 90: // AssiVb ::= EQUAL ValueVb 
            {
                Object RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).right;
                Object val = (Object) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
                RESULT = val;
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssiVb", 42, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 89: // IdsVb ::= ID AssiVb 
            {
                Object RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)).value;
                int valleft = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).right;
                Object val = (Object) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
                sma.testManager.insertPreTuple(id, null, val, null, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                if (val != null) {
                    sma.translateControlerTAC.creatTempIdQuadAssign(val, id);
                }
                sma.translateControlerTAC.nextIdQuad();
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IdsVb", 41, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 88: // IdsVb ::= IdsVb COMMA ID AssiVb 
            {
                Object RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)).value;
                int valleft = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).right;
                Object val = (Object) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
                sma.testManager.insertPreTuple(id, null, val, null, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                if (val != null) {
                    sma.translateControlerTAC.creatTempIdQuadAssign(val, id);
                }

                sma.translateControlerTAC.nextIdQuad();
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IdsVb", 41, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 87: // Type ::= CHAR_TYPE 
            {
                Object RESULT = null;
                RESULT = TypeManager.CHAR_TYPE;
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Type", 10, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 86: // Type ::= FLOAT_TYPE 
            {
                Object RESULT = null;
                RESULT = TypeManager.FLOAT_TYPE;
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Type", 10, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 85: // Type ::= INTEGER_TYPE 
            {
                Object RESULT = null;
                RESULT = TypeManager.INTEGER_TYPE;
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Type", 10, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 84: // DeTypeVb ::= IdsVb AS_VB Type AssiVb 
            {
                Object RESULT = null;
                int typeleft = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)).left;
                int typeright = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)).right;
                Object type = (Object) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)).value;
                sma.testManager.insertPreTuplesToSymbolTable((Integer) type, null, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), sma.translateControlerTAC);
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeTypeVb", 40, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 83: // DeTypeVb ::= DeTypeVb COMMA IdsVb AS_VB Type AssiVb 
            {
                Object RESULT = null;
                int typeleft = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)).left;
                int typeright = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)).right;
                Object type = (Object) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)).value;
                sma.testManager.insertPreTuplesToSymbolTable((Integer) type, null, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), sma.translateControlerTAC);
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeTypeVb", 40, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 5)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 82: // DeclarationVb ::= DIM_VB DeTypeVb 
            {
                Object RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).right;
                Object val = (Object) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
                RESULT = val;
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationVb", 39, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 81: // DoWhileVb ::= DO InstructionsFunctionVb LOOP_VB WHILE OpBool 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DoWhileVb", 38, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 4)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 80: // ExBoolVb ::= LESS_THAN_EQUAL 
            {
                Object RESULT = null;
                RESULT = Operation.LESS_THAN_EQUAL;
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb", 37, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 79: // ExBoolVb ::= GREATER_THAN_EQUAL 
            {
                Object RESULT = null;
                RESULT = Operation.GREATER_THAN_EQUAL;
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb", 37, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 78: // ExBoolVb ::= LESS_THAN 
            {
                Object RESULT = null;
                RESULT = Operation.LESS_THAN;
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb", 37, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 77: // ExBoolVb ::= GREATER_THAN 
            {
                Object RESULT = null;
                RESULT = Operation.GREATER_THAN;
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb", 37, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 76: // ExBoolVb ::= DIFERENT_VB 
            {
                Object RESULT = null;
                RESULT = Operation.DIFERENT;
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb", 37, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 75: // ExBoolVb ::= EQUAL 
            {
                Object RESULT = null;
                RESULT = Operation.EQUAL_BOOL;
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb", 37, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 74: // BoolValueVb ::= PARENTHESIS_A OpBool PARENTHESIS_B 
            {
                Object RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)).left;
                int valright = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)).right;
                Object val = (Object) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)).value;
                RESULT = val;
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueVb", 36, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 73: // BoolValueVb ::= NumberValue ExBoolVb Number3 
            {
                Object RESULT = null;
                int num1left = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)).left;
                int num1right = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)).right;
                Object num1 = (Object) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)).value;
                int exValleft = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)).left;
                int exValright = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)).right;
                Object exVal = (Object) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)).value;
                int num2left = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).left;
                int num2right = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).right;
                Object num2 = (Object) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
                if (num1 != null && num2 != null) {
                    SynthesizedOpAsst s1 = (SynthesizedOpAsst) num1;
                    SynthesizedOpAsst s2 = (SynthesizedOpAsst) num2;
                    Type type = sma.testManager.operateBoolType(s1.getType().getNumber(), s2.getType().getNumber(), ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                    if (type != null) {
                        Quadruple quadruple = sma.translateControlerTAC.operateIdBoolQuadruple(s1.getQuadruple(), s2.getQuadruple(), (Integer) exVal);
                        RESULT = sma.translateControlerTAC.getcurrentTempQuads();
                    } else {
                        RESULT = null;
                    }
                } else {
                    RESULT = null;
                }
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueVb", 36, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 72: // BoolValueVb ::= FALSE 
            {
                Object RESULT = null;
                Type type = sma.testManager.getTypeManager().operateTypes(TypeManager.BOOL_TYPE, null);
                Quadruple quadruple = sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL_BOOL, 0, 1, null);
                RESULT = sma.translateControlerTAC.getcurrentTempQuads();
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueVb", 36, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 71: // BoolValueVb ::= TRUE 
            {
                Object RESULT = null;
                Type type = sma.testManager.getTypeManager().operateTypes(TypeManager.BOOL_TYPE, null);
                Quadruple quadruple = sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL_BOOL, 1, 1, null);
                RESULT = sma.translateControlerTAC.getcurrentTempQuads();
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueVb", 36, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 70: // OpBool3 ::= BoolValueVb 
            {
                Object RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).right;
                Object val = (Object) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
                System.out.println(val);
                System.out.println("()()()()()()");
                if (val != null) {
                    RESULT = sma.translateControlerTAC.getBoolQuadControl().convertQuadToBool(((ArrayList<Object>) val));
                }
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBool3", 35, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 69: // OpBool3 ::= NOT BoolValueVb 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBool3", 35, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 68: // OpBool2 ::= OpBool3 
            {
                Object RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).right;
                Object val = (Object) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
                RESULT = val;
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBool2", 34, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 67: // OpBool2 ::= OpBool2 AND OpBool3 
            {
                Object RESULT = null;
                int val1left = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)).left;
                int val1right = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)).right;
                Object val1 = (Object) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)).value;
                int val2left = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).left;
                int val2right = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).right;
                Object val2 = (Object) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
                if (val1 != null && val2 != null) {
                    RESULT = sma.translateControlerTAC.getBoolQuadControl().operateBoolQuad(val1, val2, Operation.OP_AND);
                }

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBool2", 34, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 66: // OpBool ::= OpBool2 
            {
                Object RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).right;
                Object val = (Object) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
                RESULT = val;
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBool", 33, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 65: // OpBool ::= OpBool OR OpBool2 
            {
                Object RESULT = null;
                int val1left = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)).left;
                int val1right = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)).right;
                Object val1 = (Object) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)).value;
                int val2left = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).left;
                int val2right = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).right;
                Object val2 = (Object) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
                if (val1 != null && val2 != null) {
                    RESULT = sma.translateControlerTAC.getBoolQuadControl().operateBoolQuad(val1, val2, Operation.OP_OR);
                }

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBool", 33, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 64: // WhileVb ::= WHILE OpBool InstructionsFunctionVb END_VB WHILE 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("WhileVb", 32, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 4)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 63: // Number3 ::= PARENTHESIS_A NumberValue PARENTHESIS_B 
            {
                Object RESULT = null;
                int asstleft = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)).left;
                int asstright = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)).right;
                Object asst = (Object) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)).value;
                RESULT = asst;
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3", 31, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 62: // Number3 ::= ID 
            {
                Object RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).right;
                String val = (String) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
                Type type = sma.testManager.getTypeFromST(val, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                if (type != null) {
                    Quadruple quadruple = sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL, val, null, null);
                    RESULT = new SynthesizedOpAsst(quadruple, type);
                } else {

                    RESULT = null;
                }
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3", 31, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 61: // Number3 ::= CHAR 
            {
                Object RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).right;
                String val = (String) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
                Type type = sma.testManager.getTypeManager().operateTypes(TypeManager.CHAR_TYPE, null);
                Quadruple quadruple = sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL, val, null, null);
                RESULT = new SynthesizedOpAsst(quadruple, type);
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3", 31, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 60: // Number3 ::= DECIMAL 
            {
                Object RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).right;
                String val = (String) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
                Type type = sma.testManager.getTypeManager().operateTypes(TypeManager.FLOAT_TYPE, null);
                Quadruple quadruple = sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL, val, null, null);
                RESULT = new SynthesizedOpAsst(quadruple, type);
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3", 31, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 59: // Number3 ::= NUMBER 
            {
                Object RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).right;
                String val = (String) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
                Type type = sma.testManager.getTypeManager().operateTypes(TypeManager.INTEGER_TYPE, null);
                Quadruple quadruple = sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL, val, null, null);
                RESULT = new SynthesizedOpAsst(quadruple, type);
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3", 31, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 58: // Number2 ::= Number3 
            {
                Object RESULT = null;
                int asstleft = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).left;
                int asstright = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).right;
                Object asst = (Object) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
                RESULT = asst;
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number2", 30, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 57: // Number2 ::= Number2 MOD Number3 
            {
                Object RESULT = null;
                int num1left = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)).left;
                int num1right = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)).right;
                Object num1 = (Object) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)).value;
                int num2left = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).left;
                int num2right = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).right;
                Object num2 = (Object) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
                if (num1 != null && num2 != null) {
                    SynthesizedOpAsst s1 = (SynthesizedOpAsst) num1;
                    SynthesizedOpAsst s2 = (SynthesizedOpAsst) num2;
                    Type type = sma.testManager.operateType(s1.getType().getNumber(), s2.getType().getNumber(), ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                    if (type != null) {
                        Quadruple quadruple = sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(), s2.getQuadruple(), Operation.MOD);
                        RESULT = new SynthesizedOpAsst(quadruple, type);
                    } else {
                        RESULT = null;
                    }
                } else {
                    RESULT = null;
                }
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number2", 30, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 56: // Number2 ::= Number2 DIVISION Number3 
            {
                Object RESULT = null;
                int num1left = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)).left;
                int num1right = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)).right;
                Object num1 = (Object) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)).value;
                int num2left = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).left;
                int num2right = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).right;
                Object num2 = (Object) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
                if (num1 != null && num2 != null) {
                    SynthesizedOpAsst s1 = (SynthesizedOpAsst) num1;
                    SynthesizedOpAsst s2 = (SynthesizedOpAsst) num2;
                    Type type = sma.testManager.operateType(s1.getType().getNumber(), s2.getType().getNumber(), ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                    if (type != null) {
                        Quadruple quadruple = sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(), s2.getQuadruple(), Operation.DIVISION);
                        RESULT = new SynthesizedOpAsst(quadruple, type);
                    } else {
                        RESULT = null;
                    }
                } else {
                    RESULT = null;
                }
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number2", 30, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 55: // Number2 ::= Number2 MULTIPLICATION Number3 
            {
                Object RESULT = null;
                int num1left = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)).left;
                int num1right = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)).right;
                Object num1 = (Object) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)).value;
                int num2left = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).left;
                int num2right = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).right;
                Object num2 = (Object) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
                if (num1 != null && num2 != null) {
                    SynthesizedOpAsst s1 = (SynthesizedOpAsst) num1;
                    SynthesizedOpAsst s2 = (SynthesizedOpAsst) num2;
                    Type type = sma.testManager.operateType(s1.getType().getNumber(), s2.getType().getNumber(), ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                    if (type != null) {
                        Quadruple quadruple = sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(), s2.getQuadruple(), Operation.MULTIPLICATION);
                        RESULT = new SynthesizedOpAsst(quadruple, type);
                    } else {
                        RESULT = null;
                    }
                } else {
                    RESULT = null;
                }
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number2", 30, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 54: // NumberValue ::= Number2 
            {
                Object RESULT = null;
                int asstleft = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).left;
                int asstright = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).right;
                Object asst = (Object) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
                RESULT = asst;
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumberValue", 29, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 53: // NumberValue ::= NumberValue MINUS Number2 
            {
                Object RESULT = null;
                int num1left = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)).left;
                int num1right = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)).right;
                Object num1 = (Object) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)).value;
                int num2left = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).left;
                int num2right = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).right;
                Object num2 = (Object) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
                if (num1 != null && num2 != null) {
                    SynthesizedOpAsst s1 = (SynthesizedOpAsst) num1;
                    SynthesizedOpAsst s2 = (SynthesizedOpAsst) num2;
                    Type type = sma.testManager.operateType(s1.getType().getNumber(), s2.getType().getNumber(), ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                    if (type != null) {
                        Quadruple quadruple = sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(), s2.getQuadruple(), Operation.MINUS);
                        RESULT = new SynthesizedOpAsst(quadruple, type);
                    } else {
                        RESULT = null;
                    }
                } else {
                    RESULT = null;
                }
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumberValue", 29, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 52: // NumberValue ::= NumberValue PLUS Number2 
            {
                Object RESULT = null;
                int num1left = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)).left;
                int num1right = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)).right;
                Object num1 = (Object) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)).value;
                int num2left = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).left;
                int num2right = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).right;
                Object num2 = (Object) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
                if (num1 != null && num2 != null) {
                    SynthesizedOpAsst s1 = (SynthesizedOpAsst) num1;
                    SynthesizedOpAsst s2 = (SynthesizedOpAsst) num2;
                    Type type = sma.testManager.operateType(s1.getType().getNumber(), s2.getType().getNumber(), ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                    if (type != null) {
                        Quadruple quadruple = sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(), s2.getQuadruple(), Operation.PLUS);
                        RESULT = new SynthesizedOpAsst(quadruple, type);
                    } else {
                        RESULT = null;
                    }
                } else {
                    RESULT = null;
                }
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumberValue", 29, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 51: // Step ::= 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Step", 28, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 50: // Step ::= STEP_VB PLUS NumberValue 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Step", 28, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 49: // Step ::= STEP_VB MINUS NumberValue 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Step", 28, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 48: // Step ::= STEP_VB NumberValue 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Step", 28, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 47: // ForVb ::= FOR ID EQUAL NumberValue TO_VB NumberValue Step InstructionsFunctionVb NEXT_VB 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForVb", 27, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 8)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 46: // ForVb ::= FOR ID AS_VB Type EQUAL NumberValue TO_VB NumberValue Step InstructionsFunctionVb NEXT_VB 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForVb", 27, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 10)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 45: // CycleVb ::= DoWhileVb 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleVb", 26, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 44: // CycleVb ::= WhileVb 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleVb", 26, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 43: // CycleVb ::= ForVb 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleVb", 26, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 42: // ValueVb ::= NumberValue 
            {
                Object RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).right;
                Object val = (Object) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
                RESULT = val;
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValueVb", 25, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 41: // ValueVb ::= STRING 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValueVb", 25, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 40: // ValuesVb ::= ValueVb 
            {
                Object RESULT = null;
                int valleft = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).left;
                int valright = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).right;
                Object val = (Object) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
                RESULT = val;
                if (val != null) {
                    System.out.println(((SynthesizedOpAsst) val).toString());
                } else {
                }
                System.out.println("NULL");

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValuesVb", 24, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 39: // ValuesVb ::= ValueVb AMPERSON ValuesVb 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValuesVb", 24, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 38: // OutputVb ::= CONSOLE_VB POINT WRITELN_VB PARENTHESIS_A ValuesVb PARENTHESIS_B 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputVb", 23, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 5)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 37: // OutputVb ::= CONSOLE_VB POINT WRITE_VB PARENTHESIS_A ValuesVb PARENTHESIS_B 
            {
                Object RESULT = null;
                System.out.println("OUTPUT LINE");
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputVb", 23, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 5)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 36: // InputVb ::= CHARINPUT PARENTHESIS_A STRING PARENTHESIS_B 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InputVb", 22, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 35: // InputVb ::= FLOATINPUT PARENTHESIS_A STRING PARENTHESIS_B 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InputVb", 22, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 34: // InputVb ::= INTINPUT PARENTHESIS_A STRING PARENTHESIS_B 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InputVb", 22, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 33: // LnInstructionsVb ::= error 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb", 20, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 32: // LnInstructionsVb ::= ConditionVb 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb", 20, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 31: // LnInstructionsVb ::= AssignmentVb 
            {
                Object RESULT = null;
                System.out.println("ASIGNACION");
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb", 20, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 30: // LnInstructionsVb ::= DeclarationVb 
            {
                Object RESULT = null;
                System.out.println("DECLARACION");
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb", 20, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 29: // LnInstructionsVb ::= CycleVb 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb", 20, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 28: // LnInstructionsVb ::= OutputVb 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb", 20, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 27: // LnInstructionsVb ::= InputVb 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb", 20, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 26: // Lines ::= LnInstructionsVb 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Lines", 21, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 25: // Lines ::= Lines LnInstructionsVb 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Lines", 21, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 24: // InstructionsFunctionVb2 ::= RETURN_VB 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb2", 19, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 23: // InstructionsFunctionVb2 ::= RETURN_VB ValuesVb 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb2", 19, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 22: // InstructionsFunctionVb2 ::= LnInstructionsVb 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb2", 19, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 21: // InstructionsFunctionVb2 ::= Lines RETURN_VB 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb2", 19, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 20: // InstructionsFunctionVb2 ::= Lines RETURN_VB ValuesVb 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb2", 19, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 19: // InstructionsFunctionVb2 ::= Lines LnInstructionsVb 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb2", 19, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 18: // InstructionsFunctionVb ::= InstructionsFunctionVb2 
            {
                Object RESULT = null;
                RESULT = sma.translateControlerTAC.getcurrentQuads();
                sma.testManager.finishAmbit();
                sma.translateControlerTAC.acceptCurrentBlock();
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb", 18, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 17: // Parameter ::= ID AS_VB Type 
            {
                Object RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)).value;
                int typeleft = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).left;
                int typeright = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).right;
                Object type = (Object) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
                sma.testManager.getParameterControl().insertParameter((Integer) type, id, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Parameter", 17, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 16: // Parameter ::= Parameter COMMA ID AS_VB Type 
            {
                Object RESULT = null;
                int idleft = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)).left;
                int idright = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)).right;
                String id = (String) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)).value;
                int typeleft = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).left;
                int typeright = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).right;
                Object type = (Object) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
                sma.testManager.getParameterControl().insertParameter((Integer) type, id, ((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Parameter", 17, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 4)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 15: // Parameters ::= 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Parameters", 16, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 14: // Parameters ::= Parameter 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Parameters", 16, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 13: // Public ::= 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Public", 11, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 12: // Public ::= PUBLIC 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Public", 11, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 11: // SubVbHeader ::= Public SUB_VB ID PARENTHESIS_A Parameters PARENTHESIS_B 
            {
                Object RESULT = null;
                sma.testManager.creatFatherAmbit();
                sma.translateControlerTAC.createNewQuadrupleBlock();
                sma.testManager.insertParameters();
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("SubVbHeader", 15, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 5)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 10: // SubVb ::= SubVbHeader InstructionsFunctionVb END_VB SUB_VB 
            {
                Object RESULT = null;
                sma.testManager.finishAmbit();
                sma.translateControlerTAC.acceptCurrentBlock();
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("SubVb", 14, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 9: // FunctionVbHeader ::= Public FUNCTION_VB ID PARENTHESIS_A Parameters PARENTHESIS_B AS_VB Type 
            {
                Object RESULT = null;
                sma.testManager.creatFatherAmbit();
                sma.translateControlerTAC.createNewQuadrupleBlock();
                sma.testManager.insertParameters();
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionVbHeader", 13, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 7)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 8: // FunctionVB ::= FunctionVbHeader InstructionsFunctionVb END_VB FUNCTION_VB 
            {
                Object RESULT = null;
                int insleft = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)).left;
                int insright = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)).right;
                Object ins = (Object) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 2)).value;
                sma.translateControlerTAC.convertQuads((ArrayList<Object>) ins);
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionVB", 12, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 7: // VbCode ::= error VbCode 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("VbCode", 4, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 6: // VbCode ::= 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("VbCode", 4, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 5: // VbCode ::= SubVb VbCode 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("VbCode", 4, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 4: // VbCode ::= FunctionVB VbCode 
            {
                Object RESULT = null;

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("VbCode", 4, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 3: // VbSeperator ::= VB_SEPERATOR 
            {
                Object RESULT = null;
                sma.translateControlerTAC.createNewQuadrupleBlock();
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("VbSeperator", 8, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 2: // VB ::= VbSeperator VbCode 
            {
                Object RESULT = null;
                sma.testManager.switchNextTypes();
                sma.translateControlerTAC.acceptCurrentBlock();

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("VB", 1, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 1: // Inicio ::= VB Java Python Programa 
            {
                Object RESULT = null;
                System.out.println("FIN Inicio");
                sma.translateControlerTAC.printQuads();

                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Inicio", 0, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 3)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            return CUP$SyntaxMlgAnalyzer$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 0: // $START ::= Inicio EOF 
            {
                Object RESULT = null;
                int start_valleft = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)).left;
                int start_valright = ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)).right;
                Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)).value;
                RESULT = start_val;
                CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top - 1)), ((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
            /* ACCEPT */
            CUP$SyntaxMlgAnalyzer$parser.done_parsing();
            return CUP$SyntaxMlgAnalyzer$result;

            /* . . . . . .*/
            default:
                throw new Exception(
                        "Invalid action number found in internal parse table");

        }
    }
}
