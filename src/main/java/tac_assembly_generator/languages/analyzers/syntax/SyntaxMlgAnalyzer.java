
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Oct 11 13:05:19 CST 2020
//----------------------------------------------------

package tac_assembly_generator.languages.analyzers.syntax;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import tac_assembly_generator.languages.semantic.verification.TestManager;
import tac_assembly_generator.TAC.TranslateControlerTAC;
import tac_assembly_generator.TAC.quadruple.Operation;
import tac_assembly_generator.TAC.quadruple.Quadruple;
import tac_assembly_generator.TAC.quadruple.BoolQuad;
import tac_assembly_generator.languages.semantic.type.Type;
import tac_assembly_generator.languages.semantic.type.TypeManager;
import tac_assembly_generator.TAC.asst.Switch;
import tac_assembly_generator.languages.semantic.UniquenessTable;
import tac_assembly_generator.TAC.asst.For;
import tac_assembly_generator.languages.semantic.SemanticAsstIdQuad;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Oct 11 13:05:19 CST 2020
  */
public class SyntaxMlgAnalyzer extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SyntaxMlgAnalyzer() {super();}

  /** Constructor which sets the default scanner. */
  public SyntaxMlgAnalyzer(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SyntaxMlgAnalyzer(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u012d\000\002\002\004\000\002\002\006\000\002\003" +
    "\004\000\002\012\003\000\002\006\004\000\002\006\004" +
    "\000\002\006\002\000\002\006\004\000\002\016\006\000" +
    "\002\017\012\000\002\020\006\000\002\021\010\000\002" +
    "\015\003\000\002\015\002\000\002\022\003\000\002\022" +
    "\002\000\002\023\007\000\002\023\005\000\002\024\003" +
    "\000\002\025\004\000\002\025\005\000\002\025\004\000" +
    "\002\025\003\000\002\025\004\000\002\025\003\000\002" +
    "\027\004\000\002\027\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\030\006\000" +
    "\002\030\006\000\002\030\006\000\002\031\010\000\002" +
    "\031\010\000\002\032\005\000\002\032\003\000\002\033" +
    "\003\000\002\033\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\035\005\000\002\036\006\000" +
    "\002\037\010\000\002\037\006\000\002\040\003\000\002" +
    "\041\004\000\002\041\005\000\002\041\005\000\002\041" +
    "\002\000\002\042\005\000\002\042\005\000\002\042\003" +
    "\000\002\043\005\000\002\043\005\000\002\043\005\000" +
    "\002\043\003\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\005\000\002\045" +
    "\006\000\002\046\004\000\002\047\005\000\002\047\003" +
    "\000\002\050\005\000\002\050\003\000\002\051\004\000" +
    "\002\051\003\000\002\052\003\000\002\052\003\000\002" +
    "\052\005\000\002\052\005\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\054\007\000\002\055\003\000" +
    "\002\056\004\000\002\057\010\000\002\057\006\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\060" +
    "\006\000\002\060\004\000\002\061\004\000\002\061\002" +
    "\000\002\062\005\000\002\063\003\000\002\063\003\000" +
    "\002\064\007\000\002\065\005\000\002\066\004\000\002" +
    "\066\007\000\002\066\002\000\002\067\003\000\002\067" +
    "\002\000\002\070\006\000\002\071\005\000\002\072\005" +
    "\000\002\072\004\000\002\073\004\000\002\073\004\000" +
    "\002\074\003\000\002\074\003\000\002\074\003\000\002" +
    "\074\003\000\002\004\004\000\002\007\004\000\002\007" +
    "\002\000\002\075\006\000\002\076\005\000\002\100\006" +
    "\000\002\100\004\000\002\101\004\000\002\101\003\000" +
    "\002\102\003\000\002\102\003\000\002\102\003\000\002" +
    "\102\003\000\002\142\006\000\002\077\007\000\002\103" +
    "\006\000\002\103\005\000\002\104\010\000\002\104\007" +
    "\000\002\105\006\000\002\105\005\000\002\106\010\000" +
    "\002\106\007\000\002\107\005\000\002\107\003\000\002" +
    "\110\004\000\002\110\003\000\002\111\003\000\002\111" +
    "\003\000\002\112\005\000\002\112\003\000\002\113\005" +
    "\000\002\113\003\000\002\114\003\000\002\114\003\000" +
    "\002\114\003\000\002\114\003\000\002\115\004\000\002" +
    "\115\004\000\002\115\003\000\002\115\004\000\002\115" +
    "\004\000\002\115\003\000\002\115\003\000\002\116\006" +
    "\000\002\116\006\000\002\117\006\000\002\117\006\000" +
    "\002\117\006\000\002\120\006\000\002\120\006\000\002" +
    "\120\010\000\002\121\017\000\002\121\016\000\002\122" +
    "\006\000\002\123\005\000\002\123\006\000\002\123\006" +
    "\000\002\123\006\000\002\123\006\000\002\124\005\000" +
    "\002\124\004\000\002\125\005\000\002\126\003\000\002" +
    "\126\006\000\002\127\007\000\002\130\006\000\002\131" +
    "\006\000\002\131\004\000\002\131\002\000\002\132\006" +
    "\000\002\133\004\000\002\133\007\000\002\133\003\000" +
    "\002\134\004\000\002\134\003\000\002\135\007\000\002" +
    "\136\004\000\002\136\002\000\002\137\003\000\002\137" +
    "\003\000\002\137\003\000\002\137\003\000\002\137\003" +
    "\000\002\137\003\000\002\140\004\000\002\140\005\000" +
    "\002\140\003\000\002\140\003\000\002\140\005\000\002" +
    "\141\005\000\002\141\003\000\002\005\004\000\002\010" +
    "\002\000\002\011\007\000\002\143\004\000\002\143\002" +
    "\000\002\145\005\000\002\145\004\000\002\146\007\000" +
    "\002\146\010\000\002\147\006\000\002\147\005\000\002" +
    "\150\005\000\002\150\005\000\002\151\005\000\002\151" +
    "\003\000\002\152\007\000\002\152\005\000\002\153\005" +
    "\000\002\153\004\000\002\154\004\000\002\154\006\000" +
    "\002\144\011\000\002\155\004\000\002\155\003\000\002" +
    "\156\004\000\002\156\004\000\002\156\003\000\002\156" +
    "\003\000\002\156\004\000\002\156\004\000\002\156\004" +
    "\000\002\156\004\000\002\157\004\000\002\160\006\000" +
    "\002\160\004\000\002\161\004\000\002\161\003\000\002" +
    "\161\005\000\002\161\002\000\002\162\005\000\002\162" +
    "\006\000\002\163\006\000\002\163\006\000\002\164\006" +
    "\000\002\165\006\000\002\166\004\000\002\166\007\000" +
    "\002\166\003\000\002\167\004\000\002\167\003\000\002" +
    "\170\006\000\002\171\006\000\002\171\006\000\002\171" +
    "\010\000\002\172\015\000\002\172\014\000\002\173\006" +
    "\000\002\174\005\000\002\174\006\000\002\174\006\000" +
    "\002\174\006\000\002\174\006\000\002\175\006\000\002" +
    "\175\005\000\002\176\005\000\002\176\003\000\002\177" +
    "\003\000\002\177\003\000\002\177\003\000\002\177\003" +
    "\000\002\200\005\000\002\201\011\000\002\202\006\000" +
    "\002\202\005\000\002\203\005\000\002\203\003\000\002" +
    "\204\005\000\002\204\003\000\002\205\003\000\002\205" +
    "\003\000\002\205\003\000\002\205\003\000\002\205\003" +
    "\000\002\210\004\000\002\206\004\000\002\206\005\000" +
    "\002\206\003\000\002\206\003\000\002\206\003\000\002" +
    "\206\005\000\002\207\005\000\002\207\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02a3\000\004\004\004\001\002\000\014\003\ufffe\033" +
    "\ufffe\055\ufffe\060\ufffe\062\ufffe\001\002\000\004\055\345" +
    "\001\002\000\014\003\012\033\015\055\ufffb\060\ufff4\062" +
    "\ufff4\001\002\000\004\002\010\001\002\000\004\002\001" +
    "\001\002\000\004\055\uffff\001\002\000\014\003\012\033" +
    "\015\055\ufffb\060\ufff4\062\ufff4\001\002\000\014\003\012" +
    "\033\015\055\ufffb\060\ufff4\062\ufff4\001\002\000\034\003" +
    "\076\030\075\031\107\032\060\034\106\035\057\036\065" +
    "\041\062\051\063\056\071\063\064\064\054\076\067\001" +
    "\002\000\006\060\ufff5\062\ufff5\001\002\000\014\003\012" +
    "\033\015\055\ufffb\060\ufff4\062\ufff4\001\002\000\034\003" +
    "\076\030\075\031\107\032\060\034\106\035\057\036\065" +
    "\041\062\051\063\056\071\063\064\064\054\076\067\001" +
    "\002\000\006\060\022\062\021\001\002\000\004\051\044" +
    "\001\002\000\004\051\023\001\002\000\004\007\024\001" +
    "\002\000\006\010\ufff2\051\025\001\002\000\004\057\042" +
    "\001\002\000\004\010\037\001\002\000\006\010\ufff3\021" +
    "\030\001\002\000\004\051\031\001\002\000\004\057\032" +
    "\001\002\000\010\022\035\023\036\024\034\001\002\000" +
    "\006\010\ufff1\021\ufff1\001\002\000\056\003\uffa5\006\uffa5" +
    "\010\uffa5\021\uffa5\030\uffa5\031\uffa5\032\uffa5\034\uffa5\035" +
    "\uffa5\036\uffa5\041\uffa5\042\uffa5\051\uffa5\056\uffa5\061\uffa5" +
    "\063\uffa5\064\uffa5\071\uffa5\073\uffa5\074\uffa5\076\uffa5\077" +
    "\uffa5\001\002\000\056\003\uffa7\006\uffa7\010\uffa7\021\uffa7" +
    "\030\uffa7\031\uffa7\032\uffa7\034\uffa7\035\uffa7\036\uffa7\041" +
    "\uffa7\042\uffa7\051\uffa7\056\uffa7\061\uffa7\063\uffa7\064\uffa7" +
    "\071\uffa7\073\uffa7\074\uffa7\076\uffa7\077\uffa7\001\002\000" +
    "\056\003\uffa6\006\uffa6\010\uffa6\021\uffa6\030\uffa6\031\uffa6" +
    "\032\uffa6\034\uffa6\035\uffa6\036\uffa6\041\uffa6\042\uffa6\051" +
    "\uffa6\056\uffa6\061\uffa6\063\uffa6\064\uffa6\071\uffa6\073\uffa6" +
    "\074\uffa6\076\uffa6\077\uffa6\001\002\000\004\057\040\001" +
    "\002\000\010\022\035\023\036\024\034\001\002\000\034" +
    "\003\ufff8\030\ufff8\031\ufff8\032\ufff8\034\ufff8\035\ufff8\036" +
    "\ufff8\041\ufff8\051\ufff8\056\ufff8\063\ufff8\064\ufff8\076\ufff8" +
    "\001\002\000\010\022\035\023\036\024\034\001\002\000" +
    "\006\010\ufff0\021\ufff0\001\002\000\004\007\045\001\002" +
    "\000\006\010\ufff2\051\025\001\002\000\004\010\047\001" +
    "\002\000\034\003\ufff6\030\ufff6\031\ufff6\032\ufff6\034\ufff6" +
    "\035\ufff6\036\ufff6\041\ufff6\051\ufff6\056\ufff6\063\ufff6\064" +
    "\ufff6\076\ufff6\001\002\000\050\003\uffe5\030\uffe5\031\uffe5" +
    "\032\uffe5\034\uffe5\035\uffe5\036\uffe5\041\uffe5\042\uffe5\051" +
    "\uffe5\056\uffe5\061\uffe5\063\uffe5\064\uffe5\071\uffe5\073\uffe5" +
    "\074\uffe5\076\uffe5\077\uffe5\001\002\000\050\003\uffd5\030" +
    "\uffd5\031\uffd5\032\uffd5\034\uffd5\035\uffd5\036\uffd5\041\uffd5" +
    "\042\uffd5\051\uffd5\056\uffd5\061\uffd5\063\uffd5\064\uffd5\071" +
    "\uffd5\073\uffd5\074\uffd5\076\uffd5\077\uffd5\001\002\000\004" +
    "\051\327\001\002\000\004\067\316\001\002\000\004\017" +
    "\305\001\002\000\050\003\uffd4\030\uffd4\031\uffd4\032\uffd4" +
    "\034\uffd4\035\uffd4\036\uffd4\041\uffd4\042\uffd4\051\uffd4\056" +
    "\uffd4\061\uffd4\063\uffd4\064\uffd4\071\uffd4\073\uffd4\074\uffd4" +
    "\076\uffd4\077\uffd4\001\002\000\050\003\uff9e\030\uff9e\031" +
    "\uff9e\032\uff9e\034\uff9e\035\uff9e\036\uff9e\041\uff9e\042\uff9e" +
    "\051\uff9e\056\uff9e\061\uff9e\063\uff9e\064\uff9e\071\uff9e\073" +
    "\uff9e\074\uff9e\076\uff9e\077\uff9e\001\002\000\022\007\126" +
    "\027\131\037\124\040\125\051\127\052\133\053\123\054" +
    "\116\001\002\000\004\007\301\001\002\000\034\003\076" +
    "\030\075\031\107\032\060\034\106\035\057\036\065\041" +
    "\062\051\063\056\071\063\276\064\054\076\067\001\002" +
    "\000\022\007\126\027\131\037\124\040\125\051\127\052" +
    "\133\053\123\054\116\001\002\000\004\006\272\001\002" +
    "\000\032\007\151\042\uffe9\050\251\051\127\052\133\053" +
    "\123\054\116\061\uffe9\071\uffe9\073\uffe9\074\uffe9\077\uffe9" +
    "\001\002\000\034\003\uffab\030\uffab\031\uffab\032\uffab\034" +
    "\uffab\035\uffab\036\uffab\041\uffab\051\uffab\056\uffab\063\uffab" +
    "\064\uffab\076\uffab\001\002\000\050\003\uff9f\030\uff9f\031" +
    "\uff9f\032\uff9f\034\uff9f\035\uff9f\036\uff9f\041\uff9f\042\uff9f" +
    "\051\uff9f\056\uff9f\061\uff9f\063\uff9f\064\uff9f\071\uff9f\073" +
    "\uff9f\074\uff9f\076\uff9f\077\uff9f\001\002\000\004\077\264" +
    "\001\002\000\034\003\076\030\075\031\107\032\060\034" +
    "\106\035\057\036\065\041\062\051\063\056\071\063\064" +
    "\064\054\076\067\001\002\000\004\051\236\001\002\000" +
    "\050\003\uffe3\030\uffe3\031\uffe3\032\uffe3\034\uffe3\035\uffe3" +
    "\036\uffe3\041\uffe3\042\uffe3\051\uffe3\056\uffe3\061\uffe3\063" +
    "\uffe3\064\uffe3\071\uffe3\073\uffe3\074\uffe3\076\uffe3\077\uffe3" +
    "\001\002\000\050\003\uffe6\030\uffe6\031\uffe6\032\uffe6\034" +
    "\uffe6\035\uffe6\036\uffe6\041\uffe6\042\uffe6\051\uffe6\056\uffe6" +
    "\061\uffe6\063\uffe6\064\uffe6\071\uffe6\073\uffe6\074\uffe6\076" +
    "\uffe6\077\uffe6\001\002\000\050\003\uffe2\030\uffe2\031\uffe2" +
    "\032\uffe2\034\uffe2\035\uffe2\036\uffe2\041\uffe2\042\uffe2\051" +
    "\uffe2\056\uffe2\061\uffe2\063\uffe2\064\uffe2\071\uffe2\073\uffe2" +
    "\074\uffe2\076\uffe2\077\uffe2\001\002\000\004\007\233\001" +
    "\002\000\050\003\uffe0\030\uffe0\031\uffe0\032\uffe0\034\uffe0" +
    "\035\uffe0\036\uffe0\041\uffe0\042\uffe0\051\uffe0\056\uffe0\061" +
    "\uffe0\063\uffe0\064\uffe0\071\uffe0\073\uffe0\074\uffe0\076\uffe0" +
    "\077\uffe0\001\002\000\016\042\uffef\061\uffef\071\uffef\073" +
    "\uffef\074\uffef\077\uffef\001\002\000\034\003\076\030\075" +
    "\031\107\032\060\034\106\035\057\036\065\041\062\051" +
    "\063\056\071\063\064\064\054\076\067\001\002\000\050" +
    "\003\uffe4\030\uffe4\031\uffe4\032\uffe4\034\uffe4\035\uffe4\036" +
    "\uffe4\041\uffe4\042\uffe4\051\uffe4\056\uffe4\061\uffe4\063\uffe4" +
    "\064\uffe4\071\uffe4\073\uffe4\074\uffe4\076\uffe4\077\uffe4\001" +
    "\002\000\050\003\uffe1\030\uffe1\031\uffe1\032\uffe1\034\uffe1" +
    "\035\uffe1\036\uffe1\041\uffe1\042\uffe1\051\uffe1\056\uffe1\061" +
    "\uffe1\063\uffe1\064\uffe1\071\uffe1\073\uffe1\074\uffe1\076\uffe1" +
    "\077\uffe1\001\002\000\004\077\203\001\002\000\004\061" +
    "\177\001\002\000\034\003\076\030\075\031\107\032\060" +
    "\034\106\035\057\036\065\041\062\051\063\056\071\063" +
    "\064\064\054\076\067\001\002\000\004\051\uffcf\001\002" +
    "\000\004\007\172\001\002\000\034\003\076\030\075\031" +
    "\107\032\060\034\106\035\057\036\065\041\062\051\063" +
    "\056\071\063\064\064\054\076\067\001\002\000\050\003" +
    "\uffd6\030\uffd6\031\uffd6\032\uffd6\034\uffd6\035\uffd6\036\uffd6" +
    "\041\uffd6\042\uffd6\051\uffd6\056\uffd6\061\uffd6\063\uffd6\064" +
    "\uffd6\071\uffd6\073\uffd6\074\uffd6\076\uffd6\077\uffd6\001\002" +
    "\000\050\003\uffe7\030\uffe7\031\uffe7\032\uffe7\034\uffe7\035" +
    "\uffe7\036\uffe7\041\uffe7\042\uffeb\051\uffe7\056\uffe7\061\uffeb" +
    "\063\uffe7\064\uffe7\071\uffeb\073\uffeb\074\uffeb\076\uffe7\077" +
    "\uffeb\001\002\000\004\073\114\001\002\000\004\035\115" +
    "\001\002\000\022\007\126\027\131\037\124\040\125\051" +
    "\127\052\133\053\123\054\116\001\002\000\142\003\uffc2" +
    "\006\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015" +
    "\uffc2\020\uffc2\021\uffc2\025\uffc2\026\uffc2\030\uffc2\031\uffc2" +
    "\032\uffc2\034\uffc2\035\uffc2\036\uffc2\041\uffc2\042\uffc2\043" +
    "\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\051\uffc2\056\uffc2" +
    "\057\uffc2\061\uffc2\063\uffc2\064\uffc2\067\uffc2\070\uffc2\071" +
    "\uffc2\072\uffc2\073\uffc2\074\uffc2\075\uffc2\076\uffc2\077\uffc2" +
    "\107\uffc2\110\uffc2\111\uffc2\112\uffc2\114\uffc2\115\uffc2\116" +
    "\uffc2\125\uffc2\001\002\000\060\003\uffb7\010\uffb7\025\uffb7" +
    "\026\uffb7\030\uffb7\031\uffb7\032\uffb7\034\uffb7\035\uffb7\036" +
    "\uffb7\041\uffb7\042\uffb7\051\uffb7\056\uffb7\061\uffb7\063\uffb7" +
    "\064\uffb7\071\uffb7\073\uffb7\074\uffb7\075\uffb7\076\uffb7\077" +
    "\uffb7\001\002\000\134\003\uffc4\006\uffc4\010\uffc4\011\uffc4" +
    "\012\uffc4\013\uffc4\014\uffc4\015\uffc4\020\uffc4\021\uffc4\030" +
    "\uffc4\031\uffc4\032\uffc4\034\uffc4\035\uffc4\036\uffc4\041\uffc4" +
    "\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\051" +
    "\uffc4\056\uffc4\057\uffc4\061\uffc4\063\uffc4\064\uffc4\067\uffc4" +
    "\070\uffc4\071\uffc4\072\uffc4\073\uffc4\074\uffc4\076\uffc4\077" +
    "\uffc4\107\uffc4\110\uffc4\111\uffc4\112\uffc4\114\uffc4\115\uffc4" +
    "\116\uffc4\125\uffc4\001\002\000\052\003\uffac\025\170\030" +
    "\uffac\031\uffac\032\uffac\034\uffac\035\uffac\036\uffac\041\uffac" +
    "\042\uffac\051\uffac\056\uffac\061\uffac\063\uffac\064\uffac\071" +
    "\uffac\073\uffac\074\uffac\076\uffac\077\uffac\001\002\000\134" +
    "\003\uffc8\006\uffc8\010\uffc8\011\uffc8\012\uffc8\013\157\014" +
    "\160\015\156\020\uffc8\021\uffc8\030\uffc8\031\uffc8\032\uffc8" +
    "\034\uffc8\035\uffc8\036\uffc8\041\uffc8\042\uffc8\043\uffc8\044" +
    "\uffc8\045\uffc8\046\uffc8\047\uffc8\051\uffc8\056\uffc8\057\uffc8" +
    "\061\uffc8\063\uffc8\064\uffc8\067\uffc8\070\uffc8\071\uffc8\072" +
    "\uffc8\073\uffc8\074\uffc8\076\uffc8\077\uffc8\107\uffc8\110\uffc8" +
    "\111\uffc8\112\uffc8\114\uffc8\115\uffc8\116\uffc8\125\uffc8\001" +
    "\002\000\142\003\uffc3\006\uffc3\010\uffc3\011\uffc3\012\uffc3" +
    "\013\uffc3\014\uffc3\015\uffc3\020\uffc3\021\uffc3\025\uffc3\026" +
    "\uffc3\030\uffc3\031\uffc3\032\uffc3\034\uffc3\035\uffc3\036\uffc3" +
    "\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047" +
    "\uffc3\051\uffc3\056\uffc3\057\uffc3\061\uffc3\063\uffc3\064\uffc3" +
    "\067\uffc3\070\uffc3\071\uffc3\072\uffc3\073\uffc3\074\uffc3\075" +
    "\uffc3\076\uffc3\077\uffc3\107\uffc3\110\uffc3\111\uffc3\112\uffc3" +
    "\114\uffc3\115\uffc3\116\uffc3\125\uffc3\001\002\000\060\003" +
    "\uffb6\010\uffb6\025\uffb6\026\uffb6\030\uffb6\031\uffb6\032\uffb6" +
    "\034\uffb6\035\uffb6\036\uffb6\041\uffb6\042\uffb6\051\uffb6\056" +
    "\uffb6\061\uffb6\063\uffb6\064\uffb6\071\uffb6\073\uffb6\074\uffb6" +
    "\075\uffb6\076\uffb6\077\uffb6\001\002\000\060\003\uffb5\010" +
    "\uffb5\025\uffb5\026\uffb5\030\uffb5\031\uffb5\032\uffb5\034\uffb5" +
    "\035\uffb5\036\uffb5\041\uffb5\042\uffb5\051\uffb5\056\uffb5\061" +
    "\uffb5\063\uffb5\064\uffb5\071\uffb5\073\uffb5\074\uffb5\075\uffb5" +
    "\076\uffb5\077\uffb5\001\002\000\022\007\126\027\131\037" +
    "\124\040\125\051\127\052\133\053\123\054\116\001\002" +
    "\000\142\003\uffc0\006\uffc0\010\uffc0\011\uffc0\012\uffc0\013" +
    "\uffc0\014\uffc0\015\uffc0\020\uffc0\021\uffc0\025\uffc0\026\uffc0" +
    "\030\uffc0\031\uffc0\032\uffc0\034\uffc0\035\uffc0\036\uffc0\041" +
    "\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0" +
    "\051\uffc0\056\uffc0\057\uffc0\061\uffc0\063\uffc0\064\uffc0\067" +
    "\uffc0\070\uffc0\071\uffc0\072\uffc0\073\uffc0\074\uffc0\075\uffc0" +
    "\076\uffc0\077\uffc0\107\uffc0\110\uffc0\111\uffc0\112\uffc0\114" +
    "\uffc0\115\uffc0\116\uffc0\125\uffc0\001\002\000\022\006\142" +
    "\011\144\012\140\043\147\044\143\045\146\046\141\072" +
    "\150\001\002\000\020\007\126\037\124\040\125\051\127" +
    "\052\133\053\123\054\116\001\002\000\060\003\uffb9\010" +
    "\uffb9\025\uffb9\026\uffb9\030\uffb9\031\uffb9\032\uffb9\034\uffb9" +
    "\035\uffb9\036\uffb9\041\uffb9\042\uffb9\051\uffb9\056\uffb9\061" +
    "\uffb9\063\uffb9\064\uffb9\071\uffb9\073\uffb9\074\uffb9\075\uffb9" +
    "\076\uffb9\077\uffb9\001\002\000\142\003\uffc1\006\uffc1\010" +
    "\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\020\uffc1" +
    "\021\uffc1\025\uffc1\026\uffc1\030\uffc1\031\uffc1\032\uffc1\034" +
    "\uffc1\035\uffc1\036\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1" +
    "\045\uffc1\046\uffc1\047\uffc1\051\uffc1\056\uffc1\057\uffc1\061" +
    "\uffc1\063\uffc1\064\uffc1\067\uffc1\070\uffc1\071\uffc1\072\uffc1" +
    "\073\uffc1\074\uffc1\075\uffc1\076\uffc1\077\uffc1\107\uffc1\110" +
    "\uffc1\111\uffc1\112\uffc1\114\uffc1\115\uffc1\116\uffc1\125\uffc1" +
    "\001\002\000\060\003\uffbb\010\uffbb\025\uffbb\026\135\030" +
    "\uffbb\031\uffbb\032\uffbb\034\uffbb\035\uffbb\036\uffbb\041\uffbb" +
    "\042\uffbb\051\uffbb\056\uffbb\061\uffbb\063\uffbb\064\uffbb\071" +
    "\uffbb\073\uffbb\074\uffbb\075\uffbb\076\uffbb\077\uffbb\001\002" +
    "\000\022\007\126\027\131\037\124\040\125\051\127\052" +
    "\133\053\123\054\116\001\002\000\060\003\uffba\010\uffba" +
    "\025\uffba\026\uffba\030\uffba\031\uffba\032\uffba\034\uffba\035" +
    "\uffba\036\uffba\041\uffba\042\uffba\051\uffba\056\uffba\061\uffba" +
    "\063\uffba\064\uffba\071\uffba\073\uffba\074\uffba\075\uffba\076" +
    "\uffba\077\uffba\001\002\000\060\003\uffb8\010\uffb8\025\uffb8" +
    "\026\uffb8\030\uffb8\031\uffb8\032\uffb8\034\uffb8\035\uffb8\036" +
    "\uffb8\041\uffb8\042\uffb8\051\uffb8\056\uffb8\061\uffb8\063\uffb8" +
    "\064\uffb8\071\uffb8\073\uffb8\074\uffb8\075\uffb8\076\uffb8\077" +
    "\uffb8\001\002\000\014\007\151\051\127\052\133\053\123" +
    "\054\116\001\002\000\014\007\uffad\051\uffad\052\uffad\053" +
    "\uffad\054\uffad\001\002\000\014\007\uffb2\051\uffb2\052\uffb2" +
    "\053\uffb2\054\uffb2\001\002\000\014\007\uffaf\051\uffaf\052" +
    "\uffaf\053\uffaf\054\uffaf\001\002\000\014\007\151\051\127" +
    "\052\133\053\123\054\116\001\002\000\014\007\151\051" +
    "\127\052\133\053\123\054\116\001\002\000\014\007\uffae" +
    "\051\uffae\052\uffae\053\uffae\054\uffae\001\002\000\014\007" +
    "\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\001\002\000\014" +
    "\007\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\001\002\000" +
    "\014\007\151\051\127\052\133\053\123\054\116\001\002" +
    "\000\060\003\uffb4\010\uffb4\025\uffb4\026\uffb4\030\uffb4\031" +
    "\uffb4\032\uffb4\034\uffb4\035\uffb4\036\uffb4\041\uffb4\042\uffb4" +
    "\051\uffb4\056\uffb4\061\uffb4\063\uffb4\064\uffb4\071\uffb4\073" +
    "\uffb4\074\uffb4\075\uffb4\076\uffb4\077\uffb4\001\002\000\010" +
    "\010\154\011\144\012\140\001\002\000\142\003\uffbf\006" +
    "\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf" +
    "\020\uffbf\021\uffbf\025\uffbf\026\uffbf\030\uffbf\031\uffbf\032" +
    "\uffbf\034\uffbf\035\uffbf\036\uffbf\041\uffbf\042\uffbf\043\uffbf" +
    "\044\uffbf\045\uffbf\046\uffbf\047\uffbf\051\uffbf\056\uffbf\057" +
    "\uffbf\061\uffbf\063\uffbf\064\uffbf\067\uffbf\070\uffbf\071\uffbf" +
    "\072\uffbf\073\uffbf\074\uffbf\075\uffbf\076\uffbf\077\uffbf\107" +
    "\uffbf\110\uffbf\111\uffbf\112\uffbf\114\uffbf\115\uffbf\116\uffbf" +
    "\125\uffbf\001\002\000\134\003\uffca\006\uffca\010\uffca\011" +
    "\uffca\012\uffca\013\157\014\160\015\156\020\uffca\021\uffca" +
    "\030\uffca\031\uffca\032\uffca\034\uffca\035\uffca\036\uffca\041" +
    "\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca" +
    "\051\uffca\056\uffca\057\uffca\061\uffca\063\uffca\064\uffca\067" +
    "\uffca\070\uffca\071\uffca\072\uffca\073\uffca\074\uffca\076\uffca" +
    "\077\uffca\107\uffca\110\uffca\111\uffca\112\uffca\114\uffca\115" +
    "\uffca\116\uffca\125\uffca\001\002\000\014\007\151\051\127" +
    "\052\133\053\123\054\116\001\002\000\014\007\151\051" +
    "\127\052\133\053\123\054\116\001\002\000\014\007\151" +
    "\051\127\052\133\053\123\054\116\001\002\000\134\003" +
    "\uffc6\006\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6" +
    "\015\uffc6\020\uffc6\021\uffc6\030\uffc6\031\uffc6\032\uffc6\034" +
    "\uffc6\035\uffc6\036\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6" +
    "\045\uffc6\046\uffc6\047\uffc6\051\uffc6\056\uffc6\057\uffc6\061" +
    "\uffc6\063\uffc6\064\uffc6\067\uffc6\070\uffc6\071\uffc6\072\uffc6" +
    "\073\uffc6\074\uffc6\076\uffc6\077\uffc6\107\uffc6\110\uffc6\111" +
    "\uffc6\112\uffc6\114\uffc6\115\uffc6\116\uffc6\125\uffc6\001\002" +
    "\000\134\003\uffc7\006\uffc7\010\uffc7\011\uffc7\012\uffc7\013" +
    "\uffc7\014\uffc7\015\uffc7\020\uffc7\021\uffc7\030\uffc7\031\uffc7" +
    "\032\uffc7\034\uffc7\035\uffc7\036\uffc7\041\uffc7\042\uffc7\043" +
    "\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\051\uffc7\056\uffc7" +
    "\057\uffc7\061\uffc7\063\uffc7\064\uffc7\067\uffc7\070\uffc7\071" +
    "\uffc7\072\uffc7\073\uffc7\074\uffc7\076\uffc7\077\uffc7\107\uffc7" +
    "\110\uffc7\111\uffc7\112\uffc7\114\uffc7\115\uffc7\116\uffc7\125" +
    "\uffc7\001\002\000\134\003\uffc5\006\uffc5\010\uffc5\011\uffc5" +
    "\012\uffc5\013\uffc5\014\uffc5\015\uffc5\020\uffc5\021\uffc5\030" +
    "\uffc5\031\uffc5\032\uffc5\034\uffc5\035\uffc5\036\uffc5\041\uffc5" +
    "\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\051" +
    "\uffc5\056\uffc5\057\uffc5\061\uffc5\063\uffc5\064\uffc5\067\uffc5" +
    "\070\uffc5\071\uffc5\072\uffc5\073\uffc5\074\uffc5\076\uffc5\077" +
    "\uffc5\107\uffc5\110\uffc5\111\uffc5\112\uffc5\114\uffc5\115\uffc5" +
    "\116\uffc5\125\uffc5\001\002\000\134\003\uffc9\006\uffc9\010" +
    "\uffc9\011\uffc9\012\uffc9\013\157\014\160\015\156\020\uffc9" +
    "\021\uffc9\030\uffc9\031\uffc9\032\uffc9\034\uffc9\035\uffc9\036" +
    "\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9" +
    "\047\uffc9\051\uffc9\056\uffc9\057\uffc9\061\uffc9\063\uffc9\064" +
    "\uffc9\067\uffc9\070\uffc9\071\uffc9\072\uffc9\073\uffc9\074\uffc9" +
    "\076\uffc9\077\uffc9\107\uffc9\110\uffc9\111\uffc9\112\uffc9\114" +
    "\uffc9\115\uffc9\116\uffc9\125\uffc9\001\002\000\006\010\167" +
    "\025\170\001\002\000\024\006\142\010\154\011\144\012" +
    "\140\043\147\044\143\045\146\046\141\072\150\001\002" +
    "\000\060\003\uffb3\010\uffb3\025\uffb3\026\uffb3\030\uffb3\031" +
    "\uffb3\032\uffb3\034\uffb3\035\uffb3\036\uffb3\041\uffb3\042\uffb3" +
    "\051\uffb3\056\uffb3\061\uffb3\063\uffb3\064\uffb3\071\uffb3\073" +
    "\uffb3\074\uffb3\075\uffb3\076\uffb3\077\uffb3\001\002\000\022" +
    "\007\126\027\131\037\124\040\125\051\127\052\133\053" +
    "\123\054\116\001\002\000\060\003\uffbc\010\uffbc\025\uffbc" +
    "\026\135\030\uffbc\031\uffbc\032\uffbc\034\uffbc\035\uffbc\036" +
    "\uffbc\041\uffbc\042\uffbc\051\uffbc\056\uffbc\061\uffbc\063\uffbc" +
    "\064\uffbc\071\uffbc\073\uffbc\074\uffbc\075\uffbc\076\uffbc\077" +
    "\uffbc\001\002\000\004\050\173\001\002\000\004\010\174" +
    "\001\002\000\050\003\uffdd\030\uffdd\031\uffdd\032\uffdd\034" +
    "\uffdd\035\uffdd\036\uffdd\041\uffdd\042\uffdd\051\uffdd\056\uffdd" +
    "\061\uffdd\063\uffdd\064\uffdd\071\uffdd\073\uffdd\074\uffdd\076" +
    "\uffdd\077\uffdd\001\002\000\004\071\176\001\002\000\050" +
    "\003\uffd3\030\uffd3\031\uffd3\032\uffd3\034\uffd3\035\uffd3\036" +
    "\uffd3\041\uffd3\042\uffd3\051\uffd3\056\uffd3\061\uffd3\063\uffd3" +
    "\064\uffd3\071\uffd3\073\uffd3\074\uffd3\076\uffd3\077\uffd3\001" +
    "\002\000\004\060\200\001\002\000\014\003\ufff9\033\ufff9" +
    "\055\ufff9\060\ufff9\062\ufff9\001\002\000\034\003\076\030" +
    "\075\031\107\032\060\034\106\035\057\036\065\041\062" +
    "\051\063\056\071\063\064\064\054\076\067\001\002\000" +
    "\006\061\213\077\203\001\002\000\014\042\206\051\204" +
    "\052\211\053\207\054\210\001\002\000\034\003\uff8d\030" +
    "\uff8d\031\uff8d\032\uff8d\034\uff8d\035\uff8d\036\uff8d\041\uff8d" +
    "\051\uff8d\056\uff8d\063\uff8d\064\uff8d\076\uff8d\001\002\000" +
    "\034\003\uff92\030\uff92\031\uff92\032\uff92\034\uff92\035\uff92" +
    "\036\uff92\041\uff92\051\uff92\056\uff92\063\uff92\064\uff92\076" +
    "\uff92\001\002\000\034\003\uff91\030\uff91\031\uff91\032\uff91" +
    "\034\uff91\035\uff91\036\uff91\041\uff91\051\uff91\056\uff91\063" +
    "\uff91\064\uff91\076\uff91\001\002\000\034\003\uff90\030\uff90" +
    "\031\uff90\032\uff90\034\uff90\035\uff90\036\uff90\041\uff90\051" +
    "\uff90\056\uff90\063\uff90\064\uff90\076\uff90\001\002\000\034" +
    "\003\uff8f\030\uff8f\031\uff8f\032\uff8f\034\uff8f\035\uff8f\036" +
    "\uff8f\041\uff8f\051\uff8f\056\uff8f\063\uff8f\064\uff8f\076\uff8f" +
    "\001\002\000\034\003\uff8e\030\uff8e\031\uff8e\032\uff8e\034" +
    "\uff8e\035\uff8e\036\uff8e\041\uff8e\051\uff8e\056\uff8e\063\uff8e" +
    "\064\uff8e\076\uff8e\001\002\000\034\003\076\030\075\031" +
    "\107\032\060\034\106\035\057\036\065\041\062\051\063" +
    "\056\071\063\064\064\054\076\067\001\002\000\004\076" +
    "\214\001\002\000\050\003\uff96\030\uff96\031\uff96\032\uff96" +
    "\034\uff96\035\uff96\036\uff96\041\uff96\042\uff96\051\uff96\056" +
    "\uff96\061\uff96\063\uff96\064\uff96\071\uff96\073\uff96\074\uff96" +
    "\076\uff96\077\uff96\001\002\000\006\061\uff94\077\uff94\001" +
    "\002\000\006\061\uff93\077\uff93\001\002\000\010\042\221" +
    "\061\uff99\074\222\001\002\000\004\061\231\001\002\000" +
    "\034\003\076\030\075\031\107\032\060\034\106\035\057" +
    "\036\065\041\062\051\063\056\071\063\064\064\054\076" +
    "\067\001\002\000\022\007\126\027\131\037\124\040\125" +
    "\051\127\052\133\053\123\054\116\001\002\000\040\003" +
    "\uff97\025\170\030\uff97\031\uff97\032\uff97\034\uff97\035\uff97" +
    "\036\uff97\041\uff97\051\uff97\056\uff97\063\uff97\064\uff97\075" +
    "\225\076\uff97\001\002\000\034\003\076\030\075\031\107" +
    "\032\060\034\106\035\057\036\065\041\062\051\063\056" +
    "\071\063\064\064\054\076\067\001\002\000\034\003\uff98" +
    "\030\uff98\031\uff98\032\uff98\034\uff98\035\uff98\036\uff98\041" +
    "\uff98\051\uff98\056\uff98\063\uff98\064\uff98\076\uff98\001\002" +
    "\000\010\042\221\061\uff99\074\222\001\002\000\004\061" +
    "\uff9a\001\002\000\004\061\uff9b\001\002\000\004\041\232" +
    "\001\002\000\050\003\uff9d\030\uff9d\031\uff9d\032\uff9d\034" +
    "\uff9d\035\uff9d\036\uff9d\041\uff9d\042\uff9d\051\uff9d\056\uff9d" +
    "\061\uff9d\063\uff9d\064\uff9d\071\uff9d\073\uff9d\074\uff9d\076" +
    "\uff9d\077\uff9d\001\002\000\004\050\234\001\002\000\004" +
    "\010\235\001\002\000\050\003\uffdf\030\uffdf\031\uffdf\032" +
    "\uffdf\034\uffdf\035\uffdf\036\uffdf\041\uffdf\042\uffdf\051\uffdf" +
    "\056\uffdf\061\uffdf\063\uffdf\064\uffdf\071\uffdf\073\uffdf\074" +
    "\uffdf\076\uffdf\077\uffdf\001\002\000\012\006\246\021\uffa1" +
    "\057\uffa1\112\uffa1\001\002\000\006\021\243\057\255\001" +
    "\002\000\052\003\uffaa\021\241\030\uffaa\031\uffaa\032\uffaa" +
    "\034\uffaa\035\uffaa\036\uffaa\041\uffaa\042\uffaa\051\uffaa\056" +
    "\uffaa\061\uffaa\063\uffaa\064\uffaa\071\uffaa\073\uffaa\074\uffaa" +
    "\076\uffaa\077\uffaa\001\002\000\004\051\236\001\002\000" +
    "\006\021\243\057\244\001\002\000\004\051\253\001\002" +
    "\000\010\022\035\023\036\024\034\001\002\000\054\003" +
    "\uffa1\006\246\021\uffa1\030\uffa1\031\uffa1\032\uffa1\034\uffa1" +
    "\035\uffa1\036\uffa1\041\uffa1\042\uffa1\051\uffa1\056\uffa1\061" +
    "\uffa1\063\uffa1\064\uffa1\071\uffa1\073\uffa1\074\uffa1\076\uffa1" +
    "\077\uffa1\001\002\000\016\007\151\050\251\051\127\052" +
    "\133\053\123\054\116\001\002\000\052\003\uffa9\021\uffa9" +
    "\030\uffa9\031\uffa9\032\uffa9\034\uffa9\035\uffa9\036\uffa9\041" +
    "\uffa9\042\uffa9\051\uffa9\056\uffa9\061\uffa9\063\uffa9\064\uffa9" +
    "\071\uffa9\073\uffa9\074\uffa9\076\uffa9\077\uffa9\001\002\000" +
    "\056\003\uffa2\021\uffa2\030\uffa2\031\uffa2\032\uffa2\034\uffa2" +
    "\035\uffa2\036\uffa2\041\uffa2\042\uffa2\051\uffa2\056\uffa2\057" +
    "\uffa2\061\uffa2\063\uffa2\064\uffa2\071\uffa2\073\uffa2\074\uffa2" +
    "\076\uffa2\077\uffa2\112\uffa2\001\002\000\062\003\uffd8\010" +
    "\uffd8\020\uffd8\021\uffd8\030\uffd8\031\uffd8\032\uffd8\034\uffd8" +
    "\035\uffd8\036\uffd8\041\uffd8\042\uffd8\051\uffd8\056\uffd8\057" +
    "\uffd8\061\uffd8\063\uffd8\064\uffd8\071\uffd8\073\uffd8\074\uffd8" +
    "\076\uffd8\077\uffd8\112\uffd8\001\002\000\066\003\uffd7\010" +
    "\uffd7\011\144\012\140\020\uffd7\021\uffd7\030\uffd7\031\uffd7" +
    "\032\uffd7\034\uffd7\035\uffd7\036\uffd7\041\uffd7\042\uffd7\051" +
    "\uffd7\056\uffd7\057\uffd7\061\uffd7\063\uffd7\064\uffd7\071\uffd7" +
    "\073\uffd7\074\uffd7\076\uffd7\077\uffd7\112\uffd7\001\002\000" +
    "\012\006\246\021\uffa1\057\uffa1\112\uffa1\001\002\000\010" +
    "\021\uffa4\057\uffa4\112\uffa4\001\002\000\010\022\035\023" +
    "\036\024\034\001\002\000\054\003\uffa1\006\246\021\uffa1" +
    "\030\uffa1\031\uffa1\032\uffa1\034\uffa1\035\uffa1\036\uffa1\041" +
    "\uffa1\042\uffa1\051\uffa1\056\uffa1\061\uffa1\063\uffa1\064\uffa1" +
    "\071\uffa1\073\uffa1\074\uffa1\076\uffa1\077\uffa1\001\002\000" +
    "\052\003\uffa8\021\uffa8\030\uffa8\031\uffa8\032\uffa8\034\uffa8" +
    "\035\uffa8\036\uffa8\041\uffa8\042\uffa8\051\uffa8\056\uffa8\061" +
    "\uffa8\063\uffa8\064\uffa8\071\uffa8\073\uffa8\074\uffa8\076\uffa8" +
    "\077\uffa8\001\002\000\010\021\uffa3\057\uffa3\112\uffa3\001" +
    "\002\000\004\061\262\001\002\000\004\035\263\001\002" +
    "\000\050\003\uffbe\030\uffbe\031\uffbe\032\uffbe\034\uffbe\035" +
    "\uffbe\036\uffbe\041\uffbe\042\uffbe\051\uffbe\056\uffbe\061\uffbe" +
    "\063\uffbe\064\uffbe\071\uffbe\073\uffbe\074\uffbe\076\uffbe\077" +
    "\uffbe\001\002\000\004\051\265\001\002\000\004\077\uff95" +
    "\001\002\000\022\010\uffd9\020\270\042\uffd9\061\uffd9\071" +
    "\uffd9\073\uffd9\074\uffd9\077\uffd9\001\002\000\016\042\uffea" +
    "\061\uffea\071\uffea\073\uffea\074\uffea\077\uffea\001\002\000" +
    "\016\007\151\050\251\051\127\052\133\053\123\054\116" +
    "\001\002\000\020\010\uffda\042\uffda\061\uffda\071\uffda\073" +
    "\uffda\074\uffda\077\uffda\001\002\000\016\007\151\050\251" +
    "\051\127\052\133\053\123\054\116\001\002\000\050\003" +
    "\uffa0\030\uffa0\031\uffa0\032\uffa0\034\uffa0\035\uffa0\036\uffa0" +
    "\041\uffa0\042\uffa0\051\uffa0\056\uffa0\061\uffa0\063\uffa0\064" +
    "\uffa0\071\uffa0\073\uffa0\074\uffa0\076\uffa0\077\uffa0\001\002" +
    "\000\040\003\uff97\025\170\030\uff97\031\uff97\032\uff97\034" +
    "\uff97\035\uff97\036\uff97\041\uff97\051\uff97\056\uff97\063\uff97" +
    "\064\uff97\075\225\076\uff97\001\002\000\034\003\uff9c\030" +
    "\uff9c\031\uff9c\032\uff9c\034\uff9c\035\uff9c\036\uff9c\041\uff9c" +
    "\051\uff9c\056\uff9c\063\uff9c\064\uff9c\076\uff9c\001\002\000" +
    "\032\007\151\042\uffec\050\251\051\127\052\133\053\123" +
    "\054\116\061\uffec\071\uffec\073\uffec\074\uffec\077\uffec\001" +
    "\002\000\050\003\uffe8\030\uffe8\031\uffe8\032\uffe8\034\uffe8" +
    "\035\uffe8\036\uffe8\041\uffe8\042\uffee\051\uffe8\056\uffe8\061" +
    "\uffee\063\uffe8\064\uffe8\071\uffee\073\uffee\074\uffee\076\uffe8" +
    "\077\uffee\001\002\000\016\042\uffed\061\uffed\071\uffed\073" +
    "\uffed\074\uffed\077\uffed\001\002\000\004\050\302\001\002" +
    "\000\004\010\303\001\002\000\050\003\uffde\030\uffde\031" +
    "\uffde\032\uffde\034\uffde\035\uffde\036\uffde\041\uffde\042\uffde" +
    "\051\uffde\056\uffde\061\uffde\063\uffde\064\uffde\071\uffde\073" +
    "\uffde\074\uffde\076\uffde\077\uffde\001\002\000\036\003\uffbd" +
    "\025\170\030\uffbd\031\uffbd\032\uffbd\034\uffbd\035\uffbd\036" +
    "\uffbd\041\uffbd\051\uffbd\056\uffbd\063\uffbd\064\uffbd\076\uffbd" +
    "\001\002\000\006\065\307\066\306\001\002\000\004\007" +
    "\313\001\002\000\004\007\310\001\002\000\016\007\151" +
    "\050\251\051\127\052\133\053\123\054\116\001\002\000" +
    "\004\010\312\001\002\000\050\003\uffdc\030\uffdc\031\uffdc" +
    "\032\uffdc\034\uffdc\035\uffdc\036\uffdc\041\uffdc\042\uffdc\051" +
    "\uffdc\056\uffdc\061\uffdc\063\uffdc\064\uffdc\071\uffdc\073\uffdc" +
    "\074\uffdc\076\uffdc\077\uffdc\001\002\000\016\007\151\050" +
    "\251\051\127\052\133\053\123\054\116\001\002\000\004" +
    "\010\315\001\002\000\050\003\uffdb\030\uffdb\031\uffdb\032" +
    "\uffdb\034\uffdb\035\uffdb\036\uffdb\041\uffdb\042\uffdb\051\uffdb" +
    "\056\uffdb\061\uffdb\063\uffdb\064\uffdb\071\uffdb\073\uffdb\074" +
    "\uffdb\076\uffdb\077\uffdb\001\002\000\014\007\151\051\127" +
    "\052\133\053\123\054\116\001\002\000\042\003\uffcb\011" +
    "\144\012\140\030\uffcb\031\uffcb\032\uffcb\034\uffcb\035\uffcb" +
    "\036\uffcb\041\uffcb\051\uffcb\056\uffcb\063\uffcb\064\uffcb\070" +
    "\321\076\uffcb\001\002\000\034\003\uffd2\030\uffd2\031\uffd2" +
    "\032\uffd2\034\uffd2\035\uffd2\036\uffd2\041\uffd2\051\uffd2\056" +
    "\uffd2\063\uffd2\064\uffd2\076\uffd2\001\002\000\016\011\323" +
    "\012\324\051\204\052\211\053\207\054\210\001\002\000" +
    "\034\003\uffce\030\uffce\031\uffce\032\uffce\034\uffce\035\uffce" +
    "\036\uffce\041\uffce\051\uffce\056\uffce\063\uffce\064\uffce\076" +
    "\uffce\001\002\000\012\051\204\052\211\053\207\054\210" +
    "\001\002\000\012\051\204\052\211\053\207\054\210\001" +
    "\002\000\034\003\uffcd\030\uffcd\031\uffcd\032\uffcd\034\uffcd" +
    "\035\uffcd\036\uffcd\041\uffcd\051\uffcd\056\uffcd\063\uffcd\064" +
    "\uffcd\076\uffcd\001\002\000\034\003\uffcc\030\uffcc\031\uffcc" +
    "\032\uffcc\034\uffcc\035\uffcc\036\uffcc\041\uffcc\051\uffcc\056" +
    "\uffcc\063\uffcc\064\uffcc\076\uffcc\001\002\000\006\006\330" +
    "\057\331\001\002\000\014\007\151\051\127\052\133\053" +
    "\123\054\116\001\002\000\010\022\035\023\036\024\034" +
    "\001\002\000\004\006\333\001\002\000\014\007\151\051" +
    "\127\052\133\053\123\054\116\001\002\000\010\011\144" +
    "\012\140\067\uffd1\001\002\000\010\011\144\012\140\067" +
    "\uffd0\001\002\000\004\055\ufffd\001\002\000\004\061\340" +
    "\001\002\000\004\062\341\001\002\000\014\003\ufff7\033" +
    "\ufff7\055\ufff7\060\ufff7\062\ufff7\001\002\000\004\055\ufffc" +
    "\001\002\000\004\055\ufffa\001\002\000\004\100\u01c3\001" +
    "\002\000\006\033\uff8a\100\uff8a\001\002\000\006\033\351" +
    "\100\uff8c\001\002\000\006\033\uff8b\100\uff8b\001\002\000" +
    "\004\113\354\001\002\000\004\101\352\001\002\000\004" +
    "\051\353\001\002\000\004\113\uff88\001\002\000\042\003" +
    "\373\022\035\023\036\024\034\030\366\031\u0107\032\u0101" +
    "\033\u0106\034\362\035\u0103\036\u010e\041\367\051\370\104" +
    "\377\105\376\106\u0104\001\002\000\004\113\u01be\001\002" +
    "\000\044\003\uff84\022\uff84\023\uff84\024\uff84\030\uff84\031" +
    "\uff84\032\uff84\033\uff84\034\uff84\035\uff84\036\uff84\041\uff84" +
    "\051\uff84\104\uff84\105\uff84\106\uff84\114\uff84\001\002\000" +
    "\004\112\u01bd\001\002\000\054\003\uff62\022\uff62\023\uff62" +
    "\024\uff62\030\uff62\031\uff62\032\uff62\033\uff62\034\uff62\035" +
    "\uff62\036\uff62\041\uff62\051\uff62\103\uff62\104\uff62\105\uff62" +
    "\106\uff62\107\uff62\110\uff62\111\uff62\114\uff62\001\002\000" +
    "\044\003\uff83\022\uff83\023\uff83\024\uff83\030\uff83\031\uff83" +
    "\032\uff83\033\uff83\034\uff83\035\uff83\036\uff83\041\uff83\051" +
    "\uff83\104\uff83\105\uff83\106\uff83\114\uff83\001\002\000\004" +
    "\007\u0198\001\002\000\004\113\u0195\001\002\000\004\113" +
    "\u0184\001\002\000\004\112\u0183\001\002\000\004\007\u0180" +
    "\001\002\000\004\007\u017d\001\002\000\004\006\u017b\001" +
    "\002\000\054\003\uff4d\022\uff4d\023\uff4d\024\uff4d\030\uff4d" +
    "\031\uff4d\032\uff4d\033\uff4d\034\uff4d\035\uff4d\036\uff4d\041" +
    "\uff4d\051\uff4d\103\uff4d\104\uff4d\105\uff4d\106\uff4d\107\uff4d" +
    "\110\uff4d\111\uff4d\114\uff4d\001\002\000\004\113\u0178\001" +
    "\002\000\054\003\uff61\022\uff61\023\uff61\024\uff61\030\uff61" +
    "\031\uff61\032\uff61\033\uff61\034\uff61\035\uff61\036\uff61\041" +
    "\uff61\051\uff61\103\uff61\104\uff61\105\uff61\106\uff61\107\uff61" +
    "\110\uff61\111\uff61\114\uff61\001\002\000\044\003\uff82\022" +
    "\uff82\023\uff82\024\uff82\030\uff82\031\uff82\032\uff82\033\uff82" +
    "\034\uff82\035\uff82\036\uff82\041\uff82\051\uff82\104\uff82\105" +
    "\uff82\106\uff82\114\uff82\001\002\000\004\112\u0177\001\002" +
    "\000\004\007\u0174\001\002\000\004\007\u016a\001\002\000" +
    "\004\113\u0166\001\002\000\004\007\u0163\001\002\000\004" +
    "\112\u0162\001\002\000\004\007\u014b\001\002\000\004\007" +
    "\u0148\001\002\000\004\113\u0145\001\002\000\014\022\035" +
    "\023\036\024\034\051\u0130\102\u0132\001\002\000\004\007" +
    "\u012d\001\002\000\054\003\uff65\022\uff65\023\uff65\024\uff65" +
    "\030\uff65\031\uff65\032\uff65\033\uff65\034\uff65\035\uff65\036" +
    "\uff65\041\uff65\051\uff65\103\uff65\104\uff65\105\uff65\106\uff65" +
    "\107\uff65\110\uff65\111\uff65\114\uff65\001\002\000\004\113" +
    "\u0124\001\002\000\044\003\uff80\022\uff80\023\uff80\024\uff80" +
    "\030\uff80\031\uff80\032\uff80\033\uff80\034\uff80\035\uff80\036" +
    "\uff80\041\uff80\051\uff80\104\uff80\105\uff80\106\uff80\114\uff80" +
    "\001\002\000\004\051\236\001\002\000\044\003\373\022" +
    "\035\023\036\024\034\030\366\031\u0107\032\u0101\033\u0106" +
    "\034\362\035\u0103\036\u010e\041\367\051\370\104\377\105" +
    "\376\106\u0104\114\u0122\001\002\000\044\003\uff81\022\uff81" +
    "\023\uff81\024\uff81\030\uff81\031\uff81\032\uff81\033\uff81\034" +
    "\uff81\035\uff81\036\uff81\041\uff81\051\uff81\104\uff81\105\uff81" +
    "\106\uff81\114\uff81\001\002\000\004\113\u010f\001\002\000" +
    "\042\003\373\022\035\023\036\024\034\030\366\031\u0107" +
    "\032\u0101\033\u0111\034\362\035\u0103\036\u010e\041\367\051" +
    "\370\104\377\105\376\106\u0104\001\002\000\054\003\uff72" +
    "\022\uff72\023\uff72\024\uff72\030\uff72\031\uff72\032\uff72\033" +
    "\uff72\034\uff72\035\uff72\036\uff72\041\uff72\051\uff72\103\uff72" +
    "\104\uff72\105\uff72\106\uff72\107\uff72\110\uff72\111\uff72\114" +
    "\uff72\001\002\000\010\022\035\023\036\024\034\001\002" +
    "\000\054\003\373\022\035\023\036\024\034\030\366\031" +
    "\u0107\032\u0101\033\u0111\034\362\035\u0103\036\u010e\041\367" +
    "\051\370\103\u0118\104\377\105\376\106\u0104\107\uff74\110" +
    "\uff74\111\uff74\114\uff74\001\002\000\004\114\u0114\001\002" +
    "\000\004\035\u0103\001\002\000\004\112\u0116\001\002\000" +
    "\054\003\uff59\022\uff59\023\uff59\024\uff59\030\uff59\031\uff59" +
    "\032\uff59\033\uff59\034\uff59\035\uff59\036\uff59\041\uff59\051" +
    "\uff59\103\uff59\104\uff59\105\uff59\106\uff59\107\uff59\110\uff59" +
    "\111\uff59\114\uff59\001\002\000\054\003\uff73\022\uff73\023" +
    "\uff73\024\uff73\030\uff73\031\uff73\032\uff73\033\uff73\034\uff73" +
    "\035\uff73\036\uff73\041\uff73\051\uff73\103\uff73\104\uff73\105" +
    "\uff73\106\uff73\107\uff73\110\uff73\111\uff73\114\uff73\001\002" +
    "\000\016\007\151\050\u011b\051\127\052\133\053\123\054" +
    "\116\001\002\000\012\107\uff75\110\uff75\111\uff75\114\uff75" +
    "\001\002\000\016\011\u011d\107\uff71\110\uff71\111\uff71\114" +
    "\uff71\115\uff71\001\002\000\016\011\uff6e\107\uff6e\110\uff6e" +
    "\111\uff6e\114\uff6e\115\uff6e\001\002\000\020\011\144\012" +
    "\140\107\uff70\110\uff70\111\uff70\114\uff70\115\uff70\001\002" +
    "\000\004\050\u011e\001\002\000\016\011\uff6f\107\uff6f\110" +
    "\uff6f\111\uff6f\114\uff6f\115\uff6f\001\002\000\004\051\236" +
    "\001\002\000\006\021\243\112\uff50\001\002\000\044\003" +
    "\uff85\022\uff85\023\uff85\024\uff85\030\uff85\031\uff85\032\uff85" +
    "\033\uff85\034\uff85\035\uff85\036\uff85\041\uff85\051\uff85\104" +
    "\uff85\105\uff85\106\uff85\114\uff85\001\002\000\006\033\uff89" +
    "\100\uff89\001\002\000\006\021\243\112\uff4f\001\002\000" +
    "\042\003\373\022\035\023\036\024\034\030\366\031\u0107" +
    "\032\u0101\033\u0111\034\362\035\u0103\036\u010e\041\367\051" +
    "\370\104\377\105\376\106\u0104\001\002\000\004\114\u0126" +
    "\001\002\000\056\003\uff47\022\uff47\023\uff47\024\uff47\030" +
    "\uff47\031\uff47\032\uff47\033\uff47\034\uff47\035\uff47\036\uff47" +
    "\041\uff47\042\u0127\051\uff47\103\uff47\104\uff47\105\uff47\106" +
    "\uff47\107\uff47\110\uff47\111\uff47\114\uff47\001\002\000\006" +
    "\041\367\113\u0129\001\002\000\054\003\uff4b\022\uff4b\023" +
    "\uff4b\024\uff4b\030\uff4b\031\uff4b\032\uff4b\033\uff4b\034\uff4b" +
    "\035\uff4b\036\uff4b\041\uff4b\051\uff4b\103\uff4b\104\uff4b\105" +
    "\uff4b\106\uff4b\107\uff4b\110\uff4b\111\uff4b\114\uff4b\001\002" +
    "\000\042\003\373\022\035\023\036\024\034\030\366\031" +
    "\u0107\032\u0101\033\u0111\034\362\035\u0103\036\u010e\041\367" +
    "\051\370\104\377\105\376\106\u0104\001\002\000\054\003" +
    "\uff48\022\uff48\023\uff48\024\uff48\030\uff48\031\uff48\032\uff48" +
    "\033\uff48\034\uff48\035\uff48\036\uff48\041\uff48\051\uff48\103" +
    "\uff48\104\uff48\105\uff48\106\uff48\107\uff48\110\uff48\111\uff48" +
    "\114\uff48\001\002\000\004\114\u012c\001\002\000\054\003" +
    "\uff49\022\uff49\023\uff49\024\uff49\030\uff49\031\uff49\032\uff49" +
    "\033\uff49\034\uff49\035\uff49\036\uff49\041\uff49\051\uff49\103" +
    "\uff49\104\uff49\105\uff49\106\uff49\107\uff49\110\uff49\111\uff49" +
    "\114\uff49\001\002\000\004\050\u012e\001\002\000\004\010" +
    "\u012f\001\002\000\004\112\uff5c\001\002\000\004\007\u0142" +
    "\001\002\000\004\051\u013d\001\002\000\004\051\u0133\001" +
    "\002\000\004\007\u0134\001\002\000\012\010\u0136\022\035" +
    "\023\036\024\034\001\002\000\004\051\u013c\001\002\000" +
    "\004\113\uff76\001\002\000\006\010\u0139\021\u0138\001\002" +
    "\000\010\022\035\023\036\024\034\001\002\000\004\113" +
    "\uff77\001\002\000\004\051\u013b\001\002\000\006\010\uff87" +
    "\021\uff87\001\002\000\006\010\uff86\021\uff86\001\002\000" +
    "\012\006\246\007\u013e\021\uffa1\112\uffa1\001\002\000\012" +
    "\010\u013f\022\035\023\036\024\034\001\002\000\004\113" +
    "\uff7a\001\002\000\006\010\u0141\021\u0138\001\002\000\004" +
    "\113\uff7b\001\002\000\010\022\035\023\036\024\034\001" +
    "\002\000\006\010\u0144\021\u0138\001\002\000\004\113\uff7e" +
    "\001\002\000\042\003\373\022\035\023\036\024\034\030" +
    "\366\031\u0107\032\u0101\033\u0111\034\362\035\u0103\036\u010e" +
    "\041\367\051\370\104\377\105\376\106\u0104\001\002\000" +
    "\004\114\u0147\001\002\000\054\003\uff5a\022\uff5a\023\uff5a" +
    "\024\uff5a\030\uff5a\031\uff5a\032\uff5a\033\uff5a\034\uff5a\035" +
    "\uff5a\036\uff5a\041\uff5a\051\uff5a\103\uff5a\104\uff5a\105\uff5a" +
    "\106\uff5a\107\uff5a\110\uff5a\111\uff5a\114\uff5a\001\002\000" +
    "\004\051\u0149\001\002\000\004\010\u014a\001\002\000\004" +
    "\113\uff46\001\002\000\022\007\u014f\027\u0151\037\u014c\040" +
    "\u014d\051\127\052\133\053\123\054\116\001\002\000\004" +
    "\010\uff35\001\002\000\004\010\uff34\001\002\000\004\010" +
    "\uff31\001\002\000\022\007\u014f\027\u0151\037\u014c\040\u014d" +
    "\051\127\052\133\053\123\054\116\001\002\000\022\011" +
    "\144\012\140\043\u015c\044\u0159\045\u015b\046\u0158\047\u015a" +
    "\116\u0157\001\002\000\022\007\u014f\027\u0151\037\u014c\040" +
    "\u014d\051\127\052\133\053\123\054\116\001\002\000\004" +
    "\010\u0154\001\002\000\022\007\u014f\027\u0151\037\u014c\040" +
    "\u014d\051\127\052\133\053\123\054\116\001\002\000\006" +
    "\112\uff56\113\uff56\001\002\000\004\010\uff32\001\002\000" +
    "\004\010\uff37\001\002\000\014\007\uff3c\051\uff3c\052\uff3c" +
    "\053\uff3c\054\uff3c\001\002\000\014\007\uff38\051\uff38\052" +
    "\uff38\053\uff38\054\uff38\001\002\000\014\007\uff3a\051\uff3a" +
    "\052\uff3a\053\uff3a\054\uff3a\001\002\000\014\007\uff3d\051" +
    "\uff3d\052\uff3d\053\uff3d\054\uff3d\001\002\000\014\007\uff39" +
    "\051\uff39\052\uff39\053\uff39\054\uff39\001\002\000\014\007" +
    "\uff3b\051\uff3b\052\uff3b\053\uff3b\054\uff3b\001\002\000\014" +
    "\007\151\051\127\052\133\053\123\054\116\001\002\000" +
    "\010\010\uff33\011\144\012\140\001\002\000\024\010\154" +
    "\011\144\012\140\043\u015c\044\u0159\045\u015b\046\u0158\047" +
    "\u015a\116\u0157\001\002\000\004\010\u0161\001\002\000\004" +
    "\010\uff36\001\002\000\054\003\uff63\022\uff63\023\uff63\024" +
    "\uff63\030\uff63\031\uff63\032\uff63\033\uff63\034\uff63\035\uff63" +
    "\036\uff63\041\uff63\051\uff63\103\uff63\104\uff63\105\uff63\106" +
    "\uff63\107\uff63\110\uff63\111\uff63\114\uff63\001\002\000\004" +
    "\050\u0164\001\002\000\004\010\u0165\001\002\000\004\112" +
    "\uff5d\001\002\000\044\003\373\022\035\023\036\024\034" +
    "\030\366\031\u0107\032\u0101\033\u0111\034\362\035\u0103\036" +
    "\u010e\041\367\051\370\104\377\105\376\106\u0104\114\u0167" +
    "\001\002\000\044\003\uff7c\022\uff7c\023\uff7c\024\uff7c\030" +
    "\uff7c\031\uff7c\032\uff7c\033\uff7c\034\uff7c\035\uff7c\036\uff7c" +
    "\041\uff7c\051\uff7c\104\uff7c\105\uff7c\106\uff7c\114\uff7c\001" +
    "\002\000\004\114\u0169\001\002\000\044\003\uff7d\022\uff7d" +
    "\023\uff7d\024\uff7d\030\uff7d\031\uff7d\032\uff7d\033\uff7d\034" +
    "\uff7d\035\uff7d\036\uff7d\041\uff7d\051\uff7d\104\uff7d\105\uff7d" +
    "\106\uff7d\114\uff7d\001\002\000\012\050\u016d\051\u016b\053" +
    "\u016f\054\u0170\001\002\000\006\010\uff6b\011\uff6b\001\002" +
    "\000\006\010\uff6c\011\uff6c\001\002\000\006\010\uff68\011" +
    "\uff68\001\002\000\006\010\u0171\011\u0172\001\002\000\006" +
    "\010\uff6a\011\uff6a\001\002\000\006\010\uff69\011\uff69\001" +
    "\002\000\004\112\uff60\001\002\000\012\050\u016d\051\u016b" +
    "\053\u016f\054\u0170\001\002\000\006\010\uff6d\011\uff6d\001" +
    "\002\000\012\050\u016d\051\u016b\053\u016f\054\u0170\001\002" +
    "\000\006\010\u0176\011\u0172\001\002\000\004\112\uff5f\001" +
    "\002\000\054\003\uff67\022\uff67\023\uff67\024\uff67\030\uff67" +
    "\031\uff67\032\uff67\033\uff67\034\uff67\035\uff67\036\uff67\041" +
    "\uff67\051\uff67\103\uff67\104\uff67\105\uff67\106\uff67\107\uff67" +
    "\110\uff67\111\uff67\114\uff67\001\002\000\042\003\373\022" +
    "\035\023\036\024\034\030\366\031\u0107\032\u0101\033\u0111" +
    "\034\362\035\u0103\036\u010e\041\367\051\370\104\377\105" +
    "\376\106\u0104\001\002\000\004\114\u017a\001\002\000\054" +
    "\003\uff5b\022\uff5b\023\uff5b\024\uff5b\030\uff5b\031\uff5b\032" +
    "\uff5b\033\uff5b\034\uff5b\035\uff5b\036\uff5b\041\uff5b\051\uff5b" +
    "\103\uff5b\104\uff5b\105\uff5b\106\uff5b\107\uff5b\110\uff5b\111" +
    "\uff5b\114\uff5b\001\002\000\016\007\151\050\251\051\127" +
    "\052\133\053\123\054\116\001\002\000\004\112\uff4e\001" +
    "\002\000\022\007\u014f\027\u0151\037\u014c\040\u014d\051\127" +
    "\052\133\053\123\054\116\001\002\000\004\010\u017f\001" +
    "\002\000\004\113\uff4a\001\002\000\004\050\u0181\001\002" +
    "\000\004\010\u0182\001\002\000\004\112\uff5e\001\002\000" +
    "\054\003\uff66\022\uff66\023\uff66\024\uff66\030\uff66\031\uff66" +
    "\032\uff66\033\uff66\034\uff66\035\uff66\036\uff66\041\uff66\051" +
    "\uff66\103\uff66\104\uff66\105\uff66\106\uff66\107\uff66\110\uff66" +
    "\111\uff66\114\uff66\001\002\000\004\107\u0185\001\002\000" +
    "\016\007\151\050\u011b\051\127\052\133\053\123\054\116" +
    "\001\002\000\006\107\u0185\110\u018a\001\002\000\010\107" +
    "\uff41\110\uff41\114\uff43\001\002\000\004\114\u0189\001\002" +
    "\000\054\003\uff4c\022\uff4c\023\uff4c\024\uff4c\030\uff4c\031" +
    "\uff4c\032\uff4c\033\uff4c\034\uff4c\035\uff4c\036\uff4c\041\uff4c" +
    "\051\uff4c\103\uff4c\104\uff4c\105\uff4c\106\uff4c\107\uff4c\110" +
    "\uff4c\111\uff4c\114\uff4c\001\002\000\004\115\u018c\001\002" +
    "\000\010\107\uff42\110\uff42\114\uff45\001\002\000\042\003" +
    "\373\022\035\023\036\024\034\030\366\031\u0107\032\u0101" +
    "\033\u0111\034\362\035\u0103\036\u010e\041\367\051\370\104" +
    "\377\105\376\106\u0104\001\002\000\006\111\u018f\114\uff3e" +
    "\001\002\000\004\114\uff44\001\002\000\004\112\u0190\001" +
    "\002\000\010\107\uff3f\110\uff3f\114\uff3f\001\002\000\004" +
    "\115\u0192\001\002\000\042\003\373\022\035\023\036\024" +
    "\034\030\366\031\u0107\032\u0101\033\u0111\034\362\035\u0103" +
    "\036\u010e\041\367\051\370\104\377\105\376\106\u0104\001" +
    "\002\000\012\107\uff3e\110\uff3e\111\u018f\114\uff3e\001\002" +
    "\000\010\107\uff40\110\uff40\114\uff40\001\002\000\042\003" +
    "\373\022\035\023\036\024\034\030\366\031\u0107\032\u0101" +
    "\033\u0111\034\362\035\u0103\036\u010e\041\367\051\370\104" +
    "\377\105\376\106\u0104\001\002\000\004\114\u0197\001\002" +
    "\000\044\003\uff7f\022\uff7f\023\uff7f\024\uff7f\030\uff7f\031" +
    "\uff7f\032\uff7f\033\uff7f\034\uff7f\035\uff7f\036\uff7f\041\uff7f" +
    "\051\uff7f\104\uff7f\105\uff7f\106\uff7f\114\uff7f\001\002\000" +
    "\012\022\035\023\036\024\034\051\u0199\001\002\000\004" +
    "\006\u01b4\001\002\000\004\051\u019b\001\002\000\004\006" +
    "\u019c\001\002\000\014\007\151\051\127\052\133\053\123" +
    "\054\116\001\002\000\010\011\144\012\140\112\u019e\001" +
    "\002\000\004\051\u019f\001\002\000\016\043\u015c\044\u0159" +
    "\045\u015b\046\u0158\047\u015a\116\u0157\001\002\000\014\007" +
    "\151\051\127\052\133\053\123\054\116\001\002\000\010" +
    "\011\144\012\140\112\u01a2\001\002\000\004\051\u01a3\001" +
    "\002\000\014\006\u01a8\011\u01a6\012\u01aa\013\u01a7\014\u01a9" +
    "\001\002\000\004\010\u01a5\001\002\000\004\113\uff58\001" +
    "\002\000\004\006\u01b2\001\002\000\004\006\u01b0\001\002" +
    "\000\014\007\151\051\127\052\133\053\123\054\116\001" +
    "\002\000\004\006\u01ad\001\002\000\004\006\u01ab\001\002" +
    "\000\014\007\151\051\127\052\133\053\123\054\116\001" +
    "\002\000\010\010\uff53\011\144\012\140\001\002\000\014" +
    "\007\151\051\127\052\133\053\123\054\116\001\002\000" +
    "\010\010\uff51\011\144\012\140\001\002\000\010\010\uff55" +
    "\011\144\012\140\001\002\000\014\007\151\051\127\052" +
    "\133\053\123\054\116\001\002\000\010\010\uff52\011\144" +
    "\012\140\001\002\000\014\007\151\051\127\052\133\053" +
    "\123\054\116\001\002\000\010\010\uff54\011\144\012\140" +
    "\001\002\000\014\007\151\051\127\052\133\053\123\054" +
    "\116\001\002\000\010\011\144\012\140\112\u01b6\001\002" +
    "\000\004\051\u01b7\001\002\000\016\043\u015c\044\u0159\045" +
    "\u015b\046\u0158\047\u015a\116\u0157\001\002\000\014\007\151" +
    "\051\127\052\133\053\123\054\116\001\002\000\010\011" +
    "\144\012\140\112\u01ba\001\002\000\004\051\u01a3\001\002" +
    "\000\004\010\u01bc\001\002\000\004\113\uff57\001\002\000" +
    "\054\003\uff64\022\uff64\023\uff64\024\uff64\030\uff64\031\uff64" +
    "\032\uff64\033\uff64\034\uff64\035\uff64\036\uff64\041\uff64\051" +
    "\uff64\103\uff64\104\uff64\105\uff64\106\uff64\107\uff64\110\uff64" +
    "\111\uff64\114\uff64\001\002\000\044\003\373\022\035\023" +
    "\036\024\034\030\366\031\u0107\032\u0101\033\u0111\034\362" +
    "\035\u0103\036\u010e\041\367\051\370\104\377\105\376\106" +
    "\u0104\114\u01bf\001\002\000\044\003\uff78\022\uff78\023\uff78" +
    "\024\uff78\030\uff78\031\uff78\032\uff78\033\uff78\034\uff78\035" +
    "\uff78\036\uff78\041\uff78\051\uff78\104\uff78\105\uff78\106\uff78" +
    "\114\uff78\001\002\000\004\114\u01c1\001\002\000\044\003" +
    "\uff79\022\uff79\023\uff79\024\uff79\030\uff79\031\uff79\032\uff79" +
    "\033\uff79\034\uff79\035\uff79\036\uff79\041\uff79\051\uff79\104" +
    "\uff79\105\uff79\106\uff79\114\uff79\001\002\000\004\117\u01c6" +
    "\001\002\000\004\117\uff2f\001\002\000\004\117\uff30\001" +
    "\002\000\004\002\000\001\002\000\006\123\uff2c\126\uff2c" +
    "\001\002\000\006\123\u01c9\126\u01cb\001\002\000\012\022" +
    "\035\023\036\024\034\123\u01c9\001\002\000\010\022\035" +
    "\023\036\024\034\001\002\000\004\112\u01d4\001\002\000" +
    "\006\044\u01ce\050\u01cd\001\002\000\006\123\uff2d\126\uff2d" +
    "\001\002\000\006\123\uff1d\126\uff1d\001\002\000\004\051" +
    "\u01cf\001\002\000\006\017\ufee5\043\ufee5\001\002\000\006" +
    "\017\u01d1\043\u01d2\001\002\000\004\051\u01d3\001\002\000" +
    "\006\123\uff1c\126\uff1c\001\002\000\010\007\ufee6\017\ufee6" +
    "\043\ufee6\001\002\000\012\022\uff2a\023\uff2a\024\uff2a\123" +
    "\uff2a\001\002\000\004\051\u01d6\001\002\000\006\006\u01d9" +
    "\124\u01d8\001\002\000\006\006\u01f2\124\u01e4\001\002\000" +
    "\014\007\151\051\127\052\133\053\123\054\116\001\002" +
    "\000\020\007\151\050\u01dd\051\u01e0\052\133\053\123\054" +
    "\116\131\u01df\001\002\000\004\112\uff29\001\002\000\010" +
    "\010\ufee0\021\ufee0\112\ufee0\001\002\000\010\010\ufede\021" +
    "\ufede\112\ufede\001\002\000\010\010\ufee2\021\ufee2\112\ufee2" +
    "\001\002\000\006\007\u01e9\017\u01d1\001\002\000\004\007" +
    "\u01e7\001\002\000\030\007\ufee5\010\uffc0\011\uffc0\012\uffc0" +
    "\013\uffc0\014\uffc0\015\uffc0\017\ufee5\021\uffc0\112\uffc0\124" +
    "\u01d8\001\002\000\014\010\ufee1\011\144\012\140\021\ufee1" +
    "\112\ufee1\001\002\000\010\010\ufedf\021\ufedf\112\ufedf\001" +
    "\002\000\012\010\ufedd\021\ufedd\112\ufedd\124\u01e4\001\002" +
    "\000\014\007\151\051\127\052\133\053\123\054\116\001" +
    "\002\000\010\011\144\012\140\125\u01e6\001\002\000\014" +
    "\006\uff27\010\uff27\021\uff27\112\uff27\124\uff27\001\002\000" +
    "\004\010\u01e8\001\002\000\010\010\ufeea\021\ufeea\112\ufeea" +
    "\001\002\000\022\007\151\010\u01ec\050\u01dd\051\u01e0\052" +
    "\133\053\123\054\116\131\u01df\001\002\000\006\010\ufee3" +
    "\021\ufee3\001\002\000\006\010\u01ee\021\u01ed\001\002\000" +
    "\010\010\ufee7\021\ufee7\112\ufee7\001\002\000\020\007\151" +
    "\050\u01dd\051\u01e0\052\133\053\123\054\116\131\u01df\001" +
    "\002\000\010\010\ufee8\021\ufee8\112\ufee8\001\002\000\006" +
    "\010\ufee4\021\ufee4\001\002\000\010\011\144\012\140\125" +
    "\u01f1\001\002\000\014\006\uff26\010\uff26\021\uff26\112\uff26" +
    "\124\uff26\001\002\000\004\113\u01f3\001\002\000\016\007" +
    "\151\051\127\052\133\053\123\054\116\113\u01f8\001\002" +
    "\000\004\112\uff28\001\002\000\006\021\u01fa\114\u0202\001" +
    "\002\000\006\021\u01fd\114\u01fe\001\002\000\014\011\144" +
    "\012\140\021\uff22\114\uff22\125\uff22\001\002\000\014\007" +
    "\151\051\127\052\133\053\123\054\116\001\002\000\006" +
    "\021\u01fa\125\u01fb\001\002\000\014\007\151\051\127\052" +
    "\133\053\123\054\116\001\002\000\006\021\uff20\114\uff20" +
    "\001\002\000\014\011\144\012\140\021\uff23\114\uff23\125" +
    "\uff23\001\002\000\004\113\u01ff\001\002\000\006\021\uff24" +
    "\112\uff24\001\002\000\014\007\151\051\127\052\133\053" +
    "\123\054\116\001\002\000\006\021\u01fa\125\u0201\001\002" +
    "\000\006\021\uff21\114\uff21\001\002\000\006\021\uff25\112" +
    "\uff25\001\002\000\004\112\u02a5\001\002\000\012\022\035" +
    "\023\036\024\034\102\u0213\001\002\000\004\051\u0208\001" +
    "\002\000\004\112\u0207\001\002\000\012\022\uff2b\023\uff2b" +
    "\024\uff2b\123\uff2b\001\002\000\012\006\u020c\021\uff0a\112" +
    "\uff0a\124\u01d8\001\002\000\004\112\uff10\001\002\000\006" +
    "\021\u0210\112\uff0e\001\002\000\012\006\u020e\021\uff0c\112" +
    "\uff0c\124\u01e4\001\002\000\020\007\151\050\u01dd\051\u01e0" +
    "\052\133\053\123\054\116\131\u01df\001\002\000\006\021" +
    "\uff0d\112\uff0d\001\002\000\004\113\u01f3\001\002\000\006" +
    "\021\uff0b\112\uff0b\001\002\000\004\051\236\001\002\000" +
    "\006\021\243\112\uff0f\001\002\000\004\112\u02a4\001\002" +
    "\000\004\133\u0215\001\002\000\004\002\uff2e\001\002\000" +
    "\004\007\u0216\001\002\000\004\010\u0217\001\002\000\004" +
    "\113\u0218\001\002\000\034\022\035\023\036\024\034\034" +
    "\u022f\035\u021d\036\u0227\041\u0223\051\u0225\106\u0219\127\u0224" +
    "\130\u0229\131\u01df\132\u021a\001\002\000\004\007\u02a1\001" +
    "\002\000\004\007\u029b\001\002\000\004\113\u028d\001\002" +
    "\000\036\022\035\023\036\024\034\034\u022f\035\u021d\036" +
    "\u0227\041\u0223\051\u0225\106\u0219\114\u028c\127\u0224\130\u0229" +
    "\131\u01df\132\u021a\001\002\000\004\007\u0289\001\002\000" +
    "\044\022\uff19\023\uff19\024\uff19\034\uff19\035\uff19\036\uff19" +
    "\041\uff19\051\uff19\106\uff19\107\uff19\110\uff19\111\uff19\114" +
    "\uff19\127\uff19\130\uff19\131\uff19\132\uff19\001\002\000\004" +
    "\112\u0288\001\002\000\004\113\u0285\001\002\000\004\112" +
    "\u0284\001\002\000\004\112\u0283\001\002\000\004\007\u0280" +
    "\001\002\000\004\007\u0276\001\002\000\012\006\u0272\007" +
    "\ufee5\017\ufee5\124\u01d8\001\002\000\004\113\u026e\001\002" +
    "\000\004\113\u0269\001\002\000\004\112\u0268\001\002\000" +
    "\004\007\u0266\001\002\000\044\022\uff15\023\uff15\024\uff15" +
    "\034\uff15\035\uff15\036\uff15\041\uff15\051\uff15\106\uff15\107" +
    "\uff15\110\uff15\111\uff15\114\uff15\127\uff15\130\uff15\131\uff15" +
    "\132\uff15\001\002\000\004\112\u0265\001\002\000\044\022" +
    "\uff16\023\uff16\024\uff16\034\uff16\035\uff16\036\uff16\041\uff16" +
    "\051\uff16\106\uff16\107\uff16\110\uff16\111\uff16\114\uff16\127" +
    "\uff16\130\uff16\131\uff16\132\uff16\001\002\000\004\112\u0264" +
    "\001\002\000\004\113\u0260\001\002\000\004\007\u0230\001" +
    "\002\000\012\022\035\023\036\024\034\051\u0231\001\002" +
    "\000\004\006\u0259\001\002\000\004\051\u0233\001\002\000" +
    "\004\006\u0234\001\002\000\020\007\151\050\u01dd\051\u01e0" +
    "\052\133\053\123\054\116\131\u01df\001\002\000\004\112" +
    "\u0236\001\002\000\022\007\u023b\027\u023e\037\u0238\040\u023a" +
    "\051\u023c\052\133\053\123\054\116\001\002\000\004\112" +
    "\u0246\001\002\000\006\010\ufed9\112\ufed9\001\002\000\006" +
    "\010\ufeda\112\ufeda\001\002\000\006\010\ufed8\112\ufed8\001" +
    "\002\000\022\007\u014f\027\u0151\037\u014c\040\u014d\051\127" +
    "\052\133\053\123\054\116\001\002\000\034\007\ufee5\011" +
    "\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\017\ufee5\043\uffc0" +
    "\044\uffc0\045\uffc0\046\uffc0\047\uffc0\116\uffc0\001\002\000" +
    "\022\011\144\012\140\043\u015c\044\u0159\045\u015b\046\u0158" +
    "\047\u015a\116\u0157\001\002\000\022\007\u023b\027\u023e\037" +
    "\u0238\040\u023a\051\u023c\052\133\053\123\054\116\001\002" +
    "\000\006\010\ufed5\112\ufed5\001\002\000\006\010\ufedc\112" +
    "\ufedc\001\002\000\014\007\151\051\127\052\133\053\123" +
    "\054\116\001\002\000\012\010\ufed7\011\144\012\140\112" +
    "\ufed7\001\002\000\004\010\u0244\001\002\000\006\010\ufedb" +
    "\112\ufedb\001\002\000\022\007\u023b\027\u023e\037\u0238\040" +
    "\u023a\051\u023c\052\133\053\123\054\116\001\002\000\004" +
    "\051\u0247\001\002\000\014\006\u024c\011\u024a\012\u024e\013" +
    "\u024b\014\u024d\001\002\000\004\010\u0249\001\002\000\004" +
    "\113\ufefa\001\002\000\004\006\u0256\001\002\000\004\006" +
    "\u0254\001\002\000\020\007\151\050\u01dd\051\u01e0\052\133" +
    "\053\123\054\116\131\u01df\001\002\000\004\006\u0251\001" +
    "\002\000\004\006\u024f\001\002\000\020\007\151\050\u01dd" +
    "\051\u01e0\052\133\053\123\054\116\131\u01df\001\002\000" +
    "\004\010\ufef5\001\002\000\020\007\151\050\u01dd\051\u01e0" +
    "\052\133\053\123\054\116\131\u01df\001\002\000\004\010" +
    "\ufef3\001\002\000\004\010\ufef7\001\002\000\020\007\151" +
    "\050\u01dd\051\u01e0\052\133\053\123\054\116\131\u01df\001" +
    "\002\000\004\010\ufef4\001\002\000\020\007\151\050\u01dd" +
    "\051\u01e0\052\133\053\123\054\116\131\u01df\001\002\000" +
    "\004\010\ufef6\001\002\000\006\010\ufed6\112\ufed6\001\002" +
    "\000\020\007\151\050\u01dd\051\u01e0\052\133\053\123\054" +
    "\116\131\u01df\001\002\000\004\112\u025b\001\002\000\022" +
    "\007\u023b\027\u023e\037\u0238\040\u023a\051\u023c\052\133\053" +
    "\123\054\116\001\002\000\004\112\u025d\001\002\000\004" +
    "\051\u0247\001\002\000\004\010\u025f\001\002\000\004\113" +
    "\ufef9\001\002\000\034\022\035\023\036\024\034\034\u022f" +
    "\035\u021d\036\u0227\041\u0223\051\u0225\106\u0219\127\u0224\130" +
    "\u0229\131\u01df\132\u021a\001\002\000\036\022\035\023\036" +
    "\024\034\034\u022f\035\u021d\036\u0227\041\u0223\051\u0225\106" +
    "\u0219\114\u0263\127\u0224\130\u0229\131\u01df\132\u021a\001\002" +
    "\000\044\022\uff1a\023\uff1a\024\uff1a\034\uff1a\035\uff1a\036" +
    "\uff1a\041\uff1a\051\uff1a\106\uff1a\107\uff1a\110\uff1a\111\uff1a" +
    "\114\uff1a\127\uff1a\130\uff1a\131\uff1a\132\uff1a\001\002\000" +
    "\044\022\ufefd\023\ufefd\024\ufefd\034\ufefd\035\ufefd\036\ufefd" +
    "\041\ufefd\051\ufefd\106\ufefd\107\ufefd\110\ufefd\111\ufefd\114" +
    "\ufefd\127\ufefd\130\ufefd\131\ufefd\132\ufefd\001\002\000\044" +
    "\022\uff14\023\uff14\024\uff14\034\uff14\035\uff14\036\uff14\041" +
    "\uff14\051\uff14\106\uff14\107\uff14\110\uff14\111\uff14\114\uff14" +
    "\127\uff14\130\uff14\131\uff14\132\uff14\001\002\000\044\022" +
    "\uff12\023\uff12\024\uff12\034\uff12\035\uff12\036\uff12\041\uff12" +
    "\051\uff12\106\uff12\107\uff12\110\uff12\111\uff12\114\uff12\127" +
    "\uff12\130\uff12\131\uff12\132\uff12\001\002\000\004\010\u0267" +
    "\001\002\000\004\112\ufef1\001\002\000\044\022\uff13\023" +
    "\uff13\024\uff13\034\uff13\035\uff13\036\uff13\041\uff13\051\uff13" +
    "\106\uff13\107\uff13\110\uff13\111\uff13\114\uff13\127\uff13\130" +
    "\uff13\131\uff13\132\uff13\001\002\000\034\022\035\023\036" +
    "\024\034\034\u022f\035\u021d\036\u0227\041\u0223\051\u0225\106" +
    "\u0219\127\u0224\130\u0229\131\u01df\132\u021a\001\002\000\036" +
    "\022\035\023\036\024\034\034\u022f\035\u021d\036\u0227\041" +
    "\u0223\051\u0225\106\u0219\114\u026b\127\u0224\130\u0229\131\u01df" +
    "\132\u021a\001\002\000\004\035\u021d\001\002\000\004\112" +
    "\u026d\001\002\000\044\022\ufefb\023\ufefb\024\ufefb\034\ufefb" +
    "\035\ufefb\036\ufefb\041\ufefb\051\ufefb\106\ufefb\107\ufefb\110" +
    "\ufefb\111\ufefb\114\ufefb\127\ufefb\130\ufefb\131\ufefb\132\ufefb" +
    "\001\002\000\034\022\035\023\036\024\034\034\u022f\035" +
    "\u021d\036\u0227\041\u0223\051\u0225\106\u0219\127\u0224\130\u0229" +
    "\131\u01df\132\u021a\001\002\000\036\022\035\023\036\024" +
    "\034\034\u022f\035\u021d\036\u0227\041\u0223\051\u0225\106\u0219" +
    "\114\u0270\127\u0224\130\u0229\131\u01df\132\u021a\001\002\000" +
    "\044\022\uff07\023\uff07\024\uff07\034\uff07\035\uff07\036\uff07" +
    "\041\uff07\051\uff07\106\uff07\107\uff07\110\uff07\111\uff07\114" +
    "\uff07\127\uff07\130\uff07\131\uff07\132\uff07\001\002\000\006" +
    "\006\u0274\124\u01e4\001\002\000\020\007\151\050\u01dd\051" +
    "\u01e0\052\133\053\123\054\116\131\u01df\001\002\000\004" +
    "\112\uff09\001\002\000\020\007\151\050\u01dd\051\u01e0\052" +
    "\133\053\123\054\116\131\u01df\001\002\000\004\112\uff08" +
    "\001\002\000\012\050\u0278\051\u0277\053\u0279\054\u027b\001" +
    "\002\000\006\010\ufeed\021\ufeed\001\002\000\006\010\ufeeb" +
    "\021\ufeeb\001\002\000\006\010\ufeee\021\ufeee\001\002\000" +
    "\006\010\u027e\021\u027d\001\002\000\006\010\ufeec\021\ufeec" +
    "\001\002\000\006\010\ufeef\021\ufeef\001\002\000\012\050" +
    "\u0278\051\u0277\053\u0279\054\u027b\001\002\000\004\112\ufef2" +
    "\001\002\000\006\010\ufef0\021\ufef0\001\002\000\022\007" +
    "\u023b\027\u023e\037\u0238\040\u023a\051\u023c\052\133\053\123" +
    "\054\116\001\002\000\004\010\u0282\001\002\000\004\113" +
    "\uff05\001\002\000\044\022\uff18\023\uff18\024\uff18\034\uff18" +
    "\035\uff18\036\uff18\041\uff18\051\uff18\106\uff18\107\uff18\110" +
    "\uff18\111\uff18\114\uff18\127\uff18\130\uff18\131\uff18\132\uff18" +
    "\001\002\000\044\022\uff11\023\uff11\024\uff11\034\uff11\035" +
    "\uff11\036\uff11\041\uff11\051\uff11\106\uff11\107\uff11\110\uff11" +
    "\111\uff11\114\uff11\127\uff11\130\uff11\131\uff11\132\uff11\001" +
    "\002\000\034\022\035\023\036\024\034\034\u022f\035\u021d" +
    "\036\u0227\041\u0223\051\u0225\106\u0219\127\u0224\130\u0229\131" +
    "\u01df\132\u021a\001\002\000\036\022\035\023\036\024\034" +
    "\034\u022f\035\u021d\036\u0227\041\u0223\051\u0225\106\u0219\114" +
    "\u0287\127\u0224\130\u0229\131\u01df\132\u021a\001\002\000\044" +
    "\022\ufefc\023\ufefc\024\ufefc\034\ufefc\035\ufefc\036\ufefc\041" +
    "\ufefc\051\ufefc\106\ufefc\107\ufefc\110\ufefc\111\ufefc\114\ufefc" +
    "\127\ufefc\130\ufefc\131\ufefc\132\ufefc\001\002\000\044\022" +
    "\uff17\023\uff17\024\uff17\034\uff17\035\uff17\036\uff17\041\uff17" +
    "\051\uff17\106\uff17\107\uff17\110\uff17\111\uff17\114\uff17\127" +
    "\uff17\130\uff17\131\uff17\132\uff17\001\002\000\022\007\u023b" +
    "\027\u023e\037\u0238\040\u023a\051\u023c\052\133\053\123\054" +
    "\116\001\002\000\004\010\u028b\001\002\000\006\112\ufef8" +
    "\113\ufef8\001\002\000\004\002\uff1b\001\002\000\004\107" +
    "\u028e\001\002\000\004\115\u0298\001\002\000\004\114\u0297" +
    "\001\002\000\010\107\ufeff\110\ufeff\114\uff01\001\002\000" +
    "\006\107\u028e\110\u0292\001\002\000\004\115\u0294\001\002" +
    "\000\010\107\uff00\110\uff00\114\uff03\001\002\000\034\022" +
    "\035\023\036\024\034\034\u022f\035\u021d\036\u0227\041\u0223" +
    "\051\u0225\106\u0219\127\u0224\130\u0229\131\u01df\132\u021a\001" +
    "\002\000\040\022\035\023\036\024\034\034\u022f\035\u021d" +
    "\036\u0227\041\u0223\051\u0225\106\u0219\111\u018f\114\uff3e\127" +
    "\u0224\130\u0229\131\u01df\132\u021a\001\002\000\004\114\uff02" +
    "\001\002\000\044\022\uff06\023\uff06\024\uff06\034\uff06\035" +
    "\uff06\036\uff06\041\uff06\051\uff06\106\uff06\107\uff06\110\uff06" +
    "\111\uff06\114\uff06\127\uff06\130\uff06\131\uff06\132\uff06\001" +
    "\002\000\034\022\035\023\036\024\034\034\u022f\035\u021d" +
    "\036\u0227\041\u0223\051\u0225\106\u0219\127\u0224\130\u0229\131" +
    "\u01df\132\u021a\001\002\000\044\022\035\023\036\024\034" +
    "\034\u022f\035\u021d\036\u0227\041\u0223\051\u0225\106\u0219\107" +
    "\uff3e\110\uff3e\111\u018f\114\uff3e\127\u0224\130\u0229\131\u01df" +
    "\132\u021a\001\002\000\010\107\ufefe\110\ufefe\114\ufefe\001" +
    "\002\000\004\050\u029c\001\002\000\004\021\u029d\001\002" +
    "\000\004\020\u029e\001\002\000\004\051\u029f\001\002\000" +
    "\004\010\u02a0\001\002\000\004\112\ufee9\001\002\000\004" +
    "\051\u02a2\001\002\000\004\010\u02a3\001\002\000\004\113" +
    "\uff04\001\002\000\012\022\uff1f\023\uff1f\024\uff1f\102\uff1f" +
    "\001\002\000\012\022\uff1e\023\uff1e\024\uff1e\102\uff1e\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02a3\000\010\002\006\003\004\012\005\001\001\000" +
    "\002\001\001\000\004\004\343\001\001\000\016\006\010" +
    "\015\017\016\015\017\016\020\012\021\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\006\342\015\017\016\015\017\016\020\012\021\013\001" +
    "\001\000\016\006\341\015\017\016\015\017\016\020\012" +
    "\021\013\001\001\000\056\024\336\025\076\026\111\027" +
    "\060\030\072\031\047\034\100\035\110\036\104\037\052" +
    "\040\051\045\050\046\067\054\054\055\107\056\071\062" +
    "\073\063\101\064\065\065\077\070\055\071\102\001\001" +
    "\000\002\001\001\000\016\006\335\015\017\016\015\017" +
    "\016\020\012\021\013\001\001\000\056\024\103\025\076" +
    "\026\111\027\060\030\072\031\047\034\100\035\110\036" +
    "\104\037\052\040\051\045\050\046\067\054\054\055\107" +
    "\056\071\062\073\063\101\064\065\065\077\070\055\071" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\022\025\023\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\040\001" +
    "\001\000\002\001\001\000\004\014\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\022\045\023\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\042\127\043\121\044\117\047\303\050\133\051\131\052" +
    "\116\001\001\000\002\001\001\000\050\026\276\030\072" +
    "\031\047\034\100\035\110\036\104\037\052\040\051\045" +
    "\050\046\067\054\054\055\107\056\071\062\073\063\101" +
    "\064\065\065\077\070\055\071\102\001\001\000\020\042" +
    "\127\043\121\044\117\047\273\050\133\051\131\052\116" +
    "\001\001\000\002\001\001\000\014\032\266\033\265\042" +
    "\251\043\121\044\117\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\024\260\025\076\026" +
    "\111\027\060\030\072\031\047\034\100\035\110\036\104" +
    "\037\052\040\051\045\050\046\067\054\054\055\107\056" +
    "\071\062\073\063\101\064\065\065\077\070\055\071\102" +
    "\001\001\000\006\057\237\060\236\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\024\216\025" +
    "\076\026\111\027\060\030\072\031\047\034\100\035\110" +
    "\036\104\037\052\040\051\045\050\046\067\054\054\055" +
    "\107\056\071\062\073\063\101\064\065\065\077\070\055" +
    "\071\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\072\201\073\200\001\001\000\002\001\001\000\056" +
    "\024\174\025\076\026\111\027\060\030\072\031\047\034" +
    "\100\035\110\036\104\037\052\040\051\045\050\046\067" +
    "\054\054\055\107\056\071\062\073\063\101\064\065\065" +
    "\077\070\055\071\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\024\112\025\076\026\111\027\060\030" +
    "\072\031\047\034\100\035\110\036\104\037\052\040\051" +
    "\045\050\046\067\054\054\055\107\056\071\062\073\063" +
    "\101\064\065\065\077\070\055\071\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\042\127\043\121\044\117\047\120\050\133" +
    "\051\131\052\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\042\165\043\121\044\117\047\164\050\133\051\131" +
    "\052\116\001\001\000\002\001\001\000\004\053\144\001" +
    "\001\000\012\042\127\043\121\044\117\052\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\042\127\043\121\044\117\051\135\052\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\043\163\044" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\043\154\044\117\001\001\000\004\044" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\042\152\043\121\044\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\162\001\001\000\004\044\161\001" +
    "\001\000\004\044\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\053\144\001\001\000\002\001\001\000\016" +
    "\042\127\043\121\044\117\050\170\051\131\052\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\024\215\025\076" +
    "\026\111\027\060\030\072\031\047\034\100\035\110\036" +
    "\104\037\052\040\051\045\050\046\067\054\054\055\107" +
    "\056\071\062\073\063\101\064\065\065\077\070\055\071" +
    "\102\001\001\000\004\073\211\001\001\000\004\074\204" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\024\214\025\076\026\111\027\060\030\072\031" +
    "\047\034\100\035\110\036\104\037\052\040\051\045\050" +
    "\046\067\054\054\055\107\056\071\062\073\063\101\064" +
    "\065\065\077\070\055\071\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\066\217\001\001\000\002\001\001\000\056\024\227" +
    "\025\076\026\111\027\060\030\072\031\047\034\100\035" +
    "\110\036\104\037\052\040\051\045\050\046\067\054\054" +
    "\055\107\056\071\062\073\063\101\064\065\065\077\070" +
    "\055\071\102\001\001\000\020\042\127\043\121\044\117" +
    "\047\222\050\133\051\131\052\116\001\001\000\004\067" +
    "\223\001\001\000\056\024\225\025\076\026\111\027\060" +
    "\030\072\031\047\034\100\035\110\036\104\037\052\040" +
    "\051\045\050\046\067\054\054\055\107\056\071\062\073" +
    "\063\101\064\065\065\077\070\055\071\102\001\001\000" +
    "\002\001\001\000\004\066\226\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\061\257\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\060\241\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\244\001\001\000\004\061\246\001\001\000" +
    "\012\033\247\042\251\043\121\044\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\061\253\001\001\000\002\001\001\000\004" +
    "\014\255\001\001\000\004\061\256\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\032\270\033\265" +
    "\042\251\043\121\044\117\001\001\000\002\001\001\000" +
    "\012\033\272\042\251\043\121\044\117\001\001\000\002" +
    "\001\001\000\004\067\274\001\001\000\002\001\001\000" +
    "\014\032\277\033\265\042\251\043\121\044\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\032" +
    "\310\033\265\042\251\043\121\044\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\032\313\033\265\042" +
    "\251\043\121\044\117\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\042\316\043\121\044\117\001\001\000" +
    "\004\041\317\001\001\000\002\001\001\000\004\074\321" +
    "\001\001\000\002\001\001\000\004\074\325\001\001\000" +
    "\004\074\324\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\042\334\043\121\044\117\001" +
    "\001\000\004\014\331\001\001\000\002\001\001\000\010" +
    "\042\333\043\121\044\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\u01c1\001\001\000\004\007\345\001\001" +
    "\000\006\075\346\076\347\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\054\014\u010a\077\362\101\u010b\102\355\103" +
    "\360\104\377\105\373\106\354\115\u010c\116\374\117\364" +
    "\120\u0107\121\371\122\u0104\124\356\125\u0101\126\357\127" +
    "\370\130\u0108\132\363\142\u0109\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\u0130\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\060\u0122\001\001\000\052\014\u010a\077\362" +
    "\102\u0120\103\360\104\377\105\373\106\354\115\u010c\116" +
    "\374\117\364\120\u0107\121\371\122\u0104\124\356\125\u0101" +
    "\126\357\127\370\130\u0108\132\363\142\u0109\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\014\u010a\107\u0112" +
    "\110\u0111\115\u010f\116\374\117\364\120\u0107\121\371\122" +
    "\u0104\124\356\125\u0101\126\357\127\370\130\u0108\132\363" +
    "\001\001\000\002\001\001\000\004\014\u011e\001\001\000" +
    "\034\014\u010a\115\u0116\116\374\117\364\120\u0107\121\371" +
    "\122\u0104\124\356\125\u0101\126\357\127\370\130\u0108\132" +
    "\363\001\001\000\002\001\001\000\004\122\u0114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\042\u011b\043\121\044\117\111\u0118\112\u0119\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\060\u011f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\014\u010a\107\u0124" +
    "\110\u0111\115\u010f\116\374\117\364\120\u0107\121\371\122" +
    "\u0104\124\356\125\u0101\126\357\127\370\130\u0108\132\363" +
    "\001\001\000\002\001\001\000\004\131\u0127\001\001\000" +
    "\006\127\u0129\130\u0108\001\001\000\002\001\001\000\040" +
    "\014\u010a\107\u012a\110\u0111\115\u010f\116\374\117\364\120" +
    "\u0107\121\371\122\u0104\124\356\125\u0101\126\357\127\370" +
    "\130\u0108\132\363\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\060\u011f\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\u0134" +
    "\100\u0136\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\u0139\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\061\257\001\001\000\006\014\u0134\100\u013f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\u0134\100\u0142\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\014\u010a\107\u0145\110\u0111\115\u010f\116" +
    "\374\117\364\120\u0107\121\371\122\u0104\124\356\125\u0101" +
    "\126\357\127\370\130\u0108\132\363\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\042\u014f\043\121\044\117\140" +
    "\u014d\141\u0151\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\042\u015e\043\121\044\117\140" +
    "\u014d\141\u015f\001\001\000\004\137\u015c\001\001\000\012" +
    "\042\u014f\043\121\044\117\140\u0155\001\001\000\004\013" +
    "\u0152\001\001\000\012\042\u014f\043\121\044\117\140\u0154" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\042\u015d\043\121\044\117\001\001\000\002\001\001" +
    "\000\004\137\u015c\001\001\000\004\013\u0152\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\014\u010a\107\u0167\110" +
    "\u0111\115\u010f\116\374\117\364\120\u0107\121\371\122\u0104" +
    "\124\356\125\u0101\126\357\127\370\130\u0108\132\363\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\113\u016d\114\u016b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\114" +
    "\u0172\001\001\000\002\001\001\000\006\113\u0174\114\u016b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\014\u010a\107\u0178\110\u0111\115\u010f\116\374" +
    "\117\364\120\u0107\121\371\122\u0104\124\356\125\u0101\126" +
    "\357\127\370\130\u0108\132\363\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\033\u017b\042\251\043\121\044" +
    "\117\001\001\000\002\001\001\000\014\042\u014f\043\121" +
    "\044\117\140\u014d\141\u017d\001\001\000\004\013\u0152\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\133\u0187\134" +
    "\u0185\135\u0186\001\001\000\014\042\u011b\043\121\044\117" +
    "\111\u0190\112\u0119\001\001\000\004\135\u018a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\014\u010a\107\u018c\110" +
    "\u0111\115\u010f\116\374\117\364\120\u0107\121\371\122\u0104" +
    "\124\356\125\u0101\126\357\127\370\130\u0108\132\363\001" +
    "\001\000\004\136\u018d\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\014" +
    "\u010a\107\u0192\110\u0111\115\u010f\116\374\117\364\120\u0107" +
    "\121\371\122\u0104\124\356\125\u0101\126\357\127\370\130" +
    "\u0108\132\363\001\001\000\004\136\u0193\001\001\000\002" +
    "\001\001\000\040\014\u010a\107\u0195\110\u0111\115\u010f\116" +
    "\374\117\364\120\u0107\121\371\122\u0104\124\356\125\u0101" +
    "\126\357\127\370\130\u0108\132\363\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\u0199\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\042" +
    "\u019c\043\121\044\117\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\137\u019f\001\001\000\010\042\u01a0\043" +
    "\121\044\117\001\001\000\002\001\001\000\004\123\u01a3" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\042\u01ae" +
    "\043\121\044\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\042\u01ab\043\121\044\117\001\001\000\002" +
    "\001\001\000\010\042\u01ad\043\121\044\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\042\u01b0\043\121" +
    "\044\117\001\001\000\002\001\001\000\010\042\u01b2\043" +
    "\121\044\117\001\001\000\002\001\001\000\010\042\u01b4" +
    "\043\121\044\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\137\u01b7\001\001\000\010\042\u01b8\043\121" +
    "\044\117\001\001\000\002\001\001\000\004\123\u01ba\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\014\u010a\107\u01bf\110\u0111\115\u010f\116\374\117" +
    "\364\120\u0107\121\371\122\u0104\124\356\125\u0101\126\357" +
    "\127\370\130\u0108\132\363\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\u01c4\001\001" +
    "\000\004\010\u01c3\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\143\u01c6\001\001\000\010\145\u01c7\146\u01c9" +
    "\154\u01cb\001\001\000\012\014\u0204\146\u0205\153\u0203\157" +
    "\u0202\001\001\000\004\014\u01d4\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\203\u01cf\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\147\u01d6\001\001" +
    "\000\002\001\001\000\010\042\u01ef\043\121\044\117\001" +
    "\001\000\022\042\u01e0\043\121\044\117\200\u01e1\202\u01da" +
    "\203\u01dd\205\u01d9\210\u01db\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\147\u01e2\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\042\u01e4\043\121\044\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\042\u01e0\043\121\044\117\200\u01e1\202\u01da\203\u01dd\204" +
    "\u01ea\205\u01e9\210\u01db\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\042\u01e0\043\121\044" +
    "\117\200\u01e1\202\u01da\203\u01dd\205\u01ee\210\u01db\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\150\u01f3\001\001\000\014\042\u01f6" +
    "\043\121\044\117\151\u01f4\152\u01f5\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\042\u01f6\043\121\044\117\151\u01f8\001\001\000" +
    "\002\001\001\000\010\042\u01fb\043\121\044\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\042\u01f6\043\121\044\117\151\u01ff" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\014\u0204\144\u0213\157\u0211" +
    "\001\001\000\004\160\u0208\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\147\u020a\161\u0209\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\042" +
    "\u01e0\043\121\044\117\200\u01e1\202\u01da\203\u01dd\205\u020c" +
    "\210\u01db\001\001\000\002\001\001\000\004\150\u020e\001" +
    "\001\000\002\001\001\000\004\060\u0210\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\014\u0204\155\u021b\156\u021d\157\u0221\162\u021e\163" +
    "\u022b\164\u0225\165\u021a\171\u0229\172\u022d\173\u021f\175\u022c" +
    "\200\u0227\201\u022a\202\u0220\203\u01dd\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\014\u0204" +
    "\156\u0261\157\u0221\162\u021e\163\u022b\164\u0225\165\u021a\171" +
    "\u0229\172\u022d\173\u021f\175\u022c\200\u0227\201\u022a\202\u0220" +
    "\203\u01dd\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\147" +
    "\u0270\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\u0231\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\042\u01e0" +
    "\043\121\044\117\200\u01e1\202\u01da\203\u01dd\205\u0234\210" +
    "\u01db\001\001\000\002\001\001\000\020\042\u023c\043\121" +
    "\044\117\202\u0238\203\u01dd\206\u023e\207\u0236\001\001\000" +
    "\004\013\u0244\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\042\u015e\043\121\044\117\140" +
    "\u014d\141\u0242\001\001\000\002\001\001\000\004\137\u0240" +
    "\001\001\000\016\042\u023c\043\121\044\117\202\u0238\203" +
    "\u01dd\206\u023f\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\042\u0241\043\121\044\117\001\001\000\002\001" +
    "\001\000\004\013\u0152\001\001\000\002\001\001\000\016" +
    "\042\u023c\043\121\044\117\202\u0238\203\u01dd\206\u0257\001" +
    "\001\000\004\174\u0247\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\042\u01e0\043\121\044\117\200\u01e1\202\u01da" +
    "\203\u01dd\205\u0252\210\u01db\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\042\u01e0\043\121\044\117\200\u01e1" +
    "\202\u01da\203\u01dd\205\u024f\210\u01db\001\001\000\002\001" +
    "\001\000\022\042\u01e0\043\121\044\117\200\u01e1\202\u01da" +
    "\203\u01dd\205\u0251\210\u01db\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\042\u01e0\043\121\044\117\200\u01e1" +
    "\202\u01da\203\u01dd\205\u0254\210\u01db\001\001\000\002\001" +
    "\001\000\022\042\u01e0\043\121\044\117\200\u01e1\202\u01da" +
    "\203\u01dd\205\u0256\210\u01db\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\042\u01e0\043\121\044\117\200\u01e1" +
    "\202\u01da\203\u01dd\205\u0259\210\u01db\001\001\000\002\001" +
    "\001\000\020\042\u023c\043\121\044\117\202\u0238\203\u01dd" +
    "\206\u023e\207\u025b\001\001\000\004\013\u0244\001\001\000" +
    "\004\174\u025d\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\014\u0204\155\u0260\156\u021d\157\u0221\162\u021e\163" +
    "\u022b\164\u0225\165\u021a\171\u0229\172\u022d\173\u021f\175\u022c" +
    "\200\u0227\201\u022a\202\u0220\203\u01dd\001\001\000\040\014" +
    "\u0204\156\u0261\157\u0221\162\u021e\163\u022b\164\u0225\165\u021a" +
    "\171\u0229\172\u022d\173\u021f\175\u022c\200\u0227\201\u022a\202" +
    "\u0220\203\u01dd\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\014\u0204\155\u0269" +
    "\156\u021d\157\u0221\162\u021e\163\u022b\164\u0225\165\u021a\171" +
    "\u0229\172\u022d\173\u021f\175\u022c\200\u0227\201\u022a\202\u0220" +
    "\203\u01dd\001\001\000\040\014\u0204\156\u0261\157\u0221\162" +
    "\u021e\163\u022b\164\u0225\165\u021a\171\u0229\172\u022d\173\u021f" +
    "\175\u022c\200\u0227\201\u022a\202\u0220\203\u01dd\001\001\000" +
    "\004\173\u026b\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\014\u0204\155\u026e\156\u021d\157\u0221\162\u021e\163" +
    "\u022b\164\u0225\165\u021a\171\u0229\172\u022d\173\u021f\175\u022c" +
    "\200\u0227\201\u022a\202\u0220\203\u01dd\001\001\000\040\014" +
    "\u0204\156\u0261\157\u0221\162\u021e\163\u022b\164\u0225\165\u021a" +
    "\171\u0229\172\u022d\173\u021f\175\u022c\200\u0227\201\u022a\202" +
    "\u0220\203\u01dd\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\042\u01e0\043\121\044\117\200\u01e1\202\u01da\203" +
    "\u01dd\205\u0272\210\u01db\001\001\000\002\001\001\000\022" +
    "\042\u01e0\043\121\044\117\200\u01e1\202\u01da\203\u01dd\205" +
    "\u0274\210\u01db\001\001\000\002\001\001\000\006\176\u0279" +
    "\177\u027b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\177\u027e\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\042\u023c\043\121\044\117\202\u0238" +
    "\203\u01dd\206\u023e\207\u0280\001\001\000\004\013\u0244\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\014\u0204\155\u0285\156\u021d\157\u0221\162\u021e\163" +
    "\u022b\164\u0225\165\u021a\171\u0229\172\u022d\173\u021f\175\u022c" +
    "\200\u0227\201\u022a\202\u0220\203\u01dd\001\001\000\040\014" +
    "\u0204\156\u0261\157\u0221\162\u021e\163\u022b\164\u0225\165\u021a" +
    "\171\u0229\172\u022d\173\u021f\175\u022c\200\u0227\201\u022a\202" +
    "\u0220\203\u01dd\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\042\u023c\043\121\044\117\202\u0238\203\u01dd\206" +
    "\u023e\207\u0289\001\001\000\004\013\u0244\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\166\u028e\167\u0290\170" +
    "\u028f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\170\u0292\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\014\u0204\155\u0294\156\u021d\157\u0221" +
    "\162\u021e\163\u022b\164\u0225\165\u021a\171\u0229\172\u022d\173" +
    "\u021f\175\u022c\200\u0227\201\u022a\202\u0220\203\u01dd\001\001" +
    "\000\042\014\u0204\136\u0295\156\u0261\157\u0221\162\u021e\163" +
    "\u022b\164\u0225\165\u021a\171\u0229\172\u022d\173\u021f\175\u022c" +
    "\200\u0227\201\u022a\202\u0220\203\u01dd\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\014\u0204\155\u0298\156\u021d" +
    "\157\u0221\162\u021e\163\u022b\164\u0225\165\u021a\171\u0229\172" +
    "\u022d\173\u021f\175\u022c\200\u0227\201\u022a\202\u0220\203\u01dd" +
    "\001\001\000\042\014\u0204\136\u0299\156\u0261\157\u0221\162" +
    "\u021e\163\u022b\164\u0225\165\u021a\171\u0229\172\u022d\173\u021f" +
    "\175\u022c\200\u0227\201\u022a\202\u0220\203\u01dd\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SyntaxMlgAnalyzer$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SyntaxMlgAnalyzer$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SyntaxMlgAnalyzer$do_action(act_num, parser, stack, top,this);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    

public boolean SyntaxError;
    public boolean SyntaxRecoverableError;
    public TestManager testManager;
    public TranslateControlerTAC translateControlerTAC;

    public void setTestManager(TestManager testManager) {
        this.testManager = testManager;
    }

public void setTranslateControlerTAC(TranslateControlerTAC translateControlerTAC) {
        this.translateControlerTAC = translateControlerTAC;
    }

     public void syntax_error(Symbol s){
        try {
            String lexema = s.value.toString();
            int fila = s.right;
            int columna = s.left;
            System.out.println("Error Sintactico Recuperado\n");
            System.out.println("\t \tLexema: " + lexema + "\n");
            System.out.println("\t \tFila: " + fila + "\n");
            System.out.println("\t \tColumna: " + columna + "\n");
        } catch (Exception e) {
            System.out.println("error");
            int fila = s.right;
            int columna = s.left;
            System.out.println("\t \tFila: " + fila + "\n");
            System.out.println("\t \tColumna: " + columna + "\n");
        }

    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        try{
            String lexema = s.value.toString();
            int fila = s.right;
            int columna = s.left;
        System.out.println("Error Sintactico Recuperado\n");
        System.out.println("\t \tLexema: "+ lexema+"\n");
        System.out.println("\t \tFila: "+ fila+"\n");
        System.out.println("\t \tColumna: "+ columna+"\n");

        } catch (Exception ex) {
            
         }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SyntaxMlgAnalyzer$actions {




  private final SyntaxMlgAnalyzer parser;

  /** Constructor */
  CUP$SyntaxMlgAnalyzer$actions(SyntaxMlgAnalyzer parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SyntaxMlgAnalyzer$do_action(
    int                        CUP$SyntaxMlgAnalyzer$act_num,
    java_cup.runtime.lr_parser CUP$SyntaxMlgAnalyzer$parser,
    java.util.Stack            CUP$SyntaxMlgAnalyzer$stack,
    int                        CUP$SyntaxMlgAnalyzer$top, SyntaxMlgAnalyzer sma)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SyntaxMlgAnalyzer$result;

      /* select the action based on the action number */
      switch (CUP$SyntaxMlgAnalyzer$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // OpBoolC ::= BoolValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBoolC",133, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // OpBoolC ::= OpBoolC OpLogic BoolValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBoolC",133, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // BoolValueC ::= NumberValue ExBoolJ NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueC",132, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // BoolValueC ::= FALSE 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueC",132, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // BoolValueC ::= TRUE 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueC",132, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // BoolValueC ::= FuntionCall 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueC",132, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // BoolValueC ::= PARENTHESIS_A OpBoolJ PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueC",132, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // BoolValueC ::= NOT BoolValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueC",132, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // ArrayVal ::= ID Dimensions 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ArrayVal",134, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // ValueC ::= ArrayVal 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValueC",131, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // ValueC ::= Getch 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValueC",131, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // ValueC ::= FuntionCall 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValueC",131, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // ValueC ::= NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValueC",131, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // ValueC ::= STRING 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValueC",131, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // ParametersC ::= ValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParametersC",130, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // ParametersC ::= ParametersC COMMA ValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParametersC",130, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // FuntionIDs ::= ID 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FuntionIDs",129, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // FuntionIDs ::= FuntionIDs POINT ID 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FuntionIDs",129, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // FuntionCall ::= FuntionIDs PARENTHESIS_A PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FuntionCall",128, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // FuntionCall ::= FuntionIDs PARENTHESIS_A ParametersC PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FuntionCall",128, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // Input ::= SCAN_F PARENTHESIS_A STRING COMMA AMPERSON ID PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Input",127, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // Getch ::= GETCH PARENTHESIS_A PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Getch",126, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // OutputValueC ::= STRING 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValueC",125, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // OutputValueC ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValueC",125, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // OutputValueC ::= ID 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValueC",125, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // OutputValueC ::= NUMBER 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValueC",125, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // OutputValuesC ::= OutputValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValuesC",124, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // OutputValuesC ::= OutputValuesC COMMA OutputValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValuesC",124, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // OutputC ::= CLRSCR PARENTHESIS_A PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputC",123, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // OutputC ::= PRINTF PARENTHESIS_A OutputValuesC PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputC",123, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // StepC ::= ID DIVISION EQUAL ValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepC",122, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // StepC ::= ID MULTIPLICATION EQUAL ValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepC",122, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // StepC ::= ID MINUS EQUAL ValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepC",122, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // StepC ::= ID PLUS EQUAL ValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepC",122, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // StepC ::= ID EQUAL ValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepC",122, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // WhileCHeader ::= WHILE PARENTHESIS_A OpBoolC PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("WhileCHeader",121, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // ForCHeader ::= FOR PARENTHESIS_A ID EQUAL ValueC SEMICOLON OpBoolC SEMICOLON StepC PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForCHeader",120, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-9)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // ForCHeader ::= FOR PARENTHESIS_A Type ID EQUAL ValueC SEMICOLON OpBoolC SEMICOLON StepC PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForCHeader",120, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-10)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // CycleC ::= DO LEFT_CB MainCode RIGHT_CB WhileCHeader SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleC",119, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // CycleC ::= WhileCHeader LEFT_CB MainCode RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleC",119, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // CycleC ::= ForCHeader LEFT_CB MainCode RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleC",119, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // CaseC ::= CASE_J COLON MainCode BreakJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseC",118, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // CasesC2 ::= CaseC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesC2",117, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // CasesC2 ::= CasesC2 CaseC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesC2",117, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // CasesC ::= CaseC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesC",116, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // CasesC ::= CasesC2 DEFAULT_J COLON MainCode BreakJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesC",116, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // CasesC ::= CasesC2 CaseC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesC",116, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // SwitchCHeader ::= SWITCH_J PARENTHESIS_A ID PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("SwitchCHeader",115, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // IfCHeader ::= IF PARENTHESIS_A OpBoolC PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IfCHeader",114, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // ConditionC ::= SwitchCHeader LEFT_CB CasesC RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionC",113, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // ConditionC ::= IfCHeader LEFT_CB MainCode RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionC",113, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // AssignmentC ::= ID Dimensions EQUAL ValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentC",112, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // AssignmentC ::= ID EQUAL ValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentC",112, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // AssiC ::= 
            {
              Object RESULT =null;
		System.out.println("ASSI VACIO");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssiC",111, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // AssiC ::= Dimensions EQUAL ArrayValues 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssiC",111, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // AssiC ::= Dimensions 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssiC",111, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // AssiC ::= EQUAL ValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssiC",111, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // IdsC ::= ID AssiC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IdsC",110, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // IdsC ::= ID AssiC COMMA IdsVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IdsC",110, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // DeclarationC ::= Type IdsC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationC",109, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // MainLineCode ::= FuntionCall SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",108, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // MainLineCode ::= Input SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",108, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // MainLineCode ::= Getch SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",108, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // MainLineCode ::= OutputC SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",108, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // MainLineCode ::= CycleC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",108, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // MainLineCode ::= ConditionC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",108, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // MainLineCode ::= AssignmentC SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",108, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // MainLineCode ::= DeclarationC SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",108, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // MainCode ::= MainLineCode 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainCode",107, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // MainCode ::= MainCode MainLineCode 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainCode",107, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // Main ::= VOID_J MAIN PARENTHESIS_A PARENTHESIS_B LEFT_CB MainCode RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Main",98, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // Include ::= INCLUDE LESS_THAN FuntionIDs GREATER_THAN 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Include",106, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // Include ::= INCLUDE STRING 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Include",106, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // Globals ::= DeclarationC SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Globals",105, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // Globals ::= Globals DeclarationC SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Globals",105, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // Rows ::= LEFT_CB Nums RIGHT_BRACKET 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Rows",104, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // Rows ::= Rows COMMA LEFT_CB Nums RIGHT_BRACKET 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Rows",104, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // Nums ::= NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Nums",103, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // Nums ::= Nums COMMA NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Nums",103, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // ArrayValues ::= LEFT_CB Rows RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ArrayValues",102, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // ArrayValues ::= LEFT_CB Nums RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ArrayValues",102, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // Dimensions ::= LEFT_BRACKET NumberValue RIGHT_BRACKET 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Dimensions",101, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // Dimensions ::= Dimensions LEFT_BRACKET NumberValue RIGHT_BRACKET 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Dimensions",101, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // Constante ::= CONST Type ID Dimensions EQUAL ArrayValues 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Constante",100, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // Constante ::= CONST Type ID EQUAL ValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Constante",100, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // Constantes ::= Constante SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Constantes",99, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // Constantes ::= Constantes Constante SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Constantes",99, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // Library ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Library",97, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // Library ::= Library Include 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Library",97, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // Programa ::= PROGRAM_SEPERATOR Library Constantes Globals Main 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Programa",7, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // PythonCode ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("PythonCode",6, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // Python ::= PYTHON_SEPERATOR PythonCode 
            {
              Object RESULT =null;
		sma.testManager.switchNextTypes();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Python",3, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // OpBoolJ ::= BoolValueJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBoolJ",95, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // OpBoolJ ::= OpBoolJ OpLogic BoolValueJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBoolJ",95, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // BoolValueJ ::= NumberValue ExBoolJ NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueJ",94, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // BoolValueJ ::= FALSE 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueJ",94, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // BoolValueJ ::= TRUE 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueJ",94, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // BoolValueJ ::= PARENTHESIS_A OpBoolJ PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueJ",94, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // BoolValueJ ::= NOT BoolValueJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueJ",94, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // ExBoolJ ::= LESS_THAN_EQUAL 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolJ",93, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // ExBoolJ ::= GREATER_THAN_EQUAL 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolJ",93, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // ExBoolJ ::= LESS_THAN 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolJ",93, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // ExBoolJ ::= GREATER_THAN 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolJ",93, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // ExBoolJ ::= DIFERENT_J 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolJ",93, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // ExBoolJ ::= EQUAL_BOOL 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolJ",93, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // BreakJ ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BreakJ",92, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // BreakJ ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BreakJ",92, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // CaseJ ::= CASE_J ValuesJ COLON LineCodesJ BreakJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseJ",91, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // CasesJ2 ::= CaseJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesJ2",90, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // CasesJ2 ::= CasesJ2 CaseJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesJ2",90, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // CasesJ1 ::= CaseJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesJ1",89, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // CasesJ1 ::= CasesJ2 DEFAULT_J COLON LineCodesJ BreakJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesJ1",89, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // CasesJ1 ::= CasesJ2 CaseJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesJ1",89, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // SwitchJHeader ::= SWITCH_J PARENTHESIS_A ID PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("SwitchJHeader",88, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // ElseJ ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseJ",87, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // ElseJ ::= ELSE IfJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseJ",87, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // ElseJ ::= ELSE LEFT_CB LineCodesJ RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseJ",87, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // IfJHeader ::= IF PARENTHESIS_A OpBoolJ PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IfJHeader",86, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // IfJ ::= IfJHeader LEFT_CB LineCodesJ RIGHT_CB ElseJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IfJ",85, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // ConditionJ ::= SwitchJHeader LEFT_CB CasesJ1 RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionJ",84, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // ConditionJ ::= IfJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionJ",84, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // AssignmentJ ::= ID EQUAL ValueVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentJ",83, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // DeclarationJ ::= Type IdsVb 
            {
              Object RESULT =null;
		
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationJ",82, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // DeclarationJ ::= PUBLIC Type IdsVb 
            {
              Object RESULT =null;
		
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationJ",82, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // StepJ ::= ID DIVISION EQUAL NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepJ",81, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // StepJ ::= ID MULTIPLICATION EQUAL NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepJ",81, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // StepJ ::= ID MINUS EQUAL NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepJ",81, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // StepJ ::= ID PLUS EQUAL NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepJ",81, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // StepJ ::= ID EQUAL NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepJ",81, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // WhileJHeader ::= WHILE PARENTHESIS_A OpBoolJ PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("WhileJHeader",80, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // ForJHeader ::= FOR PARENTHESIS_A ID EQUAL NumberValue SEMICOLON ID ExBoolJ NumberValue SEMICOLON StepJ PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForJHeader",79, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-11)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // ForJHeader ::= FOR PARENTHESIS_A Type ID EQUAL NumberValue SEMICOLON ID ExBoolJ NumberValue SEMICOLON StepJ PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForJHeader",79, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-12)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // CycleJ ::= DO LEFT_CB LineCodesJ RIGHT_CB WhileJHeader SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleJ",78, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // CycleJ ::= WhileJHeader LEFT_CB LineCodesJ RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleJ",78, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // CycleJ ::= ForJHeader LEFT_CB LineCodesJ RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleJ",78, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // InputJ ::= CHARINPUT PARENTHESIS_A STRING PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InputJ",77, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // InputJ ::= FLOATINPUT PARENTHESIS_A STRING PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InputJ",77, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // InputJ ::= INTINPUT PARENTHESIS_A STRING PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InputJ",77, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // OutputJ ::= SYSTEM_OUT_PRINT PARENTHESIS_A ValuesOutputJ PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputJ",76, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // OutputJ ::= SYSTEM_OUT_PRINTLN PARENTHESIS_A ValuesOutputJ PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputJ",76, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // LineCodeJ ::= error 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",75, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // LineCodeJ ::= ConditionJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",75, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // LineCodeJ ::= AssignmentJ SEMICOLON 
            {
              Object RESULT =null;
		System.out.println("ASIGNACION");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",75, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // LineCodeJ ::= DeclarationJ SEMICOLON 
            {
              Object RESULT =null;
		System.out.println("DECLARACION");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",75, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // LineCodeJ ::= CycleJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",75, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // LineCodeJ ::= InputJ SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",75, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // LineCodeJ ::= OutputJ SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",75, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // ValJ ::= STRING 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValJ",74, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // ValJ ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValJ",74, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // ValJ ::= NUMBER 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValJ",74, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // ValJ ::= ID 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValJ",74, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // ValuesOutputJ ::= ValJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValuesOutputJ",73, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ValuesOutputJ ::= ValuesOutputJ PLUS ValJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValuesOutputJ",73, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // StringValue ::= STRING 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StringValue",72, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // StringValue ::= StringValue PLUS STRING 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StringValue",72, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ValuesJ ::= NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValuesJ",71, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ValuesJ ::= StringValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValuesJ",71, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // LineCodesJ2 ::= LineCodeJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodesJ2",70, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // LineCodesJ2 ::= LineCodesJ2 LineCodeJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodesJ2",70, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // LineCodesJ ::= LineCodesJ2 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodesJ",69, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // LineCodesJ ::= LineCodesJ2 RETURN_J ValuesJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodesJ",69, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ProcessJHeader ::= PUBLIC VOID_J ID PARENTHESIS_A PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ProcessJHeader",68, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ProcessJHeader ::= PUBLIC VOID_J ID PARENTHESIS_A ParametersJ PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ProcessJHeader",68, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ProcessJ ::= ProcessJHeader LEFT_CB RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ProcessJ",67, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ProcessJ ::= ProcessJHeader LEFT_CB LineCodesJ RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ProcessJ",67, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // FunctionJHeader ::= PUBLIC Type ID PARENTHESIS_A PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionJHeader",66, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // FunctionJHeader ::= PUBLIC Type ID PARENTHESIS_A ParametersJ PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionJHeader",66, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // FunctionJ ::= FunctionJHeader LEFT_CB RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionJ",65, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // FunctionJ ::= FunctionJHeader LEFT_CB LineCodesJ RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionJ",65, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ConditionJHeader ::= PUBLIC ID PARENTHESIS_A ParametersJ PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionJHeader",61, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ConstructorJ ::= ConditionJHeader LEFT_CB LineCodesJ RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConstructorJ",96, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ClassCodeJ ::= ConstructorJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClassCodeJ",64, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ClassCodeJ ::= LineCodeJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClassCodeJ",64, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ClassCodeJ ::= ProcessJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClassCodeJ",64, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ClassCodeJ ::= FunctionJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClassCodeJ",64, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // JavaClassCode ::= ClassCodeJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("JavaClassCode",63, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // JavaClassCode ::= JavaClassCode ClassCodeJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("JavaClassCode",63, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ParametersJ ::= Type ID 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParametersJ",62, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ParametersJ ::= ParametersJ COMMA Type ID 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParametersJ",62, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ClaseJHeader ::= PUBLIC CLASS_J ID 
            {
              Object RESULT =null;
		sma.testManager.creatFatherAmbit();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClaseJHeader",60, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ClaseJ ::= ClaseJHeader LEFT_CB JavaClassCode RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClaseJ",59, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // JavaCode ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("JavaCode",5, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // JavaCode ::= JavaCode ClaseJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("JavaCode",5, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Java ::= JAVA_SEPERATOR JavaCode 
            {
              Object RESULT =null;
		sma.testManager.switchNextTypes();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Java",2, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CaseValue ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type=sma.testManager.getTypeFromST(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                            if(type!=null){
                                RESULT=id;
                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseValue",58, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // CaseValue ::= CHAR 
            {
              Object RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String ch = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=ch;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseValue",58, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CaseValue ::= DECIMAL 
            {
              Object RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=dec;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseValue",58, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CaseValue ::= NUMBER 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=num;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseValue",58, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CasesVbHeader ::= CASE_VB ELSE 
            {
              Object RESULT =null;
		RESULT=Switch.ELSE;
                    sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesVbHeader",57, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CasesVbHeader ::= CASE_VB CaseValue 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=val;
                                            sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesVbHeader",57, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CasesVb ::= CasesVbHeader InstructionsFunctionVb 
            {
              Object RESULT =null;
		int caseHleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int caseHright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object caseH = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		UniquenessTable ut=sma.testManager.createNewUniquenessTable();
                                                                        if(caseH!=null){
                                                                            
                                                                            boolean verified =ut.add(caseH,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                            if(verified){
                                                                            
                                                                            sma.translateControlerTAC.getSwitchAsst().addCases((String)caseH,(ArrayList<Object>)lines);}
                                                                            }
                                                                        RESULT=ut;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesVb",56, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CasesVb ::= CasesVb CasesVbHeader InstructionsFunctionVb 
            {
              Object RESULT =null;
		int caseVbleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int caseVbright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object caseVb = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int caseHleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int caseHright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object caseH = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		UniquenessTable ut=(UniquenessTable)caseVb;
                                                                        if(caseH!=null){
                                                                            
                                                                            boolean verified =ut.add(caseH,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                            if(verified){
                                                                            
                                                                            sma.translateControlerTAC.getSwitchAsst().addCases((String)caseH,(ArrayList<Object>)lines);}
                                                                            }
                                                                        RESULT=ut;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesVb",56, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // SwitchVbHeader ::= SELECT_VB CASE_VB ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.translateControlerTAC.createSwitchAsst(id);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("SwitchVbHeader",55, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SwitchVb ::= SwitchVbHeader CasesVb END_VB SELECT_VB 
            {
              Object RESULT =null;
		sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(sma.translateControlerTAC.getSwitchAsst().getFatherCases()));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("SwitchVb",54, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ThenVb ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ThenVb",53, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ThenVb ::= THEN_VB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ThenVb",53, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ElseVb ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseVb",52, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ElseVb ::= ELSE_IF_VB OpBool ThenVb InstructionsFunctionVb ElseVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseVb",52, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ElseVb ::= ELSE InstructionsFunctionVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseVb",52, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // IfVbHeader ::= IF OpBool ThenVb 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT=op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IfVbHeader",51, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // IfVb ::= IfVbHeader InstructionsFunctionVb ElseVb END_VB IF 
            {
              Object RESULT =null;
		int ifBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int ifBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		Object ifBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int elseBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int elseBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object elseBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		BoolQuad bool=(BoolQuad)ifBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    if(elseBool!=null){bool.changeFatherNoBool((ArrayList<Object>)elseBool);}
                                                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool));
                                                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IfVb",50, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ConditionVb ::= SwitchVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionVb",49, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ConditionVb ::= IfVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionVb",49, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // AssignmentVb ::= ID EQUAL ValueVb 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                if(bool){sma.translateControlerTAC.creatTempIdQuadAssign(val,id);
                                                        sma.translateControlerTAC.acceptAllIdQuas();}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentVb",48, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // AssiVb ::= 
            {
              Object RESULT =null;
		System.out.println("ASSI VACIO");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssiVb",47, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // AssiVb ::= EQUAL ValueVb 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT = val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssiVb",47, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // IdsVb ::= ID AssiVb 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.insertPreTuple(id,null,val,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                        if(val!=null){ 
                                                            sma.translateControlerTAC.creatTempIdQuadAssign(val,id);}
                                        sma.translateControlerTAC.nextIdQuad();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IdsVb",46, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // IdsVb ::= IdsVb COMMA ID AssiVb 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.insertPreTuple(id,null,val,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        if(val!=null){ 
                                                            sma.translateControlerTAC.creatTempIdQuadAssign(val,id);}
                                                       
                                                        sma.translateControlerTAC.nextIdQuad();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IdsVb",46, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Type ::= CHAR_TYPE 
            {
              Object RESULT =null;
		RESULT=TypeManager.CHAR_TYPE;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Type ::= FLOAT_TYPE 
            {
              Object RESULT =null;
		RESULT=TypeManager.FLOAT_TYPE;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Type ::= INTEGER_TYPE 
            {
              Object RESULT =null;
		RESULT=TypeManager.INTEGER_TYPE;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DeTypeVb ::= IdsVb AS_VB Type AssiVb 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.testManager.insertPreTuplesToSymbolTable((Integer)type,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeTypeVb",45, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DeTypeVb ::= DeTypeVb COMMA IdsVb AS_VB Type AssiVb 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.testManager.insertPreTuplesToSymbolTable((Integer)type,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeTypeVb",45, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DeclarationVb ::= DIM_VB DeTypeVb 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationVb",44, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DoHeader ::= DO 
            {
              Object RESULT =null;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DoHeader",43, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DoWhileVb ::= DoHeader InstructionsFunctionVb LOOP_VB WHILE OpBool 
            {
              Object RESULT =null;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(op!=null){
                                                                                sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.creatDoWhile((ArrayList<Object>)lines,(BoolQuad)op));
                                                                                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DoWhileVb",42, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ExBoolVb ::= LESS_THAN_EQUAL 
            {
              Object RESULT =null;
		RESULT=Operation.LESS_THAN_EQUAL;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb",41, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ExBoolVb ::= GREATER_THAN_EQUAL 
            {
              Object RESULT =null;
		RESULT=Operation.GREATER_THAN_EQUAL;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb",41, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ExBoolVb ::= LESS_THAN 
            {
              Object RESULT =null;
		RESULT=Operation.LESS_THAN;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb",41, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ExBoolVb ::= GREATER_THAN 
            {
              Object RESULT =null;
		RESULT=Operation.GREATER_THAN;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb",41, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ExBoolVb ::= DIFERENT_VB 
            {
              Object RESULT =null;
		RESULT=Operation.DIFERENT;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb",41, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ExBoolVb ::= EQUAL 
            {
              Object RESULT =null;
		RESULT=Operation.EQUAL_BOOL;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb",41, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // BoolValueVb ::= PARENTHESIS_A OpBool PARENTHESIS_B 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT=val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueVb",40, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // BoolValueVb ::= NumberValue ExBoolVb Number3 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int exValleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int exValright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object exVal = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateBoolType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdBoolQuadruple(s1.getQuadruple(),s2.getQuadruple(),(Integer)exVal);
                                                                    RESULT=sma.translateControlerTAC.getcurrentTempQuads();
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueVb",40, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // BoolValueVb ::= FALSE 
            {
              Object RESULT =null;
		 Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.BOOL_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL_BOOL,0,1,null);
		                    RESULT=sma.translateControlerTAC.getcurrentTempQuads();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueVb",40, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // BoolValueVb ::= TRUE 
            {
              Object RESULT =null;
		 Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.BOOL_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL_BOOL,1,1,null);
		                    RESULT=sma.translateControlerTAC.getcurrentTempQuads();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueVb",40, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OpBool3 ::= BoolValueVb 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(val!=null){
                   RESULT = sma.translateControlerTAC.getBoolQuadControl().convertQuadToBool(((ArrayList<Object>)val)); 
        }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBool3",39, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OpBool3 ::= NOT BoolValueVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBool3",39, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OpBool2 ::= OpBool3 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBool2",38, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OpBool2 ::= OpBool2 AND OpBool3 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(val1!=null &&val2!=null){
                                            RESULT= sma.translateControlerTAC.getBoolQuadControl().operateBoolQuad(val1,val2,Operation.OP_AND);}
                                            
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBool2",38, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OpBool ::= OpBool2 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBool",37, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OpBool ::= OpBool OR OpBool2 
            {
              Object RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(val1!=null &&val2!=null){
                                            RESULT= sma.translateControlerTAC.getBoolQuadControl().operateBoolQuad(val1,val2,Operation.OP_OR);}
                                            
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBool",37, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // WhileVbHeader ::= WHILE OpBool 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.creatSonAmbit();
                                        sma.translateControlerTAC.createNewQuadrupleBlock();
                                        RESULT=op;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("WhileVbHeader",36, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // WhileVb ::= WhileVbHeader InstructionsFunctionVb END_VB WHILE 
            {
              Object RESULT =null;
		int whileBoolleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int whileBoolright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object whileBool = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		BoolQuad bool=(BoolQuad)whileBool;
                                                                                    if(lines!=null){bool.changeFatherYesBool((ArrayList<Object>)lines);}
                                                                                    sma.translateControlerTAC.addQuadsToCurrent(sma.translateControlerTAC.addGotoWhileTags(sma.translateControlerTAC.getBoolQuadControl().convertBoolToQuad(bool)));
                                                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("WhileVb",35, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Number3 ::= PARENTHESIS_A NumberValue PARENTHESIS_B 
            {
              Object RESULT =null;
		int asstleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int asstright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object asst = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT=asst;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3",34, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Number3 ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type=sma.testManager.getTypeFromST(val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                            if(type!=null){
                                Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL,val,null,null);
                                RESULT=new SynthesizedOpAsst(quadruple,type);
                            }else{

                                RESULT=null;
                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3",34, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Number3 ::= CHAR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.CHAR_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL,val,null,null);
		                    RESULT=new SynthesizedOpAsst(quadruple,type);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3",34, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Number3 ::= DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.FLOAT_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL,val,null,null);
		                    RESULT=new SynthesizedOpAsst(quadruple,type);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3",34, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Number3 ::= NUMBER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		 Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.INTEGER_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL,val,null,null);
		                    RESULT=new SynthesizedOpAsst(quadruple,type);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3",34, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Number2 ::= Number3 
            {
              Object RESULT =null;
		int asstleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int asstright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object asst = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=asst;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number2",33, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Number2 ::= Number2 MOD Number3 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.MOD);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number2",33, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Number2 ::= Number2 DIVISION Number3 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.DIVISION);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number2",33, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Number2 ::= Number2 MULTIPLICATION Number3 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.MULTIPLICATION);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number2",33, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NumberValue ::= Number2 
            {
              Object RESULT =null;
		int asstleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int asstright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object asst = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=asst;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumberValue",32, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NumberValue ::= NumberValue MINUS Number2 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.MINUS);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumberValue",32, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NumberValue ::= NumberValue PLUS Number2 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.PLUS);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumberValue",32, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Step ::= 
            {
              Object RESULT =null;
		RESULT="1";
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Step",31, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Step ::= STEP_VB PLUS CaseValue 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=value;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Step",31, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Step ::= STEP_VB MINUS CaseValue 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT="-"+(String)value;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Step",31, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Step ::= STEP_VB CaseValue 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=value;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Step",31, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // For ::= FOR 
            {
              Object RESULT =null;
		sma.testManager.creatSonAmbit();
                                                        sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("For",30, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ForVbHeaderStart ::= For ID EQUAL NumberValue 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type=sma.testManager.getTypeFromST(id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    if(type!=null){
                                                    if(sma.testManager.getTypeManager().isNumerico(type.getNumber())){
                                                        
                                                        boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        if(bool){sma.translateControlerTAC.creatTempIdQuadAssign(val,id);
                                                            RESULT=new SemanticAsstIdQuad(id, sma.translateControlerTAC.getcurrentTempQuads());
                                                        }
                                                    }else{
                                                        sma.testManager.callNumericError(id,type,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                    }}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForVbHeaderStart",29, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ForVbHeaderStart ::= For ID AS_VB Type EQUAL NumberValue 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		boolean bool= sma.testManager.assigValue(id,val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                if(bool){sma.translateControlerTAC.creatTempIdQuadAssign(val,id);
                                                        sma.translateControlerTAC.acceptAllIdQuas();
                                                        RESULT=id;}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForVbHeaderStart",29, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ForVbHeader ::= ForVbHeaderStart TO_VB NumberValue Step 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int stepleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int stepright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object step = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if (id!=null) {
                    SemanticAsstIdQuad saiq= (SemanticAsstIdQuad)id;
                    SynthesizedOpAsst s1= (SynthesizedOpAsst)num;
                    Quadruple quadruple=sma.translateControlerTAC.operateIdBoolQuadruple(saiq.getId(),s1.getQuadruple(),Operation.EQUAL_BOOL);
                    BoolQuad bool =sma.translateControlerTAC.getBoolQuadControl().convertQuadToBool(sma.translateControlerTAC.getcurrentTempQuads());
                     For f=sma.translateControlerTAC.createForAsst(saiq.getQuads(), (String) step, bool, saiq.getId());
                    RESULT=f;}
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForVbHeader",28, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ForVb ::= ForVbHeader InstructionsFunctionVb NEXT_VB 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		if(f!=null){
                                                                For fo=(For)f;
                                                                fo.addCode((ArrayList<Object>)lines);
                                                                sma.translateControlerTAC.addQuadsToCurrent(fo.convertToQuad());
                                                                }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForVb",27, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CycleVb ::= DoWhileVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleVb",26, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CycleVb ::= WhileVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleVb",26, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CycleVb ::= ForVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleVb",26, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ValueVb ::= NumberValue 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT = val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValueVb",25, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ValueVb ::= STRING 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValueVb",25, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ValuesVb ::= ValueVb 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=val;
                                if(val!=null){System.out.println(((SynthesizedOpAsst)val).toString());}else{}System.out.println("NULL");
                                
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValuesVb",24, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ValuesVb ::= ValueVb AMPERSON ValuesVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValuesVb",24, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OutputVb ::= CONSOLE_VB POINT WRITELN_VB PARENTHESIS_A ValuesVb PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputVb",23, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OutputVb ::= CONSOLE_VB POINT WRITE_VB PARENTHESIS_A ValuesVb PARENTHESIS_B 
            {
              Object RESULT =null;
		System.out.println("OUTPUT LINE");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputVb",23, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // InputVb ::= CHARINPUT PARENTHESIS_A STRING PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InputVb",22, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // InputVb ::= FLOATINPUT PARENTHESIS_A STRING PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InputVb",22, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // InputVb ::= INTINPUT PARENTHESIS_A STRING PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InputVb",22, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LnInstructionsVb ::= error 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",20, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LnInstructionsVb ::= ConditionVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",20, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LnInstructionsVb ::= AssignmentVb 
            {
              Object RESULT =null;
		System.out.println("ASIGNACION");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",20, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LnInstructionsVb ::= DeclarationVb 
            {
              Object RESULT =null;
		System.out.println("DECLARACION");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",20, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LnInstructionsVb ::= CycleVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",20, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LnInstructionsVb ::= OutputVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",20, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LnInstructionsVb ::= InputVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",20, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Lines ::= LnInstructionsVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Lines",21, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Lines ::= Lines LnInstructionsVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Lines",21, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // InstructionsFunctionVb2 ::= RETURN_VB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb2",19, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // InstructionsFunctionVb2 ::= RETURN_VB ValuesVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb2",19, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // InstructionsFunctionVb2 ::= LnInstructionsVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb2",19, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // InstructionsFunctionVb2 ::= Lines RETURN_VB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb2",19, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // InstructionsFunctionVb2 ::= Lines RETURN_VB ValuesVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb2",19, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // InstructionsFunctionVb2 ::= Lines LnInstructionsVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb2",19, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // InstructionsFunctionVb ::= InstructionsFunctionVb2 
            {
              Object RESULT =null;
		 RESULT=sma.translateControlerTAC.getcurrentQuads();
                                                    sma.testManager.finishAmbit();
                                                    sma.translateControlerTAC.acceptCurrentBlock();
                                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb",18, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Parameter ::= ID AS_VB Type 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.getParameterControl().insertParameter((Integer)type,id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Parameter",17, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Parameter ::= Parameter COMMA ID AS_VB Type 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.getParameterControl().insertParameter((Integer)type,id,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Parameter",17, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Parameters ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Parameters",16, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Parameters ::= Parameter 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Parameters",16, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Public ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Public",11, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Public ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Public",11, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SubVbHeader ::= Public SUB_VB ID PARENTHESIS_A Parameters PARENTHESIS_B 
            {
              Object RESULT =null;
		sma.testManager.creatFatherAmbit();
                                                                                            sma.translateControlerTAC.createNewQuadrupleBlock();
                                                                                            sma.testManager.insertParameters();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("SubVbHeader",15, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SubVb ::= SubVbHeader InstructionsFunctionVb END_VB SUB_VB 
            {
              Object RESULT =null;
		sma.testManager.finishAmbit();
                                                                            sma.translateControlerTAC.acceptCurrentBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("SubVb",14, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FunctionVbHeader ::= Public FUNCTION_VB ID PARENTHESIS_A Parameters PARENTHESIS_B AS_VB Type 
            {
              Object RESULT =null;
		sma.testManager.creatFatherAmbit();
                                                                                            sma.translateControlerTAC.createNewQuadrupleBlock();
                                                                                            sma.testManager.insertParameters();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionVbHeader",13, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-7)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FunctionVB ::= FunctionVbHeader InstructionsFunctionVb END_VB FUNCTION_VB 
            {
              Object RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		sma.translateControlerTAC.convertQuads((ArrayList<Object>)ins);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionVB",12, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VbCode ::= error VbCode 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("VbCode",4, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VbCode ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("VbCode",4, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VbCode ::= SubVb VbCode 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("VbCode",4, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VbCode ::= FunctionVB VbCode 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("VbCode",4, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VbSeperator ::= VB_SEPERATOR 
            {
              Object RESULT =null;
		sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("VbSeperator",8, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // VB ::= VbSeperator VbCode 
            {
              Object RESULT =null;
		sma.testManager.switchNextTypes();
                                    sma.translateControlerTAC.acceptCurrentBlock();
                                    
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("VB",1, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicio ::= VB Java Python Programa 
            {
              Object RESULT =null;
		System.out.println("FIN Inicio");
                                        sma.translateControlerTAC.printQuads();
                                        
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT = start_val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SyntaxMlgAnalyzer$parser.done_parsing();
          return CUP$SyntaxMlgAnalyzer$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

