
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Oct 05 00:37:34 CST 2020
//----------------------------------------------------

package tac_assembly_generator.languages.analyzers.syntax;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import tac_assembly_generator.languages.semantic.verification.TestManager;
import tac_assembly_generator.TAC.TranslateControlerTAC;
import tac_assembly_generator.TAC.quadruple.Operation;
import tac_assembly_generator.TAC.quadruple.Quadruple;
import tac_assembly_generator.languages.semantic.type.Type;
import tac_assembly_generator.languages.semantic.type.TypeManager;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Oct 05 00:37:34 CST 2020
  */
public class SyntaxMlgAnalyzer extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SyntaxMlgAnalyzer() {super();}

  /** Constructor which sets the default scanner. */
  public SyntaxMlgAnalyzer(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SyntaxMlgAnalyzer(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u011c\000\002\002\004\000\002\002\006\000\002\003" +
    "\004\000\002\012\003\000\002\006\004\000\002\006\004" +
    "\000\002\006\002\000\002\006\004\000\002\015\006\000" +
    "\002\016\012\000\002\016\011\000\002\017\013\000\002" +
    "\020\003\000\002\020\002\000\002\021\007\000\002\021" +
    "\005\000\002\022\004\000\002\022\005\000\002\022\004" +
    "\000\002\022\003\000\002\022\004\000\002\022\003\000" +
    "\002\024\004\000\002\024\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\025\006" +
    "\000\002\025\006\000\002\025\006\000\002\026\010\000" +
    "\002\026\010\000\002\027\005\000\002\027\003\000\002" +
    "\030\003\000\002\030\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\032\015\000\002\032\013" +
    "\000\002\033\004\000\002\033\005\000\002\033\005\000" +
    "\002\033\002\000\002\034\005\000\002\034\005\000\002" +
    "\034\003\000\002\035\005\000\002\035\005\000\002\035" +
    "\005\000\002\035\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\005\000" +
    "\002\037\007\000\002\040\005\000\002\040\003\000\002" +
    "\041\004\000\002\041\006\000\002\041\003\000\002\041" +
    "\003\000\002\041\005\000\002\013\003\000\002\013\003" +
    "\000\002\042\003\000\002\042\003\000\002\042\003\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\043\007\000\002\044\004\000\002\045\010\000\002\045" +
    "\006\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\046\006\000\002\046\004\000\002\047\004\000" +
    "\002\047\002\000\002\050\005\000\002\051\003\000\002" +
    "\051\003\000\002\052\011\000\002\053\004\000\002\053" +
    "\007\000\002\053\002\000\002\054\003\000\002\054\002" +
    "\000\002\055\010\000\002\056\006\000\002\056\005\000" +
    "\002\004\004\000\002\007\004\000\002\007\002\000\002" +
    "\057\006\000\002\060\005\000\002\062\006\000\002\062" +
    "\004\000\002\063\004\000\002\063\003\000\002\064\003" +
    "\000\002\064\003\000\002\064\003\000\002\064\003\000" +
    "\002\124\006\000\002\061\007\000\002\065\006\000\002" +
    "\065\005\000\002\066\010\000\002\066\007\000\002\067" +
    "\006\000\002\067\005\000\002\070\010\000\002\070\007" +
    "\000\002\071\005\000\002\071\003\000\002\072\004\000" +
    "\002\072\003\000\002\073\003\000\002\073\003\000\002" +
    "\074\005\000\002\074\003\000\002\075\005\000\002\075" +
    "\003\000\002\076\003\000\002\076\003\000\002\076\003" +
    "\000\002\076\003\000\002\077\004\000\002\077\004\000" +
    "\002\077\003\000\002\077\004\000\002\077\004\000\002" +
    "\077\003\000\002\077\003\000\002\100\006\000\002\100" +
    "\006\000\002\101\006\000\002\101\006\000\002\101\006" +
    "\000\002\102\006\000\002\102\006\000\002\102\010\000" +
    "\002\103\017\000\002\103\016\000\002\104\006\000\002" +
    "\105\005\000\002\105\006\000\002\105\006\000\002\105" +
    "\006\000\002\105\006\000\002\106\005\000\002\106\004" +
    "\000\002\107\005\000\002\110\003\000\002\110\006\000" +
    "\002\111\007\000\002\112\006\000\002\113\006\000\002" +
    "\113\004\000\002\113\002\000\002\114\006\000\002\115" +
    "\004\000\002\115\007\000\002\115\003\000\002\116\004" +
    "\000\002\116\003\000\002\117\007\000\002\120\004\000" +
    "\002\120\002\000\002\121\004\000\002\121\003\000\002" +
    "\121\003\000\002\121\003\000\002\121\003\000\002\121" +
    "\003\000\002\122\004\000\002\122\005\000\002\122\003" +
    "\000\002\122\003\000\002\122\005\000\002\123\005\000" +
    "\002\123\003\000\002\005\004\000\002\010\002\000\002" +
    "\011\007\000\002\125\004\000\002\125\002\000\002\127" +
    "\005\000\002\127\004\000\002\130\007\000\002\130\010" +
    "\000\002\131\006\000\002\131\005\000\002\132\005\000" +
    "\002\132\005\000\002\133\005\000\002\133\003\000\002" +
    "\134\007\000\002\134\005\000\002\135\005\000\002\135" +
    "\004\000\002\136\004\000\002\136\006\000\002\126\011" +
    "\000\002\137\004\000\002\137\003\000\002\140\004\000" +
    "\002\140\004\000\002\140\003\000\002\140\003\000\002" +
    "\140\004\000\002\140\004\000\002\140\004\000\002\140" +
    "\004\000\002\141\004\000\002\142\006\000\002\142\004" +
    "\000\002\143\004\000\002\143\003\000\002\143\005\000" +
    "\002\143\002\000\002\144\005\000\002\144\006\000\002" +
    "\145\006\000\002\145\006\000\002\146\006\000\002\147" +
    "\006\000\002\150\004\000\002\150\007\000\002\150\003" +
    "\000\002\151\004\000\002\151\003\000\002\152\006\000" +
    "\002\153\006\000\002\153\006\000\002\153\010\000\002" +
    "\154\015\000\002\154\014\000\002\155\006\000\002\156" +
    "\005\000\002\156\006\000\002\156\006\000\002\156\006" +
    "\000\002\156\006\000\002\157\006\000\002\157\005\000" +
    "\002\160\005\000\002\160\003\000\002\161\003\000\002" +
    "\161\003\000\002\161\003\000\002\161\003\000\002\162" +
    "\005\000\002\163\011\000\002\164\006\000\002\164\005" +
    "\000\002\165\005\000\002\165\003\000\002\166\005\000" +
    "\002\166\003\000\002\167\003\000\002\167\003\000\002" +
    "\167\003\000\002\167\003\000\002\167\003\000\002\172" +
    "\004\000\002\170\004\000\002\170\005\000\002\170\003" +
    "\000\002\170\003\000\002\170\003\000\002\170\005\000" +
    "\002\171\005\000\002\171\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u029f\000\004\004\004\001\002\000\012\003\ufffe\033" +
    "\ufffe\054\ufffe\057\ufffe\001\002\000\004\054\340\001\002" +
    "\000\012\003\012\033\017\054\ufffb\057\013\001\002\000" +
    "\004\002\010\001\002\000\004\002\001\001\002\000\004" +
    "\054\uffff\001\002\000\012\003\012\033\017\054\ufffb\057" +
    "\013\001\002\000\004\050\330\001\002\000\012\003\012" +
    "\033\017\054\ufffb\057\013\001\002\000\012\003\012\033" +
    "\017\054\ufffb\057\013\001\002\000\034\003\072\030\070" +
    "\031\077\032\055\034\076\035\053\036\062\041\057\050" +
    "\060\055\065\062\061\063\051\075\064\001\002\000\006" +
    "\057\021\061\020\001\002\000\004\050\043\001\002\000" +
    "\004\050\022\001\002\000\004\007\023\001\002\000\006" +
    "\010\ufff4\050\024\001\002\000\004\056\041\001\002\000" +
    "\004\010\036\001\002\000\006\010\ufff5\021\027\001\002" +
    "\000\004\050\030\001\002\000\004\056\031\001\002\000" +
    "\010\022\034\023\035\024\033\001\002\000\006\010\ufff3" +
    "\021\ufff3\001\002\000\056\003\uffae\006\uffae\010\uffae\021" +
    "\uffae\030\uffae\031\uffae\032\uffae\034\uffae\035\uffae\036\uffae" +
    "\041\uffae\042\uffae\050\uffae\055\uffae\060\uffae\062\uffae\063" +
    "\uffae\070\uffae\072\uffae\073\uffae\075\uffae\076\uffae\001\002" +
    "\000\056\003\uffb0\006\uffb0\010\uffb0\021\uffb0\030\uffb0\031" +
    "\uffb0\032\uffb0\034\uffb0\035\uffb0\036\uffb0\041\uffb0\042\uffb0" +
    "\050\uffb0\055\uffb0\060\uffb0\062\uffb0\063\uffb0\070\uffb0\072" +
    "\uffb0\073\uffb0\075\uffb0\076\uffb0\001\002\000\056\003\uffaf" +
    "\006\uffaf\010\uffaf\021\uffaf\030\uffaf\031\uffaf\032\uffaf\034" +
    "\uffaf\035\uffaf\036\uffaf\041\uffaf\042\uffaf\050\uffaf\055\uffaf" +
    "\060\uffaf\062\uffaf\063\uffaf\070\uffaf\072\uffaf\073\uffaf\075" +
    "\uffaf\076\uffaf\001\002\000\004\056\037\001\002\000\010" +
    "\022\034\023\035\024\033\001\002\000\034\003\ufff8\030" +
    "\ufff8\031\ufff8\032\ufff8\034\ufff8\035\ufff8\036\ufff8\041\ufff8" +
    "\050\ufff8\055\ufff8\062\ufff8\063\ufff8\075\ufff8\001\002\000" +
    "\010\022\034\023\035\024\033\001\002\000\006\010\ufff2" +
    "\021\ufff2\001\002\000\004\007\044\001\002\000\006\010" +
    "\ufff4\050\024\001\002\000\004\010\046\001\002\000\034" +
    "\003\072\030\070\031\077\032\055\034\076\035\053\036" +
    "\062\041\057\050\060\055\065\062\061\063\051\075\064" +
    "\001\002\000\050\003\uffe8\030\uffe8\031\uffe8\032\uffe8\034" +
    "\uffe8\035\uffe8\036\uffe8\041\uffe8\042\uffe8\050\uffe8\055\uffe8" +
    "\060\uffe8\062\uffe8\063\uffe8\070\uffe8\072\uffe8\073\uffe8\075" +
    "\uffe8\076\uffe8\001\002\000\050\003\uffd8\030\uffd8\031\uffd8" +
    "\032\uffd8\034\uffd8\035\uffd8\036\uffd8\041\uffd8\042\uffd8\050" +
    "\uffd8\055\uffd8\060\uffd8\062\uffd8\063\uffd8\070\uffd8\072\uffd8" +
    "\073\uffd8\075\uffd8\076\uffd8\001\002\000\004\017\312\001" +
    "\002\000\050\003\uffd7\030\uffd7\031\uffd7\032\uffd7\034\uffd7" +
    "\035\uffd7\036\uffd7\041\uffd7\042\uffd7\050\uffd7\055\uffd7\060" +
    "\uffd7\062\uffd7\063\uffd7\070\uffd7\072\uffd7\073\uffd7\075\uffd7" +
    "\076\uffd7\001\002\000\022\007\114\027\232\037\227\040" +
    "\230\050\112\051\120\052\115\053\121\001\002\000\050" +
    "\003\uffa7\030\uffa7\031\uffa7\032\uffa7\034\uffa7\035\uffa7\036" +
    "\uffa7\041\uffa7\042\uffa7\050\uffa7\055\uffa7\060\uffa7\062\uffa7" +
    "\063\uffa7\070\uffa7\072\uffa7\073\uffa7\075\uffa7\076\uffa7\001" +
    "\002\000\004\007\303\001\002\000\034\003\072\030\070" +
    "\031\077\032\055\034\076\035\053\036\062\041\057\050" +
    "\060\055\065\062\300\063\051\075\064\001\002\000\022" +
    "\007\114\027\232\037\227\040\230\050\112\051\120\052" +
    "\115\053\121\001\002\000\004\006\260\001\002\000\032" +
    "\007\114\042\uffec\047\177\050\112\051\120\052\115\053" +
    "\121\060\uffec\070\uffec\072\uffec\073\uffec\076\uffec\001\002" +
    "\000\034\003\072\030\070\031\077\032\055\034\076\035" +
    "\053\036\062\041\057\050\060\055\065\062\061\063\051" +
    "\075\064\001\002\000\050\003\uffa8\030\uffa8\031\uffa8\032" +
    "\uffa8\034\uffa8\035\uffa8\036\uffa8\041\uffa8\042\uffa8\050\uffa8" +
    "\055\uffa8\060\uffa8\062\uffa8\063\uffa8\070\uffa8\072\uffa8\073" +
    "\uffa8\075\uffa8\076\uffa8\001\002\000\004\076\207\001\002" +
    "\000\004\050\164\001\002\000\050\003\uffe6\030\uffe6\031" +
    "\uffe6\032\uffe6\034\uffe6\035\uffe6\036\uffe6\041\uffe6\042\uffe6" +
    "\050\uffe6\055\uffe6\060\uffe6\062\uffe6\063\uffe6\070\uffe6\072" +
    "\uffe6\073\uffe6\075\uffe6\076\uffe6\001\002\000\050\003\uffe9" +
    "\030\uffe9\031\uffe9\032\uffe9\034\uffe9\035\uffe9\036\uffe9\041" +
    "\uffe9\042\uffe9\050\uffe9\055\uffe9\060\uffe9\062\uffe9\063\uffe9" +
    "\070\uffe9\072\uffe9\073\uffe9\075\uffe9\076\uffe9\001\002\000" +
    "\004\007\161\001\002\000\050\003\uffe5\030\uffe5\031\uffe5" +
    "\032\uffe5\034\uffe5\035\uffe5\036\uffe5\041\uffe5\042\uffe5\050" +
    "\uffe5\055\uffe5\060\uffe5\062\uffe5\063\uffe5\070\uffe5\072\uffe5" +
    "\073\uffe5\075\uffe5\076\uffe5\001\002\000\050\003\uffe3\030" +
    "\uffe3\031\uffe3\032\uffe3\034\uffe3\035\uffe3\036\uffe3\041\uffe3" +
    "\042\uffe3\050\uffe3\055\uffe3\060\uffe3\062\uffe3\063\uffe3\070" +
    "\uffe3\072\uffe3\073\uffe3\075\uffe3\076\uffe3\001\002\000\050" +
    "\003\uffe7\030\uffe7\031\uffe7\032\uffe7\034\uffe7\035\uffe7\036" +
    "\uffe7\041\uffe7\042\uffe7\050\uffe7\055\uffe7\060\uffe7\062\uffe7" +
    "\063\uffe7\070\uffe7\072\uffe7\073\uffe7\075\uffe7\076\uffe7\001" +
    "\002\000\050\003\uffe4\030\uffe4\031\uffe4\032\uffe4\034\uffe4" +
    "\035\uffe4\036\uffe4\041\uffe4\042\uffe4\050\uffe4\055\uffe4\060" +
    "\uffe4\062\uffe4\063\uffe4\070\uffe4\072\uffe4\073\uffe4\075\uffe4" +
    "\076\uffe4\001\002\000\004\060\157\001\002\000\004\050" +
    "\105\001\002\000\004\007\102\001\002\000\050\003\uffd9" +
    "\030\uffd9\031\uffd9\032\uffd9\034\uffd9\035\uffd9\036\uffd9\041" +
    "\uffd9\042\uffd9\050\uffd9\055\uffd9\060\uffd9\062\uffd9\063\uffd9" +
    "\070\uffd9\072\uffd9\073\uffd9\075\uffd9\076\uffd9\001\002\000" +
    "\050\003\uffea\030\uffea\031\uffea\032\uffea\034\uffea\035\uffea" +
    "\036\uffea\041\uffea\042\uffee\050\uffea\055\uffea\060\uffee\062" +
    "\uffea\063\uffea\070\uffee\072\uffee\073\uffee\075\uffea\076\uffee" +
    "\001\002\000\004\047\103\001\002\000\004\010\104\001" +
    "\002\000\050\003\uffe0\030\uffe0\031\uffe0\032\uffe0\034\uffe0" +
    "\035\uffe0\036\uffe0\041\uffe0\042\uffe0\050\uffe0\055\uffe0\060" +
    "\uffe0\062\uffe0\063\uffe0\070\uffe0\072\uffe0\073\uffe0\075\uffe0" +
    "\076\uffe0\001\002\000\006\006\106\056\107\001\002\000" +
    "\014\007\114\050\112\051\120\052\115\053\121\001\002" +
    "\000\010\022\034\023\035\024\033\001\002\000\004\006" +
    "\111\001\002\000\014\007\114\050\112\051\120\052\115" +
    "\053\121\001\002\000\140\003\uffc6\006\uffc6\010\uffc6\011" +
    "\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\020\uffc6\021\uffc6" +
    "\025\uffc6\026\uffc6\030\uffc6\031\uffc6\032\uffc6\034\uffc6\035" +
    "\uffc6\036\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6" +
    "\046\uffc6\050\uffc6\055\uffc6\056\uffc6\060\uffc6\062\uffc6\063" +
    "\uffc6\066\uffc6\067\uffc6\070\uffc6\071\uffc6\072\uffc6\073\uffc6" +
    "\074\uffc6\075\uffc6\076\uffc6\106\uffc6\107\uffc6\110\uffc6\111" +
    "\uffc6\113\uffc6\114\uffc6\115\uffc6\121\uffc6\001\002\000\010" +
    "\011\132\012\133\066\136\001\002\000\014\007\114\050" +
    "\112\051\120\052\115\053\121\001\002\000\140\003\uffc9" +
    "\006\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015" +
    "\uffc9\020\uffc9\021\uffc9\025\uffc9\026\uffc9\030\uffc9\031\uffc9" +
    "\032\uffc9\034\uffc9\035\uffc9\036\uffc9\041\uffc9\042\uffc9\043" +
    "\uffc9\044\uffc9\045\uffc9\046\uffc9\050\uffc9\055\uffc9\056\uffc9" +
    "\060\uffc9\062\uffc9\063\uffc9\066\uffc9\067\uffc9\070\uffc9\071" +
    "\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9\076\uffc9\106\uffc9" +
    "\107\uffc9\110\uffc9\111\uffc9\113\uffc9\114\uffc9\115\uffc9\121" +
    "\uffc9\001\002\000\136\003\uffca\006\uffca\010\uffca\011\uffca" +
    "\012\uffca\013\uffca\014\uffca\015\uffca\020\uffca\021\uffca\025" +
    "\uffca\026\uffca\030\uffca\031\uffca\032\uffca\034\uffca\035\uffca" +
    "\036\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046" +
    "\uffca\050\uffca\055\uffca\056\uffca\060\uffca\062\uffca\063\uffca" +
    "\066\uffca\067\uffca\070\uffca\071\uffca\072\uffca\073\uffca\075" +
    "\uffca\076\uffca\106\uffca\107\uffca\110\uffca\111\uffca\113\uffca" +
    "\114\uffca\115\uffca\121\uffca\001\002\000\136\003\uffce\006" +
    "\uffce\010\uffce\011\uffce\012\uffce\013\123\014\124\015\122" +
    "\020\uffce\021\uffce\025\uffce\026\uffce\030\uffce\031\uffce\032" +
    "\uffce\034\uffce\035\uffce\036\uffce\041\uffce\042\uffce\043\uffce" +
    "\044\uffce\045\uffce\046\uffce\050\uffce\055\uffce\056\uffce\060" +
    "\uffce\062\uffce\063\uffce\066\uffce\067\uffce\070\uffce\071\uffce" +
    "\072\uffce\073\uffce\075\uffce\076\uffce\106\uffce\107\uffce\110" +
    "\uffce\111\uffce\113\uffce\114\uffce\115\uffce\121\uffce\001\002" +
    "\000\140\003\uffc7\006\uffc7\010\uffc7\011\uffc7\012\uffc7\013" +
    "\uffc7\014\uffc7\015\uffc7\020\uffc7\021\uffc7\025\uffc7\026\uffc7" +
    "\030\uffc7\031\uffc7\032\uffc7\034\uffc7\035\uffc7\036\uffc7\041" +
    "\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\050\uffc7" +
    "\055\uffc7\056\uffc7\060\uffc7\062\uffc7\063\uffc7\066\uffc7\067" +
    "\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7\075\uffc7" +
    "\076\uffc7\106\uffc7\107\uffc7\110\uffc7\111\uffc7\113\uffc7\114" +
    "\uffc7\115\uffc7\121\uffc7\001\002\000\140\003\uffc8\006\uffc8" +
    "\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\020" +
    "\uffc8\021\uffc8\025\uffc8\026\uffc8\030\uffc8\031\uffc8\032\uffc8" +
    "\034\uffc8\035\uffc8\036\uffc8\041\uffc8\042\uffc8\043\uffc8\044" +
    "\uffc8\045\uffc8\046\uffc8\050\uffc8\055\uffc8\056\uffc8\060\uffc8" +
    "\062\uffc8\063\uffc8\066\uffc8\067\uffc8\070\uffc8\071\uffc8\072" +
    "\uffc8\073\uffc8\074\uffc8\075\uffc8\076\uffc8\106\uffc8\107\uffc8" +
    "\110\uffc8\111\uffc8\113\uffc8\114\uffc8\115\uffc8\121\uffc8\001" +
    "\002\000\014\007\114\050\112\051\120\052\115\053\121" +
    "\001\002\000\014\007\114\050\112\051\120\052\115\053" +
    "\121\001\002\000\014\007\114\050\112\051\120\052\115" +
    "\053\121\001\002\000\136\003\uffcc\006\uffcc\010\uffcc\011" +
    "\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\020\uffcc\021\uffcc" +
    "\025\uffcc\026\uffcc\030\uffcc\031\uffcc\032\uffcc\034\uffcc\035" +
    "\uffcc\036\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc" +
    "\046\uffcc\050\uffcc\055\uffcc\056\uffcc\060\uffcc\062\uffcc\063" +
    "\uffcc\066\uffcc\067\uffcc\070\uffcc\071\uffcc\072\uffcc\073\uffcc" +
    "\075\uffcc\076\uffcc\106\uffcc\107\uffcc\110\uffcc\111\uffcc\113" +
    "\uffcc\114\uffcc\115\uffcc\121\uffcc\001\002\000\136\003\uffcd" +
    "\006\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015" +
    "\uffcd\020\uffcd\021\uffcd\025\uffcd\026\uffcd\030\uffcd\031\uffcd" +
    "\032\uffcd\034\uffcd\035\uffcd\036\uffcd\041\uffcd\042\uffcd\043" +
    "\uffcd\044\uffcd\045\uffcd\046\uffcd\050\uffcd\055\uffcd\056\uffcd" +
    "\060\uffcd\062\uffcd\063\uffcd\066\uffcd\067\uffcd\070\uffcd\071" +
    "\uffcd\072\uffcd\073\uffcd\075\uffcd\076\uffcd\106\uffcd\107\uffcd" +
    "\110\uffcd\111\uffcd\113\uffcd\114\uffcd\115\uffcd\121\uffcd\001" +
    "\002\000\136\003\uffcb\006\uffcb\010\uffcb\011\uffcb\012\uffcb" +
    "\013\uffcb\014\uffcb\015\uffcb\020\uffcb\021\uffcb\025\uffcb\026" +
    "\uffcb\030\uffcb\031\uffcb\032\uffcb\034\uffcb\035\uffcb\036\uffcb" +
    "\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\050" +
    "\uffcb\055\uffcb\056\uffcb\060\uffcb\062\uffcb\063\uffcb\066\uffcb" +
    "\067\uffcb\070\uffcb\071\uffcb\072\uffcb\073\uffcb\075\uffcb\076" +
    "\uffcb\106\uffcb\107\uffcb\110\uffcb\111\uffcb\113\uffcb\114\uffcb" +
    "\115\uffcb\121\uffcb\001\002\000\010\010\131\011\132\012" +
    "\133\001\002\000\140\003\uffc5\006\uffc5\010\uffc5\011\uffc5" +
    "\012\uffc5\013\uffc5\014\uffc5\015\uffc5\020\uffc5\021\uffc5\025" +
    "\uffc5\026\uffc5\030\uffc5\031\uffc5\032\uffc5\034\uffc5\035\uffc5" +
    "\036\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046" +
    "\uffc5\050\uffc5\055\uffc5\056\uffc5\060\uffc5\062\uffc5\063\uffc5" +
    "\066\uffc5\067\uffc5\070\uffc5\071\uffc5\072\uffc5\073\uffc5\074" +
    "\uffc5\075\uffc5\076\uffc5\106\uffc5\107\uffc5\110\uffc5\111\uffc5" +
    "\113\uffc5\114\uffc5\115\uffc5\121\uffc5\001\002\000\014\007" +
    "\114\050\112\051\120\052\115\053\121\001\002\000\014" +
    "\007\114\050\112\051\120\052\115\053\121\001\002\000" +
    "\136\003\uffcf\006\uffcf\010\uffcf\011\uffcf\012\uffcf\013\123" +
    "\014\124\015\122\020\uffcf\021\uffcf\025\uffcf\026\uffcf\030" +
    "\uffcf\031\uffcf\032\uffcf\034\uffcf\035\uffcf\036\uffcf\041\uffcf" +
    "\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\050\uffcf\055" +
    "\uffcf\056\uffcf\060\uffcf\062\uffcf\063\uffcf\066\uffcf\067\uffcf" +
    "\070\uffcf\071\uffcf\072\uffcf\073\uffcf\075\uffcf\076\uffcf\106" +
    "\uffcf\107\uffcf\110\uffcf\111\uffcf\113\uffcf\114\uffcf\115\uffcf" +
    "\121\uffcf\001\002\000\136\003\uffd0\006\uffd0\010\uffd0\011" +
    "\uffd0\012\uffd0\013\123\014\124\015\122\020\uffd0\021\uffd0" +
    "\025\uffd0\026\uffd0\030\uffd0\031\uffd0\032\uffd0\034\uffd0\035" +
    "\uffd0\036\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0" +
    "\046\uffd0\050\uffd0\055\uffd0\056\uffd0\060\uffd0\062\uffd0\063" +
    "\uffd0\066\uffd0\067\uffd0\070\uffd0\071\uffd0\072\uffd0\073\uffd0" +
    "\075\uffd0\076\uffd0\106\uffd0\107\uffd0\110\uffd0\111\uffd0\113" +
    "\uffd0\114\uffd0\115\uffd0\121\uffd0\001\002\000\014\007\114" +
    "\050\112\051\120\052\115\053\121\001\002\000\042\003" +
    "\uffd1\011\132\012\133\030\uffd1\031\uffd1\032\uffd1\034\uffd1" +
    "\035\uffd1\036\uffd1\041\uffd1\050\uffd1\055\uffd1\062\uffd1\063" +
    "\uffd1\067\141\075\uffd1\001\002\000\034\003\072\030\070" +
    "\031\077\032\055\034\076\035\053\036\062\041\057\050" +
    "\060\055\065\062\061\063\051\075\064\001\002\000\020" +
    "\007\114\011\143\012\142\050\112\051\120\052\115\053" +
    "\121\001\002\000\014\007\114\050\112\051\120\052\115" +
    "\053\121\001\002\000\014\007\114\050\112\051\120\052" +
    "\115\053\121\001\002\000\040\003\uffd4\011\132\012\133" +
    "\030\uffd4\031\uffd4\032\uffd4\034\uffd4\035\uffd4\036\uffd4\041" +
    "\uffd4\050\uffd4\055\uffd4\062\uffd4\063\uffd4\075\uffd4\001\002" +
    "\000\040\003\uffd2\011\132\012\133\030\uffd2\031\uffd2\032" +
    "\uffd2\034\uffd2\035\uffd2\036\uffd2\041\uffd2\050\uffd2\055\uffd2" +
    "\062\uffd2\063\uffd2\075\uffd2\001\002\000\040\003\uffd3\011" +
    "\132\012\133\030\uffd3\031\uffd3\032\uffd3\034\uffd3\035\uffd3" +
    "\036\uffd3\041\uffd3\050\uffd3\055\uffd3\062\uffd3\063\uffd3\075" +
    "\uffd3\001\002\000\004\070\150\001\002\000\050\003\uffd6" +
    "\030\uffd6\031\uffd6\032\uffd6\034\uffd6\035\uffd6\036\uffd6\041" +
    "\uffd6\042\uffd6\050\uffd6\055\uffd6\060\uffd6\062\uffd6\063\uffd6" +
    "\070\uffd6\072\uffd6\073\uffd6\075\uffd6\076\uffd6\001\002\000" +
    "\010\011\132\012\133\066\152\001\002\000\014\007\114" +
    "\050\112\051\120\052\115\053\121\001\002\000\042\003" +
    "\uffd1\011\132\012\133\030\uffd1\031\uffd1\032\uffd1\034\uffd1" +
    "\035\uffd1\036\uffd1\041\uffd1\050\uffd1\055\uffd1\062\uffd1\063" +
    "\uffd1\067\141\075\uffd1\001\002\000\034\003\072\030\070" +
    "\031\077\032\055\034\076\035\053\036\062\041\057\050" +
    "\060\055\065\062\061\063\051\075\064\001\002\000\004" +
    "\070\156\001\002\000\050\003\uffd5\030\uffd5\031\uffd5\032" +
    "\uffd5\034\uffd5\035\uffd5\036\uffd5\041\uffd5\042\uffd5\050\uffd5" +
    "\055\uffd5\060\uffd5\062\uffd5\063\uffd5\070\uffd5\072\uffd5\073" +
    "\uffd5\075\uffd5\076\uffd5\001\002\000\004\061\160\001\002" +
    "\000\012\003\ufff6\033\ufff6\054\ufff6\057\ufff6\001\002\000" +
    "\004\047\162\001\002\000\004\010\163\001\002\000\050" +
    "\003\uffe2\030\uffe2\031\uffe2\032\uffe2\034\uffe2\035\uffe2\036" +
    "\uffe2\041\uffe2\042\uffe2\050\uffe2\055\uffe2\060\uffe2\062\uffe2" +
    "\063\uffe2\070\uffe2\072\uffe2\073\uffe2\075\uffe2\076\uffe2\001" +
    "\002\000\012\006\174\021\uffaa\056\uffaa\111\uffaa\001\002" +
    "\000\006\021\171\056\203\001\002\000\052\003\uffb3\021" +
    "\167\030\uffb3\031\uffb3\032\uffb3\034\uffb3\035\uffb3\036\uffb3" +
    "\041\uffb3\042\uffb3\050\uffb3\055\uffb3\060\uffb3\062\uffb3\063" +
    "\uffb3\070\uffb3\072\uffb3\073\uffb3\075\uffb3\076\uffb3\001\002" +
    "\000\004\050\164\001\002\000\006\021\171\056\172\001" +
    "\002\000\004\050\201\001\002\000\010\022\034\023\035" +
    "\024\033\001\002\000\054\003\uffaa\006\174\021\uffaa\030" +
    "\uffaa\031\uffaa\032\uffaa\034\uffaa\035\uffaa\036\uffaa\041\uffaa" +
    "\042\uffaa\050\uffaa\055\uffaa\060\uffaa\062\uffaa\063\uffaa\070" +
    "\uffaa\072\uffaa\073\uffaa\075\uffaa\076\uffaa\001\002\000\016" +
    "\007\114\047\177\050\112\051\120\052\115\053\121\001" +
    "\002\000\052\003\uffb2\021\uffb2\030\uffb2\031\uffb2\032\uffb2" +
    "\034\uffb2\035\uffb2\036\uffb2\041\uffb2\042\uffb2\050\uffb2\055" +
    "\uffb2\060\uffb2\062\uffb2\063\uffb2\070\uffb2\072\uffb2\073\uffb2" +
    "\075\uffb2\076\uffb2\001\002\000\056\003\uffab\021\uffab\030" +
    "\uffab\031\uffab\032\uffab\034\uffab\035\uffab\036\uffab\041\uffab" +
    "\042\uffab\050\uffab\055\uffab\056\uffab\060\uffab\062\uffab\063" +
    "\uffab\070\uffab\072\uffab\073\uffab\075\uffab\076\uffab\111\uffab" +
    "\001\002\000\062\003\uffdb\010\uffdb\020\uffdb\021\uffdb\030" +
    "\uffdb\031\uffdb\032\uffdb\034\uffdb\035\uffdb\036\uffdb\041\uffdb" +
    "\042\uffdb\050\uffdb\055\uffdb\056\uffdb\060\uffdb\062\uffdb\063" +
    "\uffdb\070\uffdb\072\uffdb\073\uffdb\075\uffdb\076\uffdb\111\uffdb" +
    "\001\002\000\066\003\uffda\010\uffda\011\132\012\133\020" +
    "\uffda\021\uffda\030\uffda\031\uffda\032\uffda\034\uffda\035\uffda" +
    "\036\uffda\041\uffda\042\uffda\050\uffda\055\uffda\056\uffda\060" +
    "\uffda\062\uffda\063\uffda\070\uffda\072\uffda\073\uffda\075\uffda" +
    "\076\uffda\111\uffda\001\002\000\012\006\174\021\uffaa\056" +
    "\uffaa\111\uffaa\001\002\000\010\021\uffad\056\uffad\111\uffad" +
    "\001\002\000\010\022\034\023\035\024\033\001\002\000" +
    "\054\003\uffaa\006\174\021\uffaa\030\uffaa\031\uffaa\032\uffaa" +
    "\034\uffaa\035\uffaa\036\uffaa\041\uffaa\042\uffaa\050\uffaa\055" +
    "\uffaa\060\uffaa\062\uffaa\063\uffaa\070\uffaa\072\uffaa\073\uffaa" +
    "\075\uffaa\076\uffaa\001\002\000\052\003\uffb1\021\uffb1\030" +
    "\uffb1\031\uffb1\032\uffb1\034\uffb1\035\uffb1\036\uffb1\041\uffb1" +
    "\042\uffb1\050\uffb1\055\uffb1\060\uffb1\062\uffb1\063\uffb1\070" +
    "\uffb1\072\uffb1\073\uffb1\075\uffb1\076\uffb1\001\002\000\010" +
    "\021\uffac\056\uffac\111\uffac\001\002\000\004\050\210\001" +
    "\002\000\004\076\212\001\002\000\004\060\220\001\002" +
    "\000\020\007\114\042\214\047\177\050\112\051\120\052" +
    "\115\053\121\001\002\000\034\003\072\030\070\031\077" +
    "\032\055\034\076\035\053\036\062\041\057\050\060\055" +
    "\065\062\061\063\051\075\064\001\002\000\034\003\072" +
    "\030\070\031\077\032\055\034\076\035\053\036\062\041" +
    "\057\050\060\055\065\062\061\063\051\075\064\001\002" +
    "\000\004\060\uff9e\001\002\000\004\076\212\001\002\000" +
    "\004\060\uff9f\001\002\000\004\075\221\001\002\000\050" +
    "\003\uffa0\030\uffa0\031\uffa0\032\uffa0\034\uffa0\035\uffa0\036" +
    "\uffa0\041\uffa0\042\uffa0\050\uffa0\055\uffa0\060\uffa0\062\uffa0" +
    "\063\uffa0\070\uffa0\072\uffa0\073\uffa0\075\uffa0\076\uffa0\001" +
    "\002\000\004\072\223\001\002\000\004\035\224\001\002" +
    "\000\022\007\114\027\232\037\227\040\230\050\112\051" +
    "\120\052\115\053\121\001\002\000\060\003\uffc2\010\uffc2" +
    "\025\uffc2\026\uffc2\030\uffc2\031\uffc2\032\uffc2\034\uffc2\035" +
    "\uffc2\036\uffc2\041\uffc2\042\uffc2\050\uffc2\055\uffc2\060\uffc2" +
    "\062\uffc2\063\uffc2\070\uffc2\072\uffc2\073\uffc2\074\uffc2\075" +
    "\uffc2\076\uffc2\001\002\000\054\003\uffb4\025\252\026\251" +
    "\030\uffb4\031\uffb4\032\uffb4\034\uffb4\035\uffb4\036\uffb4\041" +
    "\uffb4\042\uffb4\050\uffb4\055\uffb4\060\uffb4\062\uffb4\063\uffb4" +
    "\070\uffb4\072\uffb4\073\uffb4\075\uffb4\076\uffb4\001\002\000" +
    "\060\003\uffbf\010\uffbf\025\uffbf\026\uffbf\030\uffbf\031\uffbf" +
    "\032\uffbf\034\uffbf\035\uffbf\036\uffbf\041\uffbf\042\uffbf\050" +
    "\uffbf\055\uffbf\060\uffbf\062\uffbf\063\uffbf\070\uffbf\072\uffbf" +
    "\073\uffbf\074\uffbf\075\uffbf\076\uffbf\001\002\000\060\003" +
    "\uffbe\010\uffbe\025\uffbe\026\uffbe\030\uffbe\031\uffbe\032\uffbe" +
    "\034\uffbe\035\uffbe\036\uffbe\041\uffbe\042\uffbe\050\uffbe\055" +
    "\uffbe\060\uffbe\062\uffbe\063\uffbe\070\uffbe\072\uffbe\073\uffbe" +
    "\074\uffbe\075\uffbe\076\uffbe\001\002\000\022\006\240\011" +
    "\132\012\133\043\244\044\241\045\243\046\237\071\245" +
    "\001\002\000\022\007\234\027\232\037\227\040\230\050" +
    "\112\051\120\052\115\053\121\001\002\000\060\003\uffc1" +
    "\010\uffc1\025\uffc1\026\uffc1\030\uffc1\031\uffc1\032\uffc1\034" +
    "\uffc1\035\uffc1\036\uffc1\041\uffc1\042\uffc1\050\uffc1\055\uffc1" +
    "\060\uffc1\062\uffc1\063\uffc1\070\uffc1\072\uffc1\073\uffc1\074" +
    "\uffc1\075\uffc1\076\uffc1\001\002\000\022\007\114\027\232" +
    "\037\227\040\230\050\112\051\120\052\115\053\121\001" +
    "\002\000\010\010\250\025\252\026\251\001\002\000\024" +
    "\006\240\010\131\011\132\012\133\043\244\044\241\045" +
    "\243\046\237\071\245\001\002\000\014\007\uffb5\050\uffb5" +
    "\051\uffb5\052\uffb5\053\uffb5\001\002\000\014\007\uffba\050" +
    "\uffba\051\uffba\052\uffba\053\uffba\001\002\000\014\007\uffb7" +
    "\050\uffb7\051\uffb7\052\uffb7\053\uffb7\001\002\000\014\007" +
    "\114\050\112\051\120\052\115\053\121\001\002\000\014" +
    "\007\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\001\002\000" +
    "\014\007\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\001\002" +
    "\000\014\007\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\001" +
    "\002\000\060\003\uffbd\010\uffbd\025\uffbd\026\uffbd\030\uffbd" +
    "\031\uffbd\032\uffbd\034\uffbd\035\uffbd\036\uffbd\041\uffbd\042" +
    "\uffbd\050\uffbd\055\uffbd\060\uffbd\062\uffbd\063\uffbd\070\uffbd" +
    "\072\uffbd\073\uffbd\074\uffbd\075\uffbd\076\uffbd\001\002\000" +
    "\022\007\114\027\232\037\227\040\230\050\112\051\120" +
    "\052\115\053\121\001\002\000\060\003\uffc0\010\uffc0\025" +
    "\uffc0\026\uffc0\030\uffc0\031\uffc0\032\uffc0\034\uffc0\035\uffc0" +
    "\036\uffc0\041\uffc0\042\uffc0\050\uffc0\055\uffc0\060\uffc0\062" +
    "\uffc0\063\uffc0\070\uffc0\072\uffc0\073\uffc0\074\uffc0\075\uffc0" +
    "\076\uffc0\001\002\000\022\007\uffbb\027\uffbb\037\uffbb\040" +
    "\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\001\002\000\022" +
    "\007\uffbc\027\uffbc\037\uffbc\040\uffbc\050\uffbc\051\uffbc\052" +
    "\uffbc\053\uffbc\001\002\000\060\003\uffc3\010\uffc3\025\uffc3" +
    "\026\uffc3\030\uffc3\031\uffc3\032\uffc3\034\uffc3\035\uffc3\036" +
    "\uffc3\041\uffc3\042\uffc3\050\uffc3\055\uffc3\060\uffc3\062\uffc3" +
    "\063\uffc3\070\uffc3\072\uffc3\073\uffc3\074\uffc3\075\uffc3\076" +
    "\uffc3\001\002\000\022\010\uffdc\020\256\042\uffdc\060\uffdc" +
    "\070\uffdc\072\uffdc\073\uffdc\076\uffdc\001\002\000\016\042" +
    "\uffed\060\uffed\070\uffed\072\uffed\073\uffed\076\uffed\001\002" +
    "\000\016\007\114\047\177\050\112\051\120\052\115\053" +
    "\121\001\002\000\020\010\uffdd\042\uffdd\060\uffdd\070\uffdd" +
    "\072\uffdd\073\uffdd\076\uffdd\001\002\000\016\007\114\047" +
    "\177\050\112\051\120\052\115\053\121\001\002\000\050" +
    "\003\uffa9\030\uffa9\031\uffa9\032\uffa9\034\uffa9\035\uffa9\036" +
    "\uffa9\041\uffa9\042\uffa9\050\uffa9\055\uffa9\060\uffa9\062\uffa9" +
    "\063\uffa9\070\uffa9\072\uffa9\073\uffa9\075\uffa9\076\uffa9\001" +
    "\002\000\042\003\uffa1\025\252\026\251\030\uffa1\031\uffa1" +
    "\032\uffa1\034\uffa1\035\uffa1\036\uffa1\041\uffa1\050\uffa1\055" +
    "\uffa1\062\uffa1\063\uffa1\074\264\075\uffa1\001\002\000\034" +
    "\003\072\030\070\031\077\032\055\034\076\035\053\036" +
    "\062\041\057\050\060\055\065\062\061\063\051\075\064" +
    "\001\002\000\034\003\uffa2\030\uffa2\031\uffa2\032\uffa2\034" +
    "\uffa2\035\uffa2\036\uffa2\041\uffa2\050\uffa2\055\uffa2\062\uffa2" +
    "\063\uffa2\075\uffa2\001\002\000\010\042\267\060\uffa3\073" +
    "\270\001\002\000\004\060\276\001\002\000\034\003\072" +
    "\030\070\031\077\032\055\034\076\035\053\036\062\041" +
    "\057\050\060\055\065\062\061\063\051\075\064\001\002" +
    "\000\022\007\114\027\232\037\227\040\230\050\112\051" +
    "\120\052\115\053\121\001\002\000\042\003\uffa1\025\252" +
    "\026\251\030\uffa1\031\uffa1\032\uffa1\034\uffa1\035\uffa1\036" +
    "\uffa1\041\uffa1\050\uffa1\055\uffa1\062\uffa1\063\uffa1\074\264" +
    "\075\uffa1\001\002\000\034\003\072\030\070\031\077\032" +
    "\055\034\076\035\053\036\062\041\057\050\060\055\065" +
    "\062\061\063\051\075\064\001\002\000\010\042\267\060" +
    "\uffa3\073\270\001\002\000\004\060\uffa4\001\002\000\004" +
    "\060\uffa5\001\002\000\004\041\277\001\002\000\050\003" +
    "\uffa6\030\uffa6\031\uffa6\032\uffa6\034\uffa6\035\uffa6\036\uffa6" +
    "\041\uffa6\042\uffa6\050\uffa6\055\uffa6\060\uffa6\062\uffa6\063" +
    "\uffa6\070\uffa6\072\uffa6\073\uffa6\075\uffa6\076\uffa6\001\002" +
    "\000\032\007\114\042\uffef\047\177\050\112\051\120\052" +
    "\115\053\121\060\uffef\070\uffef\072\uffef\073\uffef\076\uffef" +
    "\001\002\000\050\003\uffeb\030\uffeb\031\uffeb\032\uffeb\034" +
    "\uffeb\035\uffeb\036\uffeb\041\uffeb\042\ufff1\050\uffeb\055\uffeb" +
    "\060\ufff1\062\uffeb\063\uffeb\070\ufff1\072\ufff1\073\ufff1\075" +
    "\uffeb\076\ufff1\001\002\000\016\042\ufff0\060\ufff0\070\ufff0" +
    "\072\ufff0\073\ufff0\076\ufff0\001\002\000\004\047\304\001" +
    "\002\000\004\010\305\001\002\000\050\003\uffe1\030\uffe1" +
    "\031\uffe1\032\uffe1\034\uffe1\035\uffe1\036\uffe1\041\uffe1\042" +
    "\uffe1\050\uffe1\055\uffe1\060\uffe1\062\uffe1\063\uffe1\070\uffe1" +
    "\072\uffe1\073\uffe1\075\uffe1\076\uffe1\001\002\000\040\003" +
    "\072\025\252\026\251\030\070\031\077\032\055\034\076" +
    "\035\053\036\062\041\057\050\060\055\065\062\061\063" +
    "\051\075\064\001\002\000\004\060\310\001\002\000\004" +
    "\035\311\001\002\000\050\003\uffc4\030\uffc4\031\uffc4\032" +
    "\uffc4\034\uffc4\035\uffc4\036\uffc4\041\uffc4\042\uffc4\050\uffc4" +
    "\055\uffc4\060\uffc4\062\uffc4\063\uffc4\070\uffc4\072\uffc4\073" +
    "\uffc4\075\uffc4\076\uffc4\001\002\000\006\064\314\065\313" +
    "\001\002\000\004\007\320\001\002\000\004\007\315\001" +
    "\002\000\016\007\114\047\177\050\112\051\120\052\115" +
    "\053\121\001\002\000\004\010\317\001\002\000\050\003" +
    "\uffdf\030\uffdf\031\uffdf\032\uffdf\034\uffdf\035\uffdf\036\uffdf" +
    "\041\uffdf\042\uffdf\050\uffdf\055\uffdf\060\uffdf\062\uffdf\063" +
    "\uffdf\070\uffdf\072\uffdf\073\uffdf\075\uffdf\076\uffdf\001\002" +
    "\000\016\007\114\047\177\050\112\051\120\052\115\053" +
    "\121\001\002\000\004\010\322\001\002\000\050\003\uffde" +
    "\030\uffde\031\uffde\032\uffde\034\uffde\035\uffde\036\uffde\041" +
    "\uffde\042\uffde\050\uffde\055\uffde\060\uffde\062\uffde\063\uffde" +
    "\070\uffde\072\uffde\073\uffde\075\uffde\076\uffde\001\002\000" +
    "\004\060\324\001\002\000\004\057\325\001\002\000\012" +
    "\003\ufff9\033\ufff9\054\ufff9\057\ufff9\001\002\000\004\054" +
    "\ufffc\001\002\000\004\054\ufffd\001\002\000\004\007\331" +
    "\001\002\000\006\010\ufff4\050\024\001\002\000\004\010" +
    "\333\001\002\000\004\056\334\001\002\000\010\022\034" +
    "\023\035\024\033\001\002\000\034\003\ufff7\030\ufff7\031" +
    "\ufff7\032\ufff7\034\ufff7\035\ufff7\036\ufff7\041\ufff7\050\ufff7" +
    "\055\ufff7\062\ufff7\063\ufff7\075\ufff7\001\002\000\004\054" +
    "\ufffa\001\002\000\004\077\u01bf\001\002\000\006\033\uff9b" +
    "\077\uff9b\001\002\000\006\033\344\077\uff9d\001\002\000" +
    "\004\112\347\001\002\000\006\033\uff9c\077\uff9c\001\002" +
    "\000\004\100\345\001\002\000\004\050\346\001\002\000" +
    "\004\112\uff99\001\002\000\042\003\366\022\034\023\035" +
    "\024\033\030\361\031\u0102\032\374\033\u0100\034\355\035" +
    "\375\036\u0109\041\362\050\363\103\372\104\371\105\377" +
    "\001\002\000\004\112\u01ba\001\002\000\044\003\uff95\022" +
    "\uff95\023\uff95\024\uff95\030\uff95\031\uff95\032\uff95\033\uff95" +
    "\034\uff95\035\uff95\036\uff95\041\uff95\050\uff95\103\uff95\104" +
    "\uff95\105\uff95\113\uff95\001\002\000\004\111\u01b9\001\002" +
    "\000\054\003\uff73\022\uff73\023\uff73\024\uff73\030\uff73\031" +
    "\uff73\032\uff73\033\uff73\034\uff73\035\uff73\036\uff73\041\uff73" +
    "\050\uff73\102\uff73\103\uff73\104\uff73\105\uff73\106\uff73\107" +
    "\uff73\110\uff73\113\uff73\001\002\000\044\003\uff94\022\uff94" +
    "\023\uff94\024\uff94\030\uff94\031\uff94\032\uff94\033\uff94\034" +
    "\uff94\035\uff94\036\uff94\041\uff94\050\uff94\103\uff94\104\uff94" +
    "\105\uff94\113\uff94\001\002\000\004\007\u0194\001\002\000" +
    "\004\112\u0191\001\002\000\004\112\u0180\001\002\000\004" +
    "\111\u017f\001\002\000\004\007\u017c\001\002\000\004\007" +
    "\u0179\001\002\000\004\006\u0177\001\002\000\054\003\uff5e" +
    "\022\uff5e\023\uff5e\024\uff5e\030\uff5e\031\uff5e\032\uff5e\033" +
    "\uff5e\034\uff5e\035\uff5e\036\uff5e\041\uff5e\050\uff5e\102\uff5e" +
    "\103\uff5e\104\uff5e\105\uff5e\106\uff5e\107\uff5e\110\uff5e\113" +
    "\uff5e\001\002\000\004\112\u0174\001\002\000\054\003\uff72" +
    "\022\uff72\023\uff72\024\uff72\030\uff72\031\uff72\032\uff72\033" +
    "\uff72\034\uff72\035\uff72\036\uff72\041\uff72\050\uff72\102\uff72" +
    "\103\uff72\104\uff72\105\uff72\106\uff72\107\uff72\110\uff72\113" +
    "\uff72\001\002\000\044\003\uff93\022\uff93\023\uff93\024\uff93" +
    "\030\uff93\031\uff93\032\uff93\033\uff93\034\uff93\035\uff93\036" +
    "\uff93\041\uff93\050\uff93\103\uff93\104\uff93\105\uff93\113\uff93" +
    "\001\002\000\004\111\u0173\001\002\000\004\007\u0170\001" +
    "\002\000\004\007\u0166\001\002\000\004\112\u0162\001\002" +
    "\000\004\007\u015f\001\002\000\004\007\u0147\001\002\000" +
    "\004\111\u0146\001\002\000\004\007\u0143\001\002\000\014" +
    "\022\034\023\035\024\033\050\u012e\101\u0130\001\002\000" +
    "\004\112\u012b\001\002\000\004\007\u0128\001\002\000\054" +
    "\003\uff76\022\uff76\023\uff76\024\uff76\030\uff76\031\uff76\032" +
    "\uff76\033\uff76\034\uff76\035\uff76\036\uff76\041\uff76\050\uff76" +
    "\102\uff76\103\uff76\104\uff76\105\uff76\106\uff76\107\uff76\110" +
    "\uff76\113\uff76\001\002\000\004\112\u011f\001\002\000\044" +
    "\003\uff91\022\uff91\023\uff91\024\uff91\030\uff91\031\uff91\032" +
    "\uff91\033\uff91\034\uff91\035\uff91\036\uff91\041\uff91\050\uff91" +
    "\103\uff91\104\uff91\105\uff91\113\uff91\001\002\000\004\050" +
    "\164\001\002\000\044\003\366\022\034\023\035\024\033" +
    "\030\361\031\u0102\032\374\033\u0100\034\355\035\375\036" +
    "\u0109\041\362\050\363\103\372\104\371\105\377\113\u011d" +
    "\001\002\000\044\003\uff92\022\uff92\023\uff92\024\uff92\030" +
    "\uff92\031\uff92\032\uff92\033\uff92\034\uff92\035\uff92\036\uff92" +
    "\041\uff92\050\uff92\103\uff92\104\uff92\105\uff92\113\uff92\001" +
    "\002\000\004\112\u010a\001\002\000\042\003\366\022\034" +
    "\023\035\024\033\030\361\031\u0102\032\374\033\u010c\034" +
    "\355\035\375\036\u0109\041\362\050\363\103\372\104\371" +
    "\105\377\001\002\000\054\003\uff83\022\uff83\023\uff83\024" +
    "\uff83\030\uff83\031\uff83\032\uff83\033\uff83\034\uff83\035\uff83" +
    "\036\uff83\041\uff83\050\uff83\102\uff83\103\uff83\104\uff83\105" +
    "\uff83\106\uff83\107\uff83\110\uff83\113\uff83\001\002\000\010" +
    "\022\034\023\035\024\033\001\002\000\054\003\366\022" +
    "\034\023\035\024\033\030\361\031\u0102\032\374\033\u010c" +
    "\034\355\035\375\036\u0109\041\362\050\363\102\u0113\103" +
    "\372\104\371\105\377\106\uff85\107\uff85\110\uff85\113\uff85" +
    "\001\002\000\004\113\u010f\001\002\000\004\035\375\001" +
    "\002\000\004\111\u0111\001\002\000\054\003\uff6a\022\uff6a" +
    "\023\uff6a\024\uff6a\030\uff6a\031\uff6a\032\uff6a\033\uff6a\034" +
    "\uff6a\035\uff6a\036\uff6a\041\uff6a\050\uff6a\102\uff6a\103\uff6a" +
    "\104\uff6a\105\uff6a\106\uff6a\107\uff6a\110\uff6a\113\uff6a\001" +
    "\002\000\054\003\uff84\022\uff84\023\uff84\024\uff84\030\uff84" +
    "\031\uff84\032\uff84\033\uff84\034\uff84\035\uff84\036\uff84\041" +
    "\uff84\050\uff84\102\uff84\103\uff84\104\uff84\105\uff84\106\uff84" +
    "\107\uff84\110\uff84\113\uff84\001\002\000\016\007\114\047" +
    "\u0116\050\112\051\120\052\115\053\121\001\002\000\012" +
    "\106\uff86\107\uff86\110\uff86\113\uff86\001\002\000\016\011" +
    "\u0118\106\uff82\107\uff82\110\uff82\113\uff82\114\uff82\001\002" +
    "\000\016\011\uff7f\106\uff7f\107\uff7f\110\uff7f\113\uff7f\114" +
    "\uff7f\001\002\000\020\011\132\012\133\106\uff81\107\uff81" +
    "\110\uff81\113\uff81\114\uff81\001\002\000\004\047\u0119\001" +
    "\002\000\016\011\uff80\106\uff80\107\uff80\110\uff80\113\uff80" +
    "\114\uff80\001\002\000\004\050\164\001\002\000\006\021" +
    "\171\111\uff61\001\002\000\044\003\uff96\022\uff96\023\uff96" +
    "\024\uff96\030\uff96\031\uff96\032\uff96\033\uff96\034\uff96\035" +
    "\uff96\036\uff96\041\uff96\050\uff96\103\uff96\104\uff96\105\uff96" +
    "\113\uff96\001\002\000\006\033\uff9a\077\uff9a\001\002\000" +
    "\006\021\171\111\uff60\001\002\000\042\003\366\022\034" +
    "\023\035\024\033\030\361\031\u0102\032\374\033\u010c\034" +
    "\355\035\375\036\u0109\041\362\050\363\103\372\104\371" +
    "\105\377\001\002\000\004\113\u0121\001\002\000\056\003" +
    "\uff58\022\uff58\023\uff58\024\uff58\030\uff58\031\uff58\032\uff58" +
    "\033\uff58\034\uff58\035\uff58\036\uff58\041\uff58\042\u0122\050" +
    "\uff58\102\uff58\103\uff58\104\uff58\105\uff58\106\uff58\107\uff58" +
    "\110\uff58\113\uff58\001\002\000\006\041\362\112\u0125\001" +
    "\002\000\054\003\uff5c\022\uff5c\023\uff5c\024\uff5c\030\uff5c" +
    "\031\uff5c\032\uff5c\033\uff5c\034\uff5c\035\uff5c\036\uff5c\041" +
    "\uff5c\050\uff5c\102\uff5c\103\uff5c\104\uff5c\105\uff5c\106\uff5c" +
    "\107\uff5c\110\uff5c\113\uff5c\001\002\000\054\003\uff59\022" +
    "\uff59\023\uff59\024\uff59\030\uff59\031\uff59\032\uff59\033\uff59" +
    "\034\uff59\035\uff59\036\uff59\041\uff59\050\uff59\102\uff59\103" +
    "\uff59\104\uff59\105\uff59\106\uff59\107\uff59\110\uff59\113\uff59" +
    "\001\002\000\042\003\366\022\034\023\035\024\033\030" +
    "\361\031\u0102\032\374\033\u010c\034\355\035\375\036\u0109" +
    "\041\362\050\363\103\372\104\371\105\377\001\002\000" +
    "\004\113\u0127\001\002\000\054\003\uff5a\022\uff5a\023\uff5a" +
    "\024\uff5a\030\uff5a\031\uff5a\032\uff5a\033\uff5a\034\uff5a\035" +
    "\uff5a\036\uff5a\041\uff5a\050\uff5a\102\uff5a\103\uff5a\104\uff5a" +
    "\105\uff5a\106\uff5a\107\uff5a\110\uff5a\113\uff5a\001\002\000" +
    "\004\047\u0129\001\002\000\004\010\u012a\001\002\000\004" +
    "\111\uff6d\001\002\000\042\003\366\022\034\023\035\024" +
    "\033\030\361\031\u0102\032\374\033\u010c\034\355\035\375" +
    "\036\u0109\041\362\050\363\103\372\104\371\105\377\001" +
    "\002\000\004\113\u012d\001\002\000\054\003\uff6b\022\uff6b" +
    "\023\uff6b\024\uff6b\030\uff6b\031\uff6b\032\uff6b\033\uff6b\034" +
    "\uff6b\035\uff6b\036\uff6b\041\uff6b\050\uff6b\102\uff6b\103\uff6b" +
    "\104\uff6b\105\uff6b\106\uff6b\107\uff6b\110\uff6b\113\uff6b\001" +
    "\002\000\004\007\u0140\001\002\000\004\050\u013b\001\002" +
    "\000\004\050\u0131\001\002\000\004\007\u0132\001\002\000" +
    "\012\010\u0134\022\034\023\035\024\033\001\002\000\004" +
    "\050\u013a\001\002\000\004\112\uff87\001\002\000\006\010" +
    "\u0137\021\u0136\001\002\000\010\022\034\023\035\024\033" +
    "\001\002\000\004\112\uff88\001\002\000\004\050\u0139\001" +
    "\002\000\006\010\uff98\021\uff98\001\002\000\006\010\uff97" +
    "\021\uff97\001\002\000\012\006\174\007\u013c\021\uffaa\111" +
    "\uffaa\001\002\000\012\010\u013d\022\034\023\035\024\033" +
    "\001\002\000\004\112\uff8b\001\002\000\006\010\u013f\021" +
    "\u0136\001\002\000\004\112\uff8c\001\002\000\010\022\034" +
    "\023\035\024\033\001\002\000\006\010\u0142\021\u0136\001" +
    "\002\000\004\112\uff8f\001\002\000\004\050\u0144\001\002" +
    "\000\004\010\u0145\001\002\000\004\112\uff57\001\002\000" +
    "\054\003\uff74\022\uff74\023\uff74\024\uff74\030\uff74\031\uff74" +
    "\032\uff74\033\uff74\034\uff74\035\uff74\036\uff74\041\uff74\050" +
    "\uff74\102\uff74\103\uff74\104\uff74\105\uff74\106\uff74\107\uff74" +
    "\110\uff74\113\uff74\001\002\000\022\007\u014b\027\u014d\037" +
    "\u0148\040\u0149\050\112\051\120\052\115\053\121\001\002" +
    "\000\010\010\uff46\025\uff46\026\uff46\001\002\000\010\010" +
    "\uff45\025\uff45\026\uff45\001\002\000\010\010\uff42\025\uff42" +
    "\026\uff42\001\002\000\022\007\u014b\027\u014d\037\u0148\040" +
    "\u0149\050\112\051\120\052\115\053\121\001\002\000\022" +
    "\006\u0155\011\132\012\133\043\u0158\044\u0156\045\u0157\046" +
    "\u0154\115\u0153\001\002\000\022\007\u014b\027\u014d\037\u0148" +
    "\040\u0149\050\112\051\120\052\115\053\121\001\002\000" +
    "\010\010\u0150\025\252\026\251\001\002\000\022\007\u014b" +
    "\027\u014d\037\u0148\040\u0149\050\112\051\120\052\115\053" +
    "\121\001\002\000\006\111\uff67\112\uff67\001\002\000\010" +
    "\010\uff43\025\uff43\026\uff43\001\002\000\010\010\uff48\025" +
    "\uff48\026\uff48\001\002\000\014\007\uff4d\050\uff4d\051\uff4d" +
    "\052\uff4d\053\uff4d\001\002\000\014\007\uff49\050\uff49\051" +
    "\uff49\052\uff49\053\uff49\001\002\000\004\006\u015b\001\002" +
    "\000\014\007\uff4b\050\uff4b\051\uff4b\052\uff4b\053\uff4b\001" +
    "\002\000\014\007\uff4a\050\uff4a\051\uff4a\052\uff4a\053\uff4a" +
    "\001\002\000\014\007\uff4c\050\uff4c\051\uff4c\052\uff4c\053" +
    "\uff4c\001\002\000\014\007\114\050\112\051\120\052\115" +
    "\053\121\001\002\000\014\010\uff44\011\132\012\133\025" +
    "\uff44\026\uff44\001\002\000\014\007\uff4e\050\uff4e\051\uff4e" +
    "\052\uff4e\053\uff4e\001\002\000\024\006\u0155\010\131\011" +
    "\132\012\133\043\u0158\044\u0156\045\u0157\046\u0154\115\u0153" +
    "\001\002\000\010\010\u015e\025\252\026\251\001\002\000" +
    "\010\010\uff47\025\uff47\026\uff47\001\002\000\004\047\u0160" +
    "\001\002\000\004\010\u0161\001\002\000\004\111\uff6e\001" +
    "\002\000\044\003\366\022\034\023\035\024\033\030\361" +
    "\031\u0102\032\374\033\u010c\034\355\035\375\036\u0109\041" +
    "\362\050\363\103\372\104\371\105\377\113\u0163\001\002" +
    "\000\044\003\uff8d\022\uff8d\023\uff8d\024\uff8d\030\uff8d\031" +
    "\uff8d\032\uff8d\033\uff8d\034\uff8d\035\uff8d\036\uff8d\041\uff8d" +
    "\050\uff8d\103\uff8d\104\uff8d\105\uff8d\113\uff8d\001\002\000" +
    "\004\113\u0165\001\002\000\044\003\uff8e\022\uff8e\023\uff8e" +
    "\024\uff8e\030\uff8e\031\uff8e\032\uff8e\033\uff8e\034\uff8e\035" +
    "\uff8e\036\uff8e\041\uff8e\050\uff8e\103\uff8e\104\uff8e\105\uff8e" +
    "\113\uff8e\001\002\000\012\047\u0169\050\u0167\052\u016b\053" +
    "\u016c\001\002\000\006\010\uff7c\011\uff7c\001\002\000\006" +
    "\010\uff7d\011\uff7d\001\002\000\006\010\uff79\011\uff79\001" +
    "\002\000\006\010\u016d\011\u016e\001\002\000\006\010\uff7b" +
    "\011\uff7b\001\002\000\006\010\uff7a\011\uff7a\001\002\000" +
    "\004\111\uff71\001\002\000\012\047\u0169\050\u0167\052\u016b" +
    "\053\u016c\001\002\000\006\010\uff7e\011\uff7e\001\002\000" +
    "\012\047\u0169\050\u0167\052\u016b\053\u016c\001\002\000\006" +
    "\010\u0172\011\u016e\001\002\000\004\111\uff70\001\002\000" +
    "\054\003\uff78\022\uff78\023\uff78\024\uff78\030\uff78\031\uff78" +
    "\032\uff78\033\uff78\034\uff78\035\uff78\036\uff78\041\uff78\050" +
    "\uff78\102\uff78\103\uff78\104\uff78\105\uff78\106\uff78\107\uff78" +
    "\110\uff78\113\uff78\001\002\000\042\003\366\022\034\023" +
    "\035\024\033\030\361\031\u0102\032\374\033\u010c\034\355" +
    "\035\375\036\u0109\041\362\050\363\103\372\104\371\105" +
    "\377\001\002\000\004\113\u0176\001\002\000\054\003\uff6c" +
    "\022\uff6c\023\uff6c\024\uff6c\030\uff6c\031\uff6c\032\uff6c\033" +
    "\uff6c\034\uff6c\035\uff6c\036\uff6c\041\uff6c\050\uff6c\102\uff6c" +
    "\103\uff6c\104\uff6c\105\uff6c\106\uff6c\107\uff6c\110\uff6c\113" +
    "\uff6c\001\002\000\016\007\114\047\177\050\112\051\120" +
    "\052\115\053\121\001\002\000\004\111\uff5f\001\002\000" +
    "\022\007\u014b\027\u014d\037\u0148\040\u0149\050\112\051\120" +
    "\052\115\053\121\001\002\000\010\010\u017b\025\252\026" +
    "\251\001\002\000\004\112\uff5b\001\002\000\004\047\u017d" +
    "\001\002\000\004\010\u017e\001\002\000\004\111\uff6f\001" +
    "\002\000\054\003\uff77\022\uff77\023\uff77\024\uff77\030\uff77" +
    "\031\uff77\032\uff77\033\uff77\034\uff77\035\uff77\036\uff77\041" +
    "\uff77\050\uff77\102\uff77\103\uff77\104\uff77\105\uff77\106\uff77" +
    "\107\uff77\110\uff77\113\uff77\001\002\000\004\106\u0181\001" +
    "\002\000\016\007\114\047\u0116\050\112\051\120\052\115" +
    "\053\121\001\002\000\006\106\u0181\107\u0186\001\002\000" +
    "\010\106\uff52\107\uff52\113\uff54\001\002\000\004\113\u0185" +
    "\001\002\000\054\003\uff5d\022\uff5d\023\uff5d\024\uff5d\030" +
    "\uff5d\031\uff5d\032\uff5d\033\uff5d\034\uff5d\035\uff5d\036\uff5d" +
    "\041\uff5d\050\uff5d\102\uff5d\103\uff5d\104\uff5d\105\uff5d\106" +
    "\uff5d\107\uff5d\110\uff5d\113\uff5d\001\002\000\004\114\u0188" +
    "\001\002\000\010\106\uff53\107\uff53\113\uff56\001\002\000" +
    "\042\003\366\022\034\023\035\024\033\030\361\031\u0102" +
    "\032\374\033\u010c\034\355\035\375\036\u0109\041\362\050" +
    "\363\103\372\104\371\105\377\001\002\000\006\110\u018b" +
    "\113\uff4f\001\002\000\004\113\uff55\001\002\000\004\111" +
    "\u018c\001\002\000\010\106\uff50\107\uff50\113\uff50\001\002" +
    "\000\004\114\u018e\001\002\000\042\003\366\022\034\023" +
    "\035\024\033\030\361\031\u0102\032\374\033\u010c\034\355" +
    "\035\375\036\u0109\041\362\050\363\103\372\104\371\105" +
    "\377\001\002\000\012\106\uff4f\107\uff4f\110\u018b\113\uff4f" +
    "\001\002\000\010\106\uff51\107\uff51\113\uff51\001\002\000" +
    "\042\003\366\022\034\023\035\024\033\030\361\031\u0102" +
    "\032\374\033\u010c\034\355\035\375\036\u0109\041\362\050" +
    "\363\103\372\104\371\105\377\001\002\000\004\113\u0193" +
    "\001\002\000\044\003\uff90\022\uff90\023\uff90\024\uff90\030" +
    "\uff90\031\uff90\032\uff90\033\uff90\034\uff90\035\uff90\036\uff90" +
    "\041\uff90\050\uff90\103\uff90\104\uff90\105\uff90\113\uff90\001" +
    "\002\000\012\022\034\023\035\024\033\050\u0195\001\002" +
    "\000\004\006\u01b0\001\002\000\004\050\u0197\001\002\000" +
    "\004\006\u0198\001\002\000\014\007\114\050\112\051\120" +
    "\052\115\053\121\001\002\000\010\011\132\012\133\111" +
    "\u019a\001\002\000\004\050\u019b\001\002\000\016\006\u0155" +
    "\043\u0158\044\u0156\045\u0157\046\u0154\115\u0153\001\002\000" +
    "\014\007\114\050\112\051\120\052\115\053\121\001\002" +
    "\000\010\011\132\012\133\111\u019e\001\002\000\004\050" +
    "\u019f\001\002\000\014\006\u01a4\011\u01a3\012\u01a5\013\u01a2" +
    "\014\u01a6\001\002\000\004\010\u01a1\001\002\000\004\112" +
    "\uff69\001\002\000\004\006\u01ae\001\002\000\004\006\u01ac" +
    "\001\002\000\014\007\114\050\112\051\120\052\115\053" +
    "\121\001\002\000\004\006\u01a9\001\002\000\004\006\u01a7" +
    "\001\002\000\014\007\114\050\112\051\120\052\115\053" +
    "\121\001\002\000\010\010\uff62\011\132\012\133\001\002" +
    "\000\014\007\114\050\112\051\120\052\115\053\121\001" +
    "\002\000\010\010\uff64\011\132\012\133\001\002\000\010" +
    "\010\uff66\011\132\012\133\001\002\000\014\007\114\050" +
    "\112\051\120\052\115\053\121\001\002\000\010\010\uff65" +
    "\011\132\012\133\001\002\000\014\007\114\050\112\051" +
    "\120\052\115\053\121\001\002\000\010\010\uff63\011\132" +
    "\012\133\001\002\000\014\007\114\050\112\051\120\052" +
    "\115\053\121\001\002\000\010\011\132\012\133\111\u01b2" +
    "\001\002\000\004\050\u01b3\001\002\000\016\006\u0155\043" +
    "\u0158\044\u0156\045\u0157\046\u0154\115\u0153\001\002\000\014" +
    "\007\114\050\112\051\120\052\115\053\121\001\002\000" +
    "\010\011\132\012\133\111\u01b6\001\002\000\004\050\u019f" +
    "\001\002\000\004\010\u01b8\001\002\000\004\112\uff68\001" +
    "\002\000\054\003\uff75\022\uff75\023\uff75\024\uff75\030\uff75" +
    "\031\uff75\032\uff75\033\uff75\034\uff75\035\uff75\036\uff75\041" +
    "\uff75\050\uff75\102\uff75\103\uff75\104\uff75\105\uff75\106\uff75" +
    "\107\uff75\110\uff75\113\uff75\001\002\000\044\003\366\022" +
    "\034\023\035\024\033\030\361\031\u0102\032\374\033\u010c" +
    "\034\355\035\375\036\u0109\041\362\050\363\103\372\104" +
    "\371\105\377\113\u01bb\001\002\000\044\003\uff89\022\uff89" +
    "\023\uff89\024\uff89\030\uff89\031\uff89\032\uff89\033\uff89\034" +
    "\uff89\035\uff89\036\uff89\041\uff89\050\uff89\103\uff89\104\uff89" +
    "\105\uff89\113\uff89\001\002\000\004\113\u01bd\001\002\000" +
    "\044\003\uff8a\022\uff8a\023\uff8a\024\uff8a\030\uff8a\031\uff8a" +
    "\032\uff8a\033\uff8a\034\uff8a\035\uff8a\036\uff8a\041\uff8a\050" +
    "\uff8a\103\uff8a\104\uff8a\105\uff8a\113\uff8a\001\002\000\004" +
    "\116\u01c2\001\002\000\004\116\uff40\001\002\000\004\116" +
    "\uff41\001\002\000\004\002\000\001\002\000\006\117\uff3d" +
    "\122\uff3d\001\002\000\006\117\u01c5\122\u01c7\001\002\000" +
    "\012\022\034\023\035\024\033\117\u01c5\001\002\000\010" +
    "\022\034\023\035\024\033\001\002\000\004\111\u01d0\001" +
    "\002\000\006\044\u01c9\047\u01ca\001\002\000\006\117\uff3e" +
    "\122\uff3e\001\002\000\004\050\u01cb\001\002\000\006\117" +
    "\uff2e\122\uff2e\001\002\000\006\017\ufef6\043\ufef6\001\002" +
    "\000\006\017\u01cd\043\u01ce\001\002\000\004\050\u01cf\001" +
    "\002\000\006\117\uff2d\122\uff2d\001\002\000\010\007\ufef7" +
    "\017\ufef7\043\ufef7\001\002\000\012\022\uff3b\023\uff3b\024" +
    "\uff3b\117\uff3b\001\002\000\004\050\u01d2\001\002\000\006" +
    "\006\u01d5\120\u01d4\001\002\000\006\006\u01ee\120\u01e0\001" +
    "\002\000\014\007\114\050\112\051\120\052\115\053\121" +
    "\001\002\000\020\007\114\047\u01d9\050\u01dc\051\120\052" +
    "\115\053\121\125\u01db\001\002\000\004\111\uff3a\001\002" +
    "\000\010\010\ufef1\021\ufef1\111\ufef1\001\002\000\010\010" +
    "\ufeef\021\ufeef\111\ufeef\001\002\000\010\010\ufef3\021\ufef3" +
    "\111\ufef3\001\002\000\006\007\u01e5\017\u01cd\001\002\000" +
    "\004\007\u01e3\001\002\000\030\007\ufef6\010\uffc6\011\uffc6" +
    "\012\uffc6\013\uffc6\014\uffc6\015\uffc6\017\ufef6\021\uffc6\111" +
    "\uffc6\120\u01d4\001\002\000\014\010\ufef2\011\132\012\133" +
    "\021\ufef2\111\ufef2\001\002\000\010\010\ufef0\021\ufef0\111" +
    "\ufef0\001\002\000\012\010\ufeee\021\ufeee\111\ufeee\120\u01e0" +
    "\001\002\000\014\007\114\050\112\051\120\052\115\053" +
    "\121\001\002\000\010\011\132\012\133\121\u01e2\001\002" +
    "\000\014\006\uff38\010\uff38\021\uff38\111\uff38\120\uff38\001" +
    "\002\000\004\010\u01e4\001\002\000\010\010\ufefb\021\ufefb" +
    "\111\ufefb\001\002\000\022\007\114\010\u01e8\047\u01d9\050" +
    "\u01dc\051\120\052\115\053\121\125\u01db\001\002\000\006" +
    "\010\ufef4\021\ufef4\001\002\000\006\010\u01ea\021\u01e9\001" +
    "\002\000\014\010\ufef8\021\ufef8\025\ufef8\026\ufef8\111\ufef8" +
    "\001\002\000\020\007\114\047\u01d9\050\u01dc\051\120\052" +
    "\115\053\121\125\u01db\001\002\000\014\010\ufef9\021\ufef9" +
    "\025\ufef9\026\ufef9\111\ufef9\001\002\000\006\010\ufef5\021" +
    "\ufef5\001\002\000\010\011\132\012\133\121\u01ed\001\002" +
    "\000\014\006\uff37\010\uff37\021\uff37\111\uff37\120\uff37\001" +
    "\002\000\004\112\u01ef\001\002\000\016\007\114\050\112" +
    "\051\120\052\115\053\121\112\u01f4\001\002\000\004\111" +
    "\uff39\001\002\000\006\021\u01f6\113\u01fe\001\002\000\006" +
    "\021\u01f9\113\u01fa\001\002\000\014\011\132\012\133\021" +
    "\uff33\113\uff33\121\uff33\001\002\000\014\007\114\050\112" +
    "\051\120\052\115\053\121\001\002\000\006\021\u01f6\121" +
    "\u01f7\001\002\000\014\007\114\050\112\051\120\052\115" +
    "\053\121\001\002\000\006\021\uff31\113\uff31\001\002\000" +
    "\014\011\132\012\133\021\uff34\113\uff34\121\uff34\001\002" +
    "\000\004\112\u01fb\001\002\000\006\021\uff35\111\uff35\001" +
    "\002\000\014\007\114\050\112\051\120\052\115\053\121" +
    "\001\002\000\006\021\u01f6\121\u01fd\001\002\000\006\021" +
    "\uff32\113\uff32\001\002\000\006\021\uff36\111\uff36\001\002" +
    "\000\004\111\u02a1\001\002\000\012\022\034\023\035\024" +
    "\033\101\u020f\001\002\000\004\050\u0204\001\002\000\004" +
    "\111\u0203\001\002\000\012\022\uff3c\023\uff3c\024\uff3c\117" +
    "\uff3c\001\002\000\012\006\u0208\021\uff1b\111\uff1b\120\u01d4" +
    "\001\002\000\004\111\uff21\001\002\000\006\021\u020c\111" +
    "\uff1f\001\002\000\012\006\u020a\021\uff1d\111\uff1d\120\u01e0" +
    "\001\002\000\020\007\114\047\u01d9\050\u01dc\051\120\052" +
    "\115\053\121\125\u01db\001\002\000\006\021\uff1e\111\uff1e" +
    "\001\002\000\004\112\u01ef\001\002\000\006\021\uff1c\111" +
    "\uff1c\001\002\000\004\050\164\001\002\000\006\021\171" +
    "\111\uff20\001\002\000\004\111\u02a0\001\002\000\004\127" +
    "\u0211\001\002\000\004\002\uff3f\001\002\000\004\007\u0212" +
    "\001\002\000\004\010\u0213\001\002\000\004\112\u0214\001" +
    "\002\000\034\022\034\023\035\024\033\034\u022b\035\u0219" +
    "\036\u0223\041\u021f\050\u0221\105\u0215\123\u0220\124\u0225\125" +
    "\u01db\126\u0216\001\002\000\004\007\u029d\001\002\000\004" +
    "\007\u0297\001\002\000\004\112\u0289\001\002\000\036\022" +
    "\034\023\035\024\033\034\u022b\035\u0219\036\u0223\041\u021f" +
    "\050\u0221\105\u0215\113\u0288\123\u0220\124\u0225\125\u01db\126" +
    "\u0216\001\002\000\004\007\u0285\001\002\000\044\022\uff2a" +
    "\023\uff2a\024\uff2a\034\uff2a\035\uff2a\036\uff2a\041\uff2a\050" +
    "\uff2a\105\uff2a\106\uff2a\107\uff2a\110\uff2a\113\uff2a\123\uff2a" +
    "\124\uff2a\125\uff2a\126\uff2a\001\002\000\004\111\u0284\001" +
    "\002\000\004\112\u0281\001\002\000\004\111\u0280\001\002" +
    "\000\004\111\u027f\001\002\000\004\007\u027c\001\002\000" +
    "\004\007\u0272\001\002\000\012\006\u026e\007\ufef6\017\ufef6" +
    "\120\u01d4\001\002\000\004\112\u026a\001\002\000\004\112" +
    "\u0265\001\002\000\004\111\u0264\001\002\000\004\007\u0262" +
    "\001\002\000\044\022\uff26\023\uff26\024\uff26\034\uff26\035" +
    "\uff26\036\uff26\041\uff26\050\uff26\105\uff26\106\uff26\107\uff26" +
    "\110\uff26\113\uff26\123\uff26\124\uff26\125\uff26\126\uff26\001" +
    "\002\000\004\111\u0261\001\002\000\044\022\uff27\023\uff27" +
    "\024\uff27\034\uff27\035\uff27\036\uff27\041\uff27\050\uff27\105" +
    "\uff27\106\uff27\107\uff27\110\uff27\113\uff27\123\uff27\124\uff27" +
    "\125\uff27\126\uff27\001\002\000\004\111\u0260\001\002\000" +
    "\004\112\u025c\001\002\000\004\007\u022c\001\002\000\012" +
    "\022\034\023\035\024\033\050\u022d\001\002\000\004\006" +
    "\u0255\001\002\000\004\050\u022f\001\002\000\004\006\u0230" +
    "\001\002\000\020\007\114\047\u01d9\050\u01dc\051\120\052" +
    "\115\053\121\125\u01db\001\002\000\004\111\u0232\001\002" +
    "\000\022\007\u0238\027\u023a\037\u0234\040\u0236\050\u0237\051" +
    "\120\052\115\053\121\001\002\000\010\025\252\026\251" +
    "\111\u0242\001\002\000\012\010\ufeea\025\ufeea\026\ufeea\111" +
    "\ufeea\001\002\000\012\010\ufeeb\025\ufeeb\026\ufeeb\111\ufeeb" +
    "\001\002\000\012\010\ufee9\025\ufee9\026\ufee9\111\ufee9\001" +
    "\002\000\034\006\uffc6\007\ufef6\011\uffc6\012\uffc6\013\uffc6" +
    "\014\uffc6\015\uffc6\017\ufef6\043\uffc6\044\uffc6\045\uffc6\046" +
    "\uffc6\115\uffc6\001\002\000\022\007\u014b\027\u014d\037\u0148" +
    "\040\u0149\050\112\051\120\052\115\053\121\001\002\000" +
    "\022\006\u0155\011\132\012\133\043\u0158\044\u0156\045\u0157" +
    "\046\u0154\115\u0153\001\002\000\022\007\u0238\027\u023a\037" +
    "\u0234\040\u0236\050\u0237\051\120\052\115\053\121\001\002" +
    "\000\012\010\ufee6\025\ufee6\026\ufee6\111\ufee6\001\002\000" +
    "\012\010\ufeed\025\ufeed\026\ufeed\111\ufeed\001\002\000\014" +
    "\007\114\050\112\051\120\052\115\053\121\001\002\000" +
    "\016\010\ufee8\011\132\012\133\025\ufee8\026\ufee8\111\ufee8" +
    "\001\002\000\010\010\u0240\025\252\026\251\001\002\000" +
    "\012\010\ufeec\025\ufeec\026\ufeec\111\ufeec\001\002\000\022" +
    "\007\u0238\027\u023a\037\u0234\040\u0236\050\u0237\051\120\052" +
    "\115\053\121\001\002\000\004\050\u0243\001\002\000\014" +
    "\006\u0248\011\u0246\012\u024a\013\u0247\014\u0249\001\002\000" +
    "\004\010\u0245\001\002\000\004\112\uff0b\001\002\000\004" +
    "\006\u0252\001\002\000\004\006\u0250\001\002\000\020\007" +
    "\114\047\u01d9\050\u01dc\051\120\052\115\053\121\125\u01db" +
    "\001\002\000\004\006\u024d\001\002\000\004\006\u024b\001" +
    "\002\000\020\007\114\047\u01d9\050\u01dc\051\120\052\115" +
    "\053\121\125\u01db\001\002\000\004\010\uff06\001\002\000" +
    "\020\007\114\047\u01d9\050\u01dc\051\120\052\115\053\121" +
    "\125\u01db\001\002\000\004\010\uff04\001\002\000\004\010" +
    "\uff08\001\002\000\020\007\114\047\u01d9\050\u01dc\051\120" +
    "\052\115\053\121\125\u01db\001\002\000\004\010\uff05\001" +
    "\002\000\020\007\114\047\u01d9\050\u01dc\051\120\052\115" +
    "\053\121\125\u01db\001\002\000\004\010\uff07\001\002\000" +
    "\012\010\ufee7\025\ufee7\026\ufee7\111\ufee7\001\002\000\020" +
    "\007\114\047\u01d9\050\u01dc\051\120\052\115\053\121\125" +
    "\u01db\001\002\000\004\111\u0257\001\002\000\022\007\u0238" +
    "\027\u023a\037\u0234\040\u0236\050\u0237\051\120\052\115\053" +
    "\121\001\002\000\010\025\252\026\251\111\u0259\001\002" +
    "\000\004\050\u0243\001\002\000\004\010\u025b\001\002\000" +
    "\004\112\uff0a\001\002\000\034\022\034\023\035\024\033" +
    "\034\u022b\035\u0219\036\u0223\041\u021f\050\u0221\105\u0215\123" +
    "\u0220\124\u0225\125\u01db\126\u0216\001\002\000\036\022\034" +
    "\023\035\024\033\034\u022b\035\u0219\036\u0223\041\u021f\050" +
    "\u0221\105\u0215\113\u025f\123\u0220\124\u0225\125\u01db\126\u0216" +
    "\001\002\000\044\022\uff2b\023\uff2b\024\uff2b\034\uff2b\035" +
    "\uff2b\036\uff2b\041\uff2b\050\uff2b\105\uff2b\106\uff2b\107\uff2b" +
    "\110\uff2b\113\uff2b\123\uff2b\124\uff2b\125\uff2b\126\uff2b\001" +
    "\002\000\044\022\uff0e\023\uff0e\024\uff0e\034\uff0e\035\uff0e" +
    "\036\uff0e\041\uff0e\050\uff0e\105\uff0e\106\uff0e\107\uff0e\110" +
    "\uff0e\113\uff0e\123\uff0e\124\uff0e\125\uff0e\126\uff0e\001\002" +
    "\000\044\022\uff25\023\uff25\024\uff25\034\uff25\035\uff25\036" +
    "\uff25\041\uff25\050\uff25\105\uff25\106\uff25\107\uff25\110\uff25" +
    "\113\uff25\123\uff25\124\uff25\125\uff25\126\uff25\001\002\000" +
    "\044\022\uff23\023\uff23\024\uff23\034\uff23\035\uff23\036\uff23" +
    "\041\uff23\050\uff23\105\uff23\106\uff23\107\uff23\110\uff23\113" +
    "\uff23\123\uff23\124\uff23\125\uff23\126\uff23\001\002\000\004" +
    "\010\u0263\001\002\000\004\111\uff02\001\002\000\044\022" +
    "\uff24\023\uff24\024\uff24\034\uff24\035\uff24\036\uff24\041\uff24" +
    "\050\uff24\105\uff24\106\uff24\107\uff24\110\uff24\113\uff24\123" +
    "\uff24\124\uff24\125\uff24\126\uff24\001\002\000\034\022\034" +
    "\023\035\024\033\034\u022b\035\u0219\036\u0223\041\u021f\050" +
    "\u0221\105\u0215\123\u0220\124\u0225\125\u01db\126\u0216\001\002" +
    "\000\036\022\034\023\035\024\033\034\u022b\035\u0219\036" +
    "\u0223\041\u021f\050\u0221\105\u0215\113\u0267\123\u0220\124\u0225" +
    "\125\u01db\126\u0216\001\002\000\004\035\u0219\001\002\000" +
    "\004\111\u0269\001\002\000\044\022\uff0c\023\uff0c\024\uff0c" +
    "\034\uff0c\035\uff0c\036\uff0c\041\uff0c\050\uff0c\105\uff0c\106" +
    "\uff0c\107\uff0c\110\uff0c\113\uff0c\123\uff0c\124\uff0c\125\uff0c" +
    "\126\uff0c\001\002\000\034\022\034\023\035\024\033\034" +
    "\u022b\035\u0219\036\u0223\041\u021f\050\u0221\105\u0215\123\u0220" +
    "\124\u0225\125\u01db\126\u0216\001\002\000\036\022\034\023" +
    "\035\024\033\034\u022b\035\u0219\036\u0223\041\u021f\050\u0221" +
    "\105\u0215\113\u026c\123\u0220\124\u0225\125\u01db\126\u0216\001" +
    "\002\000\044\022\uff18\023\uff18\024\uff18\034\uff18\035\uff18" +
    "\036\uff18\041\uff18\050\uff18\105\uff18\106\uff18\107\uff18\110" +
    "\uff18\113\uff18\123\uff18\124\uff18\125\uff18\126\uff18\001\002" +
    "\000\006\006\u0270\120\u01e0\001\002\000\020\007\114\047" +
    "\u01d9\050\u01dc\051\120\052\115\053\121\125\u01db\001\002" +
    "\000\004\111\uff1a\001\002\000\020\007\114\047\u01d9\050" +
    "\u01dc\051\120\052\115\053\121\125\u01db\001\002\000\004" +
    "\111\uff19\001\002\000\012\047\u0274\050\u0273\052\u0275\053" +
    "\u0277\001\002\000\006\010\ufefe\021\ufefe\001\002\000\006" +
    "\010\ufefc\021\ufefc\001\002\000\006\010\ufeff\021\ufeff\001" +
    "\002\000\006\010\u027a\021\u0279\001\002\000\006\010\ufefd" +
    "\021\ufefd\001\002\000\006\010\uff00\021\uff00\001\002\000" +
    "\012\047\u0274\050\u0273\052\u0275\053\u0277\001\002\000\004" +
    "\111\uff03\001\002\000\006\010\uff01\021\uff01\001\002\000" +
    "\022\007\u0238\027\u023a\037\u0234\040\u0236\050\u0237\051\120" +
    "\052\115\053\121\001\002\000\010\010\u027e\025\252\026" +
    "\251\001\002\000\004\112\uff16\001\002\000\044\022\uff29" +
    "\023\uff29\024\uff29\034\uff29\035\uff29\036\uff29\041\uff29\050" +
    "\uff29\105\uff29\106\uff29\107\uff29\110\uff29\113\uff29\123\uff29" +
    "\124\uff29\125\uff29\126\uff29\001\002\000\044\022\uff22\023" +
    "\uff22\024\uff22\034\uff22\035\uff22\036\uff22\041\uff22\050\uff22" +
    "\105\uff22\106\uff22\107\uff22\110\uff22\113\uff22\123\uff22\124" +
    "\uff22\125\uff22\126\uff22\001\002\000\034\022\034\023\035" +
    "\024\033\034\u022b\035\u0219\036\u0223\041\u021f\050\u0221\105" +
    "\u0215\123\u0220\124\u0225\125\u01db\126\u0216\001\002\000\036" +
    "\022\034\023\035\024\033\034\u022b\035\u0219\036\u0223\041" +
    "\u021f\050\u0221\105\u0215\113\u0283\123\u0220\124\u0225\125\u01db" +
    "\126\u0216\001\002\000\044\022\uff0d\023\uff0d\024\uff0d\034" +
    "\uff0d\035\uff0d\036\uff0d\041\uff0d\050\uff0d\105\uff0d\106\uff0d" +
    "\107\uff0d\110\uff0d\113\uff0d\123\uff0d\124\uff0d\125\uff0d\126" +
    "\uff0d\001\002\000\044\022\uff28\023\uff28\024\uff28\034\uff28" +
    "\035\uff28\036\uff28\041\uff28\050\uff28\105\uff28\106\uff28\107" +
    "\uff28\110\uff28\113\uff28\123\uff28\124\uff28\125\uff28\126\uff28" +
    "\001\002\000\022\007\u0238\027\u023a\037\u0234\040\u0236\050" +
    "\u0237\051\120\052\115\053\121\001\002\000\010\010\u0287" +
    "\025\252\026\251\001\002\000\006\111\uff09\112\uff09\001" +
    "\002\000\004\002\uff2c\001\002\000\004\106\u028a\001\002" +
    "\000\004\114\u0294\001\002\000\004\113\u0293\001\002\000" +
    "\010\106\uff10\107\uff10\113\uff12\001\002\000\006\106\u028a" +
    "\107\u028e\001\002\000\004\114\u0290\001\002\000\010\106" +
    "\uff11\107\uff11\113\uff14\001\002\000\034\022\034\023\035" +
    "\024\033\034\u022b\035\u0219\036\u0223\041\u021f\050\u0221\105" +
    "\u0215\123\u0220\124\u0225\125\u01db\126\u0216\001\002\000\040" +
    "\022\034\023\035\024\033\034\u022b\035\u0219\036\u0223\041" +
    "\u021f\050\u0221\105\u0215\110\u018b\113\uff4f\123\u0220\124\u0225" +
    "\125\u01db\126\u0216\001\002\000\004\113\uff13\001\002\000" +
    "\044\022\uff17\023\uff17\024\uff17\034\uff17\035\uff17\036\uff17" +
    "\041\uff17\050\uff17\105\uff17\106\uff17\107\uff17\110\uff17\113" +
    "\uff17\123\uff17\124\uff17\125\uff17\126\uff17\001\002\000\034" +
    "\022\034\023\035\024\033\034\u022b\035\u0219\036\u0223\041" +
    "\u021f\050\u0221\105\u0215\123\u0220\124\u0225\125\u01db\126\u0216" +
    "\001\002\000\044\022\034\023\035\024\033\034\u022b\035" +
    "\u0219\036\u0223\041\u021f\050\u0221\105\u0215\106\uff4f\107\uff4f" +
    "\110\u018b\113\uff4f\123\u0220\124\u0225\125\u01db\126\u0216\001" +
    "\002\000\010\106\uff0f\107\uff0f\113\uff0f\001\002\000\004" +
    "\047\u0298\001\002\000\004\021\u0299\001\002\000\004\020" +
    "\u029a\001\002\000\004\050\u029b\001\002\000\004\010\u029c" +
    "\001\002\000\004\111\ufefa\001\002\000\004\050\u029e\001" +
    "\002\000\004\010\u029f\001\002\000\004\112\uff15\001\002" +
    "\000\012\022\uff30\023\uff30\024\uff30\101\uff30\001\002\000" +
    "\012\022\uff2f\023\uff2f\024\uff2f\101\uff2f\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u029f\000\010\002\006\003\004\012\005\001\001\000" +
    "\002\001\001\000\004\004\336\001\001\000\012\006\010" +
    "\015\013\016\015\017\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\006\335\015\013" +
    "\016\015\017\014\001\001\000\002\001\001\000\012\006" +
    "\326\015\013\016\015\017\014\001\001\000\012\006\325" +
    "\015\013\016\015\017\014\001\001\000\036\022\322\023" +
    "\100\024\055\025\066\026\046\031\072\032\077\037\047" +
    "\043\051\044\065\050\070\051\073\052\062\055\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\024\021\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\037\001\001\000" +
    "\002\001\001\000\004\014\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\044\021\025\001\001\000" +
    "\002\001\001\000\036\022\074\023\100\024\055\025\066" +
    "\026\046\031\072\032\077\037\047\043\051\044\065\050" +
    "\070\051\073\052\062\055\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\034\230\035\116\036\115\040\305\041\224\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\023\300\025" +
    "\066\026\046\031\072\032\077\037\047\043\051\044\065" +
    "\050\070\051\073\052\062\055\053\001\001\000\014\034" +
    "\230\035\116\036\115\040\261\041\224\001\001\000\002" +
    "\001\001\000\014\027\254\030\253\034\177\035\116\036" +
    "\115\001\001\000\036\022\221\023\100\024\055\025\066" +
    "\026\046\031\072\032\077\037\047\043\051\044\065\050" +
    "\070\051\073\052\062\055\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\045\165\046\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\034\150\035\116\036\115\001\001\000\004\014\107\001" +
    "\001\000\002\001\001\000\010\034\112\035\116\036\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\034" +
    "\127\035\116\036\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\126\001\001\000\004\036\125\001\001" +
    "\000\004\036\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\035\134\036\115\001\001\000\006\035\133\036" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\034\136\035\116\036\115\001\001\000\004\033\137\001" +
    "\001\000\036\022\146\023\100\024\055\025\066\026\046" +
    "\031\072\032\077\037\047\043\051\044\065\050\070\051" +
    "\073\052\062\055\053\001\001\000\010\034\143\035\116" +
    "\036\115\001\001\000\010\034\145\035\116\036\115\001" +
    "\001\000\010\034\144\035\116\036\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\034\152" +
    "\035\116\036\115\001\001\000\004\033\153\001\001\000" +
    "\036\022\154\023\100\024\055\025\066\026\046\031\072" +
    "\032\077\037\047\043\051\044\065\050\070\051\073\052" +
    "\062\055\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\047\205\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\167\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\172" +
    "\001\001\000\004\047\174\001\001\000\012\030\175\034" +
    "\177\035\116\036\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\047" +
    "\201\001\001\000\002\001\001\000\004\014\203\001\001" +
    "\000\004\047\204\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\056\210\001\001\000\002" +
    "\001\001\000\012\030\212\034\177\035\116\036\115\001" +
    "\001\000\036\022\215\023\100\024\055\025\066\026\046" +
    "\031\072\032\077\037\047\043\051\044\065\050\070\051" +
    "\073\052\062\055\053\001\001\000\036\022\214\023\100" +
    "\024\055\025\066\026\046\031\072\032\077\037\047\043" +
    "\051\044\065\050\070\051\073\052\062\055\053\001\001" +
    "\000\002\001\001\000\004\056\216\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\034\230\035\116\036\115\040" +
    "\225\041\224\001\001\000\002\001\001\000\004\013\246" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\042" +
    "\241\001\001\000\012\034\230\035\116\036\115\041\232" +
    "\001\001\000\002\001\001\000\014\034\235\035\116\036" +
    "\115\040\234\041\224\001\001\000\004\013\246\001\001" +
    "\000\004\042\241\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\245\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\034\230\035\116\036\115\041\252\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\027\256\030\253\034\177\035\116\036\115\001\001\000" +
    "\002\001\001\000\012\030\260\034\177\035\116\036\115" +
    "\001\001\000\002\001\001\000\006\013\246\054\262\001" +
    "\001\000\036\022\264\023\100\024\055\025\066\026\046" +
    "\031\072\032\077\037\047\043\051\044\065\050\070\051" +
    "\073\052\062\055\053\001\001\000\002\001\001\000\004" +
    "\053\265\001\001\000\002\001\001\000\036\022\274\023" +
    "\100\024\055\025\066\026\046\031\072\032\077\037\047" +
    "\043\051\044\065\050\070\051\073\052\062\055\053\001" +
    "\001\000\014\034\230\035\116\036\115\040\270\041\224" +
    "\001\001\000\006\013\246\054\271\001\001\000\036\022" +
    "\272\023\100\024\055\025\066\026\046\031\072\032\077" +
    "\037\047\043\051\044\065\050\070\051\073\052\062\055" +
    "\053\001\001\000\004\053\273\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\027\301\030\253\034\177\035\116\036\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\013\246\022\306" +
    "\023\100\024\055\025\066\026\046\031\072\032\077\037" +
    "\047\043\051\044\065\050\070\051\073\052\062\055\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\027\315\030\253\034\177\035\116\036\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\027\320" +
    "\030\253\034\177\035\116\036\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\331\021\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\334\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\u01bd\001\001" +
    "\000\004\007\340\001\001\000\006\057\342\060\341\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\014\u0105\061" +
    "\355\063\u0106\064\350\065\353\066\372\067\366\070\347" +
    "\077\u0107\100\367\101\357\102\u0102\103\364\104\u0100\106" +
    "\351\107\375\110\352\111\363\112\u0103\114\356\124\u0104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\u012e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\u011d\001\001" +
    "\000\052\014\u0105\061\355\064\u011b\065\353\066\372\067" +
    "\366\070\347\077\u0107\100\367\101\357\102\u0102\103\364" +
    "\104\u0100\106\351\107\375\110\352\111\363\112\u0103\114" +
    "\356\124\u0104\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\014\u0105\071\u010d\072\u010c\077\u010a\100\367\101" +
    "\357\102\u0102\103\364\104\u0100\106\351\107\375\110\352" +
    "\111\363\112\u0103\114\356\001\001\000\002\001\001\000" +
    "\004\014\u0119\001\001\000\034\014\u0105\077\u0111\100\367" +
    "\101\357\102\u0102\103\364\104\u0100\106\351\107\375\110" +
    "\352\111\363\112\u0103\114\356\001\001\000\002\001\001" +
    "\000\004\104\u010f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\034\u0116\035\116\036\115" +
    "\073\u0113\074\u0114\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\046\u011a\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\014\u0105\071\u011f\072\u010c\077\u010a\100\367\101" +
    "\357\102\u0102\103\364\104\u0100\106\351\107\375\110\352" +
    "\111\363\112\u0103\114\356\001\001\000\002\001\001\000" +
    "\004\113\u0122\001\001\000\006\111\u0123\112\u0103\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\014\u0105\071" +
    "\u0125\072\u010c\077\u010a\100\367\101\357\102\u0102\103\364" +
    "\104\u0100\106\351\107\375\110\352\111\363\112\u0103\114" +
    "\356\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\014" +
    "\u0105\071\u012b\072\u010c\077\u010a\100\367\101\357\102\u0102" +
    "\103\364\104\u0100\106\351\107\375\110\352\111\363\112" +
    "\u0103\114\356\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\046\u011a\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\u0132\062\u0134\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\u0137\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\047\205\001" +
    "\001\000\006\014\u0132\062\u013d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\u0132\062" +
    "\u0140\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\034\u014b\035\116\036\115\122\u0149\123\u014d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\034\u015b\035\116\036\115\122\u0149\123\u015c" +
    "\001\001\000\004\121\u0158\001\001\000\012\034\u014b\035" +
    "\116\036\115\122\u0151\001\001\000\004\013\u014e\001\001" +
    "\000\012\034\u014b\035\116\036\115\122\u0150\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\034\u0159" +
    "\035\116\036\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\u0158\001\001\000\004\013\u014e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\014\u0105\071\u0163\072\u010c\077\u010a" +
    "\100\367\101\357\102\u0102\103\364\104\u0100\106\351\107" +
    "\375\110\352\111\363\112\u0103\114\356\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\075" +
    "\u0169\076\u0167\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\076\u016e\001\001" +
    "\000\002\001\001\000\006\075\u0170\076\u0167\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\014\u0105\071\u0174\072\u010c\077\u010a\100\367\101\357\102" +
    "\u0102\103\364\104\u0100\106\351\107\375\110\352\111\363" +
    "\112\u0103\114\356\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\030\u0177\034\177\035\116\036\115\001\001" +
    "\000\002\001\001\000\014\034\u014b\035\116\036\115\122" +
    "\u0149\123\u0179\001\001\000\004\013\u014e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\115\u0183\116\u0181\117\u0182" +
    "\001\001\000\014\034\u0116\035\116\036\115\073\u018c\074" +
    "\u0114\001\001\000\004\117\u0186\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\014\u0105\071\u0188\072\u010c\077\u010a" +
    "\100\367\101\357\102\u0102\103\364\104\u0100\106\351\107" +
    "\375\110\352\111\363\112\u0103\114\356\001\001\000\004" +
    "\120\u0189\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\014\u0105\071\u018e" +
    "\072\u010c\077\u010a\100\367\101\357\102\u0102\103\364\104" +
    "\u0100\106\351\107\375\110\352\111\363\112\u0103\114\356" +
    "\001\001\000\004\120\u018f\001\001\000\002\001\001\000" +
    "\040\014\u0105\071\u0191\072\u010c\077\u010a\100\367\101\357" +
    "\102\u0102\103\364\104\u0100\106\351\107\375\110\352\111" +
    "\363\112\u0103\114\356\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\u0195\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\034\u0198\035\116" +
    "\036\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\121\u019b\001\001\000\010\034\u019c\035\116\036\115" +
    "\001\001\000\002\001\001\000\004\105\u019f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\034\u01aa\035\116\036" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\034\u01a7\035\116\036\115\001\001\000\002\001\001\000" +
    "\010\034\u01a9\035\116\036\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\034\u01ac\035\116\036\115\001" +
    "\001\000\002\001\001\000\010\034\u01ae\035\116\036\115" +
    "\001\001\000\002\001\001\000\010\034\u01b0\035\116\036" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\u01b3\001\001\000\010\034\u01b4\035\116\036\115\001" +
    "\001\000\002\001\001\000\004\105\u01b6\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\014" +
    "\u0105\071\u01bb\072\u010c\077\u010a\100\367\101\357\102\u0102" +
    "\103\364\104\u0100\106\351\107\375\110\352\111\363\112" +
    "\u0103\114\356\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\u01c0\001\001\000\004\010" +
    "\u01bf\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\125\u01c2\001\001\000\010\127\u01c3\130\u01c5\136\u01c7\001" +
    "\001\000\012\014\u0200\130\u0201\135\u01ff\141\u01fe\001\001" +
    "\000\004\014\u01d0\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\165\u01cb\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\131\u01d2\001\001\000\002\001" +
    "\001\000\010\034\u01eb\035\116\036\115\001\001\000\022" +
    "\034\u01dc\035\116\036\115\162\u01dd\164\u01d6\165\u01d9\167" +
    "\u01d5\172\u01d7\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\131\u01de\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\034\u01e0\035" +
    "\116\036\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\034\u01dc\035" +
    "\116\036\115\162\u01dd\164\u01d6\165\u01d9\166\u01e6\167\u01e5" +
    "\172\u01d7\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\034\u01dc\035\116\036\115\162\u01dd" +
    "\164\u01d6\165\u01d9\167\u01ea\172\u01d7\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\132\u01ef\001\001\000\014\034\u01f2\035\116\036" +
    "\115\133\u01f0\134\u01f1\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\034" +
    "\u01f2\035\116\036\115\133\u01f4\001\001\000\002\001\001" +
    "\000\010\034\u01f7\035\116\036\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\034\u01f2\035\116\036\115\133\u01fb\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\014\u0200\126\u020f\141\u020d\001\001\000" +
    "\004\142\u0204\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\131\u0206\143\u0205\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\034\u01dc\035\116" +
    "\036\115\162\u01dd\164\u01d6\165\u01d9\167\u0208\172\u01d7\001" +
    "\001\000\002\001\001\000\004\132\u020a\001\001\000\002" +
    "\001\001\000\004\046\u020c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\014" +
    "\u0200\137\u0217\140\u0219\141\u021d\144\u021a\145\u0227\146\u0221" +
    "\147\u0216\153\u0225\154\u0229\155\u021b\157\u0228\162\u0223\163" +
    "\u0226\164\u021c\165\u01d9\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\014\u0200\140\u025d\141" +
    "\u021d\144\u021a\145\u0227\146\u0221\147\u0216\153\u0225\154\u0229" +
    "\155\u021b\157\u0228\162\u0223\163\u0226\164\u021c\165\u01d9\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\131\u026c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\u022d\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\034\u01dc\035\116\036" +
    "\115\162\u01dd\164\u01d6\165\u01d9\167\u0230\172\u01d7\001\001" +
    "\000\002\001\001\000\020\034\u0238\035\116\036\115\164" +
    "\u0234\165\u01d9\170\u023a\171\u0232\001\001\000\004\013\u0240" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\034\u015b\035\116\036\115" +
    "\122\u0149\123\u023e\001\001\000\004\121\u023c\001\001\000" +
    "\016\034\u0238\035\116\036\115\164\u0234\165\u01d9\170\u023b" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\034" +
    "\u023d\035\116\036\115\001\001\000\002\001\001\000\004" +
    "\013\u014e\001\001\000\002\001\001\000\016\034\u0238\035" +
    "\116\036\115\164\u0234\165\u01d9\170\u0253\001\001\000\004" +
    "\156\u0243\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\034\u01dc\035\116\036\115\162\u01dd\164\u01d6\165\u01d9\167" +
    "\u024e\172\u01d7\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\034\u01dc\035\116\036\115\162\u01dd\164\u01d6\165" +
    "\u01d9\167\u024b\172\u01d7\001\001\000\002\001\001\000\022" +
    "\034\u01dc\035\116\036\115\162\u01dd\164\u01d6\165\u01d9\167" +
    "\u024d\172\u01d7\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\034\u01dc\035\116\036\115\162\u01dd\164\u01d6\165" +
    "\u01d9\167\u0250\172\u01d7\001\001\000\002\001\001\000\022" +
    "\034\u01dc\035\116\036\115\162\u01dd\164\u01d6\165\u01d9\167" +
    "\u0252\172\u01d7\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\034\u01dc\035\116\036\115\162\u01dd\164\u01d6\165" +
    "\u01d9\167\u0255\172\u01d7\001\001\000\002\001\001\000\020" +
    "\034\u0238\035\116\036\115\164\u0234\165\u01d9\170\u023a\171" +
    "\u0257\001\001\000\004\013\u0240\001\001\000\004\156\u0259" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\014" +
    "\u0200\137\u025c\140\u0219\141\u021d\144\u021a\145\u0227\146\u0221" +
    "\147\u0216\153\u0225\154\u0229\155\u021b\157\u0228\162\u0223\163" +
    "\u0226\164\u021c\165\u01d9\001\001\000\040\014\u0200\140\u025d" +
    "\141\u021d\144\u021a\145\u0227\146\u0221\147\u0216\153\u0225\154" +
    "\u0229\155\u021b\157\u0228\162\u0223\163\u0226\164\u021c\165\u01d9" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\014\u0200\137\u0265\140\u0219\141" +
    "\u021d\144\u021a\145\u0227\146\u0221\147\u0216\153\u0225\154\u0229" +
    "\155\u021b\157\u0228\162\u0223\163\u0226\164\u021c\165\u01d9\001" +
    "\001\000\040\014\u0200\140\u025d\141\u021d\144\u021a\145\u0227" +
    "\146\u0221\147\u0216\153\u0225\154\u0229\155\u021b\157\u0228\162" +
    "\u0223\163\u0226\164\u021c\165\u01d9\001\001\000\004\155\u0267" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\014" +
    "\u0200\137\u026a\140\u0219\141\u021d\144\u021a\145\u0227\146\u0221" +
    "\147\u0216\153\u0225\154\u0229\155\u021b\157\u0228\162\u0223\163" +
    "\u0226\164\u021c\165\u01d9\001\001\000\040\014\u0200\140\u025d" +
    "\141\u021d\144\u021a\145\u0227\146\u0221\147\u0216\153\u0225\154" +
    "\u0229\155\u021b\157\u0228\162\u0223\163\u0226\164\u021c\165\u01d9" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\034" +
    "\u01dc\035\116\036\115\162\u01dd\164\u01d6\165\u01d9\167\u026e" +
    "\172\u01d7\001\001\000\002\001\001\000\022\034\u01dc\035" +
    "\116\036\115\162\u01dd\164\u01d6\165\u01d9\167\u0270\172\u01d7" +
    "\001\001\000\002\001\001\000\006\160\u0275\161\u0277\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\161\u027a\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\034\u0238\035\116\036\115\164\u0234\165\u01d9\170" +
    "\u023a\171\u027c\001\001\000\004\013\u0240\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\014" +
    "\u0200\137\u0281\140\u0219\141\u021d\144\u021a\145\u0227\146\u0221" +
    "\147\u0216\153\u0225\154\u0229\155\u021b\157\u0228\162\u0223\163" +
    "\u0226\164\u021c\165\u01d9\001\001\000\040\014\u0200\140\u025d" +
    "\141\u021d\144\u021a\145\u0227\146\u0221\147\u0216\153\u0225\154" +
    "\u0229\155\u021b\157\u0228\162\u0223\163\u0226\164\u021c\165\u01d9" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\034" +
    "\u0238\035\116\036\115\164\u0234\165\u01d9\170\u023a\171\u0285" +
    "\001\001\000\004\013\u0240\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\150\u028a\151\u028c\152\u028b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\152\u028e\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\014\u0200\137\u0290\140\u0219\141\u021d\144\u021a\145" +
    "\u0227\146\u0221\147\u0216\153\u0225\154\u0229\155\u021b\157\u0228" +
    "\162\u0223\163\u0226\164\u021c\165\u01d9\001\001\000\042\014" +
    "\u0200\120\u0291\140\u025d\141\u021d\144\u021a\145\u0227\146\u0221" +
    "\147\u0216\153\u0225\154\u0229\155\u021b\157\u0228\162\u0223\163" +
    "\u0226\164\u021c\165\u01d9\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\014\u0200\137\u0294\140\u0219\141\u021d\144" +
    "\u021a\145\u0227\146\u0221\147\u0216\153\u0225\154\u0229\155\u021b" +
    "\157\u0228\162\u0223\163\u0226\164\u021c\165\u01d9\001\001\000" +
    "\042\014\u0200\120\u0295\140\u025d\141\u021d\144\u021a\145\u0227" +
    "\146\u0221\147\u0216\153\u0225\154\u0229\155\u021b\157\u0228\162" +
    "\u0223\163\u0226\164\u021c\165\u01d9\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SyntaxMlgAnalyzer$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SyntaxMlgAnalyzer$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SyntaxMlgAnalyzer$do_action(act_num, parser, stack, top,this);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    

public boolean SyntaxError;
    public boolean SyntaxRecoverableError;
    public TestManager testManager;
    public TranslateControlerTAC translateControlerTAC;

    public void setTestManager(TestManager testManager) {
        this.testManager = testManager;
    }

public void setTranslateControlerTAC(TranslateControlerTAC translateControlerTAC) {
        this.translateControlerTAC = translateControlerTAC;
    }

     public void syntax_error(Symbol s){
        try {
            String lexema = s.value.toString();
            int fila = s.right;
            int columna = s.left;
            System.out.println("Error Sintactico Recuperado\n");
            System.out.println("\t \tLexema: " + lexema + "\n");
            System.out.println("\t \tFila: " + fila + "\n");
            System.out.println("\t \tColumna: " + columna + "\n");
        } catch (Exception e) {
            System.out.println("error");
            int fila = s.right;
            int columna = s.left;
            System.out.println("\t \tFila: " + fila + "\n");
            System.out.println("\t \tColumna: " + columna + "\n");
        }

    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        try{
            String lexema = s.value.toString();
            int fila = s.right;
            int columna = s.left;
        System.out.println("Error Sintactico Recuperado\n");
        System.out.println("\t \tLexema: "+ lexema+"\n");
        System.out.println("\t \tFila: "+ fila+"\n");
        System.out.println("\t \tColumna: "+ columna+"\n");

        } catch (Exception ex) {
            
         }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SyntaxMlgAnalyzer$actions {




  private final SyntaxMlgAnalyzer parser;

  /** Constructor */
  CUP$SyntaxMlgAnalyzer$actions(SyntaxMlgAnalyzer parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SyntaxMlgAnalyzer$do_action(
    int                        CUP$SyntaxMlgAnalyzer$act_num,
    java_cup.runtime.lr_parser CUP$SyntaxMlgAnalyzer$parser,
    java.util.Stack            CUP$SyntaxMlgAnalyzer$stack,
    int                        CUP$SyntaxMlgAnalyzer$top,SyntaxMlgAnalyzer sma)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SyntaxMlgAnalyzer$result;

      /* select the action based on the action number */
      switch (CUP$SyntaxMlgAnalyzer$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // OpBoolC ::= BoolValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBoolC",119, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // OpBoolC ::= OpBoolC OpLogic BoolValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBoolC",119, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // BoolValueC ::= NumberValue ExBoolJ NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueC",118, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // BoolValueC ::= FALSE 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueC",118, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // BoolValueC ::= TRUE 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueC",118, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // BoolValueC ::= FuntionCall 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueC",118, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // BoolValueC ::= PARENTHESIS_A OpBoolJ PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueC",118, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // BoolValueC ::= NOT BoolValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueC",118, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // ArrayVal ::= ID Dimensions 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ArrayVal",120, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // ValueC ::= ArrayVal 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValueC",117, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // ValueC ::= Getch 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValueC",117, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // ValueC ::= FuntionCall 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValueC",117, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // ValueC ::= NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValueC",117, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // ValueC ::= STRING 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValueC",117, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // ParametersC ::= ValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParametersC",116, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // ParametersC ::= ParametersC COMMA ValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParametersC",116, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // FuntionIDs ::= ID 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FuntionIDs",115, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // FuntionIDs ::= FuntionIDs POINT ID 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FuntionIDs",115, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // FuntionCall ::= FuntionIDs PARENTHESIS_A PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FuntionCall",114, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // FuntionCall ::= FuntionIDs PARENTHESIS_A ParametersC PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FuntionCall",114, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // Input ::= SCAN_F PARENTHESIS_A STRING COMMA AMPERSON ID PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Input",113, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // Getch ::= GETCH PARENTHESIS_A PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Getch",112, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // OutputValueC ::= STRING 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValueC",111, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // OutputValueC ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValueC",111, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // OutputValueC ::= ID 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValueC",111, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // OutputValueC ::= NUMBER 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValueC",111, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // OutputValuesC ::= OutputValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValuesC",110, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // OutputValuesC ::= OutputValuesC COMMA OutputValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputValuesC",110, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // OutputC ::= CLRSCR PARENTHESIS_A PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputC",109, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // OutputC ::= PRINTF PARENTHESIS_A OutputValuesC PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputC",109, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // StepC ::= ID DIVISION EQUAL ValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepC",108, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // StepC ::= ID MULTIPLICATION EQUAL ValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepC",108, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // StepC ::= ID MINUS EQUAL ValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepC",108, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // StepC ::= ID PLUS EQUAL ValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepC",108, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // StepC ::= ID EQUAL ValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepC",108, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // WhileCHeader ::= WHILE PARENTHESIS_A OpBoolC PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("WhileCHeader",107, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // ForCHeader ::= FOR PARENTHESIS_A ID EQUAL ValueC SEMICOLON OpBoolC SEMICOLON StepC PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForCHeader",106, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-9)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // ForCHeader ::= FOR PARENTHESIS_A Type ID EQUAL ValueC SEMICOLON OpBoolC SEMICOLON StepC PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForCHeader",106, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-10)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // CycleC ::= DO LEFT_CB MainCode RIGHT_CB WhileCHeader SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleC",105, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // CycleC ::= WhileCHeader LEFT_CB MainCode RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleC",105, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // CycleC ::= ForCHeader LEFT_CB MainCode RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleC",105, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // CaseC ::= CASE_J COLON MainCode BreakJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseC",104, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // CasesC2 ::= CaseC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesC2",103, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // CasesC2 ::= CasesC2 CaseC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesC2",103, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // CasesC ::= CaseC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesC",102, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // CasesC ::= CasesC2 DEFAULT_J COLON MainCode BreakJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesC",102, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // CasesC ::= CasesC2 CaseC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesC",102, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // SwitchCHeader ::= SWITCH_J PARENTHESIS_A ID PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("SwitchCHeader",101, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // IfCHeader ::= IF PARENTHESIS_A OpBoolC PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IfCHeader",100, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // ConditionC ::= SwitchCHeader LEFT_CB CasesC RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionC",99, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // ConditionC ::= IfCHeader LEFT_CB MainCode RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionC",99, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // AssignmentC ::= ID Dimensions EQUAL ValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentC",98, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // AssignmentC ::= ID EQUAL ValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentC",98, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // AssiC ::= 
            {
              Object RESULT =null;
		System.out.println("ASSI VACIO");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssiC",97, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // AssiC ::= Dimensions EQUAL ArrayValues 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssiC",97, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // AssiC ::= Dimensions 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssiC",97, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // AssiC ::= EQUAL ValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssiC",97, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // IdsC ::= ID AssiC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IdsC",96, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // IdsC ::= ID AssiC COMMA IdsVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IdsC",96, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // DeclarationC ::= Type IdsC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationC",95, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // MainLineCode ::= FuntionCall SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",94, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // MainLineCode ::= Input SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",94, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // MainLineCode ::= Getch SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",94, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // MainLineCode ::= OutputC SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",94, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // MainLineCode ::= CycleC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",94, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // MainLineCode ::= ConditionC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",94, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // MainLineCode ::= AssignmentC SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",94, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // MainLineCode ::= DeclarationC SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainLineCode",94, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // MainCode ::= MainLineCode 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainCode",93, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // MainCode ::= MainCode MainLineCode 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("MainCode",93, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // Main ::= VOID_J MAIN PARENTHESIS_A PARENTHESIS_B LEFT_CB MainCode RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Main",84, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // Include ::= INCLUDE LESS_THAN FuntionIDs GREATER_THAN 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Include",92, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // Include ::= INCLUDE STRING 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Include",92, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // Globals ::= DeclarationC SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Globals",91, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // Globals ::= Globals DeclarationC SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Globals",91, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // Rows ::= LEFT_CB Nums RIGHT_BRACKET 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Rows",90, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // Rows ::= Rows COMMA LEFT_CB Nums RIGHT_BRACKET 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Rows",90, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // Nums ::= NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Nums",89, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // Nums ::= Nums COMMA NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Nums",89, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // ArrayValues ::= LEFT_CB Rows RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ArrayValues",88, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // ArrayValues ::= LEFT_CB Nums RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ArrayValues",88, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // Dimensions ::= LEFT_BRACKET NumberValue RIGHT_BRACKET 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Dimensions",87, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // Dimensions ::= Dimensions LEFT_BRACKET NumberValue RIGHT_BRACKET 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Dimensions",87, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // Constante ::= CONST Type ID Dimensions EQUAL ArrayValues 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Constante",86, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // Constante ::= CONST Type ID EQUAL ValueC 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Constante",86, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // Constantes ::= Constante SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Constantes",85, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // Constantes ::= Constantes Constante SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Constantes",85, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // Library ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Library",83, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // Library ::= Library Include 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Library",83, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // Programa ::= PROGRAM_SEPERATOR Library Constantes Globals Main 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Programa",7, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // PythonCode ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("PythonCode",6, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // Python ::= PYTHON_SEPERATOR PythonCode 
            {
              Object RESULT =null;
		sma.testManager.switchNextTypes();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Python",3, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // OpBoolJ ::= BoolValueJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBoolJ",81, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // OpBoolJ ::= OpBoolJ OpLogic BoolValueJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBoolJ",81, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // BoolValueJ ::= NumberValue ExBoolJ NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueJ",80, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // BoolValueJ ::= FALSE 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueJ",80, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // BoolValueJ ::= TRUE 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueJ",80, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // BoolValueJ ::= PARENTHESIS_A OpBoolJ PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueJ",80, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // BoolValueJ ::= NOT BoolValueJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueJ",80, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // ExBoolJ ::= LESS_THAN_EQUAL 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolJ",79, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // ExBoolJ ::= GREATER_THAN_EQUAL 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolJ",79, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // ExBoolJ ::= LESS_THAN 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolJ",79, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // ExBoolJ ::= GREATER_THAN 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolJ",79, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // ExBoolJ ::= DIFERENT_J 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolJ",79, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // ExBoolJ ::= EQUAL EQUAL 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolJ",79, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // BreakJ ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BreakJ",78, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // BreakJ ::= BREAK SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BreakJ",78, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // CaseJ ::= CASE_J ValuesJ COLON LineCodesJ BreakJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CaseJ",77, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // CasesJ2 ::= CaseJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesJ2",76, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // CasesJ2 ::= CasesJ2 CaseJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesJ2",76, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // CasesJ1 ::= CaseJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesJ1",75, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // CasesJ1 ::= CasesJ2 DEFAULT_J COLON LineCodesJ BreakJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesJ1",75, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // CasesJ1 ::= CasesJ2 CaseJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesJ1",75, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // SwitchJHeader ::= SWITCH_J PARENTHESIS_A ID PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("SwitchJHeader",74, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // ElseJ ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseJ",73, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // ElseJ ::= ELSE IfJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseJ",73, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // ElseJ ::= ELSE LEFT_CB LineCodesJ RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseJ",73, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // IfJHeader ::= IF PARENTHESIS_A OpBoolJ PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IfJHeader",72, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // IfJ ::= IfJHeader LEFT_CB LineCodesJ RIGHT_CB ElseJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IfJ",71, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // ConditionJ ::= SwitchJHeader LEFT_CB CasesJ1 RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionJ",70, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // ConditionJ ::= IfJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionJ",70, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // AssignmentJ ::= ID EQUAL ValueVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentJ",69, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // DeclarationJ ::= Type IdsVb 
            {
              Object RESULT =null;
		
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationJ",68, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // DeclarationJ ::= PUBLIC Type IdsVb 
            {
              Object RESULT =null;
		
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationJ",68, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // StepJ ::= ID DIVISION EQUAL NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepJ",67, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // StepJ ::= ID MULTIPLICATION EQUAL NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepJ",67, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // StepJ ::= ID MINUS EQUAL NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepJ",67, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // StepJ ::= ID PLUS EQUAL NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepJ",67, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // StepJ ::= ID EQUAL NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StepJ",67, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // WhileJHeader ::= WHILE PARENTHESIS_A OpBoolJ PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("WhileJHeader",66, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // ForJHeader ::= FOR PARENTHESIS_A ID EQUAL NumberValue SEMICOLON ID ExBoolJ NumberValue SEMICOLON StepJ PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForJHeader",65, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-11)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // ForJHeader ::= FOR PARENTHESIS_A Type ID EQUAL NumberValue SEMICOLON ID ExBoolJ NumberValue SEMICOLON StepJ PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForJHeader",65, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-12)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // CycleJ ::= DO LEFT_CB LineCodesJ RIGHT_CB WhileJHeader SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleJ",64, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // CycleJ ::= WhileJHeader LEFT_CB LineCodesJ RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleJ",64, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // CycleJ ::= ForJHeader LEFT_CB LineCodesJ RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleJ",64, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // InputJ ::= CHARINPUT PARENTHESIS_A STRING PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InputJ",63, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // InputJ ::= FLOATINPUT PARENTHESIS_A STRING PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InputJ",63, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // InputJ ::= INTINPUT PARENTHESIS_A STRING PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InputJ",63, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // OutputJ ::= SYSTEM_OUT_PRINT PARENTHESIS_A ValuesOutputJ PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputJ",62, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // OutputJ ::= SYSTEM_OUT_PRINTLN PARENTHESIS_A ValuesOutputJ PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputJ",62, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // LineCodeJ ::= error 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",61, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // LineCodeJ ::= ConditionJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",61, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // LineCodeJ ::= AssignmentJ SEMICOLON 
            {
              Object RESULT =null;
		System.out.println("ASIGNACION");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",61, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // LineCodeJ ::= DeclarationJ SEMICOLON 
            {
              Object RESULT =null;
		System.out.println("DECLARACION");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",61, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // LineCodeJ ::= CycleJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",61, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // LineCodeJ ::= InputJ SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",61, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // LineCodeJ ::= OutputJ SEMICOLON 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodeJ",61, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ValJ ::= STRING 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValJ",60, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ValJ ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValJ",60, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ValJ ::= NUMBER 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValJ",60, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ValJ ::= ID 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValJ",60, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ValuesOutputJ ::= ValJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValuesOutputJ",59, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ValuesOutputJ ::= ValuesOutputJ PLUS ValJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValuesOutputJ",59, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // StringValue ::= STRING 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StringValue",58, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // StringValue ::= StringValue PLUS STRING 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("StringValue",58, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ValuesJ ::= NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValuesJ",57, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ValuesJ ::= StringValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValuesJ",57, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // LineCodesJ2 ::= LineCodeJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodesJ2",56, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // LineCodesJ2 ::= LineCodesJ2 LineCodeJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodesJ2",56, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // LineCodesJ ::= LineCodesJ2 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodesJ",55, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // LineCodesJ ::= LineCodesJ2 RETURN_J ValuesJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LineCodesJ",55, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ProcessJHeader ::= PUBLIC VOID_J ID PARENTHESIS_A PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ProcessJHeader",54, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ProcessJHeader ::= PUBLIC VOID_J ID PARENTHESIS_A ParametersJ PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ProcessJHeader",54, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ProcessJ ::= ProcessJHeader LEFT_CB RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ProcessJ",53, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ProcessJ ::= ProcessJHeader LEFT_CB LineCodesJ RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ProcessJ",53, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // FunctionJHeader ::= PUBLIC Type ID PARENTHESIS_A PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionJHeader",52, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // FunctionJHeader ::= PUBLIC Type ID PARENTHESIS_A ParametersJ PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionJHeader",52, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // FunctionJ ::= FunctionJHeader LEFT_CB RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionJ",51, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // FunctionJ ::= FunctionJHeader LEFT_CB LineCodesJ RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionJ",51, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ConditionJHeader ::= PUBLIC ID PARENTHESIS_A ParametersJ PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionJHeader",47, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ConstructorJ ::= ConditionJHeader LEFT_CB LineCodesJ RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConstructorJ",82, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ClassCodeJ ::= ConstructorJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClassCodeJ",50, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ClassCodeJ ::= LineCodeJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClassCodeJ",50, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ClassCodeJ ::= ProcessJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClassCodeJ",50, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ClassCodeJ ::= FunctionJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClassCodeJ",50, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // JavaClassCode ::= ClassCodeJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("JavaClassCode",49, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // JavaClassCode ::= JavaClassCode ClassCodeJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("JavaClassCode",49, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ParametersJ ::= Type ID 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParametersJ",48, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ParametersJ ::= ParametersJ COMMA Type ID 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ParametersJ",48, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ClaseJHeader ::= PUBLIC CLASS_J ID 
            {
              Object RESULT =null;
		sma.testManager.creatFatherAmbit();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClaseJHeader",46, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ClaseJ ::= ClaseJHeader LEFT_CB JavaClassCode RIGHT_CB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ClaseJ",45, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // JavaCode ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("JavaCode",5, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // JavaCode ::= JavaCode ClaseJ 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("JavaCode",5, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Java ::= JAVA_SEPERATOR JavaCode 
            {
              Object RESULT =null;
		sma.testManager.switchNextTypes();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Java",2, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CasesVb ::= CASE_VB ELSE InstructionsFunctionVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesVb",44, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CasesVb ::= CASE_VB ValueVb InstructionsFunctionVb CasesVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CasesVb",44, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SwitchVb ::= SELECT_VB CASE_VB ID CasesVb END_VB SELECT_VB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("SwitchVb",43, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ThenVb ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ThenVb",42, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ThenVb ::= THEN_VB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ThenVb",42, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ElseVb ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseVb",41, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ElseVb ::= ELSE_IF_VB OpBool ThenVb InstructionsFunctionVb ElseVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseVb",41, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ElseVb ::= ELSE InstructionsFunctionVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ElseVb",41, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // IfVb ::= IF OpBool ThenVb InstructionsFunctionVb ElseVb END_VB IF 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IfVb",40, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ConditionVb ::= SwitchVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionVb",39, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ConditionVb ::= IfVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ConditionVb",39, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // AssignmentVb ::= ID EQUAL ValueVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssignmentVb",38, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // AssiVb ::= 
            {
              Object RESULT =null;
		System.out.println("ASSI VACIO");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssiVb",37, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // AssiVb ::= EQUAL ValueVb 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT = val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("AssiVb",37, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // IdsVb ::= ID AssiVb 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.insertPreTuple(id,null,val,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                        if(val!=null){ 
                                                            sma.translateControlerTAC.creatTempIdQuadAssign(val,id);}
                                        sma.translateControlerTAC.nextIdQuad();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IdsVb",36, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // IdsVb ::= IdsVb COMMA ID AssiVb 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		sma.testManager.insertPreTuple(id,null,val,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                        if(val!=null){ 
                                                            sma.translateControlerTAC.creatTempIdQuadAssign(val,id);}
                                                       
                                                        sma.translateControlerTAC.nextIdQuad();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("IdsVb",36, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Type ::= CHAR_TYPE 
            {
              Object RESULT =null;
		RESULT=TypeManager.CHAR_TYPE;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Type ::= FLOAT_TYPE 
            {
              Object RESULT =null;
		RESULT=TypeManager.FLOAT_TYPE;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Type ::= INTEGER_TYPE 
            {
              Object RESULT =null;
		RESULT=TypeManager.INTEGER_TYPE;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DeTypeVb ::= IdsVb AS_VB Type AssiVb 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.testManager.insertPreTuplesToSymbolTable((Integer)type,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeTypeVb",35, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DeTypeVb ::= DeTypeVb COMMA IdsVb AS_VB Type AssiVb 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		sma.testManager.insertPreTuplesToSymbolTable((Integer)type,null,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()),sma.translateControlerTAC);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeTypeVb",35, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DeclarationVb ::= DIM_VB DeTypeVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DeclarationVb",34, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DoWhileVb ::= DO InstructionsFunctionVb LOOP_VB WHILE OpBool 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("DoWhileVb",33, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ExBoolVb ::= LESS_THAN_EQUAL 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb",32, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ExBoolVb ::= GREATER_THAN_EQUAL 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb",32, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ExBoolVb ::= LESS_THAN 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb",32, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ExBoolVb ::= GREATER_THAN 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb",32, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ExBoolVb ::= DIFERENT_VB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb",32, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ExBoolVb ::= EQUAL 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ExBoolVb",32, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OpLogic ::= AND 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpLogic",9, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OpLogic ::= OR 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpLogic",9, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // BoolValueVb ::= NumberValue ExBoolVb Number3 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueVb",31, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // BoolValueVb ::= FALSE 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueVb",31, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // BoolValueVb ::= TRUE 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueVb",31, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // BoolValueVb ::= NOT PARENTHESIS_A OpBool PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueVb",31, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BoolValueVb ::= NOT BoolValueVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("BoolValueVb",31, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OpBool ::= BoolValueVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBool",30, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OpBool ::= OpBool OpLogic BoolValueVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OpBool",30, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // WhileVb ::= WHILE OpBool InstructionsFunctionVb END_VB WHILE 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("WhileVb",29, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Number3 ::= PARENTHESIS_A NumberValue PARENTHESIS_B 
            {
              Object RESULT =null;
		int asstleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int asstright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object asst = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT=asst;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3",28, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Number3 ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type=sma.testManager.getTypeFromST(val,((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                            if(type!=null){
                                Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL,val,null,null);
                                RESULT=new SynthesizedOpAsst(quadruple,type);
                            }else{
                                RESULT=null;
                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3",28, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Number3 ::= CHAR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.CHAR_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL,val,null,null);
		                    RESULT=new SynthesizedOpAsst(quadruple,type);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3",28, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Number3 ::= DECIMAL 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.FLOAT_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL,val,null,null);
		                    RESULT=new SynthesizedOpAsst(quadruple,type);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3",28, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Number3 ::= NUMBER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		 Type type =sma.testManager.getTypeManager().operateTypes(TypeManager.INTEGER_TYPE,null);
                            Quadruple quadruple=sma.translateControlerTAC.creatTempIdQuad(Operation.EQUAL,val,null,null);
		                    RESULT=new SynthesizedOpAsst(quadruple,type);
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number3",28, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Number2 ::= Number3 
            {
              Object RESULT =null;
		int asstleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int asstright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object asst = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=asst;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number2",27, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Number2 ::= Number2 MOD Number3 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.MOD);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number2",27, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Number2 ::= Number2 DIVISION Number3 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.DIVISION);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number2",27, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Number2 ::= Number2 MULTIPLICATION Number3 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.MULTIPLICATION);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Number2",27, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NumberValue ::= Number2 
            {
              Object RESULT =null;
		int asstleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int asstright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object asst = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=asst;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumberValue",26, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NumberValue ::= NumberValue MINUS Number2 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.MINUS);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumberValue",26, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NumberValue ::= NumberValue PLUS Number2 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).right;
		Object num1 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object num2 = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		if(num1!=null &&num2!=null){ 
                                                               SynthesizedOpAsst s1= (SynthesizedOpAsst)num1;
                                                               SynthesizedOpAsst s2= (SynthesizedOpAsst)num2;
                                                                Type type=sma.testManager.operateType(s1.getType().getNumber(),s2.getType().getNumber(),((Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()));
                                                                if(type!=null){
                                                                    Quadruple quadruple=sma.translateControlerTAC.operateIdQuadruple(s1.getQuadruple(),s2.getQuadruple(),Operation.PLUS);
                                                                    RESULT=new SynthesizedOpAsst(quadruple,type);
                                                                }else{
                                                                    RESULT=null;
                                                                }
                                                            }else{
                                                                RESULT=null;
                                                            }
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("NumberValue",26, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Step ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Step",25, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Step ::= STEP_VB PLUS NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Step",25, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Step ::= STEP_VB MINUS NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Step",25, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Step ::= STEP_VB NumberValue 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Step",25, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ForVb ::= FOR ID EQUAL NumberValue TO_VB NumberValue Step InstructionsFunctionVb NEXT_VB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForVb",24, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-8)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ForVb ::= FOR ID AS_VB Type EQUAL NumberValue TO_VB NumberValue Step InstructionsFunctionVb NEXT_VB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ForVb",24, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-10)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CycleVb ::= DoWhileVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleVb",23, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CycleVb ::= WhileVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleVb",23, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CycleVb ::= ForVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("CycleVb",23, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ValueVb ::= NumberValue 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT = val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValueVb",22, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ValueVb ::= STRING 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValueVb",22, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ValuesVb ::= ValueVb 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.peek()).value;
		RESULT=val;
                                if(val!=null){System.out.println(((SynthesizedOpAsst)val).toString());}else{}System.out.println("NULL");
                                
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValuesVb",21, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ValuesVb ::= ValueVb AMPERSON ValuesVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("ValuesVb",21, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OutputVb ::= CONSOLE_VB POINT WRITELN_VB PARENTHESIS_A ValuesVb PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputVb",20, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OutputVb ::= CONSOLE_VB POINT WRITE_VB PARENTHESIS_A ValuesVb PARENTHESIS_B 
            {
              Object RESULT =null;
		System.out.println("OUTPUT LINE");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("OutputVb",20, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-5)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // InputVb ::= CHARINPUT PARENTHESIS_A STRING PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InputVb",19, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // InputVb ::= FLOATINPUT PARENTHESIS_A STRING PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InputVb",19, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // InputVb ::= INTINPUT PARENTHESIS_A STRING PARENTHESIS_B 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InputVb",19, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LnInstructionsVb ::= error 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",17, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LnInstructionsVb ::= ConditionVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",17, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LnInstructionsVb ::= AssignmentVb 
            {
              Object RESULT =null;
		System.out.println("ASIGNACION");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",17, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LnInstructionsVb ::= DeclarationVb 
            {
              Object RESULT =null;
		System.out.println("DECLARACION");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",17, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LnInstructionsVb ::= CycleVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",17, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LnInstructionsVb ::= OutputVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",17, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LnInstructionsVb ::= InputVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("LnInstructionsVb",17, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Lines ::= LnInstructionsVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Lines",18, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Lines ::= Lines LnInstructionsVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Lines",18, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // InstructionsFunctionVb ::= RETURN_VB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb",16, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // InstructionsFunctionVb ::= RETURN_VB ValuesVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb",16, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // InstructionsFunctionVb ::= LnInstructionsVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb",16, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // InstructionsFunctionVb ::= Lines RETURN_VB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb",16, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // InstructionsFunctionVb ::= Lines RETURN_VB ValuesVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb",16, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // InstructionsFunctionVb ::= Lines LnInstructionsVb 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("InstructionsFunctionVb",16, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Parameter ::= ID AS_VB Type 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Parameter",15, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-2)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Parameter ::= Parameter COMMA ID AS_VB Type 
            {
              Object RESULT =null;
		System.out.println("PERAMENTE");
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Parameter",15, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-4)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Parameters ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Parameters",14, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Parameters ::= Parameter 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Parameters",14, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Sub_VB ::= PUBLIC SUB_VB ID PARENTHESIS_A Parameters PARENTHESIS_B InstructionsFunctionVb END_VB SUB_VB 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Sub_VB",13, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-8)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FunctionVbHeader ::= FUNCTION_VB ID PARENTHESIS_A Parameters PARENTHESIS_B AS_VB Type 
            {
              Object RESULT =null;
		sma.testManager.creatFatherAmbit();
                                                                                        sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionVbHeader",12, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-6)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FunctionVbHeader ::= PUBLIC FUNCTION_VB ID PARENTHESIS_A Parameters PARENTHESIS_B AS_VB Type 
            {
              Object RESULT =null;
		sma.testManager.creatFatherAmbit();
                                                                                            sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionVbHeader",12, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-7)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FunctionVB ::= FunctionVbHeader InstructionsFunctionVb END_VB FUNCTION_VB 
            {
              Object RESULT =null;
		sma.testManager.finishAmbit();
                                                                            sma.translateControlerTAC.acceptCurrentBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("FunctionVB",11, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VbCode ::= error VbCode 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("VbCode",4, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VbCode ::= 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("VbCode",4, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VbCode ::= Sub_VB VbCode 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("VbCode",4, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VbCode ::= FunctionVB VbCode 
            {
              Object RESULT =null;

              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("VbCode",4, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VbSeperator ::= VB_SEPERATOR 
            {
              Object RESULT =null;
		sma.translateControlerTAC.createNewQuadrupleBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("VbSeperator",8, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // VB ::= VbSeperator VbCode 
            {
              Object RESULT =null;
		sma.testManager.switchNextTypes();
                                    sma.translateControlerTAC.acceptCurrentBlock();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("VB",1, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicio ::= VB Java Python Programa 
            {
              Object RESULT =null;
		System.out.println("FIN Inicio");
                                        sma.translateControlerTAC.printQuads();
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-3)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          return CUP$SyntaxMlgAnalyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)).value;
		RESULT = start_val;
              CUP$SyntaxMlgAnalyzer$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.elementAt(CUP$SyntaxMlgAnalyzer$top-1)), ((java_cup.runtime.Symbol)CUP$SyntaxMlgAnalyzer$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SyntaxMlgAnalyzer$parser.done_parsing();
          return CUP$SyntaxMlgAnalyzer$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

